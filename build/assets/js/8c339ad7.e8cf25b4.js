"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[69004],{603905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>u});var t=n(667294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function m(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,u=p["".concat(c,".").concat(d)]||p[d]||g[d]||a;return n?t.createElement(u,i(i({ref:r},s),{},{components:n})):t.createElement(u,i({ref:r},s))}));function u(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var m={};for(var c in r)hasOwnProperty.call(r,c)&&(m[c]=r[c]);m.originalType=e,m[p]="string"==typeof e?e:o,i[1]=m;for(var l=2;l<a;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},851962:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>m,toc:()=>l});var t=n(487462),o=(n(667294),n(603905));const a={},i="Basic Gold Mines",m={unversionedId:"algorithms/dynamic-programming/basic-gold-mines",id:"algorithms/dynamic-programming/basic-gold-mines",title:"Basic Gold Mines",description:"Used Dynamic Programming",source:"@site/docs/algorithms/dynamic-programming/basic-gold-mines.md",sourceDirName:"algorithms/dynamic-programming",slug:"/algorithms/dynamic-programming/basic-gold-mines",permalink:"/algorithms/dynamic-programming/basic-gold-mines",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/dynamic-programming/basic-gold-mines.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dynamic Programming",permalink:"/algorithms/dynamic-programming/"},next:{title:"General",permalink:"/algorithms/dynamic-programming/greedy-algorithms"}},c={},l=[],s={toc:l},p="wrapper";function g(e){let{components:r,...n}=e;return(0,o.kt)(p,(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"basic-gold-mines"},"Basic Gold Mines"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/gold-mines-10"},"https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/gold-mines-10")),(0,o.kt)("p",null,"Used Dynamic Programming"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# initialization\nm, n = 2, 2\nmatrix = [[1, 2],[3, 4]]\nmemo = [[0 for x in range(n+1)] for y in range(m+1)]\n\n# creating a bottom up table for memoization\nfor row in range(1, m+1):\n    for col in range(1, n+1):\n        memo[row][col] = memo[row-1][col] + memo[row][col-1] - memo[row-1][col-1] + matrix[row-1][col-1]\n\n# for every query find the solution\nx1, y1, x2, y2 = 1, 2, 2, 2\nprint(memo[x2][y2] - memo[x1-1][y2] - memo[x2][y1-1] + memo[x1-1][y1-1])\n")))}g.isMDXComponent=!0}}]);