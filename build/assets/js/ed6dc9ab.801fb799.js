"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[16997],{603905:(e,n,a)=>{a.d(n,{Zo:()=>_,kt:()=>u});var t=a(667294);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var c=t.createContext({}),d=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},_=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},l="mdxType",E={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,_=i(e,["components","mdxType","originalType","parentName"]),l=d(a),m=s,u=l["".concat(c,".").concat(m)]||l[m]||E[m]||r;return a?t.createElement(u,o(o({ref:n},_),{},{components:a})):t.createElement(u,o({ref:n},_))}));function u(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[l]="string"==typeof e?e:s,o[1]=i;for(var d=2;d<r;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},902394:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>E,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=a(487462),s=(a(667294),a(603905));const r={},o="SQL Examples",i={unversionedId:"languages/sql/sql-examples",id:"languages/sql/sql-examples",title:"SQL Examples",description:"how do I query sql for a latest record date for each user",source:"@site/docs/languages/sql/sql-examples.md",sourceDirName:"languages/sql",slug:"/languages/sql/sql-examples",permalink:"/languages/sql/sql-examples",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/sql/sql-examples.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Commands",permalink:"/languages/sql/sql-commands"},next:{title:"SQL Joins",permalink:"/languages/sql/sql-joins"}},c={},d=[{value:"Question - UserName, NoOfCreated, NoOfEnabledRoles NoOffUpdatedRole",id:"question---username-noofcreated-noofenabledroles-nooffupdatedrole",level:3}],_={toc:d},l="wrapper";function E(e){let{components:n,...a}=e;return(0,s.kt)(l,(0,t.Z)({},_,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sql-examples"},"SQL Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count(*) AS TOTALNUMBEROFTABLES FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'sttash_website_LIVE';\n-- 20 Apr 2021 - 955\n-- 01/06/22 - 926\n-- 20/07/22 - 927\n\n-- Show all unused indexes\n select count(*) from sys.schema_unused_indexes;\n\n-- show all unused tables\n SHOW TABLE STATUS where `Rows` = 0;\n\n SHOW TABLE STATUS where `Rows` = 0;\n -- 37\n SHOW TABLE STATUS where `Rows` < 5;\n -- 101\n\nshow master status; -- check binlog position\n\nSELECT @@TX_ISOLATION;\nSHOW ENGINE INNODB STATUS;\nSELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;\nselect event_name,current_alloc from sys.memory_global_by_current_bytes;\n\nshow variables like '%binlog%';\nshow variables like '%log_bin%';\n\nSELECT ( @@key_buffer_size\n+ @@query_cache_size\n+ @@innodb_buffer_pool_size\n+ @@innodb_log_buffer_size\n+ @@max_connections * (\n    @@read_buffer_size\n    + @@read_rnd_buffer_size\n    + @@sort_buffer_size\n    + @@join_buffer_size\n    + @@binlog_cache_size\n    + @@thread_stack\n    + @@tmp_table_size )\n) / (1024 * 1024 * 1024) AS MAX_MEMORY_GB;\n\nSELECT\n  r.trx_id waiting_trx_id,\n  r.trx_mysql_thread_id waiting_thread,\n  r.trx_query waiting_query,\n  b.trx_id blocking_trx_id,\n  b.trx_mysql_thread_id blocking_thread,\n  b.trx_query blocking_query\nFROM       information_schema.innodb_lock_waits w\nINNER JOIN information_schema.innodb_trx b\n  ON b.trx_id = w.blocking_trx_id\nINNER JOIN information_schema.innodb_trx r\n  ON r.trx_id = w.requesting_trx_id;\n\nDelete performance schema tables\n call sys.ps_truncate_all_tables(true);\n\nTo get all tables with columns columnA or ColumnB in the database YourDatabase:\n SELECT DISTINCT TABLE_NAME\n    FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE COLUMN_NAME IN ('columnA','ColumnB')\n        AND TABLE_SCHEMA='YourDatabase';\n\n-- Sizing\n-- Table combined with index\nSELECT\n  TABLE_NAME AS `Table`,\n  ROUND((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024 / 1024) AS `Size (GB)`\nFROM\n  information_schema.TABLES\nWHERE\n  TABLE_SCHEMA = \"sttash_website_LIVE\"\nORDER BY\n  (DATA_LENGTH + INDEX_LENGTH)\nDESC;\n\nshow indexes from <table_name>;\nSHOW EXTENDED INDEX FROM <table_name>;\n\n-- Different index sizes per table\nSELECT database_name, table_name, index_name,\nROUND(stat_value * @@innodb_page_size / 1024 / 1024 / 1024, 2) size_in_gb\nFROM mysql.innodb_index_stats\nWHERE stat_name = 'size'\nORDER BY size_in_gb DESC;\n\n-- Only index sizes\nselect table_schema as database_name,\n       table_name,\n       round(index_length/1024/1024,2) as index_size\nfrom information_schema.tables\nwhere table_type = 'BASE TABLE'\n      and table_schema not in ('information_schema', 'sys',\n                               'performance_schema', 'mysql')\norder by index_size desc;\n\n-- Get all FullText indexes\nSELECT TABLE_SCHEMA, TABLE_NAME\nFROM information_schema.statistics\nWHERE index_type LIKE 'FULLTEXT%';\n\n-- defragmentation\nselect table_name,\nround(data_length/1024/1024) as data_length_mb,\nround(data_free/1024/1024) as data_free_mb\n from information_schema.tables\n where round(data_free/1024/1024) > 500\n order by data_free_mb;\n\n OPTIMIZE TABLE sttash_website_LIVE.email_instance_moratorium;\n\n-- Others\nSELECT date(create_date), COUNT(*) FROM userDeviceSms WHERE date(create_date) BETWEEN NOW() - INTERVAL 6 HOUR AND NOW()\ngroup by date(create_date)\norder by date(create_date);\n\nSELECT CONCAT(YEAR(create_date), \" \",\n       MONTH(create_date)) as month,\n       count(id)\nFROM st_customer_detail\nGROUP BY YEAR(create_date),\n         MONTH(create_date)\nORDER BY YEAR(create_date) DESC, MONTH(create_date) DESC;\n\nSELECT\n    customer_id, json_extract(template_data,'$.agent'), count(*) as count\nFROM\n    communication_log\nWHERE\n    template_id = 'chat_link'\n    AND create_date BETWEEN NOW() - INTERVAL 6 HOUR AND NOW()\ngroup by customer_id, json_extract(template_data,'$.agent')\nORDER BY count DESC;\n\nSELECT\n c.id,cron_name,template_id_id,body\nFROM\n    crons_cron c\n        JOIN\n    communication_templates t ON c.template_id_id = t.id\nWHERE\n    c.id IN (27,43,205,206,207,210,211,214,236,274,301,302,304,334,339,341,345,349,350,398,399,404,405,406,407,408,423,460,727,728,729,730,732,753);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- Subtract with COUNT(DISTINCT *)\nSELECT (SELECT COUNT(CITY) FROM STATION) - (SELECT COUNT(DISTINCT CITY) FROM STATION);\n\nSelect ROUND(LONG_W,4) from STATION WHERE LAT_N = (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N<137.2345);\n\nSELECT\n    CASE\n        WHEN A + B > C AND A+C>B AND B+C>A THEN\n            CASE\n                WHEN A = B AND B = C THEN 'Equilateral'\n                WHEN A = B OR B = C OR A = C THEN 'Isosceles'\n                WHEN A != B OR B != C OR A != C THEN 'Scalene'\n            END ELSE 'Not A Triangle'\n    END\nFROM TRIANGLES;\n\nSELECT\n    CASE\n        WHEN Occupation = 'Doctor' THEN CONCAT(Name, '(D)')\n        WHEN Occupation = 'Actor' THEN CONCAT(Name, '(A)')\n        WHEN Occupation = 'Professor' THEN CONCAT(Name, '(P)')\n        WHEN Occupation = 'Singer' THEN CONCAT(Name, '(S)')\n    END\nFROM OCCUPATIONS\nORDER BY NAME;\nSELECT Concat('There are a total of ', COUNT(*), ' ', LOWER(Occupation), 's.')\nFROM OCCUPATIONS\nGROUP BY Occupation\nORDER BY COUNT(*);\n\nMySQL\nset @r1=0, @r2=0, @r3=0, @r4=0;\nselect min(Doctor), min(Professor), min(Singer), min(Actor)\nfrom(\n  select case when Occupation='Doctor' then (@r1:=@r1+1)\n            when Occupation='Professor' then (@r2:=@r2+1)\n            when Occupation='Singer' then (@r3:=@r3+1)\n            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,\n    case when Occupation='Doctor' then Name end as Doctor,\n    case when Occupation='Professor' then Name end as Professor,\n    case when Occupation='Singer' then Name end as Singer,\n    case when Occupation='Actor' then Name end as Actor\n  from OCCUPATIONS\n  order by Name\n) Temp\ngroup by RowNumber;\n\nSELECT N,\n IF (P IS NULL, 'Root',\n     IF ((SELECT COUNT(*)\n          FROM BST\n          WHERE P=B.N)>0, 'Inner',\n         'Leaf'))\nFROM BST AS B\nORDER BY N;\n\nSELECT N,\n CASE\n    WHEN P IS NULL THEN 'Root'\n    WHEN N IN (SELECT P FROM BST) then 'Inner'\n    ELSE 'Leaf'\n END\nFROM BST\nORDER BY N;\n\nSELECT c.company_code,\n    c.founder,\n    COUNT(DISTINCT l.lead_manager_code),\n    COUNT(DISTINCT s.senior_manager_code),\n    COUNT(DISTINCT m.manager_code),\n    COUNT(DISTINCT e.employee_code)\nFROM Company c,\n    Lead_Manager l,\n    Senior_Manager s,\n    Manager m,\n    Employee e\nWHERE c.company_code = l.company_code\n    and l.lead_manager_code = s.lead_manager_code\n    and s.senior_manager_code = m.senior_manager_code\n    and m.manager_code = e.manager_code\nGROUP BY c.company_code, c.founder\nORDER BY c.company_code;\n\nSELECT h.hacker_id, h.name, s.submission_id, s.challenge_id, s.score\nFROM Submissions s\nJOIN Hackers h\nON s.hacker_id = h.hacker_id\nWHERE s.score != 0\nGROUP BY h.hacker_id\nORDER BY s.score DESC, h.hacker_id;\n\nSELECT h.hacker_id, h.name, SUM(max_score.score) as total_score\nFROM Hackers h JOIN\n    (SELECT hacker_id, max(score) as score from submissions group by challenge_id, hacker_id) max_score\nON h.hacker_id = max_score.hacker_id\nGROUP BY h.hacker_id, name\nHAVING total_score > 0\nORDER BY total_score DESC, h.hacker_id;\n\nSELECT w.id, wp.age, w.coins_needed, w.power\nFROM Wands AS w\nJOIN Wands_Property AS wp\nON w.code = wp.code\nWHERE wp.is_evil = 0\n    AND w.coins_needed = (\n        SELECT MIN(coins_needed)\n        FROM Wands as w1\n        JOIN Wands_Property as p1\n        ON w1.code = p1.code\n        WHERE w1.power = w.power\n            AND p1.age = wp.age\n    )\nORDER BY w.power DESC, wp.age DESC;\n\nSELECT MAX(max_window.max_salary), COUNT(*)\nFROM Employee, (\n    SELECT MAX(months*salary) AS max_salary\n    FROM Employee\n) max_window\nWHERE months*salary = max_window.max_salary;\n\nSELECT (salary*months) AS earnings, COUNT(*)\nFROM Employee\nGROUP BY earnings\nORDER BY earnings DESC\nLIMIT 1;\n\nSELECT s.hacker_id, h.name\nFROM Submissions as s\nJOIN Challenges as c\nON s.challenge_id = c.challenge_id\nJOIN Difficulty as d\nON c.difficulty_level = d.difficulty_level\nJOIN Hackers as h\nON s.hacker_id = h.hacker_id\nWHERE s.score = d.score\nGROUP BY s.hacker_id, h.name\nHAVING COUNT(s.hacker_id) > 1\nORDER BY COUNT(s.hacker_id) DESC, s.hacker_id;\n\nSELECT c.hacker_id, h.name ,count(c.hacker_id) AS c_count\nFROM Hackers AS h\n    inner join Challenges as c on c.hacker_id = h.hacker_id\nGROUP BY c.hacker_id, h.name\nHAVING\n    c_count =\n        (SELECT MAX(temp1.cnt)\n        from (SELECT COUNT(hacker_id) as cnt\n             from Challenges\n             group by hacker_id\n             order by hacker_id) temp1)\n    OR c_count IN\n        (select t.cnt\n         from (select count(*) as cnt\n               from challenges\n               group by hacker_id) t\n         group by t.cnt\n         having count(t.cnt) = 1)\nORDER BY c_count DESC, c.hacker_id;\n\n-- oracle prime numbers 2&3&5&7... till 1000\nselect listagg (num, '&') within group (order by num) from ( select n1.num num, sum(case when mod(n1.num,n2.num) = 0 then 1 else 0 end) as cnt from (select rownum num from dual connect by level <= 1000) n1, (select rownum num from dual connect by level <= 1000) n2 where n1.num<>1 and n2.num<>1 and n1.num>=n2.num group by n1.num) a where cnt = 1;\n\n-- my sql ** sequence\nSELECT REPEAT('* ', @NUMBER := @NUMBER - 1) FROM information_schema.tables, (SELECT @NUMBER:=21) t LIMIT 20\n\n-- SQL Project Planning\nSET sql_mode = '';\nSELECT Start_Date, End_Date\nFROM\n    (SELECT Start_Date FROM Projects WHERE Start_Date NOT IN (SELECT End_Date FROM Projects)) a,\n    (SELECT End_Date FROM Projects WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)) b\nWHERE Start_Date < End_Date\nGROUP BY Start_Date\nORDER BY DATEDIFF(End_Date, Start_Date), Start_Date\n\nSelect S.Name\nFrom ( Students S join Friends F Using(ID)\n       join Packages P1 on S.ID=P1.ID\n       join Packages P2 on F.Friend_ID=P2.ID)\nWhere P2.Salary > P1.Salary\nOrder By P2.Salary;\n\nSELECT ct.contest_id,\n        ct.hacker_id,\n        ct.name,\n        SUM(total_submissions) AS ts,\n        SUM(total_accepted_submissions) AS tas,\n        SUM(total_views) AS tv,\n        SUM(total_unique_views) AS tuv\nFROM Contests as ct\nJOIN Colleges as cg ON ct.contest_id = cg.contest_id\nJOIN Challenges as ch ON cg.college_id = ch.college_id\nLEFT JOIN (\n    SELECT challenge_id,\n            SUM(total_views) AS total_views,\n            SUM(total_unique_views) AS total_unique_views\n    FROM View_Stats\n    GROUP BY challenge_id\n) vs ON ch.challenge_id = vs.challenge_id\nLEFT JOIN (\n    SELECT challenge_id,\n            SUM(total_submissions) AS total_submissions,\n            SUM(total_accepted_submissions) AS total_accepted_submissions\n    FROM Submission_Stats\n    GROUP BY challenge_id\n) ss ON ch.challenge_id = ss.challenge_id\nGROUP BY ct.contest_id, ct.hacker_id, ct.name\nHAVING ts != 0\n        or tas != 0\n        or tv != 0\n        or tuv != 0\nORDER BY ct.contest_id;\n\nselect submission_date ,\n(SELECT COUNT(distinct hacker_id)\n FROM Submissions s2\n WHERE s2.submission_date = s1.submission_date AND    (SELECT COUNT(distinct s3.submission_date) FROM Submissions s3 WHERE s3.hacker_id = s2.hacker_id AND s3.submission_date < s1.submission_date) = dateDIFF(s1.submission_date , '2016-03-01')) ,\n(select hacker_id  from submissions s2 where s2.submission_date = s1.submission_date\ngroup by hacker_id order by count(submission_id) desc , hacker_id limit 1) as shit,\n(select name from hackers where hacker_id = shit)\nfrom\n(select distinct submission_date from submissions) s1\ngroup by submission_date;\n\n-- MS SQL Server\nselect big_1.submission_date, big_1.hkr_cnt, big_2.hacker_id, h.name\nfrom\n(select submission_date, count(distinct hacker_id) as hkr_cnt\nfrom\n(select s.*, dense_rank() over(order by submission_date) as date_rank,\ndense_rank() over(partition by hacker_id order by submission_date) as hacker_rank\nfrom submissions s ) a\nwhere date_rank = hacker_rank\ngroup by submission_date) big_1\njoin\n(select submission_date,hacker_id,\n rank() over(partition by submission_date order by sub_cnt desc, hacker_id) as max_rank\nfrom (select submission_date, hacker_id, count(*) as sub_cnt\n      from submissions\n      group by submission_date, hacker_id) b ) big_2\non big_1.submission_date = big_2.submission_date and big_2.max_rank = 1\njoin hackers h on h.hacker_id = big_2.hacker_id\norder by 1\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    t.customer_id,\n    t.template_id,\n    t.channel\nFROM\n    communication_log t\n        INNER JOIN\n    (SELECT\n        customer_id, MAX(create_date) AS max_date\n    FROM\n        communication_log\n    WHERE\n        customer_id IN (10551044 , 2261266, 1548951)\n    GROUP BY customer_id) tm ON t.customer_id = tm.customer_id\n        AND t.create_date = tm.max_date;\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/2411559/how-do-i-query-sql-for-a-latest-record-date-for-each-user"},"how do I query sql for a latest record date for each user")),(0,s.kt)("h3",{id:"question---username-noofcreated-noofenabledroles-nooffupdatedrole"},(0,s.kt)("a",{parentName:"h3",href:"https://forums.sqlteam.com/t/to-write-sql-code/19832"},"Question - UserName, NoOfCreated, NoOfEnabledRoles NoOffUpdatedRole")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    UPPER(TRIM(CreatedBy)) AS UserName,\n    COALESCE(COUNT(DISTINCT Name), - 1) AS NoOfCreatedRoles,\n    COALESCE(SUM(CASE\n                WHEN IsEnabled = 1 THEN 1\n                ELSE 0\n            END),\n            - 1) AS NoOfCreatedAndEnabledRoles,\n    COALESCE(COUNT(UPPER(TRIM(UpdatedBy))), - 1) AS NoOfUpdatedRoles\nFROM\n    UserRole\nGROUP BY UPPER(TRIM(CreatedBy))\nORDER BY UPPER(TRIM(CreatedBy)) DESC;\n\n\nSELECT\n    UPPER(TRIM(CreatedBy)) AS UserName,\n    COALESCE(COUNT(DISTINCT Name), - 1) AS NoOfCreatedRoles,\n    COALESCE(SUM(CASE\n                WHEN IsEnabled = 1 THEN 1\n                ELSE 0\n            END),\n            - 1) AS NoOfCreatedAndEnabledRoles,\n    CASE\n        WHEN\n            (SELECT\n                    COUNT(*) AS total\n                FROM\n                    UserRole\n                WHERE\n                    UPPER(TRIM(UpdatedBy)) = UPPER(TRIM(CreatedBy))) > 0\n        THEN\n            (SELECT\n                    COUNT(*) AS total\n                FROM\n                    UserRole\n                WHERE\n                    UPPER(TRIM(UpdatedBy)) = UPPER(TRIM(CreatedBy)))\n        ELSE - 1\n    END AS NoOfUpdatedRoles\nFROM\n    UserRole\nGROUP BY UPPER(TRIM(CreatedBy))\nORDER BY UPPER(TRIM(CreatedBy)) DESC;\n")))}E.isMDXComponent=!0}}]);