"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[36464],{603905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var i=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),f=r,d=c["".concat(s,".").concat(f)]||c[f]||u[f]||o;return n?i.createElement(d,a(a({ref:t},m),{},{components:n})):i.createElement(d,a({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},300191:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(487462),r=(n(667294),n(603905));const o={},a="Prime Factorization",l={unversionedId:"algorithms/general/prime-factorization",id:"algorithms/general/prime-factorization",title:"Prime Factorization",description:"Prime factorization or integer factorization of a number is breaking a number down into the set of prime numbers which multiply together to result in the original number. This is also known as prime decomposition.",source:"@site/docs/algorithms/general/prime-factorization.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/prime-factorization",permalink:"/algorithms/general/prime-factorization",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/prime-factorization.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Orthogonal rectangle intersection search",permalink:"/algorithms/general/orthogonal-rectangle-intersection-search"},next:{title:"Quick Select",permalink:"/algorithms/general/quick-select"}},s={},p=[{value:"Prime Factorization using Trial Division",id:"prime-factorization-using-trial-division",level:2},{value:"Prime Factors Tree",id:"prime-factors-tree",level:2},{value:"Optimization 1: running the loop till <code>sqrt(n)</code>",id:"optimization-1-running-the-loop-till-sqrtn",level:2},{value:"Code",id:"code",level:2},{value:"Sieve of Eratosthenes, (for primality test)",id:"sieve-of-eratosthenes-for-primality-test",level:2},{value:"Sieve of Atkin",id:"sieve-of-atkin",level:2},{value:"Others",id:"others",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,i.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"prime-factorization"},"Prime Factorization"),(0,r.kt)("p",null,"Prime factorization or integer factorization of a number is breaking a number down into the set of prime numbers which multiply together to result in the original number. This is also known as prime decomposition."),(0,r.kt)("h2",{id:"prime-factorization-using-trial-division"},"Prime Factorization using Trial Division"),(0,r.kt)("p",null,"Following are the steps to find all prime factors."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"While n is divisible by 2, print 2 and divide n by 2")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After step 1, n must be odd. Now start a loop from i = 3 to square root of n. While i divides n, print i and divide n by i, increment i by 2 and continue")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If n is a prime number and is greater than 2, then n will not become 1 by above two steps. So print n if it is greater than 2"))),(0,r.kt)("h2",{id:"prime-factors-tree"},"Prime Factors Tree"),(0,r.kt)("p",null,"Using a prime factorization tree to see the work, prime decomposition of ",(0,r.kt)("inlineCode",{parentName:"p"},"100 = 2 x 2 x 5 x 5")," looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(782995).Z,width:"270",height:"386"})),(0,r.kt)("h2",{id:"optimization-1-running-the-loop-till-sqrtn"},"Optimization 1: running the loop till ",(0,r.kt)("inlineCode",{parentName:"h2"},"sqrt(n)")),(0,r.kt)("p",null,"Now the main part is, the loop runs till square root of n not till. To prove that this optimization works, let us consider the following property of composite numbers."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Every composite number has at least one prime factor less than or equal to square root of itself.")),(0,r.kt)("p",null,"This property can be proved using counter statement. Let a and b be two factors of n such that ",(0,r.kt)("inlineCode",{parentName:"p"},"a*b = n"),". If both are greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"\u221an"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"a.b > \u221an,* \u221an"),", which contradicts the expression ",(0,r.kt)("inlineCode",{parentName:"p"},"a * b = n"),"."),(0,r.kt)("p",null,"Running Time : sqrt(n)"),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def primeFactors(n):\n\n    # Print the number of two's that divide n\n    while n % 2 == 0:\n        print 2,\n        n = n / 2\n\n    # n must be odd at this point\n    # so a skip of 2 ( i = i + 2) can be used\n    for i in range(3,int(math.sqrt(n))+1,2):\n\n        # while i divides n , print i ad divide n\n        while n % i== 0:\n            print i,\n            n = n / i\n\n    # Condition if n is a prime\n    # number greater than 2\n    if n > 2:\n    print n\n")),(0,r.kt)("p",null,"For multiple queries we can use Sieve of Eratosthenes for giving result in O(log n)"),(0,r.kt)("h2",{id:"sieve-of-eratosthenes-for-primality-test"},"Sieve of Eratosthenes, (for primality test)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n\n            # Update all multiples of p\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n\n    lst = []\n    for p in range(n + 1):\n        if prime[p]:\n            lst.append(p)\n\nreturn lst\n")),(0,r.kt)("h2",{id:"sieve-of-atkin"},"Sieve of Atkin"),(0,r.kt)("p",null,"Factors of a number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# find all factors of a given number\nimport math\n\ndef printDivisors(n):\n\n    # Note that this loop runs till square root\n    i = 1\n    fac = []\n    while i <= math.sqrt(n):\n\n        if n % i == 0:\n\n            # If divisors are equal, print only one\n            if (n // i == i):\n                fac.append(i)\n            else:\n                # Otherwise print both\n                fac.append([i, n//i])\n\n        i = i + 1\n\n    return fac\n\nassert printDivisors(100) == [[1, 100], [2, 50], [4, 25], [5, 20], 10]\n")),(0,r.kt)("p",null,"Time Complexity : O(sqrt(n))"),(0,r.kt)("p",null,"Auxiliary Space : O(1)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/find-divisors-natural-number-set-1"},"https://www.geeksforgeeks.org/find-divisors-natural-number-set-1")),(0,r.kt)("h2",{id:"others"},"Others"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Shor%27s_algorithm"},"https://en.wikipedia.org/wiki/Shor%27s_algorithm")))}u.isMDXComponent=!0},782995:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/Prime-Factorization-image1-64d56638ec9ee29beae122fbedd41f12.jpg"}}]);