"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[73350],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(a),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return a?n.createElement(k,l(l({ref:t},p),{},{components:a})):n.createElement(k,l({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},153536:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(487462),r=(a(667294),a(603905));const i={},l="Commands",o={unversionedId:"databases/nosql-databases/druid/commands",id:"databases/nosql-databases/druid/commands",title:"Commands",description:"| Service             | Port |",source:"@site/docs/databases/nosql-databases/druid/commands.md",sourceDirName:"databases/nosql-databases/druid",slug:"/databases/nosql-databases/druid/commands",permalink:"/databases/nosql-databases/druid/commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/nosql-databases/druid/commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cheatsheet",permalink:"/databases/nosql-databases/druid/cheatsheet"},next:{title:"Documentation",permalink:"/databases/nosql-databases/druid/documentation"}},s={},d=[{value:"Hack",id:"hack",level:2},{value:"APIs",id:"apis",level:2},{value:"Druid segment cleanup",id:"druid-segment-cleanup",level:2},{value:"Druid Commands",id:"druid-commands",level:2},{value:"Dashboards",id:"dashboards",level:3},{value:"Debugging",id:"debugging",level:3},{value:"SQL Commands",id:"sql-commands",level:2},{value:"Dashboard",id:"dashboard",level:2},{value:"Ingestion Spec",id:"ingestion-spec",level:2},{value:"Important Points",id:"important-points",level:2}],p={toc:d},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commands"},"Commands"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Service")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Port")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-zookeeper")),(0,r.kt)("td",{parentName:"tr",align:null},"2181")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-coordinator")),(0,r.kt)("td",{parentName:"tr",align:null},"8081")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-overlord")),(0,r.kt)("td",{parentName:"tr",align:null},"8090")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-middlemanager")),(0,r.kt)("td",{parentName:"tr",align:null},"8091")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-historical")),(0,r.kt)("td",{parentName:"tr",align:null},"8083")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-broker")),(0,r.kt)("td",{parentName:"tr",align:null},"8082")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-router")),(0,r.kt)("td",{parentName:"tr",align:null},"8888")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"druid-postgresql")),(0,r.kt)("td",{parentName:"tr",align:null},"5432")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"DRUID_ZOOKEEPER_IP=172.18.3.2\nDRUID_POSTGRESQL_IP=172.18.3.3\nDRUID_COORDINATOR_IP=172.18.3.4\nDRUID_HISTORICAL_IP=172.18.3.5\nDRUID_BROKER_IP=172.18.3.6\nDRUID_INIT_IP=172.18.3.6\nDRUID_OVERLORD_IP=172.18.3.7\nDRUID_MIDDLEMANAGER_IP=172.18.3.8\nDRUID_ROUTER_IP=172.18.3.15\n")),(0,r.kt)("h2",{id:"hack"},"Hack"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"docker exec -it druid-historical bash\nmkdir /var/druid/tmp\n")),(0,r.kt)("h2",{id:"apis"},"APIs"),(0,r.kt)("p",null,"Historical"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://localhost:8083/druid/historical/v1/readiness"},"http://localhost:8083/druid/historical/v1/readiness")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://localhost:8083/druid/historical/v1/loadstatus"},"http://localhost:8083/druid/historical/v1/loadstatus")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://localhost:8083/status"},"http://localhost:8083/status")),(0,r.kt)("h2",{id:"druid-segment-cleanup"},"Druid segment cleanup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"docker exec -it druid-historical bash\n\n## # first remove segment-cache and then segments\n\ncd /var/druid/segment-cache and cd /var/druid/segments\nremove last 20 days of segments\n")),(0,r.kt)("h2",{id:"druid-commands"},"Druid Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#query top pages from wikipedia dataset\ncurl -X 'POST' -H 'Content-Type:application/json' -d @wikipedia-top-pages.json [http://localhost:8082/druid/v2?pretty](http://localhost:8082/druid/v2/?pretty)\n\n#submit supervisor spec to kafka-indexing-service\ncurl -XPOST -H'Content-Type: application/json' -d @wikipedia-kafka-supervisor.json <http://localhost:8090/druid/indexer/v1/supervisor>\n\ncurl -XPOST -H'Content-Type: application/json' -d @smap-kafka-supervisor-spec.json <http://localhost:8090/druid/indexer/v1/supervisor>\n")),(0,r.kt)("h3",{id:"dashboards"},"Dashboards"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"8081: coordinator (for seeing clusters and datasources"),(0,r.kt)("li",{parentName:"ul"},"8090: overlord (for managing supervisor spec and tasks)"),(0,r.kt)("li",{parentName:"ul"},"Others",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"8082: broker"),(0,r.kt)("li",{parentName:"ul"},"8083: historical"),(0,r.kt)("li",{parentName:"ul"},"8091: middlemanager"),(0,r.kt)("li",{parentName:"ul"},"2181: zookeeper")))),(0,r.kt)("h3",{id:"debugging"},"Debugging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"stop druid-historical\ncd /var/lib/docker/volumes/druid-volume/_data/segment-cache\nremove docker segment-cache\nrm -rf *\nstart druid-historical\n")),(0,r.kt)("h2",{id:"sql-commands"},"SQL Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"# find duplicate count\nSELECT controller_name, site_name, count(reading) as DuplicateCount FROM (SELECT controller_name, stream_path, site_name, reading, __time, count(reading) as readingCount FROM \"live-Samhi\"\n  WHERE __time BETWEEN TIMESTAMP '2019-11-18 08:00:00' AND TIMESTAMP '2019-11-19 08:00:00'\n  AND stream_path LIKE '/Samhi-41%'\n  GROUP BY __time, stream_path, reading, site_name, controller_name\n  HAVING readingCount > 1\n  ORDER BY __time DESC)\n  GROUP BY site_name, controller_name\n\n# find duplicate values\nSELECT controller_name, stream_path, site_name, reading, __time, count(reading) as readingCount FROM \"live-Samhi\"\n  WHERE __time BETWEEN TIMESTAMP '2019-11-18 08:00:00' AND TIMESTAMP '2019-11-19 09:00:00'\n  AND stream_path LIKE '/Samhi-41%'\n  GROUP BY __time, stream_path, reading, site_name, controller_name\n  HAVING readingCount > 1\nORDER BY __time DESC\n")),(0,r.kt)("h2",{id:"dashboard"},"Dashboard"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://10.9.1.21:8888/unified-console.html"},"http://10.9.1.21:8888/unified-console.html")),(0,r.kt)("h2",{id:"ingestion-spec"},"Ingestion Spec"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "kafka",\n  "dataSchema": {\n    "dataSource": "live-Samhi",\n    "parser": {\n      "type": "string",\n      "parseSpec": {\n        "format": "json",\n        "timestampSpec": {\n          "column": "time",\n          "format": "auto"\n        },\n        "dimensionsSpec": {\n          "spatialDimensions": [\n            {\n              "dimName": "coordinates",\n              "dims": [\n                "site_latitude",\n                "site_longitude"\n              ]\n            }\n          ],\n          "dimensions": [\n            "uuid",\n            "path",\n            {\n              "name": "reading",\n              "type": "float"\n            },\n            "stream_path",\n            "stream_uuid",\n            "device_tags",\n            "device_is_virtual",\n            "device_id",\n            "device_display_name",\n            "device_path",\n            "device_type",\n            "device_category",\n            "physical_parameter_display",\n            "physical_parameter_unit",\n            "physical_parameter_type",\n            "physical_parameter_name",\n            "site_longitude",\n            "site_latitude",\n            "site_name",\n            "customer_name",\n            "client_name",\n            "controller_name",\n            "site_Size",\n            "site_Floors",\n            "site_site_code",\n            "site_Hotel_Type",\n            "site_Display_Name",\n            "metric_tod_metadata",\n            "metric_operational_metadata",\n            "live_parent",\n            "live_region",\n            "live_purpose",\n            "live_pie_breakup",\n            "live_room_number",\n            "live_room_direction"\n          ]\n        }\n      }\n    },\n    "metricsSpec": [\n      {\n        "type": "count",\n        "name": "count"\n      }\n    ],\n    "granularitySpec": {\n      "type": "uniform",\n      "segmentGranularity": "HOUR",\n      "rollup": false\n    }\n  },\n  "tuningConfig": {\n    "type": "kafka",\n    "maxSavedParseExceptions": 1000,\n    "forceExtendableShardSpecs": true\n  },\n  "ioConfig": {\n    "topic": "druid_telemetry_data_Samhi",\n    "taskCount": 1,\n    "replicas": 1,\n    "taskDuration": "PT120S",\n    "completionTimeout": "PT5M",\n    "useEarliestOffset": true,\n    "consumerProperties": {\n      "bootstrap.servers": "kafka0.zenatix.com:31090,kafka1.zenatix.com:31091,kafka2.zenatix.com:31092"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"important-points"},"Important Points"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Compression - 1:10"),(0,r.kt)("li",{parentName:"ul"},"Number of hyper threads"),(0,r.kt)("li",{parentName:"ul"},"Concurrency of queries",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"4 gb/s per hyperthread - how much data you are consuming"))),(0,r.kt)("li",{parentName:"ul"},"Servers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"I3.extra large - 3 data server"),(0,r.kt)("li",{parentName:"ul"},"1 middlemaanger"),(0,r.kt)("li",{parentName:"ul"},"2 query server - m5 large"),(0,r.kt)("li",{parentName:"ul"},"Master - m5 large"),(0,r.kt)("li",{parentName:"ul"},"m4.xlarge")))))}u.isMDXComponent=!0}}]);