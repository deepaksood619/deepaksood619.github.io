"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[58240],{603905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),m=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(r),d=n,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return r?a.createElement(g,o(o({ref:t},p),{},{components:r})):a.createElement(g,o({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var m=2;m<i;m++)o[m]=r[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},470006:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=r(487462),n=(r(667294),r(603905));const i={},o="Competitive Programming Questions",l={unversionedId:"algorithms/general/competitive-programming",id:"algorithms/general/competitive-programming",title:"Competitive Programming Questions",description:"Two Pointers",source:"@site/docs/algorithms/general/competitive-programming.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/competitive-programming",permalink:"/algorithms/general/competitive-programming",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/competitive-programming.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Appel's Algorithm",permalink:"/algorithms/general/appel-algorithm"},next:{title:"Euclidean Algorithm - Gcd",permalink:"/algorithms/general/euclidean-algorithm-gcd"}},s={},m=[{value:"Two Pointers",id:"two-pointers",level:3},{value:"Binary Search",id:"binary-search",level:3},{value:"Hashmap",id:"hashmap",level:3},{value:"Stack",id:"stack",level:3},{value:"String",id:"string",level:3},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Tree",id:"tree",level:3},{value:"Competitive programming coding patterns",id:"competitive-programming-coding-patterns",level:2},{value:"10 golden rules for solving a coding question in an interview",id:"10-golden-rules-for-solving-a-coding-question-in-an-interview",level:2}],p={toc:m},c="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"competitive-programming-questions"},"Competitive Programming Questions"),(0,n.kt)("h3",{id:"two-pointers"},"Two Pointers"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#75 Sort Colors"),(0,n.kt)("li",{parentName:"ol"},"#80 Remove Duplicates from Sorted Array II"),(0,n.kt)("li",{parentName:"ol"},"#88 Merge Sorted Array"),(0,n.kt)("li",{parentName:"ol"},"#457 Circular Array Loop"),(0,n.kt)("li",{parentName:"ol"},"#713 Subarray Product Less Than K"),(0,n.kt)("li",{parentName:"ol"},"#845 Longest Mountain in Array"),(0,n.kt)("li",{parentName:"ol"},"#904 Fruit into baskets"),(0,n.kt)("li",{parentName:"ol"},"#925 Long Pressed name"),(0,n.kt)("li",{parentName:"ol"},"#986 Interval list intersections")),(0,n.kt)("h3",{id:"binary-search"},"Binary Search"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#33 Search in rotated sorted array"),(0,n.kt)("li",{parentName:"ol"},"#69 Sqrt(x)"),(0,n.kt)("li",{parentName:"ol"},"#153 Find min in rotated sorted array"),(0,n.kt)("li",{parentName:"ol"},"#349 Intersection of two arrays"),(0,n.kt)("li",{parentName:"ol"},"#441 Arranging coins"),(0,n.kt)("li",{parentName:"ol"},"#475 Heaters"),(0,n.kt)("li",{parentName:"ol"},"#658 Find K closest elements"),(0,n.kt)("li",{parentName:"ol"},"#911 Online Election")),(0,n.kt)("h3",{id:"hashmap"},"Hashmap"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#463 Island Perimeter"),(0,n.kt)("li",{parentName:"ol"},"#535 Encode and decode TinyURL"),(0,n.kt)("li",{parentName:"ol"},"#575 Distribute Candies"),(0,n.kt)("li",{parentName:"ol"},"#739 Daily Temperatures"),(0,n.kt)("li",{parentName:"ol"},"#748 Shortest Completing Word"),(0,n.kt)("li",{parentName:"ol"},"#811 Subdomain visit count"),(0,n.kt)("li",{parentName:"ol"},"#884 Uncommon words from Twos sentences"),(0,n.kt)("li",{parentName:"ol"},"#953 Verifying an Alien Dictionary"),(0,n.kt)("li",{parentName:"ol"},"#961 N-Repeated Element in Size 2N Array"),(0,n.kt)("li",{parentName:"ol"},"#1160 Find words that can be formed by characters"),(0,n.kt)("li",{parentName:"ol"},"#1078 Occurences after bigram")),(0,n.kt)("h3",{id:"stack"},"Stack"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#496 Next Greater Element I"),(0,n.kt)("li",{parentName:"ol"},"#682 Baseball Game"),(0,n.kt)("li",{parentName:"ol"},"#856 Score of Parentheses"),(0,n.kt)("li",{parentName:"ol"},"#946 Validate Stack Sequences"),(0,n.kt)("li",{parentName:"ol"},"#1190 Reverse Substrings Between Each Pair of Parentheses"),(0,n.kt)("li",{parentName:"ol"},"#1209 Remove All Adjacent Duplicates in String II")),(0,n.kt)("h3",{id:"string"},"String"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#468 Validate IP Address"),(0,n.kt)("li",{parentName:"ol"},"#522 Longest Uncommon Subsequence II"),(0,n.kt)("li",{parentName:"ol"},"#539 Minimum Time Difference"),(0,n.kt)("li",{parentName:"ol"},"#553 Optimal Division"),(0,n.kt)("li",{parentName:"ol"},"#791 Custom Sort String"),(0,n.kt)("li",{parentName:"ol"},"#833 Find and replace in String"),(0,n.kt)("li",{parentName:"ol"},"#835 Image Overlap"),(0,n.kt)("li",{parentName:"ol"},"#893 Groups of Special-Equivalent Strings"),(0,n.kt)("li",{parentName:"ol"},"#1156 Swap For Longest Repeated Character Substring")),(0,n.kt)("h3",{id:"sliding-window"},"Sliding Window"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#424 Longest Repeating Character Replacement"),(0,n.kt)("li",{parentName:"ol"},"#1040 Moving Stones Until Consecutive II")),(0,n.kt)("h3",{id:"tree"},"Tree"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"#101 Symmetric Tree"),(0,n.kt)("li",{parentName:"ol"},"#108 Convert Sorted Array to Binary Search Tree"),(0,n.kt)("li",{parentName:"ol"},"#226 Invert Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#538 Convert BST to Greater Tree"),(0,n.kt)("li",{parentName:"ol"},"#543 Diameter of a Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#637 Average of Levels in Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#654 Maximum Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#669 Trim a Binary Search Tree"),(0,n.kt)("li",{parentName:"ol"},"#589 N-ary Tree Preorder Traversal"),(0,n.kt)("li",{parentName:"ol"},"#894 All Possible Full Binary Trees"),(0,n.kt)("li",{parentName:"ol"},"#979 Distribute Coins in Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#993 Cousins in a Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#1022 Sum of Root To Leaf Binary Numbers"),(0,n.kt)("li",{parentName:"ol"},"#1104 Path In Zigzag Labelled Binary Tree"),(0,n.kt)("li",{parentName:"ol"},"#1110 Delete Nodes And Return Forest")),(0,n.kt)("h2",{id:"competitive-programming-coding-patterns"},"Competitive programming coding patterns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://levelup.gitconnected.com/dont-just-leetcode-follow-the-coding-patterns-instead-4beb6a197fdb"},"https://levelup.gitconnected.com/dont-just-leetcode-follow-the-coding-patterns-instead-4beb6a197fdb")),(0,n.kt)("h2",{id:"10-golden-rules-for-solving-a-coding-question-in-an-interview"},"10 golden rules for solving a coding question in an interview"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"if we are dealing with top/maximum/minimum/closest k' elements among 'n' elements, we will be using a heap."),(0,n.kt)("li",{parentName:"ul"},"If the given input is a sorted array or a list, we will either be using binray search or the two pointers."),(0,n.kt)("li",{parentName:"ul"},"If we need to try all combinations (or permutations) of the input, we can either use backtracking or breadth first search."),(0,n.kt)("li",{parentName:"ul"},"Most of the questions related to trees or graphs can be solved either through breadth first search or depth first search."),(0,n.kt)("li",{parentName:"ul"},"Every recursive solution can be converted to an iterative solution using a stack."),(0,n.kt)("li",{parentName:"ul"},"For a problem involving arrays, if there exists a solution in o(n^2)time and o(1) space, there must exist two other solutions:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"using a hashmap or a set for o(n) time and o(n) space"),(0,n.kt)("li",{parentName:"ul"},"using sorting for o(n log n) time and o(1) space."))),(0,n.kt)("li",{parentName:"ul"},"If a problem is asking for optimization (e. G. , maximization or minimization), we will be using dynamic programming."),(0,n.kt)("li",{parentName:"ul"},"If we need to find some common substring among a set of strings, we will be using a hashmap or a trie."),(0,n.kt)("li",{parentName:"ul"},"If we need to search/manipulate a bunch of strings, trie will be the best data structure."),(0,n.kt)("li",{parentName:"ul"},"If the problem is related to a linkedlist and we can't use extra space, then use the fast & slow pointer approach.")))}u.isMDXComponent=!0}}]);