"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[17326],{603905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,h=u["".concat(l,".").concat(c)]||u[c]||m[c]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},654138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(487462),r=(n(667294),n(603905));const s={},o="Admin site",i={unversionedId:"python/django/admin-site",id:"python/django/admin-site",title:"Admin site",description:"Overview",source:"@site/docs/python/django/admin-site.md",sourceDirName:"python/django",slug:"/python/django/admin-site",permalink:"/python/django/admin-site",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/django/admin-site.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Django",permalink:"/python/django/"},next:{title:"Advanced",permalink:"/python/django/advanced"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"ModelAdmin objects",id:"modeladmin-objects",level:2},{value:"Overriding the fieldsets that are shown in django admin panel",id:"overriding-the-fieldsets-that-are-shown-in-django-admin-panel",level:2},{value:"ModelAdmin.get_queryset(request)",id:"modeladminget_querysetrequest",level:2},{value:"Admin Actions",id:"admin-actions",level:2},{value:"Admin alternatives",id:"admin-alternatives",level:2},{value:"Django Open Source projects",id:"django-open-source-projects",level:2},{value:"Others",id:"others",level:2},{value:"Others",id:"others-1",level:2}],p={toc:d},u="wrapper";function m(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"admin-site"},"Admin site"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Enabled by default"),(0,r.kt)("li",{parentName:"ul"},"Requirements",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"django.contrib.auth"),(0,r.kt)("li",{parentName:"ul"},"django.contrib.contenttypes"),(0,r.kt)("li",{parentName:"ul"},"django.contrib.messages"),(0,r.kt)("li",{parentName:"ul"},"django.contrib.sessions")))),(0,r.kt)("h2",{id:"modeladmin-objects"},"ModelAdmin objects"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"ModelAdmin")," class is the representation of a model in the admin interface. Usually, these are stored in a file named ",(0,r.kt)("strong",{parentName:"p"},"admin.py")," in your application."),(0,r.kt)("p",null,"Register decorator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@admin.register(Author)\n")),(0,r.kt)("p",null,"list_display is used to show columns of data in list page"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_display = {'Issue', 'Date', 'clean'}\n")),(0,r.kt)("p",null,"fieldsets is used to show the fields that must be shown in detail page"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"fieldsets = {}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"classTicketAdmin(admin.ModelAdmin):\n list_display=('ticket_number','issue','device','status')\n list_editable = ('is_finished',)\n list_filter=('status',)\n\n readonly_fields=('ticket_number','ticket_id','issue','device','status')\n\n def has_add_permission(self, request):\n  return False\n\n def has_delete_permission(self, request, obj=None):\n    return False\n")),(0,r.kt)("h2",{id:"overriding-the-fieldsets-that-are-shown-in-django-admin-panel"},"Overriding the fieldsets that are shown in django admin panel"),(0,r.kt)("p",null,"We can override the fields that are shown when a user opens the django admin panel model."),(0,r.kt)("p",null,"Ex -"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," fieldsets=(\n  (None,{'fields':(\n  'client_name','display_name','unique_id','customer','campus_name','source_name','metadata',\n  'is_public',\n  'subscription_key','archiver_address','archiver_port','database_address','database_port',\n  'url_conf','mail_signature','latitude','longitude','order','excluded_issues',\n  'site_disabled','working_days','street_address','city','state','country','zipcode')},),\n  ('OtherDetails',\n  {'fields':(('office_start_time','office_end_time','number_of_workstations','type_of_workstation'),\n  ('billing_type','billing_cycle','sanctioned_load','dg_test_frequency'),\n  ('total_floors','total_carpet_area','occupancy','total_ahu'))}),\n)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(552920).Z,width:"1216",height:"2614"})),(0,r.kt)("p",null,'Here notice the different sections and also the sub-sections in the "Other Details" section.'),(0,r.kt)("p",null,"Now we can also override the admin fields to show according to the user who is logged in, by overriding ",(0,r.kt)("inlineCode",{parentName:"p"},"function get_fieldsets(self, request, obj=None)")," and returning the fieldsets accordingly."),(0,r.kt)("p",null,"Ex -"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_fieldsets(self, request, obj=None):\n  client_id=request.session.get('client_id', None)\n\n  #if request is from frontend, dont show some of the fields\n  if client_id is not None:\n    return self.fieldsets\n  else:\n    if request.user.is_superuser:\n      return self.fieldsets\n    else:\n      return self.tester_fieldsets\nand,\ntester_fieldsets=(\n  (None,{'fields':('campus_name','display_name','customer')},),\n)\n")),(0,r.kt)("h2",{id:"modeladminget_querysetrequest"},"ModelAdmin.get_queryset(request)"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"get_queryset")," method on a ",(0,r.kt)("strong",{parentName:"p"},"ModelAdmin")," returns a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/2.1/ref/models/querysets/#django.db.models.query.QuerySet"},(0,r.kt)("strong",{parentName:"a"},"QuerySet"))," of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," class MyModelAdmin(admin.ModelAdmin):\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if request.user.is_superuser:\n            return qs\n        return qs.filter(author=request.user)\n\n")),(0,r.kt)("h2",{id:"admin-actions"},"Admin Actions"),(0,r.kt)("p",null,"Custom admin actions can be created for bulk operations in change list page"),(0,r.kt)("h2",{id:"admin-alternatives"},"Admin alternatives"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://djangopackages.org/grids/g/admin-interface/"},(0,r.kt)("strong",{parentName:"a"},"https://djangopackages.org/grids/g/admin-interface/"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mirumee/saleor"},"https://github.com/mirumee/saleor")," (14.1k stars)"),(0,r.kt)("p",null,"Customer-centric e-commerce on a modern stack"),(0,r.kt)("p",null,"A headless, GraphQL commerce platform delivering ultra-fast, dynamic, personalized shopping experiences. Beautiful online stores, anywhere, on any device."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sehmaschine/django-grappelli"},"https://github.com/sehmaschine/django-grappelli")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/darklow/django-suit"},"https://github.com/darklow/django-suit")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/geex-arts/django-jet"},"https://github.com/geex-arts/django-jet")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/jet-admin/jet-bridge"},"https://github.com/jet-admin/jet-bridge")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/jet-admin/jet-bridge"},"https://github.com/jet-admin/jet-bridge")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sshwsfc/xadmin"},"https://github.com/sshwsfc/xadmin")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://dev.to/sm0ke/django-boilerplate-code-open-source-and-free-2aa5"},"https://dev.to/sm0ke/django-boilerplate-code-open-source-and-free-2aa5")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://appseed.us/admin-dashboards/django-datta-able"},"https://appseed.us/admin-dashboards/django-datta-able")),(0,r.kt)("p",null,"React admin - ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/marmelab/react-admin"},"https://github.com/marmelab/react-admin")),(0,r.kt)("h2",{id:"django-open-source-projects"},"Django Open Source projects"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.upgrad.com/blog/django-open-source-projects"},"https://www.upgrad.com/blog/django-open-source-projects")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Wagtail (Open Source CMS)"),(0,r.kt)("li",{parentName:"ul"},"Ownphotos (Open Source Google Photos)"),(0,r.kt)("li",{parentName:"ul"},"PostHog - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/PostHog/posthog"},"https://github.com/PostHog/posthog")," (Open Source Event Tracking)"),(0,r.kt)("li",{parentName:"ul"},"Cabot (Open Source Nagios)"),(0,r.kt)("li",{parentName:"ul"},"Saleor Commerce (Open Source E-Commerce)")),(0,r.kt)("h2",{id:"others"},"Others"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://awesomeopensource.com"},"https://awesomeopensource.com")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sindresorhus/awesome"},"https://github.com/sindresorhus/awesome")),(0,r.kt)("h2",{id:"others-1"},"Others"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://realpython.com/manage-users-in-django-admin"},"https://realpython.com/manage-users-in-django-admin")))}m.isMDXComponent=!0},552920:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Admin-site-image1-652565780e0bb544e5e80c575e063012.jpg"}}]);