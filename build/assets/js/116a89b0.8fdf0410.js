"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[49402],{603905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(667294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(t),c=a,g=m["".concat(u,".").concat(c)]||m[c]||d[c]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},64473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(487462),a=(t(667294),t(603905));const o={},i="Functions",s={unversionedId:"python/python-intro/functions",id:"python/python-intro/functions",title:"Functions",description:"Functions are named blocks of code, designed to do one specific job.",source:"@site/docs/python/python-intro/functions.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/functions",permalink:"/python/python-intro/functions",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/functions.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"File IO",permalink:"/python/python-intro/file-io"},next:{title:"Generators",permalink:"/python/python-intro/generators"}},u={},p=[{value:"A simple function",id:"a-simple-function",level:2},{value:"Passing an argument",id:"passing-an-argument",level:2},{value:"Default values for parameters",id:"default-values-for-parameters",level:2},{value:"Returning a value",id:"returning-a-value",level:2},{value:"Parameters passing",id:"parameters-passing",level:2},{value:"Positional and Keyword Arguments",id:"positional-and-keyword-arguments",level:2},{value:"Passing an arbitrary number of arguments",id:"passing-an-arbitrary-number-of-arguments",level:2},{value:"kwargs (keyword arguments, changes the passed keyword arguments into a dictionary)",id:"kwargs-keyword-arguments-changes-the-passed-keyword-arguments-into-a-dictionary",level:2},{value:"Nested Functions",id:"nested-functions",level:2}],l={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"functions"},"Functions"),(0,a.kt)("p",null,"Functions are named blocks of code, designed to do one specific job."),(0,a.kt)("p",null,"Information passed to a function is called an argument, and information received by a function is called a parameter."),(0,a.kt)("h2",{id:"a-simple-function"},"A simple function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def greet_user():\n    """Display a simple greeting."""\n    print(\'Hello!\')\n\ngreet_user()\n')),(0,a.kt)("h2",{id:"passing-an-argument"},"Passing an argument"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def greet_user(username):\n    print('Hello, ' + username)\n\ngreet_user('dude')\n")),(0,a.kt)("h2",{id:"default-values-for-parameters"},"Default values for parameters"),(0,a.kt)("p",null,"When function calls omit this argument the default value will be used. Parameters with default values must be listed after parameters without default values in the function's definition so positional arguments can still work correctly."),(0,a.kt)("p",null,"We can use None to make an argument optional"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def make_pizza(topping='bacon'):\n    print('Have a ' + topping + ' pizza!')\n\nmake_pizza()\nmake_pizza('pepperoni')\n")),(0,a.kt)("h2",{id:"returning-a-value"},"Returning a value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_numbers(x, y):\n    return x + y\n\nsum = add_numbers(3, 5)\nprint(sum)\n")),(0,a.kt)("h2",{id:"parameters-passing"},"Parameters passing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"positional-or-keyword"),(0,a.kt)("li",{parentName:"ul"},"positional-only"),(0,a.kt)("li",{parentName:"ul"},"keyword-only"),(0,a.kt)("li",{parentName:"ul"},"var-positional"),(0,a.kt)("li",{parentName:"ul"},"var-keyword")),(0,a.kt)("h2",{id:"positional-and-keyword-arguments"},"Positional and Keyword Arguments"),(0,a.kt)("p",null,"When we use positional arguments Python matches the first argument in the funtion call with the first parameter in the function definition, and so forth."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sum = add_numbers(3,5)")),(0,a.kt)("p",null,"With keyword arguments, we specify which parameter each argument should be assigned to in the function call. When we use keyword arguments, the order of the arguments doesn't matter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"sum = add_numbers(x=3, y=5)\nsum = add_numbers(y=5, x=3)\n")),(0,a.kt)("h2",{id:"passing-an-arbitrary-number-of-arguments"},"Passing an arbitrary number of arguments"),(0,a.kt)("p",null,"Sometimes we won't know how many arguments a function will need to accept. Python allows us to collect an arbitrary number of arguments into one parameter using the * operator. A parameter that accepts an arbitrary number of arguments must come last in the function definition."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"**")," operator allows a parameter to collect an arbitrary number of keyword arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# use arbitrary number of positional arguments using *\ndef create_pizza(item_number, *toppings):\n    pizza = {'Pizza number' : item_number}\n\n    for topping in toppings:\n        pizza[topping] = 1\n\n    return pizza\n\nprint (create_pizza(1, 'onion', 'tomato'))\nprint (create_pizza(2, 'mushroom'))\n\n# use arbitrary number of keyword arguments using **\ndef create_pizza(item_number, **toppings):\n    pizza = {'Pizza number' : item_number}\n\n    for key, value in toppings.items():\n        pizza[key] = value\n\n    return pizza\n\nprint (create_pizza(1, topping1='onion', topping2='tomato'))\nprint (create_pizza(2, topping='mushroom'))\n\n# another instance of *\ndef print_args(d1, d2, d3):\n    print(d1, d2, d3)\n\ndata = ('foo', 'bar', 'baz')\n\nprint_args(data)\nTypeError: missing positional arguments d2 and d3\n\nprint_args(*data)\nfoo bar baz\n")),(0,a.kt)("h2",{id:"kwargs-keyword-arguments-changes-the-passed-keyword-arguments-into-a-dictionary"},"kwargs (keyword arguments, changes the passed keyword arguments into a dictionary)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def print_kwargs(**kwargs):\n    print(kwargs)\n\nprint_kwargs(foo='bar', hello='world')\n{'foo': 'bar', 'hello': 'world'}\n")),(0,a.kt)("h2",{id:"nested-functions"},"Nested Functions"),(0,a.kt)("p",null,"Because of the first class nature of python, we can define functions inside other functions."))}d.isMDXComponent=!0}}]);