"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[10310],{603905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>y});var n=a(667294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=m(a),p=o,y=u["".concat(l,".").concat(p)]||u[p]||c[p]||r;return a?n.createElement(y,s(s({ref:t},d),{},{components:a})):n.createElement(y,s({ref:t},d))}));function y(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var m=2;m<r;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},752016:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var n=a(487462),o=(a(667294),a(603905));const r={},s="Core components",i={unversionedId:"databases/nosql-databases/aws-dynamodb/core-components",id:"databases/nosql-databases/aws-dynamodb/core-components",title:"Core components",description:"In DynamoDB, tables, items, and attributes are the core components that you work with. A table is a collection of items, and each item is a collection of attributes. DynamoDB uses primary keys to uniquely identify each item in a table and secondary indexes to provide more querying flexibility. You can use DynamoDB Streams to capture data modification events in DynamoDB tables.",source:"@site/docs/databases/nosql-databases/aws-dynamodb/core-components.md",sourceDirName:"databases/nosql-databases/aws-dynamodb",slug:"/databases/nosql-databases/aws-dynamodb/core-components",permalink:"/databases/nosql-databases/aws-dynamodb/core-components",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/nosql-databases/aws-dynamodb/core-components.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cheatsheet",permalink:"/databases/nosql-databases/aws-dynamodb/cheatsheet"},next:{title:"Documentation",permalink:"/databases/nosql-databases/aws-dynamodb/documentation"}},l={},m=[{value:"Tables, Items, and Attributes",id:"tables-items-and-attributes",level:2},{value:"Primary Key",id:"primary-key",level:2},{value:"Secondary Indexes",id:"secondary-indexes",level:2},{value:"DynamoDB Streams",id:"dynamodb-streams",level:2},{value:"Global Secondary Indexes Usage patterns",id:"global-secondary-indexes-usage-patterns",level:2}],d={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"core-components"},"Core components"),(0,o.kt)("p",null,"In DynamoDB, tables, items, and attributes are the core components that you work with. A ",(0,o.kt)("strong",{parentName:"p"},"table")," is a collection of ",(0,o.kt)("strong",{parentName:"p"},"items"),", and each item is a collection of ",(0,o.kt)("strong",{parentName:"p"},"attributes"),". DynamoDB uses primary keys to uniquely identify each item in a table and secondary indexes to provide more querying flexibility. You can use DynamoDB Streams to capture data modification events in DynamoDB tables."),(0,o.kt)("h2",{id:"tables-items-and-attributes"},"Tables, Items, and Attributes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tables"))),(0,o.kt)("p",null,"Similar to other database systems, DynamoDB stores data in tables. Atableis a collection of data. For example, see the example table calledPeoplethat you could use to store personal contact information about friends, family, or anyone else of interest. You could also have aCarstable to store information about vehicles that people drive.- ",(0,o.kt)("strong",{parentName:"p"},"Items")),(0,o.kt)("p",null,"Each table contains zero or more items. Anitemis a group of attributes that is uniquely identifiable among all of the other items. In aPeopletable, each item represents a person. For aCarstable, each item represents one vehicle. Items in DynamoDB are similar in many ways to rows, records, or tuples in other database systems. In DynamoDB, there is no limit to the number of items you can store in a table.- ",(0,o.kt)("strong",{parentName:"p"},"Attributes")),(0,o.kt)("p",null,"Each item is composed of one or more attributes. Anattributeis a fundamental data element, something that does not need to be broken down any further. For example, an item in aPeopletable contains attributes calledPersonID,LastName,FirstName, and so on. For aDepartmenttable, an item might have attributes such asDepartmentID,Name,Manager, and so on. Attributes in DynamoDB are similar in many ways to fields or columns in other database systems."),(0,o.kt)("h2",{id:"primary-key"},"Primary Key"),(0,o.kt)("p",null,"When you create a table, in addition to the table name, you must specify the primary key of the table. The primary key uniquely identifies each item in the table, so that no two items can have the same key.\nDynamoDB supports two different kinds of primary keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Partition key"))),(0,o.kt)("p",null,"A simple primary key, composed of one attribute known as thepartition key.\nDynamoDB uses the partition key's value as input to an internal hash function. The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored."),(0,o.kt)("p",null,"In a table that has only a partition key, no two items can have the same partition key value.\nThePeopletable described in ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.TablesItemsAttributes"},"Tables, Items, and Attributes")," is an example of a table with a simple primary key (PersonID). You can access any item in thePeopletable directly by providing thePersonIdvalue for that item.- ",(0,o.kt)("strong",{parentName:"p"},"Partition key and sort key")),(0,o.kt)("p",null,"Referred to as acomposite primary key, this type of key is composed of two attributes. The first attribute is thepartition key, and the second attribute is thesort key."),(0,o.kt)("p",null,"DynamoDB uses the partition key value as input to an internal hash function. The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored. All items with the same partition key value are stored together, in sorted order by sort key value."),(0,o.kt)("p",null,"In a table that has a partition key and a sort key, it's possible for two items to have the same partition key value. However, those two items must have different sort key values.\nEach primary key attribute must be a scalar (meaning that it can hold only a single value). The only data types allowed for primary key attributes are string, number, or binary. There are no such restrictions for other, non-key attributes."),(0,o.kt)("h2",{id:"secondary-indexes"},"Secondary Indexes"),(0,o.kt)("p",null,"You can create one or more secondary indexes on a table. Asecondary indexlets you query the data in the table using an alternate key, in addition to queries against the primary key. DynamoDB doesn't require that you use indexes, but they give your applications more flexibility when querying your data. After you create a secondary index on a table, you can read data from the index in much the same way as you do from the table.\nDynamoDB supports two kinds of indexes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Global secondary index"))),(0,o.kt)("p",null,"An index with a partition key and sort key that can be different from those on the table.- ",(0,o.kt)("strong",{parentName:"p"},"Local secondary index")),(0,o.kt)("p",null,"An index that has the same partition key as the table, but a different sort key.\nEach table in DynamoDB has a limit of 20 global secondary indexes (default limit) and 5 local secondary indexes per table.\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html"},"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html")),(0,o.kt)("h2",{id:"dynamodb-streams"},"DynamoDB Streams"),(0,o.kt)("p",null,"DynamoDB Streams is an optional feature that captures data modification events in DynamoDB tables. The data about these events appear in the stream in near-real time, and in the order that the events occurred.\nEach event is represented by astream record. If you enable a stream on a table, DynamoDB Streams writes a stream record whenever one of the following events occurs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A new item is added to the table: The stream captures an image of the entire item, including all of its attributes."),(0,o.kt)("li",{parentName:"ul"},'An item is updated: The stream captures the "before" and "after" image of any attributes that were modified in the item.'),(0,o.kt)("li",{parentName:"ul"},'An item is deleted from the table: The stream captures an image of the entire item before it was deleted.\nEach stream record also contains the name of the table, the event timestamp, and other metadata. Stream records have a lifetime of 24 hours; after that, they are automatically removed from the stream.\nYou can use DynamoDB Streams together with AWS Lambda to create atrigger - code that executes automatically whenever an event of interest appears in a stream. For example, consider aCustomerstable that contains customer information for a company. Suppose that you want to send a "welcome" email to each new customer. You could enable a stream on that table, and then associate the stream with a Lambda function. The Lambda function would execute whenever a new stream record appears, but only process new items added to theCustomerstable. For any item that has anEmailAddressattribute, the Lambda function would invoke Amazon Simple Email Service (Amazon SES) to send an email to that address.\n',(0,o.kt)("a",{parentName:"li",href:"https://aws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns"},"https://aws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns"),(0,o.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html"},"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html"))),(0,o.kt)("h2",{id:"global-secondary-indexes-usage-patterns"},"Global Secondary Indexes Usage patterns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Querying and sorting data by multiple attributes"),(0,o.kt)("li",{parentName:"ul"},"Data filtering"),(0,o.kt)("li",{parentName:"ul"},"Reduce read capacity unit (RCU) consumption for large items"),(0,o.kt)("li",{parentName:"ul"},"Isolating read workloads\n",(0,o.kt)("a",{parentName:"li",href:"https://aws.amazon.com/blogs/database/how-to-use-dynamodb-global-secondary-indexes-to-improve-query-performance-and-reduce-costs"},"https://aws.amazon.com/blogs/database/how-to-use-dynamodb-global-secondary-indexes-to-improve-query-performance-and-reduce-costs"))))}c.isMDXComponent=!0}}]);