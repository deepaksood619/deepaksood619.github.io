"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[60790],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||s;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},713431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(487462),a=(n(667294),n(603905));const s={},o="Commands",i={unversionedId:"technologies/brokers/emqtt/commands",id:"technologies/brokers/emqtt/commands",title:"Commands",description:"git clone -b master",source:"@site/docs/technologies/brokers/emqtt/commands.md",sourceDirName:"technologies/brokers/emqtt",slug:"/technologies/brokers/emqtt/commands",permalink:"/technologies/brokers/emqtt/commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/technologies/brokers/emqtt/commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EMQTT",permalink:"/technologies/brokers/emqtt/"},next:{title:"Conf",permalink:"/technologies/brokers/emqtt/conf"}},l={},p=[{value:"Docker",id:"docker",level:2},{value:"Dashboard",id:"dashboard",level:2},{value:"HTTP API for eMQTT",id:"http-api-for-emqtt",level:2},{value:"Commands",id:"commands-1",level:2},{value:"Add Plugin to emqx",id:"add-plugin-to-emqx",level:2},{value:"Plugins emqx.auth.username",id:"plugins-emqxauthusername",level:2},{value:"Others",id:"others",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"commands"},"Commands"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git clone -b master <https://github.com/emqx/emqx-docker.git>")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cd emqx-docker && docker build -t emqx:latest .")),(0,a.kt)("h2",{id:"docker"},"Docker"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"docker run --rm -ti --name=emqx --net=confluent -p 18083:18083 -p 1883:1883 emqx:latest")),(0,a.kt)("h2",{id:"dashboard"},"Dashboard"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://localhost:18083"},"http://localhost:18083")),(0,a.kt)("h2",{id:"http-api-for-emqtt"},"HTTP API for eMQTT"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create an app in dashboard for creating appid and app password"),(0,a.kt)("li",{parentName:"ul"},"Use Basic authentication header for sending HTTP calls"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://emqtt.io/docs/v3/rest.html"},"http://emqtt.io/docs/v3/rest.html")),(0,a.kt)("li",{parentName:"ul"},"Basic Auth: curl -v --basic -u appid:appsecret -k ",(0,a.kt)("a",{parentName:"li",href:"http://localhost:8080/api/v3/brokers"},"http://localhost:8080/api/v3/brokers")),(0,a.kt)("li",{parentName:"ul"},"List all API: ",(0,a.kt)("a",{parentName:"li",href:"http://localhost:8080/api/v3"},"http://localhost:8080/api/v3")),(0,a.kt)("li",{parentName:"ul"},"POST: ",(0,a.kt)("a",{parentName:"li",href:"http://localhost:8080/api/v3/mqtt/publish"},"http://localhost:8080/api/v3/mqtt/publish")),(0,a.kt)("li",{parentName:"ul"},"Data")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "topic": "foo",\n  "payload": "hello from mqtt",\n  "qos": 1,\n  "retain": false,\n  "client_id": "mqttjs_ab9069449e"\n}\n')),(0,a.kt)("h2",{id:"commands-1"},"Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/emqx_ctl\n\nmgmt list # List Applications\nmgmt insert appid <Name> # Add Application of REST API\nmgmt update appid <status> # Update Application of REST API\nmgmt lookup appid # Get Application of REST API\nmgmt delete appid # Delete Application of REST API\n\nstatus # Show broker status\n\nbroker # Show broker version, uptime and description\nbroker stats # Show broker statistics of clients, topics, subscribers\nbroker metrics # Show broker metrics\n\ncluster join <Node> # Join the cluster\ncluster leave # Leave the cluster\ncluster force-leave <Node> # Force the node leave from cluster\ncluster status # Cluster status\n\nacl reload # reload etc/acl.conf\n\nclients list # List all clients\nclients show <ClientId> # Show a client\nclients kick <ClientId> # Kick out a client\n\nsessions list # List all sessions\nsessions list persistent # List all persistent sessions\nsessions list transient # List all transient sessions\nsessions show <ClientId> # Show a session\n\nroutes list # List all routes\nroutes show <Topic> # Show a route\n\nsubscriptions list # List all subscriptions\nsubscriptions show <ClientId> # Show subscriptions of a client\nsubscriptions add <ClientId> <Topic> <QoS> # Add a static subscription manually\nsubscriptions del <ClientId> <Topic> # Delete a static subscription manually\n\nplugins list # Show loaded plugins\nplugins load <Plugin> # Load plugin\nplugins unload <Plugin> # Unload plugin\n\nbridges list # List bridges\nbridges start <Name> # Start a bridge\nbridges stop <Name> # Stop a bridge\nbridges forwards <Name> # Show a bridge forward topic\nbridges add-forward <Name> <Topic> # Add bridge forward topic\nbridges del-forward <Name> <Topic> # Delete bridge forward topic\nbridges subscriptions <Name> # Show a bridge subscriptions topic\nbridges add-subscription <Name> <Topic> <Qos> # Add bridge subscriptions topic\nbridges del-subscription <Name> <Topic> # Delete bridge subscriptions topic\n\nvm all # Show info of Erlang VM\nvm load # Show load of Erlang VM\nvm memory # Show memory of Erlang VM\nvm process # Show process of Erlang VM\nvm io # Show IO of Erlang VM\nvm ports # Show Ports of Erlang VM\n\nmnesia # Mnesia system info\n\nlog primary-level # Show the primary log level now\nlog primary-level <Level> # Set the primary log level\nlog handlers list # Show log handlers\nlog handlers set-level <HandlerId> <Level> # Set log level of a log handler\n\ntrace list # List all traces started\ntrace start client <ClientId> <File> [<Level>] # Traces for a client\ntrace stop client <ClientId> # Stop tracing for a client\ntrace start topic <Topic> <File> [<Level>] # Traces for a topic\ntrace stop topic <Topic> # Stop tracing for a topic\n\n## listeners # List listeners\nlisteners stop <Proto> <Port> # Stop a listener\n\nretainer info # Show the count of retained messages\nretainer topics # Show all topics of retained messages\nretainer clean # Clean all retained messages\n\nadmins add username password tags # Add dashboard user\nadmins passwd username password # Reset dashboard user password\nadmins del username # Delete dashboard user\n\n# emqx_auth_username commands\nusers list # List users\nusers add username password # Add User\nusers del username # Delete User\n")),(0,a.kt)("h2",{id:"add-plugin-to-emqx"},"Add Plugin to emqx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"load emqx_auth_username plugin\n\n./bin/emqx_ctl plugins load emqx_auth_username\n")),(0,a.kt)("h2",{id:"plugins-emqxauthusername"},"Plugins emqx.auth.username"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Add username/password by./bin/emqx_ctl usersCLI:\n\n$ ./bin/emqx_ctl users add username password\n\nor by configuringetc/plugins/emqx_auth_username.conf:\n\nauth.username.test = public\n\n./bin/emqx_ctl users add **example_mqtt_client xitanez123**\n")),(0,a.kt)("h2",{id:"others"},"Others"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --net=example-docker -e EMQTT_URL=<http://emqx:8080> -e EMQTT_API_USER=admin -e EMQTT_API_PASS=public oxygen0211/emqtt-prometheus-exporter\n")))}m.isMDXComponent=!0}}]);