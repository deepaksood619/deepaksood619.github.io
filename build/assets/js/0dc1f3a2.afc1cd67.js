"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[85142],{603905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>u});var o=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},h=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=n,u=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return r?o.createElement(u,i(i({ref:t},h),{},{components:r})):o.createElement(u,i({ref:t},h))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},58546:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=r(487462),n=(r(667294),r(603905));const a={},i="Problems",s={unversionedId:"algorithms/graphtheory/problems",id:"algorithms/graphtheory/problems",title:"Problems",description:"Knight's Tour Problem",source:"@site/docs/algorithms/graphtheory/problems.md",sourceDirName:"algorithms/graphtheory",slug:"/algorithms/graphtheory/problems",permalink:"/algorithms/graphtheory/problems",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/graphtheory/problems.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Prim's Algorithm for MST",permalink:"/algorithms/graphtheory/prim-algorithm-for-mst"},next:{title:"Resources",permalink:"/algorithms/graphtheory/resources"}},l={},c=[{value:"Knight&#39;s Tour Problem",id:"knights-tour-problem",level:2},{value:"Inorder Successor of BST",id:"inorder-successor-of-bst",level:2},{value:"Word Ladder Problem",id:"word-ladder-problem",level:2},{value:"Problem - Given two words transform one word to another by changing only one letter at a time from the given list of words",id:"problem---given-two-words-transform-one-word-to-another-by-changing-only-one-letter-at-a-time-from-the-given-list-of-words",level:2},{value:"Solution - Have a bucket for each class of words, in each bucket every word is connected to each other",id:"solution---have-a-bucket-for-each-class-of-words-in-each-bucket-every-word-is-connected-to-each-other",level:2}],h={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,o.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"problems"},"Problems"),(0,n.kt)("h2",{id:"knights-tour-problem"},"Knight's Tour Problem"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The knight is placed on the first block of an empty board and, moving according to the rules of chess, must visit each square exactly once.")),(0,n.kt)("p",null,"This is an example of Hamiltonian Path Problem. If the path's starting point and ending point must be the same, then this problem is Hamiltonian cycle problem."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The knight's tour puzzle is played on a chess board with a single chess piece, the knight."),(0,n.kt)("li",{parentName:"ul"},"The object of the puzzle is to find a sequence of moves that allow the knight to visit every square on the board exactly once."),(0,n.kt)("li",{parentName:"ul"},"Can be solved in linear time")),(0,n.kt)("h2",{id:"inorder-successor-of-bst"},"Inorder Successor of BST"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree"},"https://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree")),(0,n.kt)("h2",{id:"word-ladder-problem"},"Word Ladder Problem"),(0,n.kt)("h2",{id:"problem---given-two-words-transform-one-word-to-another-by-changing-only-one-letter-at-a-time-from-the-given-list-of-words"},"Problem - Given two words transform one word to another by changing only one letter at a time from the given list of words"),(0,n.kt)("h2",{id:"solution---have-a-bucket-for-each-class-of-words-in-each-bucket-every-word-is-connected-to-each-other"},"Solution - Have a bucket for each class of words, in each bucket every word is connected to each other"),(0,n.kt)("p",null,"Ex - POP_ which will match both POPE and POPS"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/8-essential-graph-algorithms-in-javascript"},"https://www.freecodecamp.org/news/8-essential-graph-algorithms-in-javascript")))}m.isMDXComponent=!0}}]);