"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78378],{603905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(h,a(a({ref:t},p),{},{components:r})):n.createElement(h,a({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},478405:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(487462),o=(r(667294),r(603905));const i={},a="Architecture",s={unversionedId:"devops/monitoring/istio/architecture",id:"devops/monitoring/istio/architecture",title:"Architecture",description:'Istio works by having a small network proxy sit alongside each microservice. This so-called "sidecar" intercepts all of the service\'s traffic, and handles it more intelligently than a simple layer 3 network can. Istio uses the Envoy proxy as its sidecar. Envoy was originally written at Lyft and is now a CNCF project. The whole set of sidecars, one per microservice, is called thedata plane. The work of the sidecars is coordinated by a small number of central components called thecontrol plane. Control and data plane architectures are very common in distributed systems, from network switches to compute farms.',source:"@site/docs/devops/monitoring/istio/architecture.md",sourceDirName:"devops/monitoring/istio",slug:"/devops/monitoring/istio/architecture",permalink:"/devops/monitoring/istio/architecture",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/devops/monitoring/istio/architecture.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Istio",permalink:"/devops/monitoring/istio/"},next:{title:"Commands",permalink:"/devops/monitoring/istio/commands"}},l={},c=[{value:"Concepts",id:"concepts",level:2},{value:"Policies",id:"policies",level:2},{value:"Platform support",id:"platform-support",level:2},{value:"References",id:"references",level:2},{value:"Ingress Routing",id:"ingress-routing",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,o.kt)(u,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,'Istio works by having a small network proxy sit alongside each microservice. This so-called "sidecar" intercepts all of the service\'s traffic, and handles it more intelligently than a simple layer 3 network can. Istio uses the ',(0,o.kt)("a",{parentName:"p",href:"https://www.envoyproxy.io/"},"Envoy")," proxy as its sidecar. Envoy was originally written at Lyft and is now a ",(0,o.kt)("a",{parentName:"p",href:"https://landscape.cncf.io/"},"CNCF project"),". The whole set of sidecars, one per microservice, is called the",(0,o.kt)("em",{parentName:"p"},"data plane"),". The work of the sidecars is coordinated by a small number of central components called the",(0,o.kt)("em",{parentName:"p"},"control plane"),". Control and data plane architectures are very common in distributed systems, from network switches to compute farms."),(0,o.kt)("p",null,"After deploying Istio in a Kubernetes cluster, Istio takes over the communication between services with sidecar proxies. The communication between services is no longer through Kube-proxy but through Istio's sidecar proxies. The request process is like this: First, a client request is captured and redirected to the sidecar proxy by iptables. Then, the sidecar proxy chooses a backend pod according to the service discovery information and routing rules obtained from the control plane, and forwards the request to it."),(0,o.kt)("p",null,"An Istio service mesh is logically split into adata planeand acontrol plane."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Thedata planeis composed of a set of intelligent proxies (",(0,o.kt)("a",{parentName:"li",href:"https://www.envoyproxy.io/"},"Envoy"),") deployed as sidecars. These proxies mediate and control all network communication between microservices along with ",(0,o.kt)("a",{parentName:"li",href:"https://istio.io/docs/reference/config/policy-and-telemetry/"},"Mixer"),", a general-purpose policy and telemetry hub."),(0,o.kt)("li",{parentName:"ul"},"Thecontrol planemanages and configures the proxies to route traffic. Additionally, the control plane configures Mixers to enforce policies and collect telemetry.")),(0,o.kt)("p",null,"The following diagram shows the different components that make up each plane:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:r(92310).Z,width:"1356",height:"988"})),(0,o.kt)("p",null,"Traffic in Istio is categorized as data plane traffic and control plane traffic. Data plane traffic refers to the messages that the business logic of the workloads send and receive. Control plane traffic refers to configuration and control messages sent between Istio components to program the behavior of the mesh. Traffic management in Istio refers exclusively to data plane traffic."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://istio.io/docs/ops/deployment/architecture"},"https://istio.io/docs/ops/deployment/architecture")),(0,o.kt)("p",null,"Istio is composed of these components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Envoy"))),(0,o.kt)("p",null,"Sidecar proxies per microservice to handle ingress/egress traffic between services in the cluster and from a service to external services. The proxies form asecure microservice meshproviding a rich set of functions like discovery, rich layer-7 routing, circuit breakers, policy enforcement and telemetry recording/reporting functions."),(0,o.kt)("p",null,"Note: The service mesh is not an overlay network. It simplifies and enhances how microservices in an application talk to each other over the network provided by the underlying platform."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Mixer"))),(0,o.kt)("p",null,"Central component that is leveraged by the proxies and microservices to enforce policies such as authorization, rate limits, quotas, authentication, request tracing and telemetry collection."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Pilot"))),(0,o.kt)("p",null,"A component responsible for configuring the proxies at runtime."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Citadel"))),(0,o.kt)("p",null,"A centralized component responsible for certificate issuance and rotation."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Node Agent"))),(0,o.kt)("p",null,"A per-node component responsible for certificate issuance and rotation."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Galley"))),(0,o.kt)("p",null,"Central component for validating, ingesting, aggregating, transforming and distributing config within Istio."),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("h2",{id:"policies"},"Policies"),(0,o.kt)("p",null,"Istio lets you configure custom policies for your application to enforce rules at runtime such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Rate limiting to dynamically limit the traffic to a service"),(0,o.kt)("li",{parentName:"ul"},"Denials, whitelists, and blacklists, to restrict access to services"),(0,o.kt)("li",{parentName:"ul"},"Header rewrites and redirects")),(0,o.kt)("p",null,"Istio also lets you create your own ",(0,o.kt)("a",{parentName:"p",href:"https://istio.io/docs/tasks/policy-enforcement/control-headers"},"policy adapters")," to add, for example, your own custom authorization behavior."),(0,o.kt)("h2",{id:"platform-support"},"Platform support"),(0,o.kt)("p",null,"Istio is platform-independent and designed to run in a variety of environments, including those spanning Cloud, on-premise, Kubernetes, Mesos, and more. You can deploy Istio on Kubernetes, or on Nomad with Consul. Istio currently supports:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Service deployment on Kubernetes"),(0,o.kt)("li",{parentName:"ul"},"Services registered with Consul"),(0,o.kt)("li",{parentName:"ul"},"Services running on individual virtual machines")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://istio.io/docs/concepts/what-is-istio"},"https://istio.io/docs/concepts/what-is-istio")),(0,o.kt)("h2",{id:"ingress-routing"},"Ingress Routing"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A client makes a request on a specific port.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"TheLoad Balancerlistens on this port and forwards the request to one of the workers in the cluster (on the same or a new port).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Inside the cluster the request is routed to theIstio IngressGateway Servicewhich is listening on the port the load balancer forwards to.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"TheServiceforwards the request (on the same or a new port) to anIstio IngressGateway Pod(managed by a Deployment).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"TheIngressGateway Podis configured by aGateway(!) and aVirtualService.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"TheGatewayconfigures the ports, protocol, and certificates.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"TheVirtualServiceconfigures routing information to find the correctService")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"TheIstio IngressGateway Podroutes the request to theapplication Service.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"And finally, theapplication Serviceroutes the request to anapplication Pod(managed by a deployment)."))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:r(465612).Z,width:"692",height:"488"})))}d.isMDXComponent=!0},92310:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/DevOps-Monitoring-Architecture-image1-c66516fcaadcb792e832c5f612169e07.jpg"},465612:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/DevOps-Monitoring-Architecture-image2-4286f5ff82d2a9bc497ca038e518c635.jpg"}}]);