"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[51575],{603905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>f});var t=r(667294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},l=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?t.createElement(f,s(s({ref:n},l),{},{components:r})):t.createElement(f,s({ref:n},l))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},171429:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=r(487462),a=(r(667294),r(603905));const o={},s="Examples",i={unversionedId:"devops/others/terraform/examples",id:"devops/others/terraform/examples",title:"Examples",description:"",source:"@site/docs/devops/others/terraform/examples.md",sourceDirName:"devops/others/terraform",slug:"/devops/others/terraform/examples",permalink:"/devops/others/terraform/examples",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/devops/others/terraform/examples.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/devops/others/terraform/documentation"},next:{title:"Terraform",permalink:"/devops/others/terraform/intro"}},c={},p=[],l={toc:p},u="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#Variables\nvariable "region" {\n default = "us-east-1"\n}\n\nprovider "aws\u201d {\n profile = \u201cdefault\u201d\n region = var.region\n}\n\nresource "aws_instance" "example\u201d {\n ami = "ami-2757f631\u201d\n instance_type = "t2.micro\u201d\n\n provisioner "local-exec" {\n  command = "echo ${aws_instance.example.public_ip} > ip_address.txt"\n }\n}\n\nresource "aws_eip" "ip" {\n vpc = true\n instance = aws_instance.example.id\n}\n\n## Explicit Dependency Example\n# New resource for the S3 bucket our application will use.\nresource "aws_s3_bucket" "example" {\n # NOTE: S3 bucket names must be unique across _all_ AWS accounts, so\n # this name must be changed before applying this example to avoid naming\n # conflicts.\n bucket = "terraform-getting-started-guide"\n acl = "private"\n}\n\n# Change the aws_instance we declared earlier to now include "depends_on"\nresource "aws_instance" "example" {\n ami = "ami-2757f631" instance_type = "t2.micro"\n\n # Tells Terraform that this EC2 instance must be created only after the\n # S3 bucket has been created.\n depends_on = [aws_s3_bucket.example]\n}\n\n# remote-exec provisioner example\nresource "aws_key_pair" "example" {\n  key_name = "examplekey"\n  public_key = file("~/.ssh/id_rsa.pub")\n}\n\nresource "aws_instance" "web" {\n  key_name = aws_key_pair.example.key_name\n  # ...\n\n connection {\n    type     = "ssh"\n    user     = "root"\n    private_key = file("~/.ssh/id_rsa")\n    host     = self.public_ip\n  }\n\n  provisioner "remote-exec" {\n    inline = [\n      "sudo amazon-linux-extras enable nginx1.12",\n      "sudo yum -y install nginx",\n      "sudo systemctl start nginx"\n    ]\n  }\n}\n\n#Terraform consul module\n terraform {\n   required_version = "0.11.11"\n }\n\n provider "aws" {\n   access_key = "AWS ACCESS KEY"\n   secret_key = "AWS SECRET KEY"\n   region     = "us-east-1"\n }\n\n module "consul" {\n   source      = "hashicorp/consul/aws"\n   num_servers = "3"\n}\n')))}m.isMDXComponent=!0}}]);