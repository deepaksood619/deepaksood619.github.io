"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[32290],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(667294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=i(n),k=l,f=c["".concat(p,".").concat(k)]||c[k]||m[k]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:l,o[1]=s;for(var i=2;i<a;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},203677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var r=n(487462),l=(n(667294),n(603905));const a={},o="STL Iterators Algorithms",s={unversionedId:"languages/c++/stl-iterators-algorithms",id:"languages/c++/stl-iterators-algorithms",title:"STL Iterators Algorithms",description:"C++ Iterators",source:"@site/docs/languages/c++/stl-iterators-algorithms.md",sourceDirName:"languages/c++",slug:"/languages/c++/stl-iterators-algorithms",permalink:"/languages/c++/stl-iterators-algorithms",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/c++/stl-iterators-algorithms.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"STL Containers",permalink:"/languages/c++/stl-containers"},next:{title:"Storage classes",permalink:"/languages/c++/storage-classes"}},p={},i=[{value:"C++ Iterators",id:"c-iterators",level:2},{value:"C++ Algorithms",id:"c-algorithms",level:2},{value:"References",id:"references",level:2}],u={toc:i},c="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"stl-iterators-algorithms"},"STL Iterators Algorithms"),(0,l.kt)("h2",{id:"c-iterators"},"C++ Iterators"),(0,l.kt)("p",null,"Iterators are used to access members of the container classes, and can be used in a similar manner to pointers. For example, one might use an iterator to step through the elements of a vector. There are several different types of iterators:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Iterator")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"input_iterator")),(0,l.kt)("td",{parentName:"tr",align:null},"Read values with forward movement. These can be incremented, compared, and dereferenced.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"output_iterator")),(0,l.kt)("td",{parentName:"tr",align:null},"Write values with forward movement. These can be incremented and dereferenced.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"forward_iterator")),(0,l.kt)("td",{parentName:"tr",align:null},"Read or write values with forward movement. These combine the functionality of input and output iterators with the ability to store the iterators value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"bidirectional_ite rator")),(0,l.kt)("td",{parentName:"tr",align:null},"Read and write values with forward and backward movement. These are like the forward iterators, but you can increment and decrement them.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"random_iterator")),(0,l.kt)("td",{parentName:"tr",align:null},"Read and write values with random access. These are the most powerful iterators, combining the functionality of bidirectional iterators with the ability to do pointer arithmetic and pointer comparisons.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"reverse_iterator")),(0,l.kt)("td",{parentName:"tr",align:null},"Either a random iterator or a bidirectional iterator that moves in reverse direction.")))),(0,l.kt)("h2",{id:"c-algorithms"},"C++ Algorithms"),(0,l.kt)("p",null,"accumulate"),(0,l.kt)("p",null,"sum up a range of elements"),(0,l.kt)("p",null,"adjacent_difference"),(0,l.kt)("p",null,"compute the differences between adjacent elements in a range"),(0,l.kt)("p",null,"adjacent_find"),(0,l.kt)("p",null,"finds two items that are adjacent to each other"),(0,l.kt)("p",null,"binary_search"),(0,l.kt)("p",null,"determine if an element exists in a certain range"),(0,l.kt)("p",null,"copy"),(0,l.kt)("p",null,"copy some range of elements to a new location"),(0,l.kt)("p",null,"copy_backward"),(0,l.kt)("p",null,"copy a range of elements in backwards order"),(0,l.kt)("p",null,"copy_n"),(0,l.kt)("p",null,"copy N elements"),(0,l.kt)("p",null,"count"),(0,l.kt)("p",null,"return the number of elements matching a given value"),(0,l.kt)("p",null,"count_if"),(0,l.kt)("p",null,"return the number of elements for which a predicate is true"),(0,l.kt)("p",null,"equal"),(0,l.kt)("p",null,"determine if two sets of elements are the same"),(0,l.kt)("p",null,"equal_range"),(0,l.kt)("p",null,"search for a range of elements that are all equal to a certain element"),(0,l.kt)("p",null,"fill"),(0,l.kt)("p",null,"assign a range of elements a certain value"),(0,l.kt)("p",null,"fill_n"),(0,l.kt)("p",null,"assign a value to some number of elements"),(0,l.kt)("p",null,"find"),(0,l.kt)("p",null,"find a value in a given range"),(0,l.kt)("p",null,"find_end"),(0,l.kt)("p",null,"find the last sequence of elements in a certain range"),(0,l.kt)("p",null,"find_first_of"),(0,l.kt)("p",null,"search for any one of a set of elements"),(0,l.kt)("p",null,"find_if"),(0,l.kt)("p",null,"find the first element for which a certain predicate is true"),(0,l.kt)("p",null,"for_each"),(0,l.kt)("p",null,"apply a function to a range of elements"),(0,l.kt)("p",null,"generate"),(0,l.kt)("p",null,"saves the result of a function in a range"),(0,l.kt)("p",null,"generate_n"),(0,l.kt)("p",null,"saves the result of N applications of a function"),(0,l.kt)("p",null,"includes"),(0,l.kt)("p",null,"returns true if one set is a subset of another"),(0,l.kt)("p",null,"inner_product"),(0,l.kt)("p",null,"compute the inner product of two ranges of elements"),(0,l.kt)("p",null,"inplace_merge"),(0,l.kt)("p",null,"merge two ordered ranges in-place"),(0,l.kt)("p",null,"is_heap"),(0,l.kt)("p",null,"returns true if a given range is a heap"),(0,l.kt)("p",null,"is_sorted"),(0,l.kt)("p",null,"returns true if a range is sorted in ascending order"),(0,l.kt)("p",null,"iter_swap"),(0,l.kt)("p",null,"swaps the elements pointed to by two iterators"),(0,l.kt)("p",null,"lexicographical_compare"),(0,l.kt)("p",null,"returns true if one range is lexicographically less than another"),(0,l.kt)("p",null,"lexicographical_compare_3way"),(0,l.kt)("p",null,"determines if one range is lexicographically less than or greater than another"),(0,l.kt)("p",null,"lower_bound"),(0,l.kt)("p",null,"search for the first place that a value can be inserted while preserving order"),(0,l.kt)("p",null,"make_heap"),(0,l.kt)("p",null,"creates a heap out of a range of elements"),(0,l.kt)("p",null,"max"),(0,l.kt)("p",null,"returns the larger of two elements"),(0,l.kt)("p",null,"max_element"),(0,l.kt)("p",null,"returns the largest element in a range"),(0,l.kt)("p",null,"merge"),(0,l.kt)("p",null,"merge two sorted ranges"),(0,l.kt)("p",null,"min"),(0,l.kt)("p",null,"returns the smaller of two elements"),(0,l.kt)("p",null,"min_element"),(0,l.kt)("p",null,"returns the smallest element in a range"),(0,l.kt)("p",null,"mismatch"),(0,l.kt)("p",null,"finds the first position where two ranges differ"),(0,l.kt)("p",null,"next_permutation"),(0,l.kt)("p",null,"generates the next greater lexicographic permutation of a range of elements"),(0,l.kt)("p",null,"nth_element"),(0,l.kt)("p",null,"put one element in its sorted location and make sure that no elements to its left are greater than any elements to its right"),(0,l.kt)("p",null,"put"),(0,l.kt)("p",null,"one element in its sorted location and make sure that no elements to its left are greater than any elements to its right"),(0,l.kt)("p",null,"partial_sort"),(0,l.kt)("p",null,"sort the first N elements of a range"),(0,l.kt)("p",null,"partial_sort_copy"),(0,l.kt)("p",null,"copy and partially sort a range of elements"),(0,l.kt)("p",null,"partial_sum"),(0,l.kt)("p",null,"compute the partial sum of a range of elements"),(0,l.kt)("p",null,"partition"),(0,l.kt)("p",null,"divide a range of elements into two groups"),(0,l.kt)("p",null,"pop_heap"),(0,l.kt)("p",null,"remove the largest element from a heap"),(0,l.kt)("p",null,"prev_permutation"),(0,l.kt)("p",null,"generates the next smaller lexicographic permutation of a range of elements"),(0,l.kt)("p",null,"push_heap"),(0,l.kt)("p",null,"add an element to a heap"),(0,l.kt)("p",null,"random_sample"),(0,l.kt)("p",null,"randomly copy elements from one range to another"),(0,l.kt)("p",null,"random_sample_n"),(0,l.kt)("p",null,"sample N random elements from a range"),(0,l.kt)("p",null,"random_shuffle"),(0,l.kt)("p",null,"randomly re-order elements in some range"),(0,l.kt)("p",null,"remove"),(0,l.kt)("p",null,"remove elements equal to certain value"),(0,l.kt)("p",null,"remove_copy"),(0,l.kt)("p",null,"copy a range of elements omitting those that match a certian value"),(0,l.kt)("p",null,"remove_copy_if"),(0,l.kt)("p",null,"create a copy of a range of elements, omitting any for which a predicate is true"),(0,l.kt)("p",null,"remove_if"),(0,l.kt)("p",null,"remove all elements for which a predicate is true"),(0,l.kt)("p",null,"replace"),(0,l.kt)("p",null,"replace every occurrence of some value in a range with another value"),(0,l.kt)("p",null,"replace_copy"),(0,l.kt)("p",null,"copy a range, replacing certain elements with new ones"),(0,l.kt)("p",null,"replace_copy_if"),(0,l.kt)("p",null,"copy a range of elements, replacing those for which a predicate is true"),(0,l.kt)("p",null,"replace_if"),(0,l.kt)("p",null,"change the values of elements for which a predicate is true"),(0,l.kt)("p",null,"reverse"),(0,l.kt)("p",null,"reverse elements in some range"),(0,l.kt)("p",null,"reverse_copy"),(0,l.kt)("p",null,"create a copy of a range that is reversed"),(0,l.kt)("p",null,"rotate"),(0,l.kt)("p",null,"move the elements in some range to the left by some amount"),(0,l.kt)("p",null,"rotate_copy"),(0,l.kt)("p",null,"copy and rotate a range of elements"),(0,l.kt)("p",null,"search"),(0,l.kt)("p",null,"search for a range of elements"),(0,l.kt)("p",null,"search_n"),(0,l.kt)("p",null,"search for N consecutive copies of an element in some range"),(0,l.kt)("p",null,"set_difference"),(0,l.kt)("p",null,"computes the difference between two sets"),(0,l.kt)("p",null,"set_intersection"),(0,l.kt)("p",null,"computes the intersection of two sets"),(0,l.kt)("p",null,"set_symmetric_difference"),(0,l.kt)("p",null,"computes the symmetric difference between two sets"),(0,l.kt)("p",null,"set_union"),(0,l.kt)("p",null,"computes the union of two sets"),(0,l.kt)("p",null,"sort"),(0,l.kt)("p",null,"sort a range into ascending order"),(0,l.kt)("p",null,"sort_heap"),(0,l.kt)("p",null,"turns a heap into a sorted range of elements"),(0,l.kt)("p",null,"stable_partition"),(0,l.kt)("p",null,"divide elements into two groups while preserving their relative order"),(0,l.kt)("p",null,"stable_sort"),(0,l.kt)("p",null,"sort a range of elements while preserving order between equal elements"),(0,l.kt)("p",null,"swap"),(0,l.kt)("p",null,"swap the values of two objects"),(0,l.kt)("p",null,"swap_ranges"),(0,l.kt)("p",null,"swaps two ranges of elements"),(0,l.kt)("p",null,"transform"),(0,l.kt)("p",null,"applies a function to a range of elements"),(0,l.kt)("p",null,"unique"),(0,l.kt)("p",null,"remove consecutive duplicate elements in a range"),(0,l.kt)("p",null,"unique_copy"),(0,l.kt)("p",null,"create a copy of some range of elements that contains no consecutive duplicates"),(0,l.kt)("p",null,"upper_bound"),(0,l.kt)("p",null,"searches for the last possible location to insert an element into an ordered range"),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.cppreference.com/Cpp_STL_ReferenceManual.pdf"},"https://www.cppreference.com/Cpp_STL_ReferenceManual.pdf")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=bFSnXNIsK4A"},"https://www.youtube.com/watch?v=bFSnXNIsK4A")))}m.isMDXComponent=!0}}]);