"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[98829],{603905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>d});var n=t(667294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var _=n.createContext({}),l=function(e){var r=n.useContext(_),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(_.Provider,{value:r},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},E=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,_=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(t),E=o,d=p["".concat(_,".").concat(E)]||p[E]||f[E]||a;return t?n.createElement(d,s(s({ref:r},c),{},{components:t})):n.createElement(d,s({ref:r},c))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=E;var i={};for(var _ in r)hasOwnProperty.call(r,_)&&(i[_]=r[_]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}E.displayName="MDXCreateElement"},719081:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>_,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=t(487462),o=(t(667294),t(603905));const a={},s="Commands / Configs",i={unversionedId:"technologies/apache/airflow/commands-configs",id:"technologies/apache/airflow/commands-configs",title:"Commands / Configs",description:"",source:"@site/docs/technologies/apache/airflow/commands-configs.md",sourceDirName:"technologies/apache/airflow",slug:"/technologies/apache/airflow/commands-configs",permalink:"/technologies/apache/airflow/commands-configs",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/technologies/apache/airflow/commands-configs.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Airflow Architecture",permalink:"/technologies/apache/airflow/airflow-architecture"},next:{title:"Concepts",permalink:"/technologies/apache/airflow/concepts"}},_={},l=[],c={toc:l},p="wrapper";function f(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"commands--configs"},"Commands / Configs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"'resetdb', 'render', 'variables', 'delete_user', 'connections', 'create_user', 'rotate_fernet_key', 'pause', 'sync_perm', 'task_failed_deps', 'version', 'trigger_dag', 'initdb', 'test', 'unpause', 'list_dag_runs', 'dag_state', 'run', 'list_tasks', 'backfill', 'list_dags', 'kerberos', 'worker', 'webserver', 'flower', 'scheduler', 'task_state', 'pool', 'serve_logs', 'clear', 'list_users', 'next_execution', 'upgradedb', 'delete_dag'\n\n- airflow initdb\n- airflow flower\n- airflow webserver\n- airflow scheduler\n\n# Configurations\nAIRFLOW_HOME: /root/example/Docker/airflow\nAIRFLOW__CORE__AIRFLOW_HOME: /root/example/Docker/airflow\nAIRFLOW__CORE__DAGS_FOLDER: /root/example/Docker/airflow/dags\nAIRFLOW__CORE__BASE_LOG_FOLDER: /root/example/Docker/airflow/logs\nAIRFLOW__CORE__EXECUTOR: CeleryExecutor\nAIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:airflow@apg-postgresql-headless.airflow:5432/airflow\n\nAIRFLOW__CORE__FERNET_KEY: 3Hj3xtOHEkyFySDDJC1dMkHi5L3QyeJNBbLdgzbs4Dg=\nAIRFLOW__CORE__TASK_RUNNER: StandardTaskRunner\nAIRFLOW__CORE__LOAD_EXAMPLES: \"False\"\nAIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Kolkata\n\nAIRFLOW__WEBSERVER__BASE_URL: http://airweb.zenatix.com\nAIRFLOW__WEBSERVER__EXPOSE_CONFIG: \"True\"\nAIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: \"120\"\nGUNICORN_CMD_ARGS: \"--log-level WARNING\"\nAIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL=60 (default 0)# Prevent airflow from reloading the dags all the time and set. This is the main setting that reduces CPU load in the scheduler\nAIRFLOW__SCHEDULER__SCHEDULER_MAX_THREADS=1 # This should be set to (CPU Cores - 1)\nAIRFLOW__WEBSERVER__WORKERS=2 # 2 * NUM_CPU_CORES + 1\nAIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL=1800 # Restart workers every 30min instead of 30seconds\nAIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=300 #Kill workers if they don't start within 5min instead of 2min\n\nAIRFLOW__SMTP__SMTP_HOST: email-smtp.us-east-1.amazonaws.com\nAIRFLOW__SMTP__SMTP_PORT: \"587\"\nAIRFLOW__SMTP__SMTP_USER: AKIAUNOK5YRX3AMH3ZEV\nAIRFLOW__SMTP__SMTP_PASSWORD: BEvBirvENUT/mDTWCmnZLuiuaFqMnqeDwutK9VPLpKcI\nAIRFLOW__SMTP__SMTP_MAIL_FROM: devops@wattman.io\n\nAIRFLOW__CELERY__BROKER_URL: redis://:airflow@ars-redis-headless.airflow:6379/0\nAIRFLOW__CELERY__CELERY_RESULT_BACKEND: db+postgresql://postgres:airflow@apg-postgresql-headless.airflow:5432/airflow\n\nAIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: \"False\"\n")))}f.isMDXComponent=!0}}]);