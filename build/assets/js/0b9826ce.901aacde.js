"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[985],{603905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91061:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(487462),r=(n(667294),n(603905));const o={},i="Idiomatic Python",l={unversionedId:"python/advanced/idiomatic-python",id:"python/advanced/idiomatic-python",title:"Idiomatic Python",description:"Idiomatic Python",source:"@site/docs/python/advanced/idiomatic-python.md",sourceDirName:"python/advanced",slug:"/python/advanced/idiomatic-python",permalink:"/python/advanced/idiomatic-python",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/advanced/idiomatic-python.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Faster Python",permalink:"/python/advanced/faster-python"},next:{title:"Memory Management",permalink:"/python/advanced/memory-management"}},s={},p=[{value:"Idiomatic Python",id:"idiomatic-python-1",level:2},{value:"Chained Comparison Operator",id:"chained-comparison-operator",level:3},{value:"Use the falsy and truthy concept",id:"use-the-falsy-and-truthy-concept",level:3},{value:"Ternary Operator replacement",id:"ternary-operator-replacement",level:3},{value:"Use the in keyword",id:"use-the-in-keyword",level:3},{value:"Formatting Strings",id:"formatting-strings",level:3},{value:"Use List Comprehensions",id:"use-list-comprehensions",level:3},{value:"Dictionary Comprehension",id:"dictionary-comprehension",level:3},{value:"Sets",id:"sets",level:3},{value:"Set Comprehension",id:"set-comprehension",level:3},{value:"Use the default parameter of &#39;dict.get&#39; to provide default values",id:"use-the-default-parameter-of-dictget-to-provide-default-values",level:3},{value:"Don&#39;t Repeat Yourself",id:"dont-repeat-yourself",level:3},{value:"Find if all the items in a list are equal (pythonic to normal, less efficient to more efficient)",id:"find-if-all-the-items-in-a-list-are-equal-pythonic-to-normal-less-efficient-to-more-efficient",level:3},{value:"Example",id:"example",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"idiomatic-python"},"Idiomatic Python"),(0,r.kt)("h2",{id:"idiomatic-python-1"},"Idiomatic Python"),(0,r.kt)("h3",{id:"chained-comparison-operator"},"Chained Comparison Operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Bad\nif x <= y and y <= z:\n  # do something\n\n# Good\nif x <= y <= z:\n  # do something\n")),(0,r.kt)("h3",{id:"use-the-falsy-and-truthy-concept"},"Use the falsy and truthy concept"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python"},"https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python")),(0,r.kt)("h3",{id:"ternary-operator-replacement"},"Ternary Operator replacement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = True\nvalue = 1 if a else 0\nprint(value)\n")),(0,r.kt)("h3",{id:"use-the-in-keyword"},"Use the in keyword"),(0,r.kt)("h3",{id:"formatting-strings"},"Formatting Strings"),(0,r.kt)("p",null,"The worst approach to formatting strings is to use the + operator to concatenate a mix of static strings and variables. However, the clearest and most idiomatic way to format strings is to use the format function. It takes a format string and replaces placeholders with values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Bad\ndef user_info(user):\n  return 'Name: ' + user.name + ' Age: '+ user.age\n\n# Good\ndef user_info(user):\n  return 'Name: {user.name} Age: {user.age}'.format(user=user)\n")),(0,r.kt)("h3",{id:"use-list-comprehensions"},"Use List Comprehensions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Ex - ls = [element for element in range(10) if not(element % 2)]")),(0,r.kt)("h3",{id:"dictionary-comprehension"},"Dictionary Comprehension"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"emails = {user.name: user.email for user in users if user.email}")),(0,r.kt)("h3",{id:"sets"},"Sets"),(0,r.kt)("p",null,"Operations on set -"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Union: The set of elements in A, B or both (written as A | B)"),(0,r.kt)("li",{parentName:"ul"},"Intersection: The set of elements in both A and B (written as A & B)"),(0,r.kt)("li",{parentName:"ul"},"Difference: The set of elements in A but not in B (written as A\u200a---\u200aB)"),(0,r.kt)("li",{parentName:"ul"},"Symmetric Difference: The set of elements in either A or B but not both A and B (written as A ^ B)")),(0,r.kt)("p",null,"Ex"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"ls1 = [1, 2, 3, 4, 5]\nls2 = [4, 5, 6, 7, 8]\nelements_in_both = list( set(ls1) & set(ls2) )\nprint(elements_in_both)\n")),(0,r.kt)("h3",{id:"set-comprehension"},"Set Comprehension"),(0,r.kt)("h3",{id:"use-the-default-parameter-of-dictget-to-provide-default-values"},"Use the default parameter of 'dict.get' to provide default values"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Ex- auth = payload.get('auth_token', 'Unauthorized')")),(0,r.kt)("h3",{id:"dont-repeat-yourself"},"Don't Repeat Yourself"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Bad\nif user:\n    print('------------------------------')\n    print(user)\n    print('------------------------------')\n\n# In the example above, we have repeated\u200a-\u200aover 30 times which is really not good.\n\n# Good\nif user:\n    print('{0}\\n{1}\\n{0}'.format('-'*30, user))\n")),(0,r.kt)("h3",{id:"find-if-all-the-items-in-a-list-are-equal-pythonic-to-normal-less-efficient-to-more-efficient"},"Find if all the items in a list are equal (pythonic to normal, less efficient to more efficient)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = ['a', 'a', 'a']\nprint(len(set(a)) == 1)\nprint(all(x == a[0] for x in a))\nprint(a.count(a[0]) == len(a))\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Input -\n5\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39\n\nOutput -\nBerry\nHarry\n\n# students = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41], ['Harsh', 39]]\n\nif __name__ == '__main__':\n    marksheet = []\n    for _ in range(int(input())):\n        marksheet.append([input(), float(input())])\n\n    second_highest = sorted(list(set([marks for name, marks in marksheet])))[1]\n\nprint('\\n'.join([a for a,b in sorted(marksheet) if b == second_highest]))\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.codementor.io/johnpaulseremba/idiomatic-python-coding-the-smart-way-fmc4fmtm5?utm_swu=3470"},"https://www.codementor.io/johnpaulseremba/idiomatic-python-coding-the-smart-way-fmc4fmtm5?utm_swu=3470")))}c.isMDXComponent=!0}}]);