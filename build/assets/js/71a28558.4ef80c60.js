"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[90821],{603905:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>m});var a=s(667294);function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function l(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function r(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?l(Object(s),!0).forEach((function(t){n(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):l(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e,t){if(null==e)return{};var s,a,n=function(e,t){if(null==e)return{};var s,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)s=l[a],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)s=l[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var i=a.createContext({}),p=function(e){var t=a.useContext(i),s=t;return e&&(s="function"==typeof e?e(t):r(r({},t),e)),s},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var s=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(s),d=n,m=c["".concat(i,".").concat(d)]||c[d]||h[d]||l;return s?a.createElement(m,r(r({ref:t},u),{},{components:s})):a.createElement(m,r({ref:t},u))}));function m(e,t){var s=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=s.length,r=new Array(l);r[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[c]="string"==typeof e?e:n,r[1]=o;for(var p=2;p<l;p++)r[p]=s[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,s)}d.displayName="MDXCreateElement"},280159:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=s(487462),n=(s(667294),s(603905));const l={},r="Flask",o={unversionedId:"python/others/flask/readme",id:"python/others/flask/readme",title:"Flask",description:"Flask is a micro web framework written in Python and based on the Werkzeug toolkit and Jinja2 template engine.",source:"@site/docs/python/others/flask/readme.md",sourceDirName:"python/others/flask",slug:"/python/others/flask/",permalink:"/python/others/flask/",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/others/flask/readme.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Internal working",permalink:"/python/others/fastapi/internal-working"},next:{title:"Documentation",permalink:"/python/others/flask/documentation"}},i={},p=[{value:"Features",id:"features",level:2},{value:"Request",id:"request",level:2},{value:"Examples",id:"examples",level:2},{value:"Serving",id:"serving",level:2},{value:"Requirements.txt",id:"requirementstxt",level:2},{value:"Flask",id:"flask-1",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Flask Extensions / Libraries / Plugins",id:"flask-extensions--libraries--plugins",level:2},{value:"Flask-admin - https://flask-admin.readthedocs.io/en/latest",id:"flask-admin---httpsflask-adminreadthedocsioenlatest",level:2},{value:"Flask-blueprint",id:"flask-blueprint",level:2},{value:"Rest Libraries",id:"rest-libraries",level:2},{value:"Flask-Restful - https://github.com/flask-restful/flask-restful",id:"flask-restful---httpsgithubcomflask-restfulflask-restful",level:2},{value:"Flask-restplus (DEAD) - https://flask-restplus.readthedocs.io/en/stable",id:"flask-restplus-dead---httpsflask-restplusreadthedocsioenstable",level:2},{value:"Flask-Marshmallow - https://flask-marshmallow.readthedocs.io/en/latest",id:"flask-marshmallow---httpsflask-marshmallowreadthedocsioenlatest",level:2},{value:"Flask-WTF - https://flask-wtf.readthedocs.io/en/stable",id:"flask-wtf---httpsflask-wtfreadthedocsioenstable",level:2},{value:"Security / Auth",id:"security--auth",level:2},{value:"Flask-security - https://pythonhosted.org/Flask-Security",id:"flask-security---httpspythonhostedorgflask-security",level:2},{value:"Flask-login - https://flask-login.readthedocs.io/en/latest",id:"flask-login---httpsflask-loginreadthedocsioenlatest",level:2},{value:"Flask-Login - https://github.com/maxcountryman/flask-login",id:"flask-login---httpsgithubcommaxcountrymanflask-login",level:2},{value:"Flask Praetorian - https://flask-praetorian.readthedocs.io/en/latest",id:"flask-praetorian---httpsflask-praetorianreadthedocsioenlatest",level:2},{value:"Flask-User - https://github.com/lingthio/Flask-User",id:"flask-user---httpsgithubcomlingthioflask-user",level:2},{value:"Databases",id:"databases",level:2},{value:"Flask-SQLAlchemy - https://github.com/pallets/flask-sqlalchemy",id:"flask-sqlalchemy---httpsgithubcompalletsflask-sqlalchemy",level:2},{value:"geo-alchemy2 - https://geoalchemy-2.readthedocs.io/en/latest",id:"geo-alchemy2---httpsgeoalchemy-2readthedocsioenlatest",level:2},{value:"Flask-PyMongo - https://github.com/dcrosta/flask-pymongo",id:"flask-pymongo---httpsgithubcomdcrostaflask-pymongo",level:2},{value:"Flask-mail - https://pythonhosted.org/Flask-Mail",id:"flask-mail---httpspythonhostedorgflask-mail",level:2},{value:"Flask-principal - https://pythonhosted.org/Flask-Principal",id:"flask-principal---httpspythonhostedorgflask-principal",level:2},{value:"Flask-sslify - https://github.com/kennethreitz-archive/flask-sslify",id:"flask-sslify---httpsgithubcomkennethreitz-archiveflask-sslify",level:2},{value:"Flask Click",id:"flask-click",level:2},{value:"Flask-Uploads - https://github.com/maxcountryman/flask-uploads",id:"flask-uploads---httpsgithubcommaxcountrymanflask-uploads",level:2},{value:"Flask-Caching - https://flask-caching.readthedocs.io/en/latest",id:"flask-caching---httpsflask-cachingreadthedocsioenlatest",level:2},{value:"Commands",id:"commands",level:2},{value:"File structure",id:"file-structure",level:2},{value:"Coding Snippets",id:"coding-snippets",level:2},{value:"Flask upload to s3",id:"flask-upload-to-s3",level:2},{value:"Resources",id:"resources",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...s}=e;return(0,n.kt)(c,(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"flask"},"Flask"),(0,n.kt)("p",null,"Flask is a micro web framework written in Python and based on the Werkzeug toolkit and Jinja2 template engine."),(0,n.kt)("p",null,"Flask is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation. Flask supports extensions that can add application features as if they were implemented in Flask itself."),(0,n.kt)("h2",{id:"features"},"Features"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Contains development server and debugger"),(0,n.kt)("li",{parentName:"ul"},"Integrated support for unit testing"),(0,n.kt)("li",{parentName:"ul"},"RESTful request dispatching"),(0,n.kt)("li",{parentName:"ul"},"Uses Jinja2 templating"),(0,n.kt)("li",{parentName:"ul"},"Support for secure cookies"),(0,n.kt)("li",{parentName:"ul"},"100% WSGI 1.0 compliant"),(0,n.kt)("li",{parentName:"ul"},"Unicode-based"),(0,n.kt)("li",{parentName:"ul"},"Google App Engine compatibility")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://stxnext.com/blog/2018/09/27/beginners-introduction-python-frameworks"},"https://stxnext.com/blog/2018/09/27/beginners-introduction-python-frameworks")),(0,n.kt)("h2",{id:"request"},"Request"),(0,n.kt)("p",null,"request.dataContains the incoming request data as string in case it came with a mimetype Flask does not handle."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/api/#flask.Request.args"},"request.args"),": the key/value pairs in the URL query string"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/api/#flask.Request.form"},"request.form"),": the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/api/#flask.Request.files"},"request.files"),": the files in the body, which Flask keeps separate fromform. HTML forms must useenctype=multipart/form-dataor files will not be uploaded."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/api/#flask.Request.values"},"request.values"),": combinedargsandform, preferringargsif keys overlap"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/api/#flask.Request.json"},"request.json"),": parsed JSON data. The request must have theapplication/jsoncontent type, or use",(0,n.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/api/#flask.Request.get_json"},"request.get_json(force=True)")," to ignore the content type."),(0,n.kt)("li",{parentName:"ul"},"request.data"),(0,n.kt)("li",{parentName:"ul"},"request.",(0,n.kt)("strong",{parentName:"li"},"dict")," (type - dict)"),(0,n.kt)("li",{parentName:"ul"},"request.headers (type - dict)"),(0,n.kt)("li",{parentName:"ul"},"request.headers.get('device_id')")),(0,n.kt)("p",null,"All of these are",(0,n.kt)("a",{parentName:"p",href:"https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict"},"MultiDict")," instances (except forjson). You can access values using:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"request.form","['name']",": use indexing if you know the key exists"),(0,n.kt)("li",{parentName:"ul"},"request.form.get('name'): usegetif the key might not exist"),(0,n.kt)("li",{parentName:"ul"},"request.form.getlist('name'): usegetlistif the key is sent multiple times and you want a list of values.getonly returns the first value.")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request"},"https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request")),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://gist.github.com/deepaksood619/99e790959f5eba6ba0815e056a8067d7"},"https://gist.github.com/deepaksood619/99e790959f5eba6ba0815e056a8067d7")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},' import logging\n import os\n import traceback\n from logging.config import dictConfig\n\n import sentry_sdk\n from sentry_sdk.integrations.flask import FlaskIntegration\n sentry_sdk.init(\n  dsn=SENTRY_DSN,\n  integrations=[FlaskIntegration()],\n  attach_stacktrace=True,\n  environment=ENVIRONMENT,\n )\n\n from flask import Flask, make_response, request, abort, jsonify, redirect, url_for\n\n # logging settings\n debug = eval(os.environ.get(\'DEBUG\', \'False\'))\n\n # for sending error logs to slack\n class HTTPSlackHandler(logging.Handler):\n     def emit(self, record):\n         log_entry = self.format(record)\n         json_text = json.dumps({"text": log_entry})\n         url = \'https://hooks.slack.com/services/<org_id>/<api_key>\'\n         return requests.post(url, json_text, headers={"Content-type": "application/json"}).content\n\n dictConfig({\n     "version": 1,\n     "disable_existing_loggers": True,\n     "formatters": {\n         "default": {\n             "format": "[%(asctime)s] %(levelname)s in %(module)s: %(message)s",\n         },\n         "access": {\n             "format": "%(message)s",\n         }\n     },\n     "handlers": {\n         "console": {\n             "level": "INFO",\n             "class": "logging.StreamHandler",\n             "formatter": "default",\n             "stream": "ext://sys.stdout",\n         },\n         "email": {\n             "class": "logging.handlers.SMTPHandler",\n             "formatter": "default",\n             "level": "ERROR",\n             "mailhost": ("smtp.example.com", 587),\n             "fromaddr": "devops@example.com",\n             "toaddrs": ["receiver@example.com", "receiver2@example.com"],\n             "subject": "Error Logs",\n             "credentials": ("username", "password"),\n         },\n         "slack": {\n             "class": "app.HTTPSlackHandler",\n             "formatter": "default",\n             "level": "ERROR",\n         },\n         "error_file": {\n             "class": "logging.handlers.RotatingFileHandler",\n             "formatter": "default",\n             "filename": "/var/log/gunicorn.error.log",\n             "maxBytes": 10000,\n             "backupCount": 10,\n             "delay": "True",\n         },\n         "access_file": {\n             "class": "logging.handlers.RotatingFileHandler",\n             "formatter": "access",\n             "filename": "/var/log/gunicorn.access.log",\n             "maxBytes": 10000,\n             "backupCount": 10,\n             "delay": "True",\n         }\n     },\n     "loggers": {\n         "gunicorn.error": {\n             "handlers": ["console"] if debug else ["console", "slack", "error_file"],\n             "level": "INFO",\n             "propagate": False,\n         },\n         "gunicorn.access": {\n             "handlers": ["console"] if debug else ["console", "access_file"],\n             "level": "INFO",\n             "propagate": False,\n         }\n     },\n     "root": {\n         "level": "DEBUG" if debug else "INFO",\n         "handlers": ["console"] if debug else ["console", "slack"],\n     }\n })\n\n app = Flask(__name__)\n\n logging.warning(\'application started\')\n\n @app.errorhandler(404)\n def resource_not_found(exception):\n """Returns exceptions as part of a json."""\n  return jsonify(error=str(exception)), 404\n\n @app.route("/get_result")\n def get_result():\n     """Takes a job_id and returns the job\'s result."""\n     job_id = request.args["job_id"]\n\n     try:\n         job = Job.fetch(job_id, connection=redis_conn)\n     except Exception as exception:\n         abort(404, description=exception)\n\n     if not job.result:\n         abort(\n             404,\n             description=f"No result found for job_id {job.id}. Try checking the job\'s status.",\n         )\n     return jsonify(job.result)\n\n @app.route(\'/add/<customer>\', methods=["POST"])\n def save_data(customer):\n     try:\n   logging.info(f\'request.data: {request.data}\')\n   logging.info(f\'request.args: {request.args}\')\n   logging.info(f\'request.form: {request.form}\')\n   logging.info(f\'request.files: {request.files}\')\n   logging.info(f\'request.values: {request.values}\')\n   logging.info(f\'request.json: {request.json}\')\n   logging.info(f\'request.headers: {request.headers}\')\n   logging.info(f\'request.__dict__: {request.__dict__}\')\n   request.method # request type\n   request.cookies.get(\'cookie_name\') #cookies\n\n         if payload:\n             logging.info(f\'payload: {payload}\')\n\n             return make_response(\'OK\', 200)\n         else:\n             return make_response(\'Payload Empty\', 400)\n     except Exception as e:\n      logging.error(traceback.format_exc())\n\n     return make_response(\'FAIL\', 500)\n\n @app.route(\'/status\', methods=["GET"])\n def health_check():\n     return jsonify(success="OK"), 200\n\n @app.route(\'/score\', method=["GET"])\n def score():\n     cust_id = request.args(\'cust_id\')\n\n     if not cust_id:\n         return make_response(\'Pass cust_id\', 400)\n\n @app.route(\'/redirect\')\n def redirect_example():\n  return redirect(url_for(\'home\')) @ sends user to /home\n\n #set cookie\n @app.route(\'/\')\n def index():\n  resp = make_response(render_template(\'index.html\'))\n  resp.set_cookie(\'cookie_name\', \'cookie_value\')\n  return resp\n\n #session handling\n  import session\n  app.config[\'SECRET_KEY\'] = \'any random string\' #must be set to use sessions\n\n  #set session\n  @app.route(\'/login_success\')\n  def login_success():\n   session[\'key_name\'] = \'key_value\' #stores a secure cookie in browser\n   return redirect(url_for(\'index\'))\n\n  #read session\n  @app.route(\'/\')\n  def index():\n   if \'key_name\' in session: #session exists and has key\n    session_var = session[\'key_value\']\n   else:\n    #session does not exist\n\n @app.before_first_request\ndef _run_on_start(a_string):\n    print "doing something important with %s" % a_string\n\n app.add_url_rule("/userdevicesms", "userdevicesms", user_device_sms, methods=["POST"])\n app.add_url_rule("/score", "score", score, methods=["GET"])\n\n if __name__ == \'__main__\':\n     app.run(host=\'0.0.0.0\', port=\'5000\')\n')),(0,n.kt)("h2",{id:"serving"},"Serving"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"gunicorn kafka_flask_republisher:app -b 0.0.0.0:5000 --workers 2 -k gevent --timeout 300 --worker-connections 1000 --max-requests 1000000 --log-level info --limit-request-line 8190 --access-logfile -\n\n# running\npython app.py\n")),(0,n.kt)("h2",{id:"requirementstxt"},"Requirements.txt"),(0,n.kt)("p",null,"Flask==1.1.1\ngunicorn","[gevent]","==19.9.0"),(0,n.kt)("h2",{id:"flask-1"},"Flask"),(0,n.kt)("p",null,"Theurl_for()function is very useful for dynamically building a URL for a specific function. The function accepts the name of a function as first argument, and one or more keyword arguments, each corresponding to the variable part of URL."),(0,n.kt)("p",null,"'web templating system'refers to designing an HTML script in which the variable data can be inserted dynamically. A web template system comprises of a template engine, some kind of data source and a template processor."),(0,n.kt)("p",null,"to_python()is used to convert the path in the URL to a Python object that will be passed to the view andto_url()is used byurl_for()to convert arguments to their appropriate forms in the URL."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.tutorialspoint.com/flask"},"https://www.tutorialspoint.com/flask")),(0,n.kt)("h2",{id:"debugging"},"Debugging"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://blog.theodo.com/2020/05/debug-flask-vscode"},"https://blog.theodo.com/2020/05/debug-flask-vscode")),(0,n.kt)("h2",{id:"flask-extensions--libraries--plugins"},"Flask Extensions / Libraries / Plugins"),(0,n.kt)("h2",{id:"flask-admin---httpsflask-adminreadthedocsioenlatest"},"Flask-admin - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-admin.readthedocs.io/en/latest"},"https://flask-admin.readthedocs.io/en/latest")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=ysdShEL1HMM"},"https://www.youtube.com/watch?v=ysdShEL1HMM")),(0,n.kt)("h2",{id:"flask-blueprint"},"Flask-blueprint"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://flask.palletsprojects.com/en/1.1.x/blueprints"},"https://flask.palletsprojects.com/en/1.1.x/blueprints")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://realpython.com/flask-blueprint"},"https://realpython.com/flask-blueprint")),(0,n.kt)("h2",{id:"rest-libraries"},"Rest Libraries"),(0,n.kt)("h2",{id:"flask-restful---httpsgithubcomflask-restfulflask-restful"},"Flask-Restful - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/flask-restful/flask-restful"},"https://github.com/flask-restful/flask-restful")),(0,n.kt)("h2",{id:"flask-restplus-dead---httpsflask-restplusreadthedocsioenstable"},"Flask-restplus (DEAD) - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-restplus.readthedocs.io/en/stable"},"https://flask-restplus.readthedocs.io/en/stable")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://medium.com/@preslavrachev/designing-well-structured-rest-apis-with-flask-restplus-part-1-7e96f2da8850"},"https://medium.com/@preslavrachev/designing-well-structured-rest-apis-with-flask-restplus-part-1-7e96f2da8850")),(0,n.kt)("h2",{id:"flask-marshmallow---httpsflask-marshmallowreadthedocsioenlatest"},"Flask-Marshmallow - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-marshmallow.readthedocs.io/en/latest"},"https://flask-marshmallow.readthedocs.io/en/latest")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=Gl-5m1_eVjI"},"https://www.youtube.com/watch?v=Gl-5m1_eVjI")),(0,n.kt)("h2",{id:"flask-wtf---httpsflask-wtfreadthedocsioenstable"},"Flask-WTF - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-wtf.readthedocs.io/en/stable"},"https://flask-wtf.readthedocs.io/en/stable")),(0,n.kt)("h2",{id:"security--auth"},"Security / Auth"),(0,n.kt)("h2",{id:"flask-security---httpspythonhostedorgflask-security"},"Flask-security - ",(0,n.kt)("a",{parentName:"h2",href:"https://pythonhosted.org/Flask-Security"},"https://pythonhosted.org/Flask-Security")),(0,n.kt)("p",null,"Flask-Security allows you to quickly add common security mechanisms to your Flask application."),(0,n.kt)("h2",{id:"flask-login---httpsflask-loginreadthedocsioenlatest"},"Flask-login - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-login.readthedocs.io/en/latest"},"https://flask-login.readthedocs.io/en/latest")),(0,n.kt)("h2",{id:"flask-login---httpsgithubcommaxcountrymanflask-login"},"Flask-Login - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/maxcountryman/flask-login"},"https://github.com/maxcountryman/flask-login")),(0,n.kt)("h2",{id:"flask-praetorian---httpsflask-praetorianreadthedocsioenlatest"},"Flask Praetorian - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-praetorian.readthedocs.io/en/latest"},"https://flask-praetorian.readthedocs.io/en/latest")),(0,n.kt)("p",null,"This extesion offers a batteries-included approach to security for your API."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=WubG9iKXZ2g"},"https://www.youtube.com/watch?v=WubG9iKXZ2g")),(0,n.kt)("h2",{id:"flask-user---httpsgithubcomlingthioflask-user"},"Flask-User - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/lingthio/Flask-User"},"https://github.com/lingthio/Flask-User")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://flask-oidc.readthedocs.io/en/latest/"},(0,n.kt)("strong",{parentName:"a"},"https://flask-oidc.readthedocs.io/en/latest/"))),(0,n.kt)("h2",{id:"databases"},"Databases"),(0,n.kt)("h2",{id:"flask-sqlalchemy---httpsgithubcompalletsflask-sqlalchemy"},"Flask-SQLAlchemy - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/pallets/flask-sqlalchemy"},"https://github.com/pallets/flask-sqlalchemy")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4"},(0,n.kt)("strong",{parentName:"a"},"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4"))),(0,n.kt)("h2",{id:"geo-alchemy2---httpsgeoalchemy-2readthedocsioenlatest"},"geo-alchemy2 - ",(0,n.kt)("a",{parentName:"h2",href:"https://geoalchemy-2.readthedocs.io/en/latest"},"https://geoalchemy-2.readthedocs.io/en/latest")),(0,n.kt)("h2",{id:"flask-pymongo---httpsgithubcomdcrostaflask-pymongo"},"Flask-PyMongo - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/dcrosta/flask-pymongo"},"https://github.com/dcrosta/flask-pymongo")),(0,n.kt)("h2",{id:"flask-mail---httpspythonhostedorgflask-mail"},"Flask-mail - ",(0,n.kt)("a",{parentName:"h2",href:"https://pythonhosted.org/Flask-Mail"},"https://pythonhosted.org/Flask-Mail")),(0,n.kt)("h2",{id:"flask-principal---httpspythonhostedorgflask-principal"},"Flask-principal - ",(0,n.kt)("a",{parentName:"h2",href:"https://pythonhosted.org/Flask-Principal"},"https://pythonhosted.org/Flask-Principal")),(0,n.kt)("h2",{id:"flask-sslify---httpsgithubcomkennethreitz-archiveflask-sslify"},"Flask-sslify - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/kennethreitz-archive/flask-sslify"},"https://github.com/kennethreitz-archive/flask-sslify")),(0,n.kt)("h2",{id:"flask-click"},"Flask Click"),(0,n.kt)("p",null,"Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It's the \"Command Line Interface Creation Kit\". It's highly configurable but comes with sensible defaults out of the box."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://click.palletsprojects.com/en/7.x"},"https://click.palletsprojects.com/en/7.x")),(0,n.kt)("h2",{id:"flask-uploads---httpsgithubcommaxcountrymanflask-uploads"},"Flask-Uploads - ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/maxcountryman/flask-uploads"},"https://github.com/maxcountryman/flask-uploads")),(0,n.kt)("h2",{id:"flask-caching---httpsflask-cachingreadthedocsioenlatest"},"Flask-Caching - ",(0,n.kt)("a",{parentName:"h2",href:"https://flask-caching.readthedocs.io/en/latest"},"https://flask-caching.readthedocs.io/en/latest")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=iO0sL6Vyfps"},"https://www.youtube.com/watch?v=iO0sL6Vyfps")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/c/PrettyPrintedTutorials/playlists"},"https://www.youtube.com/c/PrettyPrintedTutorials/playlists")),(0,n.kt)("h2",{id:"commands"},"Commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"routes  Show the routes for the app\nrun       Run a development server\nshell     Run a shell in the app context\n\nexport FLASK_APP=flaskr\nexport FLASK_ENV=development\nflask init-db\nflask run\n\nflask shell\nfrom app import db\ndb.create_all()\n\nfrom app import db, Product, Order, Customer\njohndoe = Customer(first_name='John', last_name='Doe')\ndb.session.add(johndoe)\ndb.session.commit()\norder = Order(coupon_code='FREE', customer_id=1, products=[computer, phone])\njohndoe = Customer.query.filter_by(id=1).first().first_name\nCustomer.query.all()\nCustomer.query.filter_by(id=1).one().first_name\n\n# for updating a column\njohndoe.address = '456 fake street'\ndb.session.commit()\n\n# for deleting a row\ndb.session.delete(johndoe)\ndb.session.commit()\n\n# migrations\n# directly sql queries\n")),(0,n.kt)("h2",{id:"file-structure"},"File structure"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," k8s/\n src/\n  app/\n   main.py\n   constants.py\n  tests/\n   data/\n   tests.py\n .dockerignore\n .flake8\n .gitignore\n .isort.cfg\n .pre-commit-config.yaml\n config.yaml\n credentials.json\n credentials_sample.json\n dev.env\n docker-compose.yaml\n Dockerfile\n Jenkinsfile\n README\n    requirements.txt\n")),(0,n.kt)("h2",{id:"coding-snippets"},"Coding Snippets"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},' @backoff.on_exception(\n  backoff.expo, (requests.exceptions.Timeout, requests.exceptions.ConnectionError)\n )\n def populate(destination):\n  url = f"{destination}/populate"\n  requests.get(url)\n\n if __name__ == "__main__":\n  destination = os.getenv("DESTINATION", "http://localhost:8000")\n  populate(destination)\n  while True:\n   send_requests(destination)\n   time.sleep(5)\n')),(0,n.kt)("h2",{id:"flask-upload-to-s3"},"Flask upload to s3"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.zabana.me/notes/flask-tutorial-upload-files-amazon-s3"},"https://www.zabana.me/notes/flask-tutorial-upload-files-amazon-s3")),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/learn-the-flask-python-web-framework-by-building-a-market-platform"},"https://www.freecodecamp.org/news/learn-the-flask-python-web-framework-by-building-a-market-platform")))}h.isMDXComponent=!0}}]);