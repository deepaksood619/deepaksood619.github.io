"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[76578],{603905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(667294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(t),p=o,u=m["".concat(i,".").concat(p)]||m[p]||k[p]||a;return t?r.createElement(u,c(c({ref:n},d),{},{components:t})):r.createElement(u,c({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[m]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},422639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>k,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(487462),o=(t(667294),t(603905));const a={},c="Docker Commands",l={unversionedId:"devops/docker/docker-commands",id:"devops/docker/docker-commands",title:"Docker Commands",description:"Installation",source:"@site/docs/devops/docker/docker-commands.md",sourceDirName:"devops/docker",slug:"/devops/docker/docker-commands",permalink:"/devops/docker/docker-commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/devops/docker/docker-commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Containers",permalink:"/devops/docker/containers"},next:{title:"docker-compose example",permalink:"/devops/docker/docker-compose-example"}},i={},s=[{value:"Installation",id:"installation",level:2},{value:"Containers",id:"containers",level:2},{value:"List",id:"list",level:3},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Starting and Stopping",id:"starting-and-stopping",level:2},{value:"Info",id:"info",level:2},{value:"Example",id:"example",level:3},{value:"Images",id:"images",level:2},{value:"Lifecycle",id:"lifecycle-1",level:3},{value:"Info",id:"info-1",level:3},{value:"Network",id:"network",level:2},{value:"Volumes",id:"volumes",level:2},{value:"Docker CLI",id:"docker-cli",level:2},{value:"Cleanup Commands",id:"cleanup-commands",level:2},{value:"Base Commands",id:"base-commands",level:2},{value:"Other Commands",id:"other-commands",level:2},{value:"Scaling",id:"scaling",level:2}],d={toc:s},m="wrapper";function k(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"docker-commands"},"Docker Commands"),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt-get update\n\nsudo apt-get -y install docker.io\n\n~~--add-host="" : Add a line to /etc/hosts (host:IP)~~\n\n<https://docs.docker.com/engine/install/ubuntu>\n\nsudo service docker start\n\nsudo usermod -a -G docker ubuntu\n\nsudo apt install docker-compose\n')),(0,o.kt)("h2",{id:"containers"},"Containers"),(0,o.kt)("h3",{id:"list"},"List"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker image ls -all #show all images\ndocker container ls --all #show all containers\ndocker info #Display system-wide information\n\ndocker info --format '{{.LoggingDriver}}'\n")),(0,o.kt)("h3",{id:"lifecycle"},"Lifecycle"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/create"},"docker create")," creates a container but does not start it."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/rename/"},"docker rename")," allows the container to be renamed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/run"},"docker run")," creates and starts a container in one operation.")),(0,o.kt)("p",null,"--env, -e = Set environment variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run <image_name>\n\n# override entrypoint\ndocker run --rm -it --entrypoint /bin/bash cr0hn/festin\ndocker run --rm -it -p=8080:8080 inventree/inventree\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/rm"},"docker rm")," deletes a container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/update/"},"docker update")," updates a container's resource limit")),(0,o.kt)("h2",{id:"starting-and-stopping"},"Starting and Stopping"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/start"},"docker start")," starts a container so it is running"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/stop"},"docker stop")," stops a running container"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/restart"},"docker restart")," stops and starts a container"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/pause/"},"docker pause"),' pauses a running container, "freezing" it in place'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/unpause/"},"docker unpause")," will unpause a running container"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/wait"},"docker wait")," blocks until running container stops"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/kill"},"docker kill")," sends a SIGKILL to a running container"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/attach"},"docker attach")," will connect to a running container")),(0,o.kt)("h2",{id:"info"},"Info"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/ps"},"docker ps")," shows running containers.")),(0,o.kt)("p",null,"Options:"),(0,o.kt)("p",null,"-s (for getting docker ip)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/logs"},"docker logs")," gets logs from container. (You can use a custom log driver, but logs is only available forjson-fileandjournaldin 1.10).")),(0,o.kt)("p",null,"Options:"),(0,o.kt)("p",null,"--details Show extra details provided to logs"),(0,o.kt)("p",null,"-f, --follow Follow log output"),(0,o.kt)("p",null,"--since string Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)"),(0,o.kt)("p",null,'--tail string Number of lines to show from the end of the logs (default "all")'),(0,o.kt)("p",null,"-t, --timestamps Show timestamps"),(0,o.kt)("p",null,"--until string Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)"),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs -t --since 2018-08-02T00:00:00 example-prod\n\ndocker logs --timestamps --since='2019-04-22T14:40:36.750121287Z' --until='2019-04-22T15:30:36.750121287Z' kafkaconsumer_kafka-smap-consumer.1.7uq0n8eysgxf5wnx0pbu4lwcx\n\ndocker logs smap-archiver > stdout.log 2>stderr.log\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.docker.com/engine/reference/commandline/inspect"},"docker inspect")," looks at all the info on a container (including IP address).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/events"},"docker events")," gets events from container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/port"},"docker port")," <container_name>shows public facing port of container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.docker.com/engine/reference/commandline/top"},"docker top")," shows running processes in container."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"docker top <container_name>"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.docker.com/engine/reference/commandline/stats"},"docker stats")," shows containers' resource usage statistics.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/diff"},"docker diff")," shows changed files in the container's FS."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"docker secret")," - Manage docker secrets",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"create, inspect, ls, rm")))),(0,o.kt)("h2",{id:"images"},"Images"),(0,o.kt)("p",null,"Images are just ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/understanding-docker/#how-does-a-docker-image-work"},"templates for docker containers"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/ealen/echo-server"},"https://hub.docker.com/r/ealen/echo-server")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/hello-world"},"https://hub.docker.com/_/hello-world")),(0,o.kt)("h3",{id:"lifecycle-1"},"Lifecycle"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/images"},"docker images")," shows all images."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/import"},"docker import")," creates an image from a tarball."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.docker.com/engine/reference/commandline/build"},"docker build")," creates image from Dockerfile."))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker build -t <image-tag> .")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker build -f docker/Dockerfile.dev -t partners-api:latest .")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/commit"},"docker commit")," creates image from a container, pausing it temporarily if it is running."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/rmi"},"docker rmi")," removes an image."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/load"},"docker load")," loads an image from a tar archive as STDIN, including images and tags (as of 0.7)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/save"},"docker save")," saves an image to a tar archive stream to STDOUT with all parent layers, tags & versions (as of 0.7)."),(0,o.kt)("li",{parentName:"ul"},"docker push")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker push gcr.io/example-data-archiver/azure-vote-front:v1")),(0,o.kt)("h3",{id:"info-1"},"Info"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.docker.com/engine/reference/commandline/history"},"docker history")," shows history of image.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/tag"},"docker tag")," tags an image to a name (local or registry).")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker tag monolith:1.0.0 deepaksood619/monolith:1.0.0\n\ndocker tag azure-vote-front gcr.io/example-data-archiver/azure-vote-front:v1\n")),(0,o.kt)("h2",{id:"network"},"Network"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"- docker network connect - Connect a container to a network\n- docker network create - Create a network\n\ndocker network create --subset=172.18.0.0/16 example-docker\n\n- docker network disconnect - Disconnect a container from a network\n- docker network inspect - Display detailed information on one or more networks\n- docker network ls - List networks\n- docker network prune - Remove all unused networks\n- docker network rm - Remove one or more networks\n")),(0,o.kt)("h2",{id:"volumes"},"Volumes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd /var/lib/docker/volumes/druid-volume/_data/segment-cache\n\n| [docker volume create](https://docs.docker.com/engine/reference/commandline/volume_create/)   | Create a volume                                     |\n|------------------------|------------------------------------------------|\n| [docker volume inspect](https://docs.docker.com/engine/reference/commandline/volume_inspect/) | Display detailed information on one or more volumes |\n| [docker volume ls](https://docs.docker.com/engine/reference/commandline/volume_ls/)           | List volumes                                        |\n| [docker volume prune](https://docs.docker.com/engine/reference/commandline/volume_prune/)     | Remove all unused local volumes                     |\n| [docker volume rm](https://docs.docker.com/engine/reference/commandline/volume_rm/)           | Remove one or more volumes                          |\n")),(0,o.kt)("h2",{id:"docker-cli"},"Docker CLI"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker cp <containerId>:/file/path/within/container /host/path/target")),(0,o.kt)("h2",{id:"cleanup-commands"},"Cleanup Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"- docker stop $(docker ps -aq) #stop all running containers\n- docker rmi $(docker images -q) #Delete all images\n- docker rm -f $(docker ps -a -q) #Delete all containers\n- docker-compose config #Check if environment variables are loaded in source\n- docker ps -aq -f status=exited #Show all stopped containers\n\n- **docker rm $(docker ps -a -f status=exited -q) #docker-remove-exited-containers**\n\n- docker volume prune #remove docker volumes\n- docker volume rm $(docker volume ls -f dangling=true -q) #docker-remove-dangling-volumes\n- docker images -qf dangling=true | xargs docker rmi #remove all dangling images\n\n- **docker images -q | xargs docker rmi #remove all unused images**\n- **docker builder prune -f**\n\n- docker system prune -a #clean all, Can kill container in kubernetes cluster\n\n## Kubernetes Cleanup Commands\n\n- **docker system df #check volume status (docker sizes)**\n\n- docker container prune\n- docker image prune -a\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/onfido/k8s-cleanup"},"https://github.com/onfido/k8s-cleanup")),(0,o.kt)("h2",{id:"base-commands"},"Base Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'- docker run --rm -it -v $PWD:/build ubuntu:18.04 #create a docker image of ubuntu:18.04\n- docker run --rm -it ubuntu:18.04 #create a docker image of ubuntu:18.04\n- docker run --rm -it exampletech/react-awscli:1.0.0 /bin/sh\n- docker run --rm -it -p=8080:8080 volttron_docker_image /bin/bash\n- docker commit suspicious_wescoff volttron_docker_image\n- docker run -i -t volttron_docker_image /bin/bash\n- Exit a container - CTRL + D\n- docker run -it --network="host" --name mynodered nodered/node-red-docker #for binding docker to localhost, published ports doesn\'t work when --network="host" is used\n')),(0,o.kt)("h2",{id:"other-commands"},"Other Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"- docker exec -it --user root temp-emqx /bin/sh #get inside docker container as user root\n- whoami #get logged in user inside docker container\n- sudo systemctl restart docker (When docker gets hanged)\n")),(0,o.kt)("h2",{id:"scaling"},"Scaling"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d --scale tasks_runner=5\n# don't use container_name in docker-compose\n")))}k.isMDXComponent=!0}}]);