"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35884],{603905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var a=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),c=l(n),u=r,b=c["".concat(i,".").concat(u)]||c[u]||p[u]||o;return n?a.createElement(b,s(s({ref:t},m),{},{components:n})):a.createElement(b,s({ref:t},m))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:r,s[1]=d;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},745437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var a=n(487462),r=(n(667294),n(603905));const o={},s="Commands",d={unversionedId:"databases/nosql-databases/mongodb/commands",id:"databases/nosql-databases/mongodb/commands",title:"Commands",description:"Mongo DB Queries",source:"@site/docs/databases/nosql-databases/mongodb/commands.md",sourceDirName:"databases/nosql-databases/mongodb",slug:"/databases/nosql-databases/mongodb/commands",permalink:"/databases/nosql-databases/mongodb/commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/nosql-databases/mongodb/commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MongoDB",permalink:"/databases/nosql-databases/mongodb/"},next:{title:"Data Types",permalink:"/databases/nosql-databases/mongodb/data-types"}},i={},l=[{value:"Mongo DB Queries",id:"mongo-db-queries",level:2},{value:"RDBMS Where Clause Equivalents in MongoDB",id:"rdbms-where-clause-equivalents-in-mongodb",level:2},{value:"Others",id:"others",level:2}],m={toc:l},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commands"},"Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  mongo:\n    stdin_open: true\n    tty: true\n    restart: "no"\n    image: mongo\n    container_name: mongo\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n\n  mongo_express:\n    stdin_open: true\n    tty: true\n    restart: "no"\n    image: mongo-express\n    container_name: mongo_express\n    ports:\n      - 8081:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\n      ME_CONFIG_MONGODB_ADMINPASSWORD: example\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install mongodb\n\n# start mongodb server\nbrew services start mongo\n\n# start mongo client\nmongo\nmongo -u root -p example\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'brew install mongosh\n\nmongosh "mongodb+srv://cluster0.xxx.mongodb.net/" --apiVersion 1 --username deepaksood619\n')),(0,r.kt)("h2",{id:"mongo-db-queries"},"Mongo DB Queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db.stats()\nuse <db_name>\nuse user_device_sms #create db user_device_sms\ndb #show current db\nshow dbs #show databases, only shows database with atleast one document\ndb.movie.insert({\'name\':\'End game\'}) #automatically creates a collection movie if not present\ndb.dropDatabase()\n\ndb.createUser({user:"deepak", pwd:"12345", roles:["readWrite", "dbAdmin"]})\n\ndb.createCollection(name, options)\nshow collections\ndb.createCollection("customers")\ndb.createCollection("mycol", { capped : true, autoIndexId : true, size :\n6142800, max : 10000 } )\ndb.customers.insert({"first_name":"Deepak","last_name":"Sood"});\ndb.COLLECTION_NAME.drop()\n\ndb.COLLECTION_NAME.find()\ndb.COLLECTION_NAME.find().pretty()\ndb.sms_collection.find({device_id: "009906bcc9ed9d86"})\ndb.sms_collection.find({device_id: "009906bcc9ed9d86"}, {device_id: 1})\ndb.sms_collection.find({}, {device_id: 1})\n\ndb.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA) #updates the values in the existing document.\ndb.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA}) #replaces the existing document with the new document passed in the save() method.\ndb.COLLECTION_NAME.remove(DELLETION_CRITTERIA) #remove a document from the collection\ndb.COLLECTION_NAME.remove(DELETION_CRITERIA,1) #If there are multiple records and you want to delete only the first record, then set justOne parameter in remove() method.\ndb.COLLECTION_NAME.find().limit(NUMBER)\ndb.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER) #accepts number type argument and is used to skip the number of documents.\ndb.COLLECTION_NAME.find().sort({KEY:1}) #1 is used for ascending order while -1 is used for descending order.\n\ndb.customers.find().forEach(function(doc){print("Cust Name: "+doc.first_name)}); # looping through all data\n\ndb.collection.createIndex( { name: -1 } )\ndb.sms_collection.getIndexes()\n\ndb.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)\n')),(0,r.kt)("h2",{id:"rdbms-where-clause-equivalents-in-mongodb"},"RDBMS Where Clause Equivalents in MongoDB"),(0,r.kt)("p",null,"To query the document on the basis of some condition, you can use following operations."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Operation")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Syntax")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Example")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"RDBMS Equivalent")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Equality"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{key:value}"),(0,r.kt)("td",{parentName:"tr",align:"center"},'db.mycol.find({"by":"tutorials point"}).pretty()'),(0,r.kt)("td",{parentName:"tr",align:"center"},"where by = 'tutorials point'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Less Than"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{key:{$lt:value}}"),(0,r.kt)("td",{parentName:"tr",align:"center"},'db.mycol.find({"likes":{$lt:50}}).pretty()'),(0,r.kt)("td",{parentName:"tr",align:"center"},"where likes < 50")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Less Than Equals"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{key:{$lte:value}}"),(0,r.kt)("td",{parentName:"tr",align:"center"},'db.mycol.find({"likes":{$lte:50}}).pretty()'),(0,r.kt)("td",{parentName:"tr",align:"center"},"where likes <= 50")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Greater Than"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{key:{$gt:value}}"),(0,r.kt)("td",{parentName:"tr",align:"center"},'db.mycol.find({"likes":{$gt:50}}).pretty()'),(0,r.kt)("td",{parentName:"tr",align:"center"},"where likes > 50")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Greater Than Equals"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{key:{$gte:value}}"),(0,r.kt)("td",{parentName:"tr",align:"center"},'db.mycol.find({"likes":{$gte:50}}).pretty()'),(0,r.kt)("td",{parentName:"tr",align:"center"},"where likes >= 50")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Not Equals"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{key:{$ne:value}}"),(0,r.kt)("td",{parentName:"tr",align:"center"},'db.mycol.find({"likes":{$ne:50}}).pretty()'),(0,r.kt)("td",{parentName:"tr",align:"center"},"where likes != 50")))),(0,r.kt)("h2",{id:"others"},"Others"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"VS Code extension for mongodb")))}p.isMDXComponent=!0}}]);