"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1020],{603905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),l=c(r),h=n,u=l["".concat(s,".").concat(h)]||l[h]||d[h]||i;return r?a.createElement(u,o(o({ref:t},m),{},{components:r})):a.createElement(u,o({ref:t},m))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[l]="string"==typeof e?e:n,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},604363:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=r(487462),n=(r(667294),r(603905));const i={},o="Behavioral - State",p={unversionedId:"computer-science/programming-paradigms/behavioral-state",id:"computer-science/programming-paradigms/behavioral-state",title:"Behavioral - State",description:"Thestate pattern is a behavioralsoftware design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods) defined by the pattern's superclass.",source:"@site/docs/computer-science/programming-paradigms/behavioral-state.md",sourceDirName:"computer-science/programming-paradigms",slug:"/computer-science/programming-paradigms/behavioral-state",permalink:"/computer-science/programming-paradigms/behavioral-state",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/computer-science/programming-paradigms/behavioral-state.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Behavioral - Publisher Subscriber",permalink:"/computer-science/programming-paradigms/behavioral-publisher-subscriber"},next:{title:"Behavioral - Strategy",permalink:"/computer-science/programming-paradigms/behavioral-strategy"}},s={},c=[],m={toc:c},l="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(l,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"behavioral---state"},"Behavioral - State"),(0,n.kt)("p",null,"The",(0,n.kt)("strong",{parentName:"p"},"state pattern")," is a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Behavioral_pattern"},"behavioral"),(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Software_design_pattern"},"software design pattern")," that implements a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/State_machine"},"state machine")," in an ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Object-oriented"},"object-oriented")," way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Method_(computer_programming)"},"methods")," defined by the pattern's superclass.\nThe state pattern can be interpreted as a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Strategy_pattern"},"strategy pattern")," which is able to switch the current strategy through invocations of methods defined in the pattern's interface.\nThis pattern is used in ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Computer_programming"},"computer programming")," to encapsulate varying behavior for the same ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Object_(computer_science)"},"object")," based on its internal state. This can be a cleaner way for an object to change its behavior at runtime without resorting to large monolithic conditional statementsand thus improve maintainability."))}d.isMDXComponent=!0}}]);