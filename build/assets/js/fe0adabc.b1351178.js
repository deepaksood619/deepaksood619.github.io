"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[64518],{603905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(667294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),h=s,f=c["".concat(l,".").concat(h)]||c[h]||d[h]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},605971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(487462),s=(n(667294),n(603905));const a={},o="Set",i={unversionedId:"python/python-intro/data-structure/set",id:"python/python-intro/data-structure/set",title:"Set",description:"- Set doesn't support indexing/slicing",source:"@site/docs/python/python-intro/data-structure/set.md",sourceDirName:"python/python-intro/data-structure",slug:"/python/python-intro/data-structure/set",permalink:"/python/python-intro/data-structure/set",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/data-structure/set.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List",permalink:"/python/python-intro/data-structure/list"},next:{title:"Tuples",permalink:"/python/python-intro/data-structure/tuples"}},l={},u=[{value:"Frozen Sets",id:"frozen-sets",level:2},{value:"Creating a set",id:"creating-a-set",level:2},{value:"Adding element to set",id:"adding-element-to-set",level:2},{value:"Removing item to set",id:"removing-item-to-set",level:2},{value:"Union of sets",id:"union-of-sets",level:2},{value:"Intersection of sets",id:"intersection-of-sets",level:2},{value:"Difference of sets",id:"difference-of-sets",level:2},{value:"Symmetric Difference",id:"symmetric-difference",level:2},{value:"Compare Sets",id:"compare-sets",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"set"},"Set"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Set doesn't support indexing/slicing"),(0,s.kt)("li",{parentName:"ul"},"Set doesn't support random.choices(a), since it doesn't support indexing"),(0,s.kt)("li",{parentName:"ul"},"Implementation is mostly similar to dictionary")),(0,s.kt)("p",null,"A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python's set class represents the mathematical notion of a set. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set. This is based on a data structure known as a hash table."),(0,s.kt)("h2",{id:"frozen-sets"},"Frozen Sets"),(0,s.kt)("p",null,"Frozen sets are immutable objects that only support methods and operators that produce a result without affecting the frozen set or sets to which they are applied"),(0,s.kt)("h2",{id:"creating-a-set"},"Creating a set"),(0,s.kt)("p",null,"A set is created by using the set() function or placing all the elements within a pair of curly braces."),(0,s.kt)("p",null,"Days=set(",'["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]',')\nMonths={"Jan","Feb","Mar"}\nDates={21,22,17}'),(0,s.kt)("h2",{id:"adding-element-to-set"},"Adding element to set"),(0,s.kt)("p",null,'Days.add("Sun")'),(0,s.kt)("h2",{id:"removing-item-to-set"},"Removing item to set"),(0,s.kt)("p",null,'Days.discard("Sun")'),(0,s.kt)("h2",{id:"union-of-sets"},"Union of sets"),(0,s.kt)("p",null,"The set of elements in A, B or both (written as A | B)"),(0,s.kt)("p",null,"DaysA = set(",'["Mon","Tue","Wed"]',")\nDaysB = set(",'["Wed","Thu","Fri","Sat","Sun"]',")\nAllDays = DaysA|DaysB"),(0,s.kt)("p",null,"set(","['Wed', 'Fri', 'Tue', 'Mon', 'Thu', 'Sat']",")"),(0,s.kt)("h2",{id:"intersection-of-sets"},"Intersection of sets"),(0,s.kt)("p",null,"The set of elements in both A and B (written as A & B)"),(0,s.kt)("p",null,"DaysA = set(",'["Mon","Tue","Wed"]',")\nDaysB = set(",'["Wed","Thu","Fri","Sat","Sun"]',")\nAllDays = DaysA & DaysB"),(0,s.kt)("p",null,"set(","['Wed']",")"),(0,s.kt)("h2",{id:"difference-of-sets"},"Difference of sets"),(0,s.kt)("p",null,"The set of elements in A but not in B (written as A\u200a---\u200aB)"),(0,s.kt)("p",null,"The order matters for Difference. A\u200a---\u200aB is NOT the same as B\u200a---\u200aA."),(0,s.kt)("p",null,"DaysA = set(",'["Mon","Tue","Wed"]',")\nDaysB = set(",'["Wed","Thu","Fri","Sat","Sun"]',")\nAllDays = DaysA - DaysB"),(0,s.kt)("p",null,"set(","['Mon', 'Tue']",")"),(0,s.kt)("h2",{id:"symmetric-difference"},"Symmetric Difference"),(0,s.kt)("p",null,"The set of elements in either A or B but not both A and B (written as A ^ B)"),(0,s.kt)("p",null,"DaysA = set(",'["Mon","Tue","Wed"]',")\nDaysB = set(",'["Wed","Thu","Fri","Sat","Sun"]',")\nAllDays = DaysA ^ DaysB"),(0,s.kt)("p",null,"set(","['Fri', 'Mon', 'Sat', 'Sun', 'Thu', 'Tue']",")"),(0,s.kt)("h2",{id:"compare-sets"},"Compare Sets"),(0,s.kt)("p",null,"We can check if a given set is a subset or superset of another set. The result is True or False depending on the elements present in the sets."),(0,s.kt)("p",null,"DaysA = set(",'["Mon","Tue","Wed"]',")\nDaysB = set(",'["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]',")\nSubsetRes = DaysA <= DaysB\nSupersetRes = DaysB >= DaysA\nprint(SubsetRes)\nprint(SupersetRes)"),(0,s.kt)("p",null,"True\nTrue"))}d.isMDXComponent=!0}}]);