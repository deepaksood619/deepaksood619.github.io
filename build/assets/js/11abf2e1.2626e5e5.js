"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2149],{603905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>d});var a=n(667294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=a.createContext({}),u=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=u(t.components);return a.createElement(l.Provider,{value:e},t.children)},c="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,p=r(t,["components","mdxType","originalType","parentName"]),c=u(n),m=i,d=c["".concat(l,".").concat(m)]||c[m]||h[m]||o;return n?a.createElement(d,s(s({ref:e},p),{},{components:n})):a.createElement(d,s({ref:e},p))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,s=new Array(o);s[0]=m;var r={};for(var l in e)hasOwnProperty.call(e,l)&&(r[l]=e[l]);r.originalType=t,r[c]="string"==typeof t?t:i,s[1]=r;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},393072:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var a=n(487462),i=(n(667294),n(603905));const o={},s="Intro",r={unversionedId:"computer-science/testing/intro",id:"computer-science/testing/intro",title:"Intro",description:"Testing Vocabulary",source:"@site/docs/computer-science/testing/intro.md",sourceDirName:"computer-science/testing",slug:"/computer-science/testing/intro",permalink:"/computer-science/testing/intro",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/computer-science/testing/intro.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/computer-science/testing/"},next:{title:"iperf3 Testing",permalink:"/computer-science/testing/iperf3-testing"}},l={},u=[{value:"Testing Vocabulary",id:"testing-vocabulary",level:2},{value:"Why do we test at all?",id:"why-do-we-test-at-all",level:2},{value:"Good Tests",id:"good-tests",level:2},{value:"Happy-Tests where you check the output of the tested function and a typical input is even better. I call themhappybecause they test what you expect to get",id:"happy-tests-where-you-check-the-output-of-the-tested-function-and-a-typical-input-is-even-better-i-call-themhappybecause-they-test-what-you-expect-to-get",level:2},{value:"Property testingis pretty cool. There you don&#39;t test for single values, but you check if a property is still held. For example, the output of a factorization function can be multiplied and should equal the input",id:"property-testingis-pretty-cool-there-you-dont-test-for-single-values-but-you-check-if-a-property-is-still-held-for-example-the-output-of-a-factorization-function-can-be-multiplied-and-should-equal-the-input",level:2},{value:"Property Based Testing",id:"property-based-testing",level:2},{value:"Blameless Root Cause Analysis (RCA) / Post Incident Analysis / Post Mortem / Incident Management",id:"blameless-root-cause-analysis-rca--post-incident-analysis--post-mortem--incident-management",level:2},{value:"Pre Production Testing",id:"pre-production-testing",level:2},{value:"Testing in Production",id:"testing-in-production",level:2},{value:"Multivariate Testing",id:"multivariate-testing",level:2}],p={toc:u},c="wrapper";function h(t){let{components:e,...n}=t;return(0,i.kt)(c,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"intro"},"Intro"),(0,i.kt)("h2",{id:"testing-vocabulary"},"Testing Vocabulary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"units")," we are testing in the section above are functions -fibandnext_collatz_element."),(0,i.kt)("li",{parentName:"ul"},"We have 5",(0,i.kt)("strong",{parentName:"li"},"unit tests"),"; all of them intest",(0,i.kt)("em",{parentName:"li"},"math_functions.py: Thetest"),"* functions."),(0,i.kt)("li",{parentName:"ul"},"Thepytestcommand-line executable is called a",(0,i.kt)("strong",{parentName:"li"},"test runner"),". It executes (runs) the tests."),(0,i.kt)("li",{parentName:"ul"},"A",(0,i.kt)("strong",{parentName:"li"},"test suite")," is an arbitrary collection of tests. Usually, you mean all tests.")),(0,i.kt)("h2",{id:"why-do-we-test-at-all"},"Why do we test at all?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Trust:")," You checked at least some cases if they work. So others can have more trust in the quality of your work and you can also put more trust in it."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Breaking Changes:")," For a bigger project, it is sometimes hard to have every part in mind. By writing tests, you make it easier to change something and see if / where things break. This does not only help you but also team members. Including once that are not there yet."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Code Style:")," When you know that you have to write tests, you write some things slightly differently. Those slight differences usually improve the coding style. Sometimes, they are crucial. For example, if you have to thoroughly test your code you will make smaller chunks."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Documentation:")," Some test cases show a little bit of how the code is intended to be used.")),(0,i.kt)("h2",{id:"good-tests"},"Good Tests"),(0,i.kt)("p",null,"It's pretty hard to write good tests and when you measure your test coverage it is tempting to quickly write a couple of bad tests.\nWorst is no testing at all.\nA little bit better is a test that just executes a function but does not check if the return value/the side effects are what you expect. So you simply run it to check if the code crashes."),(0,i.kt)("h2",{id:"happy-tests-where-you-check-the-output-of-the-tested-function-and-a-typical-input-is-even-better-i-call-themhappybecause-they-test-what-you-expect-to-get"},"Happy-Tests where you check the output of the tested function and a typical input is even better. I call themhappybecause they test what you expect to get"),(0,i.kt)("p",null,"In contrast, an",(0,i.kt)("strong",{parentName:"p"},"unhappyexecution path")," is dealing with unwanted inputs. This is also called ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Negative_testing"},(0,i.kt)("strong",{parentName:"a"},"negative testing")),". You check if you actually throw an error. Not throwing an error and silently failing is bad as it hides bugs."),(0,i.kt)("h2",{id:"property-testingis-pretty-cool-there-you-dont-test-for-single-values-but-you-check-if-a-property-is-still-held-for-example-the-output-of-a-factorization-function-can-be-multiplied-and-should-equal-the-input"},"Property testingis pretty cool. There you don't test for single values, but you check if a property is still held. For example, the output of a factorization function can be multiplied and should equal the input"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0"},"https://medium.com/swlh/unit-testing-in-python-basics-21a9a57418a0")),(0,i.kt)("h2",{id:"property-based-testing"},"Property Based Testing"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119"},"https://levelup.gitconnected.com/unit-testing-in-python-property-based-testing-892a741fc119")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=AfaNEebCDos"},"Code Checking Automation - Computerphile")),(0,i.kt)("h2",{id:"blameless-root-cause-analysis-rca--post-incident-analysis--post-mortem--incident-management"},"Blameless Root Cause Analysis (RCA) / Post Incident Analysis / Post Mortem / Incident Management"),(0,i.kt)("p",null,"Root cause analysis (RCA) is a problem-solving method which is used to pinpoint the exact cause of a problem or event.\nThe root cause is the actual cause of a specific problem or set of problems, and when that cause is removed, it prevents the final undesirable effect from occurring.\nRCA is a reactive method, as opposed to preventive, since it will be employed only after a problem has occurred in order to find its cause and prevent it from happening again.\n",(0,i.kt)("a",{parentName:"p",href:"https://www.techopedia.com/definition/30361/root-cause-analysis-rca"},"https://www.techopedia.com/definition/30361/root-cause-analysis-rca")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/what-is-a-software-post-mortem"},"https://www.freecodecamp.org/news/what-is-a-software-post-mortem")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://about.gitlab.com/handbook/customer-success/professional-services-engineering/workflows/internal/root-cause-analysis.html"},"https://about.gitlab.com/handbook/customer-success/professional-services-engineering/workflows/internal/root-cause-analysis.html")),(0,i.kt)("h2",{id:"pre-production-testing"},"Pre Production Testing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Shadowing"),(0,i.kt)("li",{parentName:"ul"},"Mutation tests"),(0,i.kt)("li",{parentName:"ul"},"Contract tests"),(0,i.kt)("li",{parentName:"ul"},"Unit tests"),(0,i.kt)("li",{parentName:"ul"},"Functional tests"),(0,i.kt)("li",{parentName:"ul"},"Component tests"),(0,i.kt)("li",{parentName:"ul"},"Integration tests"),(0,i.kt)("li",{parentName:"ul"},"Fuzz tests"),(0,i.kt)("li",{parentName:"ul"},"Load tests"),(0,i.kt)("li",{parentName:"ul"},"Smoke tests"),(0,i.kt)("li",{parentName:"ul"},"Coverage tests"),(0,i.kt)("li",{parentName:"ul"},"Regression tests")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.toptal.com/web-qa/ui-visual-regression-testing"},"https://www.toptal.com/web-qa/ui-visual-regression-testing")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Acceptance tests"),(0,i.kt)("li",{parentName:"ul"},"Property based tests"),(0,i.kt)("li",{parentName:"ul"},"Usability tests"),(0,i.kt)("li",{parentName:"ul"},"Benchmarking"),(0,i.kt)("li",{parentName:"ul"},"Stress test"),(0,i.kt)("li",{parentName:"ul"},"Config tests")),(0,i.kt)("h2",{id:"testing-in-production"},"Testing in Production"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Canarying"),(0,i.kt)("li",{parentName:"ul"},"Monitoring"),(0,i.kt)("li",{parentName:"ul"},"Exploration"),(0,i.kt)("li",{parentName:"ul"},"Profiling"),(0,i.kt)("li",{parentName:"ul"},"Distributed tracing"),(0,i.kt)("li",{parentName:"ul"},"Dynamic instrumentation"),(0,i.kt)("li",{parentName:"ul"},"Chaos engineering"),(0,i.kt)("li",{parentName:"ul"},"Feature flagging"),(0,i.kt)("li",{parentName:"ul"},"Real user monitoring"),(0,i.kt)("li",{parentName:"ul"},"User engagement tests"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"A/B testing"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.optimizely.com"},"https://www.optimizely.com"))))),(0,i.kt)("h2",{id:"multivariate-testing"},"Multivariate Testing"),(0,i.kt)("p",null,"Multivariate testing(or A/B testing)is when you make product changes that are only seen by some of your users. This gives you some people that see the A version of your product and other people that see the B version of your product. Then you can see if version A or B gives you the results you want. A debate within multivariate testing is whether or not multi-armed bandit testing is the best kind of A/B test. Bandit testing is a continuous form of A/B testing that always send people toward the best performing options. In essence, the experiment never ends. I'm not going to get into this debate here, but I wanted you to know that there is a debate.\nWhen running A/B tests it is important to remember that sample size matters. If option A and B are only shown to a few hundred visitors then it doesn't really matter what the results say. You don't have enough participants in the test to make the statistics meaningful. Here is an anecdote to illuminate this point. If you run an A/B test for 1 day, and on that day you have 2,000 visitors, and option A gave you the results you wanted 70% of the time, then you'd think this experiment is a success. Later you find out that this was the same day that a new blog linked to your product and the traffic from this blog accounted for 90% of your traffic that day. At best, your A/B test has uncovered something about the audience of this blog, not about the users of your product as a whole.- Traffic shifting\n",(0,i.kt)("a",{parentName:"p",href:"https://copyconstruct.medium.com/testing-in-production-the-safe-way-18ca102d0ef1"},"https://copyconstruct.medium.com/testing-in-production-the-safe-way-18ca102d0ef1")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=oO-FMAdjY68"},"Why Good Developers Write Bad Tests")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.toptal.com/test-automation-engineer/automated-testing-best-practices"},"https://www.toptal.com/test-automation-engineer/automated-testing-best-practices")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.toptal.com/unit-testing/unit-testing-benefits"},"Investing in Unit Testing: Benefits and Approaches | Toptal")))}h.isMDXComponent=!0}}]);