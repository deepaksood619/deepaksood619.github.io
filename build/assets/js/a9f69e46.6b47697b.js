"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5406],{603905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>m});var s=t(667294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=s.createContext({}),p=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},i=function(e){var n=p(e.components);return s.createElement(l.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,m=u["".concat(l,".").concat(d)]||u[d]||y[d]||r;return t?s.createElement(m,a(a({ref:n},i),{},{components:t})):s.createElement(m,a({ref:n},i))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<r;p++)a[p]=t[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},510766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>y,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var s=t(487462),o=(t(667294),t(603905));const r={},a="PyMySQL",c={unversionedId:"python/others/pymysql",id:"python/others/pymysql",title:"PyMySQL",description:"pip install PyMySQL==0.9.3",source:"@site/docs/python/others/pymysql.md",sourceDirName:"python/others",slug:"/python/others/pymysql",permalink:"/python/others/pymysql",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/others/pymysql.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Libraries",permalink:"/python/others/libraries"},next:{title:"Requests",permalink:"/python/others/requests"}},l={},p=[{value:"Connections Object",id:"connections-object",level:2},{value:"Cursors Object",id:"cursors-object",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Connection Pooling",id:"connection-pooling",level:2},{value:"# Singleton Class",id:"-singleton-class",level:2},{value:"DBClass",id:"dbclass",level:2},{value:"Others",id:"others",level:2},{value:"psycopg2",id:"psycopg2",level:2}],i={toc:p},u="wrapper";function y(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,s.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pymysql"},"PyMySQL"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/PyMySQL/PyMySQL"},"https://github.com/PyMySQL/PyMySQL")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pymysql.readthedocs.io/en/latest"},"https://pymysql.readthedocs.io/en/latest")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/PyMySQL"},"https://pypi.org/project/PyMySQL")),(0,o.kt)("p",null,"pip install PyMySQL==0.9.3"),(0,o.kt)("h2",{id:"connections-object"},"Connections Object"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pymysql.readthedocs.io/en/latest/modules/connections.html"},"https://pymysql.readthedocs.io/en/latest/modules/connections.html")),(0,o.kt)("h2",{id:"cursors-object"},"Cursors Object"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pymysql.readthedocs.io/en/latest/modules/cursors.html"},"https://pymysql.readthedocs.io/en/latest/modules/cursors.html")),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," import pymysql.cursors\n\n # Connect to the database\n    connection = pymysql.connect(host='localhost',\n                             user='user',\n                             password='passwd',\n                             db='db',\n                             charset='utf8mb4',\n                             cursorclass=pymysql.cursors.DictCursor)\n\n try:\n    with connection.cursor() as cursor:\n  # Create a new record\n  sql = \"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)\"\n  cursor.execute(sql, ('webmaster@python.org', 'very-secret'))\n\n  # connection is not autocommit by default. So you must commit to save your changes.\n   connection.commit()\n\n  with connection.cursor() as cursor:\n        # Read a single record\n        sql = \"SELECT `id`, `password` FROM `users` WHERE `email`=%s\"\n        cursor.execute(sql, ('webmaster@python.org',))\n        result = cursor.fetchone()\n        print(result)\n finally:\n    connection.close()\n")),(0,o.kt)("h2",{id:"connection-pooling"},"Connection Pooling"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pythontic.com/database/mysql/connection%20pooling"},"https://pythontic.com/database/mysql/connection%20pooling")),(0,o.kt)("h2",{id:"-singleton-class"},"# Singleton Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' import pymysql.cursors\n import logging\n\n from constants import (\n     AURORA_DB_DBNAME,\n     AURORA_DB_HOST,\n     AURORA_DB_PASSWORD,\n     AURORA_DB_USER,\n     AWS_ACCESS_KEY_ID,\n     AWS_SECRET_ACCESS_KEY,\n     DEBUG,\n )\n\n mysql_conn = None\n\n def getdb():\n     global mysql_conn\n     if not mysql_conn:\n         try:\n             mysql_conn = pymysql.connect(\n                 host=AURORA_DB_HOST,\n                 user=AURORA_DB_USER,\n                 password=AURORA_DB_PASSWORD,\n                 db=AURORA_DB_DBNAME,\n                 charset="utf8mb4",\n                 cursorclass=pymysql.cursors.DictCursor,\n             )\n         except Exception as e:\n             logging.exception(f"Some error in establishing mysql connection.")\n             raise e\n\n     return mysql_conn\n')),(0,o.kt)("h2",{id:"dbclass"},"DBClass"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' import sys\nimport pymysql\nimport logging\n\n class Database:\n\n  def __init__(self, config):\n        self.host = config.db_host\n        self.username = config.db_user\n        self.password = config.db_password\n        self.port = config.db_port\n        self.dbname = config.db_name\n        self.conn = None\n\n  def open_connection(self):\n        """Connect to MySQL Database."""\n        try:\n            if self.conn is None:\n                self.conn = pymysql.connect(self.host,\n                                            user=self.username,\n                                            passwd=self.password,\n                                            db=self.dbname,\n                                            connect_timeout=5)\n        except pymysql.MySQLError as e:\n            logging.error(e)\n            sys.exit()\n        finally:\n            logging.info(\'Connection opened successfully.\')\n\n  def run_query(self, query):\n        """Execute SQL query."""\n        try:\n            self.open_connection()\n            with self.conn.cursor() as cur:\n                if \'SELECT\' in query:\n                    records = []\n                    cur.execute(query)\n                    result = cur.fetchall()\n                    for row in result:\n                        records.append(row)\n                    cur.close()\n                    return records\n                else:\n                    result = cur.execute(query)\n                    self.conn.commit()\n                    affected = f"{cur.rowcount} rows affected."\n                    cur.close()\n                    return affected\n        except pymysql.MySQLError as e:\n            print(e)\n        finally:\n            if self.conn:\n                self.conn.close()\n                self.conn = None\n                logging.info(\'Database connection closed.\')\n\n class PostgresClient:\n     host: str\n     database_name: str\n     table_name: str\n     port: int\n     username: str\n     password: str\n     conn = None\n\n     def __init__(self, host, database_name, port, username,\n                  password):\n         self.host = host\n         self.database_name = database_name\n         self.port = port\n         self.username = username\n         self.password = password\n\n     def connect(self):\n         try:\n             logger.info(f"connecting to {self.host}")\n             self.conn = pg8000.connect(\n                 host=self.host, port=self.port, database=self.database_name,\n                 user=self.username, password=self.password\n             )\n             return True\n         except Exception as e:\n             logger.error(f"Couldn\'t connect to the db {self.host}- {e}")\n\n         return False\n\n     def insert(self, insert_strings: list, record_to_insert: tuple):\n         if not self.conn:\n             logger.error("No able to connect to the database")\n             return None\n         cur = self.conn.cursor()\n         for insert_string in insert_strings:\n             cur.execute(f"{insert_string}", record_to_insert)\n         self.conn.commit()\n         cur.close()\n\n     def close(self):\n         if self.conn:\n             self.conn.close()\n             self.conn = None\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://hackersandslackers.com/python-mysql-pymysql"},"https://hackersandslackers.com/python-mysql-pymysql")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@vipinc.007/python-a-database-interaction-class-using-pymysql-3338fb90f38c"},"https://medium.com/@vipinc.007/python-a-database-interaction-class-using-pymysql-3338fb90f38c")),(0,o.kt)("h2",{id:"others"},"Others"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/mysql-connector-python"},"https://pypi.org/project/mysql-connector-python")),(0,o.kt)("h2",{id:"psycopg2"},"psycopg2"),(0,o.kt)("p",null,'Psycopg is the most popular PostgreSQL database adapter for the Python programming language. Its main features are the complete implementation of the Python DB API 2.0 specification and the thread safety (several threads can share the same connection). It was designed for heavily multi-threaded applications that create and destroy lots of cursors and make a large number of concurrent "INSERT"s or "UPDATE"s.'),(0,o.kt)("p",null,'Psycopg 2 is mostly implemented in C as a libpq wrapper, resulting in being both efficient and secure. It features client-side and server-side cursors, asynchronous communication and notifications, "COPY TO/COPY FROM" support. Many Python types are supported out-of-the-box and adapted to matching PostgreSQL data types; adaptation can be extended and customized thanks to a flexible objects adaptation system.'),(0,o.kt)("p",null,"Psycopg 2 is both Unicode and Python 3 friendly."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/psycopg2-binary"},"https://pypi.org/project/psycopg2-binary")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.psycopg.org/docs"},"https://www.psycopg.org/docs")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.psycopg.org/docs/usage.html"},"https://www.psycopg.org/docs/usage.html")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.psycopg.org/docs/cursor.html"},"https://www.psycopg.org/docs/cursor.html")))}y.isMDXComponent=!0}}]);