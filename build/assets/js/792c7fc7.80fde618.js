"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18862],{603905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var a=r(667294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=a.createContext({}),u=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=u(r),v=i,f=d["".concat(c,".").concat(v)]||d[v]||p[v]||n;return r?a.createElement(f,s(s({ref:t},l),{},{components:r})):a.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,s=new Array(n);s[0]=v;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<n;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}v.displayName="MDXCreateElement"},388256:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var a=r(487462),i=(r(667294),r(603905));const n={},s="Space-partitioning trees",o={unversionedId:"data-structures/hierarchical-data-structure/space-partitioning-trees",id:"data-structures/hierarchical-data-structure/space-partitioning-trees",title:"Space-partitioning trees",description:"Use a tree to represent a recursive subdivision of 2d space",source:"@site/docs/data-structures/hierarchical-data-structure/space-partitioning-trees.md",sourceDirName:"data-structures/hierarchical-data-structure",slug:"/data-structures/hierarchical-data-structure/space-partitioning-trees",permalink:"/data-structures/hierarchical-data-structure/space-partitioning-trees",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/hierarchical-data-structure/space-partitioning-trees.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Segment Tree",permalink:"/data-structures/hierarchical-data-structure/segment-tree"},next:{title:"Tree DS",permalink:"/data-structures/hierarchical-data-structure/tree-ds"}},c={},u=[{value:"Grid - Divide space uniformly into squares",id:"grid---divide-space-uniformly-into-squares",level:2},{value:"2d tree - Recursively divide space into two halfplanes",id:"2d-tree---recursively-divide-space-into-two-halfplanes",level:2},{value:"Quadtree / Rtree - Recursively divide space into four quadrants",id:"quadtree--rtree---recursively-divide-space-into-four-quadrants",level:2},{value:"BSP tree - Recursively divide space into two regions",id:"bsp-tree---recursively-divide-space-into-two-regions",level:2},{value:"Applications",id:"applications",level:2}],l={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"space-partitioning-trees"},"Space-partitioning trees"),(0,i.kt)("p",null,"Use a tree to represent a recursive subdivision of 2d space"),(0,i.kt)("h2",{id:"grid---divide-space-uniformly-into-squares"},"Grid - Divide space uniformly into squares"),(0,i.kt)("h2",{id:"2d-tree---recursively-divide-space-into-two-halfplanes"},"2d tree - Recursively divide space into two halfplanes"),(0,i.kt)("h2",{id:"quadtree--rtree---recursively-divide-space-into-four-quadrants"},"Quadtree / Rtree - Recursively divide space into four quadrants"),(0,i.kt)("p",null,"It is a two-dimensional analog of octrees and is most often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions."),(0,i.kt)("p",null,"\ud835\ude50\ud835\ude68\ud835\ude5a \ud835\ude58\ud835\ude56\ud835\ude68\ud835\ude5a: find nearby interest points"),(0,i.kt)("h2",{id:"bsp-tree---recursively-divide-space-into-two-regions"},"BSP tree - Recursively divide space into two regions"),(0,i.kt)("h2",{id:"applications"},"Applications"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ray tracing"),(0,i.kt)("li",{parentName:"ul"},"2d range search"),(0,i.kt)("li",{parentName:"ul"},"Flight simulators"),(0,i.kt)("li",{parentName:"ul"},"N-body simulation"),(0,i.kt)("li",{parentName:"ul"},"Collision detection"),(0,i.kt)("li",{parentName:"ul"},"Astronomical databases"),(0,i.kt)("li",{parentName:"ul"},"Nearest neighbor search"),(0,i.kt)("li",{parentName:"ul"},"Adaptive mesh generation"),(0,i.kt)("li",{parentName:"ul"},"Accelerate rendering in Doom (game)"),(0,i.kt)("li",{parentName:"ul"},"Hidden surface removal and shadow casting\n\ud835\udde5\ud835\uddd4\ud835\uddec \ud835\uddd6\ud835\uddd4\ud835\udde6\ud835\udde7\ud835\udddc\ud835\udde1\ud835\uddda")),(0,i.kt)("p",null,"It is the most basic of many computer graphics rendering algo that uses geometric algo of ray tracing."),(0,i.kt)("p",null,"\ud835\ude50\ud835\ude68\ud835\ude5a \ud835\ude58\ud835\ude56\ud835\ude68\ud835\ude5a: using longitude and latitude, return the Country of the point."))}p.isMDXComponent=!0}}]);