"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[15580],{603905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var m=a.createContext({}),l=function(e){var t=a.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),g=o,d=u["".concat(m,".").concat(g)]||u[g]||c[g]||n;return r?a.createElement(d,i(i({ref:t},p),{},{components:r})):a.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=g;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<n;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},165630:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var a=r(487462),o=(r(667294),r(603905));const n={},i="MO's Algorithm",s={unversionedId:"algorithms/mathematics/mo-algorithm",id:"algorithms/mathematics/mo-algorithm",title:"MO's Algorithm",description:"Query Square Root Decomposition",source:"@site/docs/algorithms/mathematics/mo-algorithm.md",sourceDirName:"algorithms/mathematics",slug:"/algorithms/mathematics/mo-algorithm",permalink:"/algorithms/mathematics/mo-algorithm",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/mathematics/mo-algorithm.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Combinatorial Optimization",permalink:"/algorithms/mathematics/combinatorial-optimization"},next:{title:"Powerset",permalink:"/algorithms/mathematics/powerset"}},m={},l=[{value:"Query Square Root Decomposition",id:"query-square-root-decomposition",level:2},{value:"Problem - We are given an array and a set of query ranges, we are required to find sum of every query range",id:"problem---we-are-given-an-array-and-a-set-of-query-ranges-we-are-required-to-find-sum-of-every-query-range",level:2},{value:"More",id:"more",level:2}],p={toc:l},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mos-algorithm"},"MO's Algorithm"),(0,o.kt)("h2",{id:"query-square-root-decomposition"},"Query Square Root Decomposition"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Range Query"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Point Update"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Divide the array in sqrt(n) blocks, maintain sum or prefix-sum of each block"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Any range query can be efficiently calculated by summing all sqrt(n) blocks or part of some blocks"),(0,o.kt)("li",{parentName:"ul"},"Any point update can be done by altering only the sum of that block only")))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:r(291356).Z,width:"750",height:"512"})),(0,o.kt)("h2",{id:"problem---we-are-given-an-array-and-a-set-of-query-ranges-we-are-required-to-find-sum-of-every-query-range"},"Problem - We are given an array and a set of query ranges, we are required to find sum of every query range"),(0,o.kt)("p",null,"Naive - A",(0,o.kt)("strong",{parentName:"p"},"Naive Solution")," is to run a loop from L to R and calculate sum of elements in given range for every query ","[L, R]"),(0,o.kt)("p",null,"Time Complexity - O(m*n)"),(0,o.kt)("p",null,"The idea of",(0,o.kt)("strong",{parentName:"p"},"MO's algorithm"),"is to pre-process all queries so that result of one query can be used in next query. Below are steps."),(0,o.kt)("p",null,"Let",(0,o.kt)("strong",{parentName:"p"},"a","[0...n-1]"),"be input array and",(0,o.kt)("strong",{parentName:"p"},"q","[0..m-1]"),"be array of queries."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Sort all queries in a way that queries with L values from ",(0,o.kt)("strong",{parentName:"p"},"0")," to ",(0,o.kt)("strong",{parentName:"p"},"\u221an -- 1")," are put together, then all queries from ",(0,o.kt)("strong",{parentName:"p"},"\u221an")," to ",(0,o.kt)("strong",{parentName:"p"},"2*\u221an -- 1"),", and so on. All queries within a block are sorted in increasing order of R values.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Process all queries one by one in a way that every query uses sum computed in previous query."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Let 'sum' be sum of previous query."),(0,o.kt)("li",{parentName:"ul"},"Remove extra elements of previous query. For example if previous query is ","[0, 8]"," and current query is ","[3, 9]",", then we subtract a","[0]"," and a","[1]"," from sum"),(0,o.kt)("li",{parentName:"ul"},"Add new elements of current query. In the same example as above, we add a","[9]"," to sum.")))),(0,o.kt)("p",null,"The great thing about this algorithm is, in step 2, index variable for R change at most",(0,o.kt)("strong",{parentName:"p"},"O(n * \u221an)"),"times throughout the run and same for L changes its value at most",(0,o.kt)("strong",{parentName:"p"},"O(m * \u221an)"),"times (See below, after the code, for details). All these bounds are possible only because sorted queries first in blocks of",(0,o.kt)("strong",{parentName:"p"},"\u221an"),"size."),(0,o.kt)("p",null,"The preprocessing part takes O(m Log m) time."),(0,o.kt)("p",null,"Processing all queries takes",(0,o.kt)("strong",{parentName:"p"},"O(n * \u221an)"),"+",(0,o.kt)("strong",{parentName:"p"},"O(m * \u221an)"),"=",(0,o.kt)("strong",{parentName:"p"},"O((m+n) * \u221an)"),"time."),(0,o.kt)("h2",{id:"more"},"More"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/range-minimum-query-for-static-array"},"https://www.geeksforgeeks.org/range-minimum-query-for-static-array")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query"},"https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/mos-algorithm-query-square-root-decomposition-set-1-introduction"},"https://www.geeksforgeeks.org/mos-algorithm-query-square-root-decomposition-set-1-introduction")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://cp-algorithms.com/data_structures/sqrt_decomposition.html"},"https://cp-algorithms.com/data_structures/sqrt_decomposition.html")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/sqrt-square-root-decomposition-technique-set-1-introduction"},"https://www.geeksforgeeks.org/sqrt-square-root-decomposition-technique-set-1-introduction")))}c.isMDXComponent=!0},291356:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/MO's-Algorithm-image1-91f610d1acdafa261e0d712f9185db2b.jpg"}}]);