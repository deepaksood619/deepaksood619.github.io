"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35267],{603905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),c=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(r),d=n,u=p["".concat(i,".").concat(d)]||p[d]||h[d]||s;return r?a.createElement(u,l(l({ref:t},m),{},{components:r})):a.createElement(u,l({ref:t},m))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[p]="string"==typeof e?e:n,l[1]=o;for(var c=2;c<s;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},439045:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=r(487462),n=(r(667294),r(603905));const s={},l="Models",o={unversionedId:"python/others/sqlalchemy/models",id:"python/others/sqlalchemy/models",title:"Models",description:"Here, we define module-level constructs that will form the structures which we will be querying from the database. This structure, known as a Declarative Mapping, defines at once both a Python object model, as well as database metadata that describes real SQL tables that exist, or will exist, in a particular database",source:"@site/docs/python/others/sqlalchemy/models.md",sourceDirName:"python/others/sqlalchemy",slug:"/python/others/sqlalchemy/models",permalink:"/python/others/sqlalchemy/models",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/others/sqlalchemy/models.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQLAlchemy",permalink:"/python/others/sqlalchemy/"},next:{title:"ORM",permalink:"/python/others/sqlalchemy/orm"}},i={},c=[],m={toc:c},p="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"models"},"Models"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/orm/quickstart.html"},"https://docs.sqlalchemy.org/en/14/orm/quickstart.html")),(0,n.kt)("p",null,"Here, we define module-level constructs that will form the structures which we will be querying from the database. This structure, known as a Declarative Mapping, defines at once both a Python object model, as well as database metadata that describes real SQL tables that exist, or will exist, in a particular database"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = "user_account"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    fullname = Column(String)\n    addresses = relationship(\n        "Address", back_populates="user", cascade="all, delete-orphan"\n    )\n\n    def __repr__(self):\n        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"\n\nclass Address(Base):\n    __tablename__ = "address"\n    id = Column(Integer, primary_key=True)\n    email_address = Column(String, nullable=False)\n    user_id = Column(Integer, ForeignKey("user_account.id"), nullable=False)\n\n    user = relationship("User", back_populates="addresses")\n\n    def __repr__(self):\n        return f"Address(id={self.id!r}, email_address={self.email_address!r})"\n')),(0,n.kt)("p",null,"Above, the declarative mapping makes use of ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/core/metadata.html#sqlalchemy.schema.Column"},"Column")," objects to define the basic units of data storage that will be in the database. The ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/orm/relationship_api.html#sqlalchemy.orm.relationship"},"relationship()")," construct defines linkages between two ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/glossary.html#term-mapped"},"mapped")," classes, UserandAddressabove."),(0,n.kt)("p",null,"The schema contains necessary elements such as primary key constraints set up by the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/core/metadata.html#sqlalchemy.schema.Column.params.primary_key"},"Column.primary_key")," parameter, a ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/glossary.html#term-foreign-key-constraint"},"foreign key constraint")," configured using ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/core/constraints.html#sqlalchemy.schema.ForeignKey"},"ForeignKey"),"(which is used by ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/orm/relationship_api.html#sqlalchemy.orm.relationship"},"relationship()")," as well), and datatypes for columns including ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/core/type_basics.html#sqlalchemy.types.Integer"},"Integer")," and ",(0,n.kt)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/14/core/type_basics.html#sqlalchemy.types.String"},"String"),"."))}h.isMDXComponent=!0}}]);