"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[17845],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(667294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(a),y=i,m=u["".concat(l,".").concat(y)]||u[y]||c[y]||n;return a?r.createElement(m,o(o({ref:t},p),{},{components:a})):r.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,o=new Array(n);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<n;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},964376:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>d});var r=a(487462),i=(a(667294),a(603905));const n={},o="Others",s={unversionedId:"databases/nosql-databases/druid/others",id:"databases/nosql-databases/druid/others",title:"Others",description:"Plywood",source:"@site/docs/databases/nosql-databases/druid/others.md",sourceDirName:"databases/nosql-databases/druid",slug:"/databases/nosql-databases/druid/others",permalink:"/databases/nosql-databases/druid/others",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/nosql-databases/druid/others.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Druid",permalink:"/databases/nosql-databases/druid/intro"},next:{title:"Paper",permalink:"/databases/nosql-databases/druid/paper"}},l={},d=[{value:"Plywood",id:"plywood",level:2},{value:"Turnilo",id:"turnilo",level:2},{value:"Tranquility",id:"tranquility",level:2},{value:"Imply Pivot",id:"imply-pivot",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"others"},"Others"),(0,i.kt)("h2",{id:"plywood"},"Plywood"),(0,i.kt)("p",null,"Plywood is a JavaScript library that simplifies building interactive visualizations and applications for large data sets. Plywood acts as a middle-layer between data visualizations and data stores.\nPlywood is architected around the principles of nested ",(0,i.kt)("a",{parentName:"p",href:"http://www.jstatsoft.org/article/view/v040i01/v40i01.pdf"},"Split-Apply-Combine"),", a powerful divide-and-conquer algorithm that can be used to construct all types of data visualizations. Plywood comes with its own ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/implydata/plywood/blob/master/docs/expressions"},"expression language")," where a single Plywood expression can translate to multiple database queries, and where results are returned in a nested data structure so they can be easily consumed by visualization libraries such as ",(0,i.kt)("a",{parentName:"p",href:"http://d3js.org/"},"D3.js"),".\nYou can use Plywood in the browser and/or in node.js to easily create your own visualizations and applications.\nPlywood also acts as a very advanced query planner for Druid, and Plywood will determine the most optimal way to execute Druid queries.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/implydata/plywood"},"https://github.com/implydata/plywood")),(0,i.kt)("h2",{id:"turnilo"},"Turnilo"),(0,i.kt)("p",null,"Business intelligence, data exploration and visualization web application for Druid"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/allegro/turnilo"},"https://github.com/allegro/turnilo")),(0,i.kt)("h2",{id:"tranquility"},"Tranquility"),(0,i.kt)("p",null,"Tranquility helps you send real-time event streams to Druid and handles partitioning, replication, service discovery, and schema rollover, seamlessly and without downtime."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/druid-io/tranquility"},"https://github.com/druid-io/tranquility")),(0,i.kt)("h2",{id:"imply-pivot"},"Imply Pivot"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Imply Pivot is a web-based analytics application on Druid"),(0,i.kt)("li",{parentName:"ul"},"It provides interactive, point-and-click visualizations as well as a SQL query UI"),(0,i.kt)("li",{parentName:"ul"},"It is only available with the Imply distribution of Druid")))}c.isMDXComponent=!0}}]);