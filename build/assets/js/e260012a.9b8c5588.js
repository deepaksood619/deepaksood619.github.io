"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31566],{603905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var r=a(667294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=n,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||l;return a?r.createElement(k,i(i({ref:t},d),{},{components:a})):r.createElement(k,i({ref:t},d))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},663374:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(487462),n=(a(667294),a(603905));const l={},i="Working",o={unversionedId:"databases/nosql-databases/cassandra/working",id:"databases/nosql-databases/cassandra/working",title:"Working",description:"Writes",source:"@site/docs/databases/nosql-databases/cassandra/working.md",sourceDirName:"databases/nosql-databases/cassandra",slug:"/databases/nosql-databases/cassandra/working",permalink:"/databases/nosql-databases/cassandra/working",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/nosql-databases/cassandra/working.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Questions",permalink:"/databases/nosql-databases/cassandra/questions"},next:{title:"Column family",permalink:"/databases/nosql-databases/column-family"}},s={},p=[{value:"Writes",id:"writes",level:2},{value:"The Write Path",id:"the-write-path",level:2},{value:"What is an SSTable",id:"what-is-an-sstable",level:2},{value:"The Read Path",id:"the-read-path",level:2},{value:"Deletes: don&#39;t delete item right away",id:"deletes-dont-delete-item-right-away",level:2},{value:"Reads: Similar to writes, expect",id:"reads-similar-to-writes-expect",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...l}=e;return(0,n.kt)(m,(0,r.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"working"},"Working"),(0,n.kt)("h2",{id:"writes"},"Writes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Need to be lock-free and fast (no reads or disk seeks)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Client sends write to one coordinator node in Cassandra cluster"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Coordinator may be per-key, or per-client or per-query"),(0,n.kt)("li",{parentName:"ul"},"Per-key coordinator ensures writes for the key are serialized"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Coordinator uses Partitioner to send query to all replica nodes responsible for key")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"When X replicas respond, coordinator returns an acknowledgement to the client- ",(0,n.kt)("strong",{parentName:"p"},"Always writable: Hinted Handoff mechanism")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"If any replica is down, the coordinator writes to all other replicas, and keeps the write locally until down replica comes back up")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"When all replicas are down, the Coordinator (front end) buffers write (for up to a few hours)- ",(0,n.kt)("strong",{parentName:"p"},"One ring per datacenter"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Per-DC coordinator elected to coordinate with other DCs")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Election done via Zookeeper, which runs a Paxos (consensus) variant- ",(0,n.kt)("strong",{parentName:"p"},"Writes at a replica node")),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Log it in disk commit log (for failure recovery)")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Make changes to appropriate memtables"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Memtable = In-memory representation of multiple key-value pairs"),(0,n.kt)("li",{parentName:"ul"},"Typically append-only datastructure (fast)"),(0,n.kt)("li",{parentName:"ul"},"Cache that can be searched by key"),(0,n.kt)("li",{parentName:"ul"},"Write-back as opposed to write-through"))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Later When memtable is full or old, flush to disk"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Data File: An SSTable (Sorted String Table) - list of key-value pairs, sorted by key"),(0,n.kt)("li",{parentName:"ul"},"SSTables are immutable (once created, they don't change)"),(0,n.kt)("li",{parentName:"ul"},"Index file: An SSTable of (key, position in data sstable) pairs"),(0,n.kt)("li",{parentName:"ul"},"And a Bloom Filter (for efficient search)")))))),(0,n.kt)("h2",{id:"the-write-path"},"The Write Path"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Writes are written to any node in the cluster (coordinator)"),(0,n.kt)("li",{parentName:"ul"},"Writes are written to commit log, then to memtable"),(0,n.kt)("li",{parentName:"ul"},"Every write includes a timestamp"),(0,n.kt)("li",{parentName:"ul"},"Memtable flushed to disk periodically (sstable)"),(0,n.kt)("li",{parentName:"ul"},"New memtable is created in memory"),(0,n.kt)("li",{parentName:"ul"},'Deletes are a special write case, called a "tombstone"\n',(0,n.kt)("img",{alt:"image",src:a(640965).Z,width:"615",height:"701"}))),(0,n.kt)("h2",{id:"what-is-an-sstable"},"What is an SSTable"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Immutable data file for row storage"),(0,n.kt)("li",{parentName:"ul"},"Every write includes a timestamp of when it was written"),(0,n.kt)("li",{parentName:"ul"},"Partition is spread across multiple SSTables"),(0,n.kt)("li",{parentName:"ul"},"Same column can be in multiple SSTables"),(0,n.kt)("li",{parentName:"ul"},"Merged through compaction, only latest timestamp is kept"),(0,n.kt)("li",{parentName:"ul"},"Deletes are written as tombstones"),(0,n.kt)("li",{parentName:"ul"},"Easy backups")),(0,n.kt)("h2",{id:"the-read-path"},"The Read Path"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any server may be queried, it acts as the coordinator"),(0,n.kt)("li",{parentName:"ul"},"Contacts nodes with the requested key"),(0,n.kt)("li",{parentName:"ul"},"On each node, data is pulled from SSTables and merged"),(0,n.kt)("li",{parentName:"ul"},"Consistency < All performs read repair in background (read_repair_chance -default 10% of reads)\n",(0,n.kt)("img",{alt:"image",src:a(969894).Z,width:"674",height:"466"}),(0,n.kt)("strong",{parentName:"li"},"Compaction")),(0,n.kt)("li",{parentName:"ul"},"Data updates accumulate over time and SSTables and logs need to be compacted",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The process of compaction merges SSTables, i.e., by merging updates for a key"),(0,n.kt)("li",{parentName:"ul"},"Run periodically and locally at each server- TimeWindowCompactionStrategy")))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html"},"https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html")),(0,n.kt)("h2",{id:"deletes-dont-delete-item-right-away"},"Deletes: don't delete item right away"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Add a tombstone to the log"),(0,n.kt)("li",{parentName:"ul"},"Eventually, when compaction encounters tombstone it will delete item")),(0,n.kt)("h2",{id:"reads-similar-to-writes-expect"},"Reads: Similar to writes, expect"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Coordinator can contact X replicas (e.g., in same rack)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Coordinator sends read to replicas that have responded quickest in past"),(0,n.kt)("li",{parentName:"ul"},"When X replicas respond, coordinator returns the latest timestamped value from among those X"))),(0,n.kt)("li",{parentName:"ul"},"Coordinator also fetches value from other replicas",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Checks consistency in the background, initiating a read repair if any two values are different"),(0,n.kt)("li",{parentName:"ul"},"This mechanism seeks to eventually bring all replicas up to date"))),(0,n.kt)("li",{parentName:"ul"},"At a replica",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A row may be split across SSTables => reads need to touch multiple SSTables => reads slower than writes (but still fast)")))))}c.isMDXComponent=!0},640965:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Cassandra_Working-image1-d5752030da2229d7656811cbfa35ed74.jpg"},969894:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Cassandra_Working-image2-62e89842160c1d0f2d79595700eb47fd.jpg"}}]);