"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[76444],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(667294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),p=s,k=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function k(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},495868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(487462),s=(n(667294),n(603905));const o={},r="Amazon EKS",i={unversionedId:"cloud/aws/compute/amazon-eks",id:"cloud/aws/compute/amazon-eks",title:"Amazon EKS",description:"Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on AWS without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications.",source:"@site/docs/cloud/aws/compute/amazon-eks.md",sourceDirName:"cloud/aws/compute",slug:"/cloud/aws/compute/amazon-eks",permalink:"/cloud/aws/compute/amazon-eks",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/cloud/aws/compute/amazon-eks.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Compute",permalink:"/cloud/aws/compute/"},next:{title:"AWS Lambda",permalink:"/cloud/aws/compute/aws-lambda"}},l={},c=[{value:"Amazon EKS Control Plane Architecture",id:"amazon-eks-control-plane-architecture",level:2},{value:"EKS &gt; Managed Node Groups",id:"eks--managed-node-groups",level:2},{value:"Commands",id:"commands",level:2},{value:"Get authentication Token",id:"get-authentication-token",level:3},{value:"AWS EKS",id:"aws-eks",level:2},{value:"eksctl",id:"eksctl",level:2},{value:"Using Fargate with EKS",id:"using-fargate-with-eks",level:2},{value:"Reserve some memory for the kubelet and the system namespaces (for Kubelet OOM)",id:"reserve-some-memory-for-the-kubelet-and-the-system-namespaces-for-kubelet-oom",level:2},{value:"PVC",id:"pvc",level:2},{value:"Optimizations",id:"optimizations",level:2},{value:"Tools",id:"tools",level:2},{value:"kube2iam",id:"kube2iam",level:2},{value:"IAM Roles for Service Accounts (IRSA)",id:"iam-roles-for-service-accounts-irsa",level:2},{value:"Max number of pods",id:"max-number-of-pods",level:2},{value:"Pod Density and Cost EKS (WeaveWorks)",id:"pod-density-and-cost-eks-weaveworks",level:2},{value:"CNI Metrics Helper",id:"cni-metrics-helper",level:2}],u={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"amazon-eks"},"Amazon EKS"),(0,s.kt)("p",null,"Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on AWS without needing to stand up or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications."),(0,s.kt)("p",null,"Amazon EKS runs Kubernetes control plane instances across multiple Availability Zones to ensure high availability. Amazon EKS automatically detects and replaces unhealthy control plane instances, and it provides automated version upgrades and patching for them."),(0,s.kt)("p",null,"Amazon EKS is also integrated with many AWS services to provide scalability and security for your applications, including the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Amazon ECR for container images"),(0,s.kt)("li",{parentName:"ul"},"Elastic Load Balancing for load distribution"),(0,s.kt)("li",{parentName:"ul"},"IAM for authentication"),(0,s.kt)("li",{parentName:"ul"},"Amazon VPC for isolation")),(0,s.kt)("h2",{id:"amazon-eks-control-plane-architecture"},"Amazon EKS Control Plane Architecture"),(0,s.kt)("p",null,"Amazon EKS runs a single tenant Kubernetes control plane for each cluster, and control plane infrastructure is not shared across clusters or AWS accounts."),(0,s.kt)("p",null,"This control plane consists of at least two API server nodes and threeetcdnodes that run across three Availability Zones within a Region. Amazon EKS automatically detects and replaces unhealthy control plane instances, restarting them across the Availability Zones within the Region as needed. Amazon EKS leverages the architecture of AWS Regions in order to maintain high availability. Because of this, Amazon EKS is able to offer an ",(0,s.kt)("a",{parentName:"p",href:"https://aws.amazon.com/eks/sla"},"SLA for API server endpoint availability"),"."),(0,s.kt)("p",null,"Amazon EKS uses Amazon VPC network policies to restrict traffic between control plane components to within a single cluster. Control plane components for a cluster cannot view or receive communication from other clusters or other AWS accounts, except as authorized with Kubernetes RBAC policies."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html"},"https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html")),(0,s.kt)("h2",{id:"eks--managed-node-groups"},"EKS > Managed Node Groups"),(0,s.kt)("p",null,"Amazon EKS managed node groups automate the provisioning and lifecycle management of nodes (Amazon EC2 instances) for Amazon EKS Kubernetes clusters."),(0,s.kt)("p",null,"With Amazon EKS managed node groups, you don't need to separately provision or register the Amazon EC2 instances that provide compute capacity to run your Kubernetes applications. You can create, update, or terminate nodes for your cluster with a single operation. Nodes run using the latest Amazon EKS-optimized AMIs in your AWS account while node updates and terminations gracefully drain nodes to ensure that your applications stay available."),(0,s.kt)("p",null,"All managed nodes are provisioned as part of an Amazon EC2 Auto Scaling group that is managed for you by Amazon EKS. All resources including the instances and Auto Scaling groups run within your AWS account. Each node group uses the Amazon EKS-optimized Amazon Linux 2 AMI and can run across multiple Availability Zones that you define."),(0,s.kt)("h2",{id:"commands"},"Commands"),(0,s.kt)("h3",{id:"get-authentication-token"},"Get authentication Token"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')\n\nkubectl proxy\n\n<http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login>\n")),(0,s.kt)("h2",{id:"aws-eks"},"AWS EKS"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"#Adding users to eks\nkubectl describe configmap -n kube-system aws-auth\n\nmapUsers:\n----\n- userarn: arn:aws:iam::331916247734:user/deepak.sood@stashfin.com\n    username: deepak.sood\n    groups:\n    - system:masters\n\n    https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html\n\n#get kubeconfig credentials from eks to local\naws eks --region ap-south-1 list-clusters\naws eks --region ap-south-1 update-kubeconfig --name stashfin-dev-eks\naws eks --region ap-south-1 update-kubeconfig --name stashfin-prod-eks\n\n#login to AWS ECR\naws ecr get-login-password | docker login --username AWS --password-stdin 331916247734.dkr.ecr.ap-south-1.amazonaws.com\n")),(0,s.kt)("h2",{id:"eksctl"},"eksctl"),(0,s.kt)("p",null,"eksctl is a simple CLI tool for creating clusters on EKS - Amazon's new managed Kubernetes service for EC2. It is written in Go, uses CloudFormation, was created by ",(0,s.kt)("a",{parentName:"p",href:"https://www.weave.works/"},"Weaveworks")," and it welcomes contributions from the community. Create a basic cluster in minutes with just one command"),(0,s.kt)("p",null,"A cluster will be created with default parameters"),(0,s.kt)("p",null,'\u2219 exciting auto-generated name, e.g. "fabulous-mushroom-1527688624"'),(0,s.kt)("p",null,"\u2219 2xm5.largenodes (this instance type suits most common use-cases, and is good value for money)"),(0,s.kt)("p",null,"\u2219 use official AWS EKS AMI"),(0,s.kt)("p",null,"\u2219us-west-2region"),(0,s.kt)("p",null,"\u2219 dedicated VPC (check your quotas)"),(0,s.kt)("p",null,"\u2219 using static AMI resolver"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"eksctl create cluster --name prod --version 1.14 --region ap-south-1 --fargate\neksctl create cluster --name=stashfin --nodes=2 --version 1.14 --region ap-south-1 --nodes-min=2 --nodes-max=5\neksctl delete cluster --name=stashfin\n\neksctl create cluster --managed\n\nhttps://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html\n\nbrew tap weaveworks/tap\nbrew install weaveworks/tap/eksctl\nbrew upgrade eksctl && brew link --overwrite eksctl\neksctl version\n\nUsage: eksctl [command] [flags]\n\nCommands:\n    eksctl create                  Create resource(s)\n    eksctl get                     Get resource(s)\n    eksctl get cluster\n    eksctl update                  Update resource(s)\n    eksctl upgrade                 Upgrade resource(s)\n    eksctl delete                  Delete resource(s)\n    eksctl set                     Set values\n    eksctl unset                   Unset values\n    eksctl scale                   Scale resources(s)\n    eksctl drain                   Drain resource(s)\n    eksctl utils                   Various utils\n    eksctl completion              Generates shell completion scripts\n    eksctl version                 Output the version of eksctl\n    eksctl help                    Help about any command\n\neksctl utils write-kubeconfig --cluster=stashfin [--kubeconfig=<path>][--set-kubeconfig-context=<bool>]\n\neksctl get addons --cluster stashfin-prod-eks\neksctl delete addon --cluster stashfin-prod-eks --name vpc-cni\neksctl utils describe-addon-versions --cluster stashfin-prod-eks\neksctl create addon --name vpc-cni --version v1.10.4-eksbuild.2 --service-account-role-arn=<role-arn>\n\neksctl utils describe-addon-configuration --name vpc-cni --version v1.12.0-eksbuild.1\n\neksctl get addon --cluster stashfin-prod-eks --output yaml\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://eksctl.io"},"https://eksctl.io")),(0,s.kt)("h2",{id:"using-fargate-with-eks"},"Using Fargate with EKS"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://eksctl.io/usage/fargate"},"https://eksctl.io/usage/fargate")),(0,s.kt)("h2",{id:"reserve-some-memory-for-the-kubelet-and-the-system-namespaces-for-kubelet-oom"},"Reserve some memory for the kubelet and the system namespaces (for Kubelet OOM)"),(0,s.kt)("p",null,"Using Cloudformation you can simply set some extra arguments on the kubelet process:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'--kubelet-extra-args "--node-labels=cluster=${ClusterName}, nodegroup=${NodeGroupName} --kube-reserved memory=0.3Gi, ephemeral-storage=1Gi --system-reserved memory=0.2Gi, ephemeral-storage=1Gi --eviction-hard memory.available<200Mi, nodefs.available<10%"\n')),(0,s.kt)("p",null,"In that case you reserve 300MB for the kube-system namespace and 200 MB for the system itself."),(0,s.kt)("p",null,"In addition if there are less than 200 MB available the eviction option uses the oom_killer to kill pods on that node to avoid OOM errors on the Kubelet."),(0,s.kt)("h2",{id:"pvc"},"PVC"),(0,s.kt)("p",null,"Can be modified once in 6 hours"),(0,s.kt)("h2",{id:"optimizations"},"Optimizations"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://kubedex.com/90-days-of-aws-eks-in-production"},"https://kubedex.com/90-days-of-aws-eks-in-production")),(0,s.kt)("h2",{id:"tools"},"Tools"),(0,s.kt)("h2",{id:"kube2iam"},"kube2iam"),(0,s.kt)("p",null,"kube2iam provides different AWS IAM roles for pods running on Kubernetes"),(0,s.kt)("h2",{id:"iam-roles-for-service-accounts-irsa"},"IAM Roles for Service Accounts (IRSA)"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts"},"https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts")),(0,s.kt)("h2",{id:"max-number-of-pods"},"Max number of pods"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"max pods = (Number of network interfaces for the instance type \xd7 (the number of IP addressess per network interface - 1)) + 2")),(0,s.kt)("h2",{id:"pod-density-and-cost-eks-weaveworks"},"Pod Density and Cost EKS (WeaveWorks)"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/1MCdsmN7fWbebscGizcK6dAaPGS-8T_dYxWp0IdwkMKI/edit#gid=1549051942"},"https://docs.google.com/spreadsheets/d/1MCdsmN7fWbebscGizcK6dAaPGS-8T_dYxWp0IdwkMKI/edit#gid=1549051942")),(0,s.kt)("h2",{id:"cni-metrics-helper"},"CNI Metrics Helper"),(0,s.kt)("p",null,"The CNI metrics helper is a tool that you can use to scrape network interface and IP address information, aggregate metrics at the cluster level, and publish the metrics to Amazon CloudWatch."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/cni-metrics-helper.html"},"https://docs.aws.amazon.com/eks/latest/userguide/cni-metrics-helper.html")))}m.isMDXComponent=!0}}]);