"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[54696],{603905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>f});var n=a(667294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function m(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var l=n.createContext({}),i=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):m(m({},e),t)),a},c=function(t){var e=i(t.components);return n.createElement(l.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},h=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),p=i(a),h=r,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return a?n.createElement(f,m(m({ref:e},c),{},{components:a})):n.createElement(f,m({ref:e},c))}));function f(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,m=new Array(o);m[0]=h;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[p]="string"==typeof t?t:r,m[1]=s;for(var i=2;i<o;i++)m[i]=a[i];return n.createElement.apply(null,m)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},790076:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>m,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=a(487462),r=(a(667294),a(603905));const o={},m="Trasaction / Commit / Rollback",s={unversionedId:"databases/sql-databases/mysql/transaction-commit-rollback",id:"databases/sql-databases/mysql/transaction-commit-rollback",title:"Trasaction / Commit / Rollback",description:"- 13.3 Transactional and Locking Statements",source:"@site/docs/databases/sql-databases/mysql/transaction-commit-rollback.md",sourceDirName:"databases/sql-databases/mysql",slug:"/databases/sql-databases/mysql/transaction-commit-rollback",permalink:"/databases/sql-databases/mysql/transaction-commit-rollback",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/sql-databases/mysql/transaction-commit-rollback.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL / MySQL Tools",permalink:"/databases/sql-databases/mysql/sql-mysql-tools"},next:{title:"Normalization",permalink:"/databases/sql-databases/normalization"}},l={},i=[],c={toc:i},p="wrapper";function d(t){let{components:e,...a}=t;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"trasaction--commit--rollback"},"Trasaction / Commit / Rollback"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"13.3 Transactional and Locking Statements"),(0,r.kt)("li",{parentName:"ul"},"13.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements"),(0,r.kt)("li",{parentName:"ul"},"13.3.2 Statements That Cannot Be Rolled Back"),(0,r.kt)("li",{parentName:"ul"},"13.3.3 Statements That Cause an Implicit Commit"),(0,r.kt)("li",{parentName:"ul"},"13.3.4 SAVEPOINT, ROLLBACK TO SAVEPOINT, and RELEASE SAVEPOINT Statements"),(0,r.kt)("li",{parentName:"ul"},"13.3.5 LOCK TABLES and UNLOCK TABLES Statements"),(0,r.kt)("li",{parentName:"ul"},"13.3.6 SET TRANSACTION Statement")),(0,r.kt)("p",null,"In InnoDB, all user activity occurs inside a transaction. If ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit"},"autocommit")," mode is enabled, each SQL statement forms a single transaction on its own. By default, MySQL starts the session for each new connection with ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit"},"autocommit")," enabled, so MySQL does a commit after each SQL statement if that statement did not return an error. If a statement returns an error, the commit or rollback behavior depends on the error. See ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-error-handling.html"},'Section15.21.4, "InnoDB Error Handling"'),"."),(0,r.kt)("p",null,"A session that has ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit"},"autocommit")," enabled can perform a multiple-statement transaction by starting it with an explicit ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"START TRANSACTION")," or ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"BEGIN")," statement and ending it with a ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"COMMIT")," or ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"ROLLBACK")," statement. See ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},'Section13.3.1, "START TRANSACTION, COMMIT, and ROLLBACK Statements"'),"."),(0,r.kt)("p",null,"If ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit"},"autocommit")," mode is disabled within a session withSET autocommit = 0, the session always has a transaction open. A ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"COMMIT")," or ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"ROLLBACK")," statement ends the current transaction and a new one starts."),(0,r.kt)("p",null,"If a session that has ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit"},"autocommit")," disabled ends without explicitly committing the final transaction, MySQL rolls back that transaction."),(0,r.kt)("p",null,"Some statements implicitly end a transaction, as if you had done a ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"COMMIT")," before executing the statement. For details, see ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html"},'Section13.3.3, "Statements That Cause an Implicit Commit"'),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"COMMIT")," means that the changes made in the current transaction are made permanent and become visible to other sessions. A ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"ROLLBACK")," statement, on the other hand, cancels all modifications made by the current transaction. Both ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"COMMIT")," and ",(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/commit.html"},"ROLLBACK")," release allInnoDBlocks that were set during the current transaction."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html"},"https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html")))}d.isMDXComponent=!0}}]);