"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[33768],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,m=c["".concat(p,".").concat(d)]||c[d]||h[d]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},803525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(487462),r=(n(667294),n(603905));const o={},i="Python Versions",l={unversionedId:"python/advanced/python-versions",id:"python/advanced/python-versions",title:"Python Versions",description:"Python2 vs Python3",source:"@site/docs/python/advanced/python-versions.md",sourceDirName:"python/advanced",slug:"/python/advanced/python-versions",permalink:"/python/advanced/python-versions",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/advanced/python-versions.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Tricks",permalink:"/python/advanced/python-tricks"},next:{title:"Super",permalink:"/python/advanced/super"}},p={},s=[{value:"Python2 vs Python3",id:"python2-vs-python3",level:2},{value:"New in python3.7",id:"new-in-python37",level:2},{value:"Why to move to Python3.7",id:"why-to-move-to-python37",level:2},{value:"Libraries for migrations",id:"libraries-for-migrations",level:2},{value:"Must use Python 3 Features",id:"must-use-python-3-features",level:2},{value:"Python 3.8",id:"python-38",level:2},{value:"Assignment Expression (Walrus operator)",id:"assignment-expression-walrus-operator",level:2},{value:"Positional Only Arguments",id:"positional-only-arguments",level:2},{value:"Runtime Audit Hooks",id:"runtime-audit-hooks",level:2},{value:"Python 3.9",id:"python-39",level:2}],u={toc:s},c="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-versions"},"Python Versions"),(0,r.kt)("h2",{id:"python2-vs-python3"},"Python2 vs Python3"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python 2 automatically performs integer arithmetic if both operands are integers")),(0,r.kt)("h2",{id:"new-in-python37"},"New in python3.7"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"contextvars"),(0,r.kt)("li",{parentName:"ol"},"dataclasses"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"ordered dictionaries by default")," (OrderedDict",(0,r.kt)("strong",{parentName:"li"},"preserves the order"),"in which the keys are inserted. A regular dict doesn't track the insertion order, and iterating it gives the values in an arbitrary order. By contrast, the order the items are inserted is remembered by OrderedDict.)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/whatsnew/3.7.html"},"https://docs.python.org/3/whatsnew/3.7.html")),(0,r.kt)("h2",{id:"why-to-move-to-python37"},"Why to move to Python3.7"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fast"),(0,r.kt)("li",{parentName:"ul"},"Data Classes"),(0,r.kt)("li",{parentName:"ul"},"f-strings"),(0,r.kt)("li",{parentName:"ul"},"dropping support"),(0,r.kt)("li",{parentName:"ul"},"django support dropping for advanced versions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"type annotations"))),(0,r.kt)("h2",{id:"libraries-for-migrations"},"Libraries for migrations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Six--")," best for adding Python 3 compatibility to your existing Python 2 code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"2to3--")," best for converting Python 2 code to Python 3 code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Python-future--")," best for those that want to focus on writing python 3 code going forward while ensuring backward compatibility with Python 2.")),(0,r.kt)("h2",{id:"must-use-python-3-features"},"Must use Python 3 Features"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"f-strings (3.6+)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Pathlib (3.4+)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Type hinting (3.5+)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def sentence_has_animal(sentence: str) -> bool:\n    return "animal" in sentence\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enumerations (3.4+)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Built-in LRU cache (3.2+)")),(0,r.kt)("p",{parentName:"li"},"Using decorator ",(0,r.kt)("inlineCode",{parentName:"p"},"@lru_cache(maxsize=512)"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Extended iterable unpacking (3.0+)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Data Classes (3.7+)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Implicit namespace packages (3.3+)"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://datawhatnow.com/things-you-are-probably-not-using-in-python-3-but-should"},"https://datawhatnow.com/things-you-are-probably-not-using-in-python-3-but-should")),(0,r.kt)("h2",{id:"python-38"},"Python 3.8"),(0,r.kt)("h2",{id:"assignment-expression-walrus-operator"},"Assignment Expression (Walrus operator)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"val = func1()\nif not val:\n    logging.warning('func1 no good')\n    val = func2()\n    if not val:\n        logging.warning('func2 no good')\n        val = func3()\nif not val:\n    raise ValueError('All went south')\n\n# Do something with val after\n")),(0,r.kt)("p",null,"After upgrading to 3.8, you could refactor it to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"if not (val := func1()):\n    logging.warning('func1 no good')\n    if not (val := func2()):\n        logging.warning('func2 no good')\n        if not (val := func3()):\n            raise ValueError('All went south')\n# Do something with val after\n")),(0,r.kt)("h2",{id:"positional-only-arguments"},"Positional Only Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def func(a, /):\n    pass\n\nfunc('foobar')\nfunc(a='foobar') # This raises\n")),(0,r.kt)("h2",{id:"runtime-audit-hooks"},"Runtime Audit Hooks"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/whatsnew/3.8.html"},"https://docs.python.org/3/whatsnew/3.8.html")),(0,r.kt)("h2",{id:"python-39"},"Python 3.9"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Dictionary Union Operators"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = {1: 'a', 2: 'b', 3: 'c'}\nb = {4: 'd', 5: 'e'}\nc = a | b\nprint(c)\n[Out]: {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}\n\na = {1: 'a', 2: 'b', 3: 'c', 6: 'in both'}\nb = {4: 'd', 5: 'e', 6: 'but different'}\nprint(a | b)\n[Out]: {1: 'a', 2: 'b', 3: 'c', 6: 'but different', 4: 'd', 5: 'e'}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Type Hinting")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Two New String Methods"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"Hello world".removeprefix("He")\n"Hello world".removesuffix("ld")\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"New Python Parser"),(0,r.kt)("p",{parentName:"li"},"  The new parser, based on PEG, will allow the Python developers significantly more flexibility"))))}h.isMDXComponent=!0}}]);