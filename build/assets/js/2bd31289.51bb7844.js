"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4817],{603905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=i,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(487462),i=(n(667294),n(603905));const o={},a="6. Text Processing Services",l={unversionedId:"python/documentation/06-text-processing-services",id:"python/documentation/06-text-processing-services",title:"6. Text Processing Services",description:"6.1. string - Common string operations",source:"@site/docs/python/documentation/06-text-processing-services.md",sourceDirName:"python/documentation",slug:"/python/documentation/06-text-processing-services",permalink:"/python/documentation/06-text-processing-services",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/documentation/06-text-processing-services.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4. Built-in Types",permalink:"/python/documentation/04-built-in-types"},next:{title:"7. Binary Data Services",permalink:"/python/documentation/07-binary-data-services"}},c={},s=[{value:"6.3 difflib",id:"63-difflib",level:2},{value:"6.5. unicodedata",id:"65-unicodedata",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"6-text-processing-services"},"6. Text Processing Services"),(0,i.kt)("p",null,"6.1. string - Common string operations"),(0,i.kt)("p",null,"6.2. re - Regular expression operations"),(0,i.kt)("p",null,"6.3. difflib - Helpers for computing deltas"),(0,i.kt)("p",null,"6.4. textwrap - Text wrapping and filling"),(0,i.kt)("p",null,"6.5. unicodedata - Unicode Database"),(0,i.kt)("p",null,"6.6. stringprep - Internet String Preparation"),(0,i.kt)("p",null,"6.7. readline - GNU readline interface"),(0,i.kt)("p",null,"6.8. rlcompleter - Completion function for GNU readline"),(0,i.kt)("h2",{id:"63-difflib"},"6.3 difflib"),(0,i.kt)("p",null,"Helper for computing deltas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"class.difflib.SequenceMatcher")),(0,i.kt)("p",null,"SequenceMatcher(isjunk=None,a='',b='',autojunk=True)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"class.difflib.Differ"),(0,i.kt)("li",{parentName:"ul"},"class.difflib.HtmlDiff"),(0,i.kt)("li",{parentName:"ul"},"difflib.get_close_matches(word, possibilities, n=3. cutoff=0.6)")),(0,i.kt)("h2",{id:"65-unicodedata"},"6.5. unicodedata"),(0,i.kt)("p",null,"Using theunicodedataPython module it's easy to normalize anyunicodedata strings (remove accents etc):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import unicodedata\n\ndata = u'\xefnv\xe9nt\xecv\xe9'\nnormal = unicodedata.normalize\n('NFKD', data).\nencode('ASCII', 'ignore')\nprint(normal)\n\nThe output will be:\n\nb'inventive'\n")),(0,i.kt)("p",null,"The NFKD stands for Normalization Form Compatibility Decomposition, and this is where characters are decomposed by compatibility, also multiple combining characters are arranged in a specific order."))}d.isMDXComponent=!0}}]);