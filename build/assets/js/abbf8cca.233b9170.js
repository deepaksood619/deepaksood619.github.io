"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39912],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,k=c["".concat(i,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},270888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(487462),a=(n(667294),n(603905));const l={},o="api-resources",s={unversionedId:"devops/kubernetes/api-resources",id:"devops/kubernetes/api-resources",title:"api-resources",description:"Namespaces",source:"@site/docs/devops/kubernetes/api-resources.md",sourceDirName:"devops/kubernetes",slug:"/devops/kubernetes/api-resources",permalink:"/devops/kubernetes/api-resources",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/devops/kubernetes/api-resources.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/devops/kubernetes/"},next:{title:"Architecture",permalink:"/devops/kubernetes/architecture"}},i={},p=[{value:"Namespaces",id:"namespaces",level:3},{value:"Pods",id:"pods",level:3},{value:"StatefulSets",id:"statefulsets",level:3},{value:"ReplicaSet",id:"replicaset",level:3},{value:"Roles",id:"roles",level:3},{value:"Ingresses and Load Balancing",id:"ingresses-and-load-balancing",level:3},{value:"Deployments",id:"deployments",level:3},{value:"Services",id:"services",level:3},{value:"DaemonSet",id:"daemonset",level:3},{value:"Jobs and Cronjobs",id:"jobs-and-cronjobs",level:3},{value:"Extension Points",id:"extension-points",level:3},{value:"Custom Resource Definition (CRD)",id:"custom-resource-definition-crd",level:3},{value:"Container Runtime Interface (CRI)",id:"container-runtime-interface-cri",level:3},{value:"Container Network Interface (CNI)",id:"container-network-interface-cni",level:3},{value:"Container Storage Interface (CSI)",id:"container-storage-interface-csi",level:3},{value:"Resource Types",id:"resource-types",level:3},{value:"Outline",id:"outline",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-resources"},"api-resources"),(0,a.kt)("h3",{id:"namespaces"},"Namespaces"),(0,a.kt)("p",null,"Kubernetes includes a means to segment a single physical cluster into separate logical clusters using namespacing."),(0,a.kt)("h3",{id:"pods"},"Pods"),(0,a.kt)("p",null,"Whatever the runtime, Kubernetes fundamentally manages a logical grouping of one or more containers called a pod."),(0,a.kt)("h3",{id:"statefulsets"},"StatefulSets"),(0,a.kt)("p",null,"Kubernetes controllers for managing workloads that require proper management of state."),(0,a.kt)("h3",{id:"replicaset"},"ReplicaSet"),(0,a.kt)("p",null,"One of the control loops available in Kubernetes that ensures that the desired number of pods are running."),(0,a.kt)("h3",{id:"roles"},"Roles"),(0,a.kt)("p",null,"Kubernetes has several access control schemes, and users should always default to role-based access controls to maximize security."),(0,a.kt)("h3",{id:"ingresses-and-load-balancing"},"Ingresses and Load Balancing"),(0,a.kt)("p",null,'In order to expose a service outside a cluster, a user should set up an ingress for layer 7 or define the configuration of a layer 4 load balancer using "type=loadbalancer" in the service definition.'),(0,a.kt)("h3",{id:"deployments"},"Deployments"),(0,a.kt)("p",null,"The declarative controller in Kubernetes that manages replicasets of pods."),(0,a.kt)("h3",{id:"services"},"Services"),(0,a.kt)("p",null,"Defined by a label, a Kubernetes service is a logical layer that provides IP/DNS/etc. persistence to dynamic pods."),(0,a.kt)("h3",{id:"daemonset"},"DaemonSet"),(0,a.kt)("p",null,"A Kubernetes construct that enables users to run a pod on every node in the cluster."),(0,a.kt)("h3",{id:"jobs-and-cronjobs"},"Jobs and Cronjobs"),(0,a.kt)("p",null,"Kubernetes includes the logic to run jobs, processes that run to completion, and cronjobs - processes that run at specific intervals and run to completion."),(0,a.kt)("h3",{id:"extension-points"},"Extension Points"),(0,a.kt)("p",null,"Kubernetes has a number of points to extend its core functionality."),(0,a.kt)("h3",{id:"custom-resource-definition-crd"},"Custom Resource Definition (CRD)"),(0,a.kt)("p",null,"CRD allows users to extend Kubernetes with custom APIs for different objects beyond the standard ones supported by Kubernetes."),(0,a.kt)("h3",{id:"container-runtime-interface-cri"},"Container Runtime Interface (CRI)"),(0,a.kt)("p",null,"CRI is a plugin API that enables Kubernetes to support other container runtimes beyond Docker and Containerd."),(0,a.kt)("h3",{id:"container-network-interface-cni"},"Container Network Interface (CNI)"),(0,a.kt)("p",null,"CNI gives users a choice of network overlay that can be used with Kubernetes to add SDN features."),(0,a.kt)("h3",{id:"container-storage-interface-csi"},"Container Storage Interface (CSI)"),(0,a.kt)("p",null,"CSI empowers users to support different storage systems through a driver model."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/container-storage-interface/spec/blob/master/spec"},"Container Storage Interface"),"(CSI) defines a standard interface for container orchestration systems (like Kubernetes) to expose arbitrary storage systems to their container workloads."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/container-storage-interface/spec/blob/master/spec"},"https://github.com/container-storage-interface/spec/blob/master/spec")),(0,a.kt)("h3",{id:"resource-types"},"Resource Types"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Resource type")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Abbreviated alias")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"apiservices"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"certificatesigningrequests"),(0,a.kt)("td",{parentName:"tr",align:null},"csr")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"clusters"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"clusterrolebindings"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"clusterroles"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"componentstatuses"),(0,a.kt)("td",{parentName:"tr",align:null},"cs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"configmaps"),(0,a.kt)("td",{parentName:"tr",align:null},"cm")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"controllerrevisions"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cronjobs"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"customresourcedefinition"),(0,a.kt)("td",{parentName:"tr",align:null},"crd")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"daemonsets"),(0,a.kt)("td",{parentName:"tr",align:null},"ds")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"deployments"),(0,a.kt)("td",{parentName:"tr",align:null},"deploy")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"endpoints"),(0,a.kt)("td",{parentName:"tr",align:null},"ep")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"events"),(0,a.kt)("td",{parentName:"tr",align:null},"ev")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ingresses"),(0,a.kt)("td",{parentName:"tr",align:null},"ing")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"jobs"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"limitranges"),(0,a.kt)("td",{parentName:"tr",align:null},"limits")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"namespaces"),(0,a.kt)("td",{parentName:"tr",align:null},"ns")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"networkpolicies"),(0,a.kt)("td",{parentName:"tr",align:null},"netpol")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"nodes"),(0,a.kt)("td",{parentName:"tr",align:null},"no")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"persistentvolumeclaims"),(0,a.kt)("td",{parentName:"tr",align:null},"pvc")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"persistentvolumes"),(0,a.kt)("td",{parentName:"tr",align:null},"pv")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"poddisruptionbudget"),(0,a.kt)("td",{parentName:"tr",align:null},"pdb")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"podpreset"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pods"),(0,a.kt)("td",{parentName:"tr",align:null},"po")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"podsecuritypolicies"),(0,a.kt)("td",{parentName:"tr",align:null},"psp")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"podtemplates"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"replicasets"),(0,a.kt)("td",{parentName:"tr",align:null},"rs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"replicationcontrollers"),(0,a.kt)("td",{parentName:"tr",align:null},"rc")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resourcequotas"),(0,a.kt)("td",{parentName:"tr",align:null},"quota")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rolebindings"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"roles"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"secrets"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"serviceaccounts"),(0,a.kt)("td",{parentName:"tr",align:null},"sa")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"services"),(0,a.kt)("td",{parentName:"tr",align:null},"svc")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"statefulsets"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"storageclasses"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h3",{id:"outline"},"Outline"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- API Version: most resource type covered in the exam belongs to thecoregroup and are currently in the versionv1. Several special cases are listed below.\n  - v1: Pod, Service, ConfigMap, Secret, PersistentVolumeClaim, Namespace, ServiceAccount, Node\n  - apps/v1: Deployment\n  - batch/v1: Job\n  - batch/v1beta1: CronJob\n  - networking.k8s.io/v1: NetworkPolicy\n- Object Metadata\n  - name:namefield is required and must be unique within a namespace.\n  - labels\n  - annotations: not queryable\n  - namespace\n- Resource Type\n  - Pod\n    - affinity: nodeAffinity, podAffinity\n      - preferredDuringSchedulingIgnoredDuringExecution\n      - requiredDuringSchedulingIgnoredDuringExecution\n    - containers\n      - args: override Docker images's CMD\n      - command: override Docker images's Entrypoint\n      - env\n        - name/value\n        - name/valueFrom\n          - configMapKeyRef: pull env from ConfigMap\n            - name/key\n          - secretKeyRef: pull env from Secret\n      - envFrom\n        - configMapRef: convert all items from the specified ConfigMap to environment variables\n          - name\n        - secretRef: convert all items from the specified Secret to environment variables\n      - image\n      - imagePullPolicy\n        - Always (default)\n        - Never\n        - ifNotPresent\n      - probe: livenessProbe, readinessProbe\n        - initialDelaySeconds\n        - periodSeconds\n        - timeoutSeconds\n        - type:\n          - exec: run a command\n          - httpGet: check a http endpoint\n          - tcpSocket: check a tcp socket\n      - ports\n        - containerPort\n        - hostPort\n        - protocol\n      - resources: limits, requests\n        - cpu: e.g. 0.1, 1, 100m, etc.\n        - memory: e.g. 128974848, 129e6, 129M, 123Mi, etc.\n      - securityContext\n        - capabilities: add or drop capabilities. e.g. SYS_ADMIN, AUDIT_CONTROL, etc.\n        - runAsGroup\n        - runAsUser\n      - volumeMounts\n    - restartPolicy\n      - Always\n      - OnFailure\n      - Never\n    - securityContext\n      - runAsGroup: a valid GID\n      - runAsUser: a valid UID\n    - ServiceAccountName\n    - tolerations\n      - key\n      - operator\n        - Exists\n        - Equal\n      - value\n    - volumes\n      - configMap\n        - name\n        - items\n          - key/path\n      - emptyDir\n      - hostPath\n      - persistentVolumeClaim\n      - secret\n  - Deployment\n    - replicas\n    - selector\n      - matchExpressions\n      - matchLabels\n    - strategy: Recreate or RollingUpdate\n    - Pod Template\n  - Job\n    - activeDeadlineSeconds: job timeout seconds\n    - backoffLimit: number of retries\n    - completions: the desired number of successfully finished pods the job should be run with\n    - parallelism: the maximum desired number of pods the job should run at any given time\n    - selector: matchExpressions or matchLabels\n    - Job Pod Template: restartPolicy in the pod spec should beNever.\n  - CronJob\n    - Job Template\n    - schedule\n  - Service\n    - Types\n      - ClusterIP\n      - NodePort\n    - Service Port\n      - nodePort: set only when type=NodePort\n      - protocol: TCP or UDP\n      - port\n      - targetPort\n  - ConfigMap\n  - Secret: values in the Secret must be base64 encoded: `echo -n \"<value>\" | base64`\n  - Node\n    - taints\n      - key\n      - value\n      - effect\n        - NoSchedule\n        - PreferNoSchedule\n        - NoExecute\n  - PersistentVolumeClaim\n    - accessModes\n      - ReadWriteOnce\n      - ReadOnlyMany\n      - ReadWriteMany\n    - resources: limits, requests\n      - storage: e.g. 8Gi, 128M, etc.\n    - selector: matchExpressions or matchLabels\n    - storageClassName\n  - Namespace\n  - ServiceAccount\n  - NetworkPolicy\n    - policyTypes:\n      - Ingress\n      - Egress\n    - podSelector: matchExpressions or matchLabels\n    - ingress\n    - egress\n")))}d.isMDXComponent=!0}}]);