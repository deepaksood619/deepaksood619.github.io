"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[29087],{603905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>h});var n=t(667294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},m=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=a,h=u["".concat(s,".").concat(p)]||u[p]||d[p]||i;return t?n.createElement(h,o(o({ref:r},m),{},{components:t})):n.createElement(h,o({ref:r},m))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},396855:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(487462),a=(t(667294),t(603905));const i={},o="Binary Search",l={unversionedId:"algorithms/searching-sorting/binary-search",id:"algorithms/searching-sorting/binary-search",title:"Binary Search",description:"Finding the index of first element in A which is not less than x is called lowerbound query in C++ STL. The answer of our first query isn-lowerbound(x)",source:"@site/docs/algorithms/searching-sorting/binary-search.md",sourceDirName:"algorithms/searching-sorting",slug:"/algorithms/searching-sorting/binary-search",permalink:"/algorithms/searching-sorting/binary-search",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/searching-sorting/binary-search.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3-way string radix quicksort",permalink:"/algorithms/searching-sorting/3-way-string-radix-quicksort"},next:{title:"Convex Hull",permalink:"/algorithms/searching-sorting/convex-hull"}},s={},c=[{value:"get count of all elements that are smaller or equal to given key",id:"get-count-of-all-elements-that-are-smaller-or-equal-to-given-key",level:2}],m={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-search"},"Binary Search"),(0,a.kt)("p",null,"Finding the index of first element in ",(0,a.kt)("em",{parentName:"p"},"A")," which is not less than ",(0,a.kt)("em",{parentName:"p"},"x")," is called lower_bound query in C++ STL. The answer of our first query isn-lower_bound(x)"),(0,a.kt)("p",null,"Similarly, finding the index of first element in ",(0,a.kt)("em",{parentName:"p"},"A")," which is greater than ",(0,a.kt)("em",{parentName:"p"},"x")," is called upper_bound query in C++ STL. The answer of our second query isn-upper_bound(x)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int lower_bound(int start,int end,int item)\n{\n    while(start<end)\n    {\n        int mid=(start+end)>>1;\n        if(arr[mid]>=item)\n            end=mid;\n        else start=mid+1;\n    }\n    return start;\n}\nint upper_bound(int start,int end,int item)\n{\n    while(start<end)\n    {\n        int mid=(start+end)>>1;\n        if(arr[mid]<=item)\n            start=mid+1;\n        else end=mid;\n    }\n    return start;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/monk-and-search-2/editorial"},"https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/monk-and-search-2/editorial")),(0,a.kt)("h2",{id:"get-count-of-all-elements-that-are-smaller-or-equal-to-given-key"},"get count of all elements that are smaller or equal to given key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def binarySearchCount(arr, left, n, key):\n    right = n\n    mid = 0\n    while (left < right):\n        mid = (right + left)//2\n\n        # Check if key is present in array\n        if (arr[mid] == key):\n            # If duplicates are present it returns the position of last element\n            while (mid + 1<n and arr[mid + 1] == key):\n                 mid+= 1\n            break\n\n        # If key is smaller, ignore right half\n        elif (arr[mid] > key):\n            right = mid\n\n        # If key is greater, ignore left half\n        else:\n            left = mid + 1\n\n    # If key is not found in array then it will be before mid\n    while (mid > -1 and  arr[mid] > key):\n        mid-= 1\n\n    # Return mid + 1 because of 0-based indexing of array\n    return mid + 1\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/count-smaller-equal-elements-sorted-array"},"https://www.geeksforgeeks.org/count-smaller-equal-elements-sorted-array")))}d.isMDXComponent=!0}}]);