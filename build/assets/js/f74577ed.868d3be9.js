"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[68416],{603905:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>f});var n=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},g=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return r?n.createElement(f,l(l({ref:t},g),{},{components:r})):n.createElement(f,l({ref:t},g))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},465770:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(487462),o=(r(667294),r(603905));const a={},l="Orthogonal rectangle intersection search",i={unversionedId:"algorithms/general/orthogonal-rectangle-intersection-search",id:"algorithms/general/orthogonal-rectangle-intersection-search",title:"Orthogonal rectangle intersection search",description:"Goal: find all intersections among a set of N orthogonal rectangles",source:"@site/docs/algorithms/general/orthogonal-rectangle-intersection-search.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/orthogonal-rectangle-intersection-search",permalink:"/algorithms/general/orthogonal-rectangle-intersection-search",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/orthogonal-rectangle-intersection-search.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"N Queens Problem",permalink:"/algorithms/general/n-queens-problem"},next:{title:"Prime Factorization",permalink:"/algorithms/general/prime-factorization"}},c={},s=[{value:"Proof",id:"proof",level:3}],g={toc:s},p="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"orthogonal-rectangle-intersection-search"},"Orthogonal rectangle intersection search"),(0,o.kt)("p",null,"Goal: find all intersections among a set of N orthogonal rectangles"),(0,o.kt)("p",null,"Sweep-line algorithm (Sweep vertical line from left to right)"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:r(285507).Z,width:"1140",height:"890"})),(0,o.kt)("p",null,"Proposition: Sweep line algorithm takes time proportional to N log N + R log N to find R intersections among a set of N rectangles"),(0,o.kt)("h3",{id:"proof"},"Proof"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Put x-coordinates on a PQ (or sort) - N log N"),(0,o.kt)("li",{parentName:"ul"},"Insert y-intervals into ST - N log N"),(0,o.kt)("li",{parentName:"ul"},"Delete y-intervals from ST - N log N"),(0,o.kt)("li",{parentName:"ul"},"Interval searches for y-intervals - N log N + R log N")),(0,o.kt)("p",null,"Bottom line: Sweep line reduces 2d orthogonal rectangle intersection search to 1 d interval search"))}u.isMDXComponent=!0},285507:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Orthogonal-rectangle-intersection-search-image1-cebdd894f404d6b7336f516a4085027b.jpg"}}]);