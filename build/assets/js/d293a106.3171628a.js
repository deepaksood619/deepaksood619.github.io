"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[28729],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=a,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},433852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(487462),a=(n(667294),n(603905));const o={},i="Iterators",l={unversionedId:"python/python-intro/iterators",id:"python/python-intro/iterators",title:"Iterators",description:"An iterator is an object that can be iterated (looped) upon. It is used to abstract a container of data to make it behave like an iterable object. You probably already use a few iterable objects every day: strings, lists, and dictionaries to name a few.",source:"@site/docs/python/python-intro/iterators.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/iterators",permalink:"/python/python-intro/iterators",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/iterators.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Input Output Template",permalink:"/python/python-intro/input-output-template"},next:{title:"Keywords",permalink:"/python/python-intro/keywords"}},s={},p=[{value:"References",id:"references",level:2}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"iterators"},"Iterators"),(0,a.kt)("p",null,"An ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Iterator"},"iterator")," is an object that can be iterated (looped) upon. It is used to abstract a container of data to make it behave like an iterable object. You probably already use a few iterable objects every day: strings, lists, and dictionaries to name a few."),(0,a.kt)("p",null,"An iterator is defined by a class that implements the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/c-api/iter.html"},"Iterator Protocol"),". This protocol looks for two methods within the class: ",(0,a.kt)("inlineCode",{parentName:"p"},"__iter__")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"__next__"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Iterator save memory space"),(0,a.kt)("li",{parentName:"ul"},"Iterators don't compute the value of each item when instantiated. They only compute it when you ask for it. This is known as ",(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Lazy_evaluation"},"lazy evaluation"),". Lazy evaluation is useful when you have a very large data set to compute. It allows you to start using the data immediately, while the whole data set is being computed.")),(0,a.kt)("p",null,"Ex - Let's say we want to get all the prime numbers that are smaller than a maximum number."),(0,a.kt)("p",null,"We first define the function that checks if a number is prime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def check_prime(number):\n    for divisor in range(2, int(number ** 0.5) + 1):\n        if number % divisor == 0:\n            return False\n        return True\n")),(0,a.kt)("p",null,"Then, we define the iterator class that will include the ",(0,a.kt)("inlineCode",{parentName:"p"},"__iter__")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"__next__")," methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Primes:\n    def __init__(self, max):\n        self.max = max\n        self.number = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.number += 1\n        if self.number >= self.max:\n            raise StopIteration\n        elif check_prime(self.number):\n            return self.number\n        else:\n            return self.__next__()\n")),(0,a.kt)("p",null,"Primes is instantiated with a maximum value. If the next prime is greater than themax, the iterator will raise aStopIterationexception, which ends the iterator."),(0,a.kt)("p",null,"When we request the next element in the iterator, it will incrementnumberby 1 and check if it's a prime number. If it's not, it will call",(0,a.kt)("strong",{parentName:"p"},"next"),"again untilnumberis prime. Once it is, the iterator returns the number."),(0,a.kt)("p",null,"By using an iterator, we're not creating a list of prime numbers in our memory. Instead, we're generating the next prime number every time we request for it."),(0,a.kt)("p",null,"Let's try it out:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"primes = Primes(100000000000)\nprint(primes)\nfor x in primes:\nprint(x)\n---------\n<__main__.Primes object at 0x1021834a8>\n2\n3\n5\n7\n11\n...\n")),(0,a.kt)("p",null,"Every iteration of thePrimesobject calls ",(0,a.kt)("inlineCode",{parentName:"p"},"__next__")," to generate the next prime number."),(0,a.kt)("p",null,"Iterators can only be iterated over once.If you try to iterate overprimes again, no value will be returned. It will behave like an empty list."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888"},"https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888")))}c.isMDXComponent=!0}}]);