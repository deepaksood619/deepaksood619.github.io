"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[20492],{603905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||i;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},111195:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(487462),a=(r(667294),r(603905));const i={},o="Reflection",s={unversionedId:"languages/java/reflection",id:"languages/java/reflection",title:"Reflection",description:"Reflection is an api used to examine or modify the behavior of methods, classes or interfaces at runtime.",source:"@site/docs/languages/java/reflection.md",sourceDirName:"languages/java",slug:"/languages/java/reflection",permalink:"/languages/java/reflection",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/java/reflection.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Questions",permalink:"/languages/java/questions"},next:{title:"Spring",permalink:"/languages/java/spring"}},c={},l=[{value:"Java Reflectionis a<em>process of examining or modifying the run time behavior of a class at run time</em>",id:"java-reflectionis-aprocess-of-examining-or-modifying-the-run-time-behavior-of-a-class-at-run-time",level:2}],p={toc:l},u="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reflection"},"Reflection"),(0,a.kt)("p",null,"Reflection is an api used to examine or modify the behavior of methods, classes or interfaces at runtime."),(0,a.kt)("p",null,"Java Reflection API"),(0,a.kt)("h2",{id:"java-reflectionis-aprocess-of-examining-or-modifying-the-run-time-behavior-of-a-class-at-run-time"},"Java Reflectionis a",(0,a.kt)("em",{parentName:"h2"},"process of examining or modifying the run time behavior of a class at run time")),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Computer_science"},"computer science"),", ",(0,a.kt)("strong",{parentName:"p"},"reflection")," is the ability of a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Computer_program"},"computer program")," to examine, ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Introspection_(computer_science)"},"introspect"),", and modify its own structure and behavior at ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)"},"runtime")),(0,a.kt)("p",null,"Reflection is the ability of classes and objects to examine their own constructors, fields, methods, and so on. It is used usually for backward compatibility, to check if a given method is available for a particular OS version."))}f.isMDXComponent=!0}}]);