"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[72243],{603905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>u});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),g=p(r),d=n,u=g["".concat(s,".").concat(d)]||g[d]||m[d]||i;return r?a.createElement(u,o(o({ref:t},l),{},{components:r})):a.createElement(u,o({ref:t},l))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[g]="string"==typeof e?e:n,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},965142:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=r(487462),n=(r(667294),r(603905));const i={},o="Behavioral - Strategy",c={unversionedId:"computer-science/programming-paradigms/behavioral-strategy",id:"computer-science/programming-paradigms/behavioral-strategy",title:"Behavioral - Strategy",description:"image",source:"@site/docs/computer-science/programming-paradigms/behavioral-strategy.md",sourceDirName:"computer-science/programming-paradigms",slug:"/computer-science/programming-paradigms/behavioral-strategy",permalink:"/computer-science/programming-paradigms/behavioral-strategy",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/computer-science/programming-paradigms/behavioral-strategy.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Behavioral - State",permalink:"/computer-science/programming-paradigms/behavioral-state"},next:{title:"Concurrency - Reactor",permalink:"/computer-science/programming-paradigms/concurrency-reactor"}},s={},p=[],l={toc:p},g="wrapper";function m(e){let{components:t,...i}=e;return(0,n.kt)(g,(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"behavioral---strategy"},"Behavioral - Strategy"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:r(576175).Z,width:"1410",height:"1069"})),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:r(593571).Z,width:"1410",height:"1069"})),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:r(514870).Z,width:"1410",height:"1069"})),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:r(383202).Z,width:"1410",height:"1069"})),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:r(600322).Z,width:"1570",height:"1190"})),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:r(261455).Z,width:"1410",height:"1069"}),"\nA strategy is a behavioral design pattern that defines a family of similar algorithms and places each of them in its own class, after which the algorithms can be interchanged right during the execution of the program.\nPros:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'"hot" algorithm replacement on the fly;')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"the algorithms' code and data isolation from other classes."))),(0,n.kt)("p",null,"Cons:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"complicates the program due to the additional classes.",(0,n.kt)("strong",{parentName:"li"},"References"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://py.checkio.org/blog/design-patterns-part-1"},"https://py.checkio.org/blog/design-patterns-part-1")))}m.isMDXComponent=!0},576175:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Behavioral-Strategy-image1-f344df7ddf17874edbc665df226c7f8d.jpg"},593571:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Behavioral-Strategy-image2-78e5a151d85db3dfe235924947e2fe6b.jpg"},514870:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Behavioral-Strategy-image3-873f8a77a8ea432e8b484407ea14993e.jpg"},383202:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Behavioral-Strategy-image4-cf2cc1c46ad604b9d2520abe8c771a74.jpg"},600322:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Behavioral-Strategy-image5-88bc793856952a181ef2a6cc1d68e4c3.jpg"},261455:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Behavioral-Strategy-image6-b628c9871384ae0552be6c53edd370b2.jpg"}}]);