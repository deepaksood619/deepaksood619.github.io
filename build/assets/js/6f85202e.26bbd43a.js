"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78018],{603905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(667294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=p(t),u=a,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||s;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[h]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},493638:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=t(487462),a=(t(667294),t(603905));const s={},i="Shell/bash Script",o={unversionedId:"devops/terminal-bash/shell-bash-script",id:"devops/terminal-bash/shell-bash-script",title:"Shell/bash Script",description:"A shell script is a computer program designed to be run by the Unix shell, a command-line interpreter. The various dialects of shell scripts are considered to be scripting languages. Typical operations performed by shell scripts include file manipulation, program execution, and printing text. A script which sets up the environment, runs the program, and does any necessary cleanup, logging, etc. is called a wrapper.",source:"@site/docs/devops/terminal-bash/shell-bash-script.md",sourceDirName:"devops/terminal-bash",slug:"/devops/terminal-bash/shell-bash-script",permalink:"/devops/terminal-bash/shell-bash-script",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/devops/terminal-bash/shell-bash-script.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Others",permalink:"/devops/terminal-bash/others"},next:{title:"Shell - Intro",permalink:"/devops/terminal-bash/shell-intro"}},l={},p=[{value:"Passing Variables",id:"passing-variables",level:3},{value:"Shortcuts",id:"shortcuts",level:3},{value:"Loops",id:"loops",level:3},{value:"Examples",id:"examples",level:3},{value:"References",id:"references",level:2}],c={toc:p},h="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shellbash-script"},"Shell/bash Script"),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"shell script")," is a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Computer_program"},"computer program")," designed to be run by the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_shell"},"Unix shell"),", a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Command-line_interpreter"},"command-line interpreter"),". The various dialects of shell scripts are considered to be ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Scripting_language"},"scripting languages"),". Typical operations performed by shell scripts include file manipulation, program execution, and printing text. A script which sets up the environment, runs the program, and does any necessary cleanup, logging, etc. is called a ",(0,a.kt)("strong",{parentName:"p"},"wrapper"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\necho "What is your name?"\nread USER_NAME\necho "Hello $USER_NAME"\necho "I will create you a file called $USER_NAME_file"\ntouch $USER_NAME_file\n')),(0,a.kt)("h3",{id:"passing-variables"},"Passing Variables"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nvar_name=$1\necho ${var_name}\necho $2\n\n./test hello 2\n")),(0,a.kt)("h3",{id:"shortcuts"},"Shortcuts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$0 - Script name\n$# - Argument count\n$? - Most recent exit code\n$@ and $* - All the args\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dev.to/rpalo/handling-arguments-in-bash-scripts-3o5m"},"https://dev.to/rpalo/handling-arguments-in-bash-scripts-3o5m")),(0,a.kt)("h3",{id:"loops"},"Loops"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\nfor i in 1 2 3 4 5\ndo\n  echo "Looping ... number $i"\ndone\n\n for i in {1..10}\n do\n  echo "$i"\n done\n\n #!/bin/sh\nfor i in hello 1 * 2 goodbye\ndo\n  echo "Looping ... i is set to $i"\ndone\n\n #!/bin/sh\nINPUT_STRING=hello\nwhile [ "$INPUT_STRING" != "bye" ]\ndo\n  echo "Please type something in (bye to quit)"\n  read INPUT_STRING\n  echo "You typed: $INPUT_STRING"\ndone\n\n#!/bin/zsh\n# check if server name is passed\nif [ "$1" ]; then\n        # server name is passed, ssh\n        ssh ubuntu@$1.zenatix.com\nelse\n        # get server name since not passed\n        echo "Enter server name to ssh - "\n        read SERVER_NAME\n        ssh ubuntu@$SERVER_NAME.zenatix.com\nfi\n')),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Write date to a file every second\n#!/bin/bash\nmkdir -p /var/log/apache\ntouch /var/log/apache/access.log\nwhile true\ndo\n        echo $(date) >> /var/log/apache/access.log\n    sleep 1\ndone\n\n# Loop through and run all commands\n#!/bin/bash\n\nVAL="$(kubectl get pods -n example | awk \'{if (NR!=1) { print $1 }}\')"\n\nfor i in $VAL\ndo\n        kubectl delete -n example pods $i\ndone\n\nwhile true; do echo `date` | kafkacat -P -b my-cluster-kafka-brokers.kafka:9092 -t test; done\n\n# find and replace filename\nfind . -name \'*---*\' -type f | grep -v "media" -exec sh -c \'\nfor f; do\n    mv "$f" "${f%/*}/${f##*/123_}"\ndone\' sh {} +\n\nfind . -type f | grep -v "media" | sed \'s|\\(.*/\\)[^A-Z]*\\([A-Z].*\\)|mv \\"&\\" \\"\\1\\2\\"|\' | sh\n\n')),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Shell_script"},"https://en.wikipedia.org/wiki/Shell_script")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.shellscript.sh"},"https://www.shellscript.sh")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.shellscript.sh/loops.html"},"https://www.shellscript.sh/loops.html")))}d.isMDXComponent=!0}}]);