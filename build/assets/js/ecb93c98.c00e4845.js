"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75247],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>_});var a=n(667294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(n),u=s,_=m["".concat(l,".").concat(u)]||m[u]||p[u]||r;return n?a.createElement(_,i(i({ref:t},c),{},{components:n})):a.createElement(_,i({ref:t},c))}));function _(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:s,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},161227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(487462),s=(n(667294),n(603905));const r={},i="Redshift SQL Queries / Commands",o={unversionedId:"databases/sql-databases/aws-redshift/redshift-sql-queries-commands",id:"databases/sql-databases/aws-redshift/redshift-sql-queries-commands",title:"Redshift SQL Queries / Commands",description:"While the queries are running, retrieve locking information. To identify long-running sessions, use the following SQL query:",source:"@site/docs/databases/sql-databases/aws-redshift/redshift-sql-queries-commands.md",sourceDirName:"databases/sql-databases/aws-redshift",slug:"/databases/sql-databases/aws-redshift/redshift-sql-queries-commands",permalink:"/databases/sql-databases/aws-redshift/redshift-sql-queries-commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/sql-databases/aws-redshift/redshift-sql-queries-commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pricing / Sizing",permalink:"/databases/sql-databases/aws-redshift/pricing-sizing"},next:{title:"MemSQL",permalink:"/databases/sql-databases/memsql/"}},l={},d=[{value:"UNLOAD",id:"unload",level:2},{value:"Redshift Spectrum",id:"redshift-spectrum",level:2}],c={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"redshift-sql-queries--commands"},"Redshift SQL Queries / Commands"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/redshift/latest/dg/c_designing-queries-best-practices.html"},"https://docs.aws.amazon.com/redshift/latest/dg/c_designing-queries-best-practices.html")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"copy public.perfios_parsed\nfrom 's3://stashfin-migration-data/bank_score_data/perfios/parsed_data/old_data/2017/01/Jan_2017'\niam_role 'arn:aws:iam::331916247734:role/'\nCOMPUPDATE off FORMAT AS PARQUET;\n\ncopy colender.incred_loan_mapping from 's3://rds-s3-redshift-bucket/ETL_Colender_Dashboard/INCRED/INCRED_Loan_Mapping.csv'\ncredentials 'aws_access_key_id=AKIAU2R6AAK3P4L7TV7P;aws_secret_access_key=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'\nDELIMITER ',' IGNOREHEADER 1 FILLRECORD IGNOREBLANKLINES NULL 'nan'\nACCEPTINVCHARS EMPTYASNULL ESCAPE COMPUPDATE OFF\n\nselect version();\n\n-- show sizes\n SELECT tbl, name, size_mb FROM\n (\n  SELECT tbl, count(*) AS size_mb\n  FROM stv_blocklist\n  GROUP BY tbl\n )\n LEFT JOIN\n (select distinct id, name FROM stv_tbl_perm)\n ON id = tbl\n ORDER BY size_mb DESC\n LIMIT 10;\n\n SELECT   TRIM(pgdb.datname) AS Database,\n         TRIM(a.name) AS Table,\n         ((b.mbytes/part.total::decimal)*100)::decimal(5,2) AS pct_of_total,\n         b.mbytes,\n         b.unsorted_mbytes\nFROM     stv_tbl_perm a\nJOIN     pg_database AS pgdb\n  ON     pgdb.oid = a.db_id\nJOIN     ( SELECT   tbl,\n                    SUM( DECODE(unsorted, 1, 1, 0)) AS unsorted_mbytes,\n                    COUNT(*) AS mbytes\n           FROM     stv_blocklist\n           GROUP BY tbl ) AS b\n       ON a.id = b.tbl\nJOIN     ( SELECT SUM(capacity) AS total\n           FROM   stv_partitions\n           WHERE  part_begin = 0 ) AS part\n      ON 1 = 1\nWHERE    a.slice = 0\nORDER BY 4 desc, db_id, name;\n\n-- show all users and Grant\nselect usesysid as user_id,\n       usename as username,\n       usecreatedb as db_create,\n       usesuper as is_superuser,\n       valuntil as password_expiration\nfrom pg_user\norder by user_id;\n\n CREATE USER intern2_datascience WITH password 's4XfxXE8D8FqXxNH';\n grant usage on schema data_analytics to developer; (important for 1st time)\n\n grant select on all tables in schema data_analytics to user_name;\n\n GRANT SELECT on SCHEMA_NAME.TABLE_NAME TO USER_NAME;\n GRANT SELECT on public.sentinel_customers TO bhupesh_goyal;\n GRANT SELECT on public.dsa_customers TO bhupesh_goyal;\n\n GRANT SELECT on sttash_website_live.equifax_api_request_inquiry TO outsource_consultant;\n\n grant select,update,delete on all tables in schema colender to developer;\n\n https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\n\nselect\n id,\n docs,\n is_valid_json_array(docs),\n json_array_length(docs),\n json_extract_array_element_text(docs, 1) as json_text,\n is_valid_json(json_text),\n json_extract_path_text(json_text, 'doc_status'),\n json_extract_path_text(json_text, 'id')\nfrom\n sttash_website_live.fos_scan_doc_comment\nlimit 1;\n https://docs.aws.amazon.com/redshift/latest/dg/json-functions.html\n\n-- getting blocking queries\n SELECT waiting.relation::regclass AS waiting_table,\n        blocking.relation::regclass AS blocking_table,\n        waiting.pid AS waiting_pid,\n        blocking.pid AS blocking_pid,\n        waiting.mode AS waiting_mode,\n        blocking.mode AS blocking_mode,\n        waiting.GRANTED AS waiting_granted,\n        blocking.GRANTED AS blocking_granted,\n        waiting.TRANSACTION AS waiting_txn,\n        blocking.TRANSACTION AS blocking_txn\n FROM pg_locks AS waiting\n   LEFT JOIN pg_locks AS blocking\n          ON ( (waiting. \"database\" = blocking. \"database\"\n         AND (waiting.relation = blocking.relation\n          OR blocking.relation IS NULL\n          OR waiting.relation IS NULL))\n          OR waiting.TRANSACTION = blocking.TRANSACTION)\n WHERE 1 = 1\n AND   NOT waiting.GRANTED\n AND   waiting.pid <> blocking.pid\n AND   blocking_granted = 't'\n ORDER BY blocking_granted,\n          waiting_granted,\n          blocking_pid,\n          waiting_pid;\n\n select a.txn_owner, a.txn_db, a.xid, a.pid, a.txn_start, a.lock_mode, a.relation as table_id,nvl(trim(c.\"name\"),d.relname) as tablename, a.granted,b.pid as blocking_pid ,datediff(s,a.txn_start,getdate())/86400||' days '||datediff(s,a.txn_start,getdate())%86400/3600||' hrs '||datediff(s,a.txn_start,getdate())%3600/60||' mins '||datediff(s,a.txn_start,getdate())%60||' secs' as txn_duration from svv_transactions a left join (select pid,relation,granted from pg_locks group by 1,2,3) b on a.relation=b.relation and a.granted='f' and b.granted='t' left join (select * from stv_tbl_perm where slice=0) c on a.relation=c.id left join pg_class d on a.relation=d.oid where a.relation is not null;\n\n SELECT * from stl_query where pid=4887;\n\nSELECT pg_terminate_backend(4887);\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://aws.amazon.com/premiumsupport/knowledge-center/redshift-high-cpu-usage"},"https://aws.amazon.com/premiumsupport/knowledge-center/redshift-high-cpu-usage")),(0,s.kt)("p",null,"While the queries are running, ",(0,s.kt)("a",{parentName:"p",href:"https://aws.amazon.com/premiumsupport/knowledge-center/prevent-locks-blocking-queries-redshift/"},"retrieve locking information"),". To identify long-running sessions, use the following SQL query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"select *,datediff(s,txn_start,getdate())/86400||' days '||datediff(s,txn_start,getdate())%86400/3600||' hrs '||datediff(s,txn_start,getdate())%3600/60||' mins '||datediff(s,txn_start,getdate())%60||' secs'\nfrom svv_transactions where lockable_object_type='transactionid' and pid<>pg_backend_pid() order by 3;\n")),(0,s.kt)("p",null,"Then, run ",(0,s.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/redshift/latest/dg/PG_TERMINATE_BACKEND.html"},"PG_TERMINATE_BACKEND")," to stop any long-running transactions. To prevent these sessions from remaining open, be sure that all transactions are closed. For example, make sure that all transactions starting with a ",(0,s.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/redshift/latest/dg/r_BEGIN.html"},"BEGIN")," statement are also accompanied by anENDorCOMMITstatement."),(0,s.kt)("p",null,"Then, run the following SQL query to identify queries consuming high CPU:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'select stq.userid, stq.query, trim(stq.label) as label, stq.xid, stq.pid, svq.service_class,\nquery_cpu_usage_percent as "cpu_%",starttime, endtime, datediff(s,starttime, endtime) as duration_s,\nsubstring(stq.querytxt,1,100) as querytext from stl_query stq\njoin svl_query_metrics svq on stq.query=svq.query\nwhere query_cpu_usage_percent is not null and starttime > sysdate - 1\norder by query_cpu_usage_percent desc;\n')),(0,s.kt)("p",null,"To analyze segment and slice-level execution steps for each query, run the following query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'select query, segment, step, label ,is_rrscan as rrS, is_diskbased as disk, is_delayed_scan as DelayS, min(start_time) as starttime, max(end_time) as endtime, datediff(ms, min(start_time), max(end_time)) as "elapsed_msecs", sum(rows) as row_s , sum(rows_pre_filter) as rows_pf, CASE WHEN sum(rows_pre_filter) = 0 THEN 100 ELSE sum(rows)::float/sum(rows_pre_filter)::float*100 END as pct_filter, SUM(workmem)/1024/1024 as "Memory(MB)", SUM(bytes)/1024/1024 as "MB_produced" from svl_query_report where query in (query_ids) group by query, segment, step, label , is_rrscan, is_diskbased , is_delayed_scan order by query, segment, step, label;\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Reduce query concurrency per queue to provide more memory to each query slot. This reduction helps queries that require more memory to run more efficiently."),(0,s.kt)("li",{parentName:"ul"},"Enable ",(0,s.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/redshift/latest/dg/wlm-short-query-acceleration.html"},"short query acceleration"),"(SQA) to prioritize short-running queries over long-running queries.")),(0,s.kt)("h2",{id:"unload"},"UNLOAD"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/redshift/latest/dg/r_UNLOAD.html"},"https://docs.aws.amazon.com/redshift/latest/dg/r_UNLOAD.html")),(0,s.kt)("h2",{id:"redshift-spectrum"},"Redshift Spectrum"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM SVV_EXTERNAL_DATABASES;\n\nSELECT * FROM SVV_EXTERNAL_SCHEMAS;\n\nSELECT * FROM SVV_EXTERNAL_TABLES;\n\nSELECT * FROM SVV_EXTERNAL_PARTITIONS;\n\nSELECT * FROM SVV_EXTERNAL_COLUMNS;\ncreate external schema spectrum_schema from data catalog\n\ndatabase 'pinpointanalytics'\n\niam_role 'arn:aws:iam::331916247734:role/service-role/AmazonRedshift-CommandsAccessRole-20211208T161606';\ndrop schema spectrum_schema;\nCREATE EXTERNAL TABLE spectrum_schema.test_loan_data (\n\nid integer,\n\nloan_status integer)\n\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'\n\nLOCATION 's3://data-team-reporting/test/';\nSELECT * FROM spectrum_schema.test_loan_data limit 10;\n")))}p.isMDXComponent=!0}}]);