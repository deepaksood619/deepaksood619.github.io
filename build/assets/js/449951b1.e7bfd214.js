"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35305],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,d=h["".concat(s,".").concat(m)]||h[m]||c[m]||l;return n?o.createElement(d,a(a({ref:t},u),{},{components:n})):o.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[h]="string"==typeof e?e:r,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},666395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=n(487462),r=(n(667294),n(603905));const l={},a="Loops",i={unversionedId:"python/python-intro/loops",id:"python/python-intro/loops",title:"Loops",description:"The fastest way to loop in python is don't loop",source:"@site/docs/python/python-intro/loops.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/loops",permalink:"/python/python-intro/loops",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/loops.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Keywords",permalink:"/python/python-intro/keywords"},next:{title:"Map, reduce, filter",permalink:"/python/python-intro/map-reduce-filter"}},s={},p=[{value:"ANY",id:"any",level:2},{value:"ALL",id:"all",level:2},{value:"Range",id:"range",level:2},{value:"Range + Step Loop",id:"range--step-loop",level:2},{value:"Enumerate",id:"enumerate",level:2},{value:"Basic for in loop",id:"basic-for-in-loop",level:2},{value:"for and while loop can have else branch",id:"for-and-while-loop-can-have-else-branch",level:2},{value:"While loops",id:"while-loops",level:2},{value:"A simple while loop",id:"a-simple-while-loop",level:3},{value:"Letting the user choose when to quit",id:"letting-the-user-choose-when-to-quit",level:3},{value:"do while loop in python",id:"do-while-loop-in-python",level:3},{value:"Using Zip to loop over multiple lists at the same time",id:"using-zip-to-loop-over-multiple-lists-at-the-same-time",level:2}],u={toc:p},h="wrapper";function c(e){let{components:t,...l}=e;return(0,r.kt)(h,(0,o.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loops"},"Loops"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.geeksforgeeks.org/any-all-in-python"},"http://www.geeksforgeeks.org/any-all-in-python")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python"},"http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=Qgevy75co8c"},"https://www.youtube.com/watch?v=Qgevy75co8c")),(0,r.kt)("p",null,"The fastest way to loop in python is don't loop"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"While loop"),(0,r.kt)("li",{parentName:"ol"},"For loop"),(0,r.kt)("li",{parentName:"ol"},"in-built functions like sum(range(100))"),(0,r.kt)("li",{parentName:"ol"},"numpy functions"),(0,r.kt)("li",{parentName:"ol"},"Mathematics with single operation i.e. no loop")),(0,r.kt)("p",null,"Any and All are two built ins provided in python used for successive And/Or."),(0,r.kt)("h2",{id:"any"},"ANY"),(0,r.kt)("p",null,"Returns true if any of the items is True. It returns False if empty or all are false. Any can be thought of as a sequence of OR operations on the provided iterables."),(0,r.kt)("p",null,"It short circuit the execution i.e. stop the execution as soon as the result is known."),(0,r.kt)("p",null,"Syntax : any(list of iterables)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Since all are false, false is returned\nprint (any([False, False, False, False]))\n\n# Here the method will short-circuit at the\n# second item (True) and will return True.\nprint (any([False, True, False, False]))\n\n# Here the method will short-circuit at the\n# first (True) and will return True.\nprint (any([True, False, False, False]))\n\nOutput -\nFalse\nTrue\nTrue\n")),(0,r.kt)("h2",{id:"all"},"ALL"),(0,r.kt)("p",null,"Returns true if all of the items are True (or if the iterable is empty). All can be thought of as a sequence of AND operations on the provided iterables. It also short circuit the execution i.e. stop the execution as soon as the result is known."),(0,r.kt)("p",null,"Syntax : all(list of iterables)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Here all the iterables are True so all\n# will return True and the same will be printed\nprint (all([True, True, True, True]))\n\n# Here the method will short-circuit at the\n# first item (False) and will return False.\nprint (all([False, True, True, False]))\n\n# This statement will return False, as no\n# True is found in the iterables\nprint (all([False, False, False]))\n\nOutput -\nTrue\nFalse\nFalse\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(478633).Z,width:"459",height:"208"})),(0,r.kt)("h2",{id:"range"},"Range"),(0,r.kt)("p",null,"range() function starts at 0 aby default, and stops one number below the number passed to it. We can use list() function to efficiently generate a large list of numbers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for number in range(1, 1002):\n    print(number)\n\nnumbers = list(range(1,1000))\n")),(0,r.kt)("h2",{id:"range--step-loop"},"Range + Step Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"N,M = map(int,raw_input().split())\nfor i in xrange(1, N, 2):\nprint ( str('.|.')*i ).center(M, '-')\nprint str('WELCOME').center(M, '-')\nfor i in xrange(N-2, -1, -2):\nprint ( str('.|.')*i ).center(M, '-')\n")),(0,r.kt)("h2",{id:"enumerate"},"Enumerate"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://book.pythontips.com/en/latest/enumerate.html"},"http://book.pythontips.com/en/latest/enumerate.html")),(0,r.kt)("p",null,"Enumerate is a built-in function of Python."),(0,r.kt)("p",null,"It allows us to loop over something and have an automatic counter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for counter, value in enumerate(some_list):\n    print(counter, value)\n\n enumerate also accepts an optional argument which makes it even more useful.\nThe optional argument allows us to tell enumerate from where to start the index.\nmy_list = ['apple', 'banana', 'grapes', 'pear']\nfor c, value in enumerate(my_list, 1):\n    print(c, value)\n\nYou can also create tuples containing the index and list item using a list.\nmy_list = ['apple', 'banana', 'grapes', 'pear']\ncounter_list = list(enumerate(my_list, 1))\nprint(counter_list)\n")),(0,r.kt)("h2",{id:"basic-for-in-loop"},"Basic for in loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'colors = ["red", "green", "blue", "purple"]\nfor color in colors:\n    print(color)\n')),(0,r.kt)("p",null,"Unlike traditional C-styleforloops, Python'sforloops don't have index variables. There's no index initializing, bounds checking, or index incrementing. Python's for loops do ",(0,r.kt)("em",{parentName:"p"},"all the work")," of looping over our numbers list for us."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://treyhunner.com/2019/06/loop-better-a-deeper-look-at-iteration-in-python"},"https://treyhunner.com/2019/06/loop-better-a-deeper-look-at-iteration-in-python")),(0,r.kt)("h2",{id:"for-and-while-loop-can-have-else-branch"},"for and while loop can have else branch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Python's `for` and `while` loops\n# support an `else` clause that executes\n# only if the loops terminates without\n# hitting a `break` statement.\ndef contains(haystack, needle):\n\"\"\"\nThrow a ValueError if `needle` not\nin `haystack`.\n\"\"\"\nfor item in haystack:\n    if item == needle:\n        break\nelse:\n    # The `else` here is a\n    # \"completion clause\" that runs\n    # only if the loop ran to completion\n    # without hitting a `break` statement.\n    raise ValueError('Needle not found')\ncontains([23, 'needle', 0xbadc0ffee], 'needle')\nNone\ncontains([23, 42, 0xbadc0ffee], 'needle')\nValueError: \"Needle not found\"\n\n# Personally, I'm not a fan of the `else`\n# \"completion clause\" in loops because\n# I find it confusing. I'd rather do\n# something like this:\ndef better_contains(haystack, needle):\n    for item in haystack:\n        if item == needle:\n            return\n    raise ValueError('Needle not found')\n # Note: Typically you'd write something\n# like this to do a membership test,\n# which is much more Pythonic:\nif needle not in haystack:\n    raise ValueError('Needle not found')\n")),(0,r.kt)("h2",{id:"while-loops"},"While loops"),(0,r.kt)("h3",{id:"a-simple-while-loop"},"A simple while loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"current_value = 1\nwhile current_value <= 5:\n    print(current_value)\ncurrent_value += 1\n")),(0,r.kt)("h3",{id:"letting-the-user-choose-when-to-quit"},"Letting the user choose when to quit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"msg = ''\nwhile msg != 'quit':\n    msg = input('What's your message? ')\nprint(msg)\n")),(0,r.kt)("h3",{id:"do-while-loop-in-python"},"do while loop in python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"i = 1\n\nwhile True:\n    print(i)\n    i = i + 1\n    if(i > 5):\nbreak\n")),(0,r.kt)("h2",{id:"using-zip-to-loop-over-multiple-lists-at-the-same-time"},"Using Zip to loop over multiple lists at the same time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'colors = ["red", "green", "blue", "purple"]\nratios = [0.2, 0.3, 0.1, 0.4]\nfor color, ratio in zip(colors, ratios):\nprint("{}% {}".format(ratio * 100, color))\n')))}c.isMDXComponent=!0},478633:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/Loops-image1-f49d9e8559f97fe5546c2577e31cf178.jpg"}}]);