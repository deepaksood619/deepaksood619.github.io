"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[93795],{603905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>p});var n=r(667294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),h=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=h(r),m=i,p=g["".concat(l,".").concat(m)]||g[m]||u[m]||a;return r?n.createElement(p,s(s({ref:t},c),{},{components:r})):n.createElement(p,s({ref:t},c))}));function p(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[g]="string"==typeof e?e:i,s[1]=o;for(var h=2;h<a;h++)s[h]=r[h];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},248104:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var n=r(487462),i=(r(667294),r(603905));const a={},s="Substring Search Intro",o={unversionedId:"algorithms/string-algorithms/substring-search-intro",id:"algorithms/string-algorithms/substring-search-intro",title:"Substring Search Intro",description:"Substring Search.In this lecture we consider algorithms for searching for a substring in a piece of text. We begin with a brute-force algorithm, whose running time is quadratic in the worst case. Next, we consider the ingenious Knuth--Morris--Pratt algorithm whose running time is guaranteed to be linear in the worst case. Then, we introduce the Boyer--Moore algorithm, whose running time is sublinear on typical inputs. Finally, we consider the Rabin--Karp fingerprint algorithm, which uses hashing in a clever way to solve the substring search and related problems",source:"@site/docs/algorithms/string-algorithms/substring-search-intro.md",sourceDirName:"algorithms/string-algorithms",slug:"/algorithms/string-algorithms/substring-search-intro",permalink:"/algorithms/string-algorithms/substring-search-intro",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/string-algorithms/substring-search-intro.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rabin Karp",permalink:"/algorithms/string-algorithms/rabin-karp"},next:{title:"Book Summaries",permalink:"/book-summaries/"}},l={},h=[{value:"Substring Search.In this lecture we consider algorithms for searching for a substring in a piece of text. We begin with a brute-force algorithm, whose running time is quadratic in the worst case. Next, we consider the ingenious Knuth--Morris--Pratt algorithm whose running time is guaranteed to be linear in the worst case. Then, we introduce the Boyer--Moore algorithm, whose running time is sublinear on typical inputs. Finally, we consider the Rabin--Karp fingerprint algorithm, which uses hashing in a clever way to solve the substring search and related problems",id:"substring-searchin-this-lecture-we-consider-algorithms-for-searching-for-a-substring-in-a-piece-of-text-we-begin-with-a-brute-force-algorithm-whose-running-time-is-quadratic-in-the-worst-case-next-we-consider-the-ingenious-knuth--morris--pratt-algorithm-whose-running-time-is-guaranteed-to-be-linear-in-the-worst-case-then-we-introduce-the-boyer--moore-algorithm-whose-running-time-is-sublinear-on-typical-inputs-finally-we-consider-the-rabin--karp-fingerprint-algorithm-which-uses-hashing-in-a-clever-way-to-solve-the-substring-search-and-related-problems",level:2},{value:"Goal - Find pattern of length M in a text of length N",id:"goal---find-pattern-of-length-m-in-a-text-of-length-n",level:2},{value:"Applications",id:"applications",level:2}],c={toc:h},g="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(g,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"substring-search-intro"},"Substring Search Intro"),(0,i.kt)("h2",{id:"substring-searchin-this-lecture-we-consider-algorithms-for-searching-for-a-substring-in-a-piece-of-text-we-begin-with-a-brute-force-algorithm-whose-running-time-is-quadratic-in-the-worst-case-next-we-consider-the-ingenious-knuth--morris--pratt-algorithm-whose-running-time-is-guaranteed-to-be-linear-in-the-worst-case-then-we-introduce-the-boyer--moore-algorithm-whose-running-time-is-sublinear-on-typical-inputs-finally-we-consider-the-rabin--karp-fingerprint-algorithm-which-uses-hashing-in-a-clever-way-to-solve-the-substring-search-and-related-problems"},"Substring Search.In this lecture we consider algorithms for searching for a substring in a piece of text. We begin with a brute-force algorithm, whose running time is quadratic in the worst case. Next, we consider the ingenious Knuth--Morris--Pratt algorithm whose running time is guaranteed to be linear in the worst case. Then, we introduce the Boyer--Moore algorithm, whose running time is sublinear on typical inputs. Finally, we consider the Rabin--Karp fingerprint algorithm, which uses hashing in a clever way to solve the substring search and related problems"),(0,i.kt)("h2",{id:"goal---find-pattern-of-length-m-in-a-text-of-length-n"},"Goal - Find pattern of length M in a text of length N"),(0,i.kt)("h2",{id:"applications"},"Applications"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Find and Replace"),(0,i.kt)("li",{parentName:"ul"},"Computer Forensics (Find key on disks)"),(0,i.kt)("li",{parentName:"ul"},"Identify patterns indicative of spam"),(0,i.kt)("li",{parentName:"ul"},"Screen scaping : Extract relevant data from web page")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:r(126096).Z,width:"1411",height:"1090"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:r(507401).Z,width:"1584",height:"1224"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:r(125493).Z,width:"1411",height:"1090"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:r(566824).Z,width:"1324",height:"362"})))}u.isMDXComponent=!0},126096:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Substring-Search-Intro-image1-a1b5eb6181c7944f2ad3e15c1e4747a2.jpg"},507401:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Substring-Search-Intro-image2-34fb5182d787303cbe1ba32c2b1c11ca.jpg"},125493:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Substring-Search-Intro-image3-43041830764b0e8f5013e1608cf03c86.jpg"},566824:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Substring-Search-Intro-image4-755fe0a882de0fafa463e70432d122e7.jpg"}}]);