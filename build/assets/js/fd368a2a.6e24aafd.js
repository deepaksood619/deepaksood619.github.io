"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[97822],{603905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>d});var a=r(667294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function s(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},i=Object.keys(t);for(a=0;a<i.length;a++)r=i[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)r=i[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var l=a.createContext({}),c=function(t){var e=a.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):s(s({},e),t)),r},p=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,i=t.originalType,l=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),u=c(r),h=n,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return r?a.createElement(d,s(s({ref:e},p),{},{components:r})):a.createElement(d,s({ref:e},p))}));function d(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=r.length,s=new Array(i);s[0]=h;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o[u]="string"==typeof t?t:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},832563:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(487462),n=(r(667294),r(603905));const i={},s="Probabilistic Data Structure",o={unversionedId:"data-structures/hashtable/probabilistic-data-structure",id:"data-structures/hashtable/probabilistic-data-structure",title:"Probabilistic Data Structure",description:"Probabilistic data structures are a group of data structures that are extremely useful for big data and streaming applications. Generally speaking, these data structures use hash functions to randomize and compactly represent a set of items. Collisions are ignored but errors can be well-controlled under certain threshold. Comparing with error-free approaches, these algorithms use much less memory and have constant query time. They usually support union and intersection operations and therefore can be easily parallelized.",source:"@site/docs/data-structures/hashtable/probabilistic-data-structure.md",sourceDirName:"data-structures/hashtable",slug:"/data-structures/hashtable/probabilistic-data-structure",permalink:"/data-structures/hashtable/probabilistic-data-structure",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/hashtable/probabilistic-data-structure.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Merkle Trees",permalink:"/data-structures/hashtable/merkle-trees"},next:{title:"Questions",permalink:"/data-structures/hashtable/questions"}},l={},c=[{value:"Ribbon Filter (practically smaller than Bloom and Xor)",id:"ribbon-filter-practically-smaller-than-bloom-and-xor",level:2},{value:"Others",id:"others",level:2},{value:"Frugal Streaming",id:"frugal-streaming",level:2},{value:"Use case: Find the nth percentile of the data stream",id:"use-case-find-the-nth-percentile-of-the-data-stream",level:2}],p={toc:c},u="wrapper";function m(t){let{components:e,...i}=t;return(0,n.kt)(u,(0,a.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"probabilistic-data-structure"},"Probabilistic Data Structure"),(0,n.kt)("p",null,"Probabilistic data structures are a group of data structures that are extremely useful for big data and streaming applications. Generally speaking, these data structures use hash functions to randomize and compactly represent a set of items. Collisions are ignored but errors can be well-controlled under certain threshold. Comparing with error-free approaches, these algorithms use much less memory and have constant query time. They usually support union and intersection operations and therefore can be easily parallelized."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Membership Query - Bloom filter"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Cardinality - HyperLogLog"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Frequency - Count-Min Sketch"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Frequency Estimation: Count-Mean-Min Sketch"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Locality-sensitive hashing"),"(",(0,n.kt)("strong",{parentName:"p"},"LSH"),")\n",(0,n.kt)("img",{alt:"image",src:r(89620).Z,width:"561",height:"639"})))),(0,n.kt)("h2",{id:"ribbon-filter-practically-smaller-than-bloom-and-xor"},"Ribbon Filter (practically smaller than Bloom and Xor)"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://engineering.fb.com/2021/07/09/data-infrastructure/ribbon-filter"},"https://engineering.fb.com/2021/07/09/data-infrastructure/ribbon-filter")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2103.02515"},"https://arxiv.org/abs/2103.02515")),(0,n.kt)("h2",{id:"others"},"Others"),(0,n.kt)("h2",{id:"frugal-streaming"},"Frugal Streaming"),(0,n.kt)("p",null,"It uses only one unit of memory per group to compute a quantile for each group."),(0,n.kt)("h2",{id:"use-case-find-the-nth-percentile-of-the-data-stream"},"Use case: Find the nth percentile of the data stream"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://link.springer.com/chapter/10.1007/978-3-642-40273-9_7"},"https://link.springer.com/chapter/10.1007/978-3-642-40273-9_7")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://agkn.wordpress.com/2013/09/16/sketch-of-the-day-frugal-streaming"},"https://agkn.wordpress.com/2013/09/16/sketch-of-the-day-frugal-streaming"),"\n\ud835\uddda\ud835\uddd8\ud835\udde2\ud835\udddb\ud835\uddd4\ud835\udde6\ud835\udddb/ \ud835\udde6\ud835\udfee \ud835\uddda\ud835\uddd8\ud835\udde2\ud835\udde0\ud835\uddd8\ud835\udde7\ud835\udde5\ud835\uddec"),(0,n.kt)("p",null,"A collection of efficient yet exact mathematical predicates for testing relationships among geometric primitives."),(0,n.kt)("p",null,"\ud835\ude50\ud835\ude68\ud835\ude5a \ud835\ude58\ud835\ude56\ud835\ude68\ud835\ude5a:Location-based search results with DynamoDb and Geohash.",(0,n.kt)("strong",{parentName:"p"},"References")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://dzone.com/articles/introduction-probabilistic-0"},"https://dzone.com/articles/introduction-probabilistic-0")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining"},"https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.kdnuggets.com/2019/08/count-big-data-probabilistic-data-structures-algorithms.html"},"https://www.kdnuggets.com/2019/08/count-big-data-probabilistic-data-structures-algorithms.html")))}m.isMDXComponent=!0},89620:(t,e,r)=>{r.d(e,{Z:()=>a});const a=r.p+"assets/images/Probabilistic-Data-Structure-image1-f1ba58c375afb00b5ba8396014d39534.jpg"}}]);