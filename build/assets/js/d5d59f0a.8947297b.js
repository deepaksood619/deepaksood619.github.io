"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[40580],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,h=m["".concat(s,".").concat(u)]||m[u]||g[u]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[m]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},168607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=n(487462),i=(n(667294),n(603905));const o={},l="Sweep Line Algorithm",a={unversionedId:"algorithms/general/sweep-line-algorithm",id:"algorithms/general/sweep-line-algorithm",title:"Sweep Line Algorithm",description:"Orthogonal Line Segment Intersection",source:"@site/docs/algorithms/general/sweep-line-algorithm.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/sweep-line-algorithm",permalink:"/algorithms/general/sweep-line-algorithm",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/sweep-line-algorithm.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reverse Polish Notation / Postfix Notation",permalink:"/algorithms/general/reverse-polish-notation-postfix-notation"},next:{title:"Two-Stack Algorithm",permalink:"/algorithms/general/two-stack-algorithm"}},s={},p=[{value:"Orthogonal Line Segment Intersection",id:"orthogonal-line-segment-intersection",level:2},{value:"Sweep-line algorithm (Sweep vertical line from left to right)",id:"sweep-line-algorithm-sweep-vertical-line-from-left-to-right",level:2},{value:"Sweep-line analysis",id:"sweep-line-analysis",level:2}],c={toc:p},m="wrapper";function g(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sweep-line-algorithm"},"Sweep Line Algorithm"),(0,i.kt)("h2",{id:"orthogonal-line-segment-intersection"},"Orthogonal Line Segment Intersection"),(0,i.kt)("p",null,"Given N horizontal and vertical line segments, find all intersections"),(0,i.kt)("p",null,"Na\xefve and brute-force algorithm - Check all pairs of line segments for intersection."),(0,i.kt)("p",null,"Non degeneracy Assumption - All x- and y- coordinates are distinct"),(0,i.kt)("h2",{id:"sweep-line-algorithm-sweep-vertical-line-from-left-to-right"},"Sweep-line algorithm (Sweep vertical line from left to right)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"x - coordinates define events."),(0,i.kt)("li",{parentName:"ul"},"h-segment (left endpoint): insert y-coordinate into BST"),(0,i.kt)("li",{parentName:"ul"},"h-segment (right endpoint): remove y-coordinate from BST"),(0,i.kt)("li",{parentName:"ul"},"v-segment: 1 d range search for interval of y-endpoints")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(656983).Z,width:"1100",height:"491"})),(0,i.kt)("h2",{id:"sweep-line-analysis"},"Sweep-line analysis"),(0,i.kt)("p",null,"Proposition: The sweep-line algorithm takes time proportional to N log N + R to find all R intersections among N orthogonal line segments"),(0,i.kt)("p",null,"Bottom line: Sweep line reduces 2d orthogonal line segment intersection search to 1d range search"))}g.isMDXComponent=!0},656983:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Sweep-Line-Algorithm-image1-ad1631e3a65a7ab90a4e435aae5c8cc7.jpg"}}]);