"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[43099],{603905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(667294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),m=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(i.Provider,{value:n},e.children)},c="mdxType",E={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=m(t),p=l,d=c["".concat(i,".").concat(p)]||c[p]||E[p]||r;return t?a.createElement(d,o(o({ref:n},u),{},{components:t})):a.createElement(d,o({ref:n},u))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[c]="string"==typeof e?e:l,o[1]=s;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},236401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>E,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=t(487462),l=(t(667294),t(603905));const r={},o="SQL Commands",s={unversionedId:"languages/sql/sql-commands",id:"languages/sql/sql-commands",title:"SQL Commands",description:"Types",source:"@site/docs/languages/sql/sql-commands.md",sourceDirName:"languages/sql",slug:"/languages/sql/sql-commands",permalink:"/languages/sql/sql-commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/sql/sql-commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Postgres Commands",permalink:"/languages/sql/postgres-commands"},next:{title:"SQL Examples",permalink:"/languages/sql/sql-examples"}},i={},m=[{value:"Types",id:"types",level:2},{value:"QUERIES",id:"queries",level:2},{value:"SHOW",id:"show",level:3},{value:"AND",id:"and",level:3},{value:"AS",id:"as",level:3},{value:"BETWEEN",id:"between",level:3},{value:"CASE",id:"case",level:3},{value:"HAVING",id:"having",level:3},{value:"IN",id:"in",level:3},{value:"OR",id:"or",level:3},{value:"ORDER BY",id:"order-by",level:3},{value:"LIKE",id:"like",level:3},{value:"LIMIT",id:"limit",level:3},{value:"WHERE",id:"where",level:3},{value:"COMBINING TABLES",id:"combining-tables",level:2},{value:"INNER JOIN / JOIN",id:"inner-join--join",level:3},{value:"LEFT JOIN",id:"left-join",level:3},{value:"RIGHT JOIN",id:"right-join",level:3},{value:"FULL JOIN",id:"full-join",level:3},{value:"OUTER JOIN",id:"outer-join",level:3},{value:"CROSS JOIN",id:"cross-join",level:3},{value:"UNION",id:"union",level:3},{value:"UNION ALL",id:"union-all",level:3},{value:"WITH",id:"with",level:3},{value:"SQL Server Clauses",id:"sql-server-clauses",level:2},{value:"MYSQL",id:"mysql",level:2}],u={toc:m},c="wrapper";function E(e){let{components:n,...r}=e;return(0,l.kt)(c,(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sql-commands"},"SQL Commands"),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"DDL -- Data Definition Language"),(0,l.kt)("li",{parentName:"ol"},"DQl -- Data Query Language"),(0,l.kt)("li",{parentName:"ol"},"DML -- Data Manipulation Language"),(0,l.kt)("li",{parentName:"ol"},"DCL -- Data Control Language")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image",src:t(232937).Z,width:"928",height:"874"})),(0,l.kt)("h2",{id:"queries"},"QUERIES"),(0,l.kt)("h3",{id:"show"},"SHOW"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW CREATE TABLE tbl_name\n\nSHOW CHARACTER SET;\n\nSHOW GLOBAL VARIABLES where Variable_Name='innodb_buffer_pool_size';\n")),(0,l.kt)("h3",{id:"and"},"AND"),(0,l.kt)("p",null,"AND is an operator that combines two conditions. Both conditions must be true for the row to be included in the result set."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name\nWHERE column_1 = value_1\nAND column_2 = value_2;\n")),(0,l.kt)("h3",{id:"as"},"AS"),(0,l.kt)("p",null,"AS is a keyword in SQL that allows you to rename a column or table using an alias."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name AS 'Alias'\nFROM table_name;\n")),(0,l.kt)("h3",{id:"between"},"BETWEEN"),(0,l.kt)("p",null,"The BETWEEN operator is used to filter the result set within a certain range. The values can be numbers, text or dates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value_1 AND value_2;\n\nSELECT *\nFROM movies\nWHERE name BETWEEN 'D%' and 'G%';\n-- This will select all movies that starts with D, E, F and not G.\n")),(0,l.kt)("h3",{id:"case"},"CASE"),(0,l.kt)("p",null,"CASE expression is essentially the 'if/then' of the SQL world. Given one value, CASE can return another of your choice \u2013 but did you know you're able to use it in ORDER BY clauses to define custom orders based upon other values?"),(0,l.kt)("p",null,"Here's a simple use case. Let's say you have a table listing employees and their job titles:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"id")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"name")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"title")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Oscar"),(0,l.kt)("td",{parentName:"tr",align:null},"Cleaner")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Carol"),(0,l.kt)("td",{parentName:"tr",align:null},"CEO")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Jimbo"),(0,l.kt)("td",{parentName:"tr",align:null},"CFO")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Bobby"),(0,l.kt)("td",{parentName:"tr",align:null},"Assistant")))),(0,l.kt)("p",null,"If you wanted to have some sort of order based upon job titles, you could use CASE like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM employees ORDER BY\n    CASE\n    WHEN title = 'CEO' THEN 1\n    WHEN title = 'CFO' THEN 2\n    WHEN title = 'CTO' THEN 2\n    ELSE 3\n    END;\n-- (Work in MS SQL Server not in Oracle)\nSELECT name,\n    CASE\n    WHEN genre = 'romance' THEN 'Chill'\n    WHEN genre = 'comedy' THEN 'Chill'\n    ELSE 'Intense'\n    END AS 'Mood'\nFROM movies;\n\nSELECT\n    CASE\n        WHEN Grades.Grade < 8 THEN NULL\n        ELSE Students.Name\n    END AS 'Student_Name',\n    Grades.Grade, Students.Marks\nFROM Students\nJOIN Grades\nON Students.Marks BETWEEN Grades.Min_Mark and Grades.Max_Mark\nORDER BY Grades.Grade DESC, Students.Name, Students.Marks;\n")),(0,l.kt)("h3",{id:"having"},"HAVING"),(0,l.kt)("p",null,"HAVING statement always comes after GROUP BY, but before ORDER BY and LIMIT."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name, aggregate_function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name\nHAVING aggregate_function(column_name) operator value\n")),(0,l.kt)("h3",{id:"in"},"IN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"    SELECT column_name(s)\n    FROM table_name\n    WHERE column_name\n    IN (value1,value2,..)\n")),(0,l.kt)("h3",{id:"or"},"OR"),(0,l.kt)("p",null,"OR is an operator that filters the result set to only include rows where either condition is true."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name\nFROM table_name\nWHERE column_name = value_1\nOR column_name = value_2;\n")),(0,l.kt)("h3",{id:"order-by"},"ORDER BY"),(0,l.kt)("p",null,"ORDER BY is a clause that indicates you want to sort the result set by a particular column either alphabetically or numerically."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name\nFROM table_name\nORDER BY column_name ASC|DESC;\n\nSELECT Name\nFROM STUDENTS\nWHERE Marks > 75\nORDER BY RIGHT(NAME, 3), ID ASC;\n")),(0,l.kt)("h3",{id:"like"},"LIKE"),(0,l.kt)("p",null,"LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name\nWHERE column_name LIKE pattern;\n\nSELECT * FROM movies WHERE name LIKE 'Se_en';\n\n-- MY SQL\nSELECT DISTINCT CITY\nFROM STATION\nWHERE\n    CITY LIKE 'a%' OR\n    CITY LIKE 'e%' OR\n    CITY LIKE 'i%' OR\n    CITY LIKE 'o%' OR\n    CITY LIKE 'u%';\n\n-- MS SQL SERVER\nSELECT DISTINCT CITY\nFROM STATION\nWHERE\n    CITY LIKE '%[aeiou]';\n\n-- Here _ in a wildcard for substituting any value % is a wildcard character that matches zero or more missing letters in the pattern\n")),(0,l.kt)("h3",{id:"limit"},"LIMIT"),(0,l.kt)("p",null,"LIMIT is a clause that lets you specify the maximum number of rows the result set will have."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name\nLIMIT number;\n")),(0,l.kt)("h3",{id:"where"},"WHERE"),(0,l.kt)("p",null,"WHERE is a clause that indicates you want to filter the result set to include only rows where the following condition is true."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name\nWHERE column_name operator value;\n")),(0,l.kt)("h2",{id:"combining-tables"},"COMBINING TABLES"),(0,l.kt)("h3",{id:"inner-join--join"},"INNER JOIN / JOIN"),(0,l.kt)("p",null,"An inner join will combine rows from different tables if the join conditionis true."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s) FROM table_1\nJOIN table_2\nON table_1.column_name = table_2.column_name;\n")),(0,l.kt)("h3",{id:"left-join"},"LEFT JOIN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name1\nLEFT JOIN table_name2\nON table_name1.column_name=table_name2.column_name\n")),(0,l.kt)("h3",{id:"right-join"},"RIGHT JOIN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name1\nRIGHT JOIN table_name2\nON table_name1.column_name=table_name2.column_name\n")),(0,l.kt)("h3",{id:"full-join"},"FULL JOIN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s)\nFROM table_name1\nFULL JOIN table_name2\nON table_name1.column_name=table_name2.column_name\n")),(0,l.kt)("h3",{id:"outer-join"},"OUTER JOIN"),(0,l.kt)("p",null,"An outer join will combine rows from different tables even if the the join condition is not met. Every row in the left table is returned in the result set, and if the join condition is not met, then NULL values are used to fill in the columns from the right table."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s) FROM table_1\nLEFT JOIN table_2\nON table_1.column_name = table_2.column_name;\n")),(0,l.kt)("h3",{id:"cross-join"},"CROSS JOIN"),(0,l.kt)("p",null,"Sometimes, we just want to combine all rows of one table with all rows of another table."),(0,l.kt)("p",null,"For instance, if we had a table of shirts and a table of pants, we might want to know all the possible combinations to create different outfits."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT shirts.shirt_color, pants.pants_color FROM shirts CROSS JOIN pants;\n\nSELECT month,\n    COUNT(*)\nFROM newspaper\nCROSS JOIN months\nWHERE start_month <= month\n    AND end_month >= month\nGROUP BY month;\n")),(0,l.kt)("h3",{id:"union"},"UNION"),(0,l.kt)("p",null,"This will add all rows of table_name2 on top of table_name1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s) FROM table_name1\nUNION\nSELECT column_name(s) FROM table_name2\n")),(0,l.kt)("h3",{id:"union-all"},"UNION ALL"),(0,l.kt)("p",null,"The SQL UNION ALL operator is used to combine the result sets of 2 or more SELECT statements. It does not remove duplicate rows between the various SELECT statements (all rows are returned)."),(0,l.kt)("p",null,"Each SELECT statement within the UNION ALL must have the same number of fields in the result sets with similar data types."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"What is the difference between UNION and UNION ALL?")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"UNION removes duplicate rows."),(0,l.kt)("li",{parentName:"ul"},"UNION ALL does not remove duplicate rows.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s) FROM table_name1\nUNION ALL\nSELECT column_name(s) FROM table_name2\n")),(0,l.kt)("h3",{id:"with"},"WITH"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH previous_query AS (\n    SELECT customer_id,\n    COUNT(subscription_id) AS 'subscriptions'\n    FROM orders\n    GROUP BY customer_id\n)\nSELECT customers.customer_name,\n    previous_query.subscriptions\nFROM previous_query\nJOIN customers\nON previous_query.customer_id = customers.customer_id;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Can be nested")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\nquery1 AS (SELECT column1 FROM table1 WHERE condition1),\nquery2 AS (SELECT column2 FROM table2 WHERE condition2)\n    \u2026\n")),(0,l.kt)("h2",{id:"sql-server-clauses"},"SQL Server Clauses"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Over Clause")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Partition By clause")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"PARTITION BY")," clause is a subclause of the ",(0,l.kt)("inlineCode",{parentName:"p"},"OVER")," clause. The ",(0,l.kt)("inlineCode",{parentName:"p"},"PARTITION BY")," clause divides a query's result set into partitions. The ",(0,l.kt)("a",{parentName:"p",href:"http://www.sqltutorial.org/sql-window-functions/"},"window function")," is operated on each partition separately and recalculate for each partition."),(0,l.kt)("h2",{id:"mysql"},"MYSQL"),(0,l.kt)("p",null,"Using % for mod (In oracle use ",(0,l.kt)("strong",{parentName:"p"},"mod()")," function)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT CITY FROM STATION WHERE ID%2 = 0;\n\n-- LENGTH\nSELECT LENGTH(\"SQL Tutorial\") AS LengthOfString;\n\n-- CEIL\nSELECT CEIL((AVG(salary)) - (AVG(REPLACE(salary, '0', '')))) AS avg_salary FROM employees;\n\nSELECT @@innodb_buffer_pool_size;\n\n-- Information Schema MySQL\nselect * from information_schema.CHARACTER_SETS;\nselect * from information_schema.COLLATIONS;\nselect * from information_schema.COLLATION_CHARACTER_SET_APPLICABILITY;\nselect * from information_schema.COLUMNS;\nselect * from information_schema.EVENTS;\nselect * from information_schema.FILES;\nselect * from information_schema.KEY_COLUMN_USAGE;\nselect * from information_schema.PARAMETERS;\nselect * from information_schema.PARTITIONS;\nselect * from information_schema.REFERENTIAL_CONSTRAINTS;\nselect * from information_schema.ROUTINES;\nselect * from information_schema.SCHEMATA;\nselect * from information_schema.STATISTICS;\n    STATISTICS.CARDINALITY\nselect * from information_schema.TABLES;\n    TABLES.AUTO_INCREMENT\n    TABLES.AVG_ROW_LENGTH\n    TABLES.CHECKSUM\n    TABLES.CHECK_TIME\n    TABLES.CREATE_TIME\n    TABLES.DATA_FREE\n    TABLES.DATA_LENGTH\n    TABLES.INDEX_LENGTH\n    TABLES.MAX_DATA_LENGTH\n    TABLES.TABLE_ROWS\n    TABLES.UPDATE_TIME\nselect * from information_schema.TABLE_CONSTRAINTS;\nselect * from information_schema.TRIGGERS;\nselect * from information_schema.VIEWS;\n")))}E.isMDXComponent=!0},232937:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/SQL-Commands-image1-35f6192a9e19e22612a2c139c87061a6.jpg"}}]);