"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[33082],{603905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(667294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),l=d(r),m=s,b=l["".concat(c,".").concat(m)]||l[m]||p[m]||i;return r?n.createElement(b,o(o({ref:t},u),{},{components:r})):n.createElement(b,o({ref:t},u))}));function b(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=r.length,o=new Array(i);o[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[l]="string"==typeof e?e:s,o[1]=a;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},766118:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=r(487462),s=(r(667294),r(603905));const i={},o="Designing Distributed Systems",a={unversionedId:"computer-science/distributed-system/designing-distributed-systems",id:"computer-science/distributed-system/designing-distributed-systems",title:"Designing Distributed Systems",description:"Patterns and Paradigms for Scalable, Reliable Services by Brendon Burns (cofounder of Kubernetes)",source:"@site/docs/computer-science/distributed-system/designing-distributed-systems.md",sourceDirName:"computer-science/distributed-system",slug:"/computer-science/distributed-system/designing-distributed-systems",permalink:"/computer-science/distributed-system/designing-distributed-systems",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/computer-science/distributed-system/designing-distributed-systems.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Consistency",permalink:"/computer-science/distributed-system/consistency"},next:{title:"Distributed Logging",permalink:"/computer-science/distributed-system/distributed-logging"}},c={},d=[{value:"<em>Patterns and Paradigms for Scalable, Reliable Services by Brendon Burns (cofounder of Kubernetes)</em>",id:"patterns-and-paradigms-for-scalable-reliable-services-by-brendon-burns-cofounder-of-kubernetes",level:4}],u={toc:d},l="wrapper";function p(e){let{components:t,...r}=e;return(0,s.kt)(l,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"designing-distributed-systems"},"Designing Distributed Systems"),(0,s.kt)("h4",{id:"patterns-and-paradigms-for-scalable-reliable-services-by-brendon-burns-cofounder-of-kubernetes"},(0,s.kt)("em",{parentName:"h4"},"Patterns and Paradigms for Scalable, Reliable Services by Brendon Burns (cofounder of Kubernetes)")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Both an object and interface for expressing core distributed system patterns"),(0,s.kt)("li",{parentName:"ul"},"side-car, adapter and ambassador patterns to split application into a group of containers on a single machine"),(0,s.kt)("li",{parentName:"ul"},"Loosely coupled multi-node distributed patterns for replication, scaling, and communication between the components"),(0,s.kt)("li",{parentName:"ul"},"Work queues, event-based processing and coordinated workflows# Event-Driven Batch Processing")))}p.isMDXComponent=!0}}]);