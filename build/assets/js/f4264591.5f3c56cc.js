"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61208],{603905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=n,m=d["".concat(p,".").concat(h)]||d[h]||l[h]||i;return r?a.createElement(m,o(o({ref:t},u),{},{components:r})):a.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},883242:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=r(487462),n=(r(667294),r(603905));const i={},o="Others",s={unversionedId:"data-structures/trie/others",id:"data-structures/trie/others",title:"Others",description:"Hash Array Mapped Tries (HAMT)",source:"@site/docs/data-structures/trie/others.md",sourceDirName:"data-structures/trie",slug:"/data-structures/trie/others",permalink:"/data-structures/trie/others",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/trie/others.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Compressed Trie",permalink:"/data-structures/trie/compressed-trie"},next:{title:"Patricia Trie",permalink:"/data-structures/trie/patricia-trie"}},p={},c=[{value:"Hash Array Mapped Tries (HAMT)",id:"hash-array-mapped-tries-hamt",level:2}],u={toc:c},d="wrapper";function l(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"others"},"Others"),(0,n.kt)("h2",{id:"hash-array-mapped-tries-hamt"},"Hash Array Mapped Tries (HAMT)"),(0,n.kt)("p",null,"A ",(0,n.kt)("strong",{parentName:"p"},"hash array mapped trie"),"(",(0,n.kt)("strong",{parentName:"p"},"HAMT"),") is an implementation of an ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Associative_array"},"associative array")," that combines the characteristics of a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_table"},"hash table")," and an array mapped ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Trie"},"trie"),". It is a refined version of the more general notion of a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_tree_(persistent_data_structure)"},"hash tree"),".\n",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_array_mapped_trie"},"https://en.wikipedia.org/wiki/Hash_array_mapped_trie")))}l.isMDXComponent=!0}}]);