"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[25515],{603905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>k});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),o=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=o(r),m=n,k=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return r?a.createElement(k,l(l({ref:t},s),{},{components:r})):a.createElement(k,l({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u[p]="string"==typeof e?e:n,l[1]=u;for(var o=2;o<i;o++)l[o]=r[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},55395:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>o});var a=r(487462),n=(r(667294),r(603905));const i={},l="DS Intro",u={unversionedId:"data-structures/general/ds-intro",id:"data-structures/general/ds-intro",title:"DS Intro",description:"Types",source:"@site/docs/data-structures/general/ds-intro.md",sourceDirName:"data-structures/general",slug:"/data-structures/general/ds-intro",permalink:"/data-structures/general/ds-intro",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/general/ds-intro.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Disjoint-Set Data Structure",permalink:"/data-structures/general/disjoint-set-data-structure"},next:{title:"Elementary Symbol Tables",permalink:"/data-structures/general/elementary-symbol-tables"}},c={},o=[{value:"Types",id:"types",level:2},{value:"Implicit Data Structure",id:"implicit-data-structure",level:3},{value:"Explicit data structure",id:"explicit-data-structure",level:3},{value:"Succinct data structure",id:"succinct-data-structure",level:3},{value:"Linear Data Structure (they all have a logical start and a logical end)",id:"linear-data-structure-they-all-have-a-logical-start-and-a-logical-end",level:2},{value:"Hierarchical Data Structure",id:"hierarchical-data-structure",level:2}],s={toc:o},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ds-intro"},"DS Intro"),(0,n.kt)("h2",{id:"types"},"Types"),(0,n.kt)("h3",{id:"implicit-data-structure"},"Implicit Data Structure"),(0,n.kt)("p",null,"In ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Computer_science"},"computer science"),", a ",(0,n.kt)("strong",{parentName:"p"},"implicit ",(0,n.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Data_structure"},"data structure"))," or ",(0,n.kt)("strong",{parentName:"p"},"space-efficient data structure")," is a data structure that stores very little information other than the main or required data: a data structure that requires low ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Overhead_(computing)"},"overhead"),'. They are called "implicit" because the position of the elements carries meaning and relationship between elements.'),(0,n.kt)("p",null,"Formally, an implicit data structure is one with constant",(0,n.kt)("em",{parentName:"p"},"O"),"(1)space overhead"),(0,n.kt)("h3",{id:"explicit-data-structure"},"Explicit data structure"),(0,n.kt)("h3",{id:"succinct-data-structure"},"Succinct data structure"),(0,n.kt)("p",null,"A ",(0,n.kt)("strong",{parentName:"p"},"succinct data structure")," is a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Data_structure"},"data structure"),' which uses an amount of space that is "close" to the ',(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Information-theoretic"},"information-theoretic")," lower bound, but (unlike other compressed representations) still allows for efficient query operations.\n",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Succinct_data_structure"},"https://en.wikipedia.org/wiki/Succinct_data_structure")),(0,n.kt)("h2",{id:"linear-data-structure-they-all-have-a-logical-start-and-a-logical-end"},"Linear Data Structure (they all have a logical start and a logical end)"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Array"),(0,n.kt)("li",{parentName:"ol"},"Linked List",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Doubly Linked List"),(0,n.kt)("li",{parentName:"ul"},"Circular Linked List"))),(0,n.kt)("li",{parentName:"ol"},"Stack"),(0,n.kt)("li",{parentName:"ol"},"Queue",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Queue FIFO"),(0,n.kt)("li",{parentName:"ul"},"Dequeue"),(0,n.kt)("li",{parentName:"ul"},"Randomized Queue"),(0,n.kt)("li",{parentName:"ul"},"Priority Queue (Using array)")))),(0,n.kt)("h2",{id:"hierarchical-data-structure"},"Hierarchical Data Structure"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Tree(Ex - Family tree, HTML DOM)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Binary Tree"),(0,n.kt)("li",{parentName:"ul"},"Binary Search Tree"),(0,n.kt)("li",{parentName:"ul"},"AVL Tree"),(0,n.kt)("li",{parentName:"ul"},"2-3 Tree"),(0,n.kt)("li",{parentName:"ul"},"Red Black Tree"))),(0,n.kt)("li",{parentName:"ol"},"Trie"),(0,n.kt)("li",{parentName:"ol"},"Heap",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Binary Heap"),(0,n.kt)("li",{parentName:"ul"},"Fibonacci Heap"))),(0,n.kt)("li",{parentName:"ol"},"Hash Map"),(0,n.kt)("li",{parentName:"ol"},"Graph",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Undirected graph"),(0,n.kt)("li",{parentName:"ul"},"Directed graph"))),(0,n.kt)("li",{parentName:"ol"},"Rope (Efficient for String concatenation)")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.wisdomjobs.com/e-university/data-structures-tutorial-290.html"},"https://www.wisdomjobs.com/e-university/data-structures-tutorial-290.html")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://medium.freecodecamp.org/all-you-need-to-know-about-tree-data-structures-bceacb85490c"},"https://medium.freecodecamp.org/all-you-need-to-know-about-tree-data-structures-bceacb85490c")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/learn-all-about-data-structures-used-in-computer-science"},"https://www.freecodecamp.org/news/learn-all-about-data-structures-used-in-computer-science")))}d.isMDXComponent=!0}}]);