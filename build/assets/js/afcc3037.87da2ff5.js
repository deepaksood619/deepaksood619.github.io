"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99071],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,f=m["".concat(l,".").concat(h)]||m[h]||u[h]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},387025:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(487462),i=(n(667294),n(603905));const o={},a="Powerset",s={unversionedId:"algorithms/mathematics/powerset",id:"algorithms/mathematics/powerset",title:"Powerset",description:"Power Set",source:"@site/docs/algorithms/mathematics/powerset.md",sourceDirName:"algorithms/mathematics",slug:"/algorithms/mathematics/powerset",permalink:"/algorithms/mathematics/powerset",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/mathematics/powerset.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MO's Algorithm",permalink:"/algorithms/mathematics/mo-algorithm"},next:{title:"Searching Sorting",permalink:"/algorithms/searching-sorting/"}},l={},p=[{value:"Power Set",id:"power-set",level:3},{value:"Algorithm",id:"algorithm",level:2},{value:"Using Bit Manipulation",id:"using-bit-manipulation",level:2},{value:"Python (Using chain and combinations)",id:"python-using-chain-and-combinations",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"powerset"},"Powerset"),(0,i.kt)("h3",{id:"power-set"},"Power Set"),(0,i.kt)("p",null,"Power set P(S) of a set S is the set of all subsets of S. For example ",(0,i.kt)("inlineCode",{parentName:"p"},"S = {a, b, c} then P(s) = {{}, {a}, {b}, {c}, {a,b}, {a, c}, {b, c}, {a, b, c}}")),(0,i.kt)("p",null,"Powerset also includes empty set and S itself"),(0,i.kt)("p",null,"If S has n elements in it then P(s) will have 2^n elements"),(0,i.kt)("h2",{id:"algorithm"},"Algorithm"),(0,i.kt)("p",null,"Input: Set[], set_size"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"Input: Set[], set_size\n1. Get the size of power set\n    powet_set_size = pow(2, set_size)\n2  Loop for counter from 0 to pow_set_size\n     (a) Loop for i = 0 to set_size\n          (i) If ith bit in counter is set\n               Print ith element from set for this subset\n     (b) Print seperator for subsets i.e., newline\n")),(0,i.kt)("p",null,"Running time - O(2^n^)"),(0,i.kt)("p",null,"Running time with decoding from integer to binary - ",(0,i.kt)("inlineCode",{parentName:"p"},"O(2^n * log n)")),(0,i.kt)("h2",{id:"using-bit-manipulation"},"Using Bit Manipulation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"possibleSubsets(A, N):\n    for i = 0 to 2^N:\n        for j = 0 to N:\n            if jth bit is set in i:\n                print A[j]\n        print \u2018\\n\u2019\n\nvoid possibleSubsets(char A[], int N)\n{\n    for(int i = 0;i < (1 << N); ++i)\n    {\n        for(int j = 0;j < N;++j)\n            if(i & (1 << j))\n                cout << A[j] << \u2018 \u2018;\n        cout << endl;\n    }\n}\n")),(0,i.kt)("h2",{id:"python-using-chain-and-combinations"},"Python (Using chain and combinations)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# get all subsets of a list\nfrom itertools import chain, combinations\ndef all_subsets(s):\nreturn chain(*map(lambda x: combinations(s, x), range(0, len(s)+1)))\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Power_set"},"https://en.wikipedia.org/wiki/Power_set")))}u.isMDXComponent=!0}}]);