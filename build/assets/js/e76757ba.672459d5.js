"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31745],{603905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>u});var a=i(667294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,a,r=function(e,t){if(null==e)return{};var i,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)i=n[a],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)i=n[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var m=a.createContext({}),l=function(e){var t=a.useContext(m),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var i=e.components,r=e.mdxType,n=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(i),g=r,u=h["".concat(m,".").concat(g)]||h[g]||c[g]||n;return i?a.createElement(u,o(o({ref:t},p),{},{components:i})):a.createElement(u,o({ref:t},p))}));function u(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=i.length,o=new Array(n);o[0]=g;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[h]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<n;l++)o[l]=i[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}g.displayName="MDXCreateElement"},13113:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var a=i(487462),r=(i(667294),i(603905));const n={},o="MiniMax Algorithm",s={unversionedId:"algorithms/complex-systems/minimax-algorithm",id:"algorithms/complex-systems/minimax-algorithm",title:"MiniMax Algorithm",description:"Minimax algorithm is a decision rule used in decision theory, game theory, statistics and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario.",source:"@site/docs/algorithms/complex-systems/minimax-algorithm.md",sourceDirName:"algorithms/complex-systems",slug:"/algorithms/complex-systems/minimax-algorithm",permalink:"/algorithms/complex-systems/minimax-algorithm",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/complex-systems/minimax-algorithm.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Complex Systems",permalink:"/algorithms/complex-systems/intro"},next:{title:"Move by nature",permalink:"/algorithms/complex-systems/move-by-nature"}},m={},l=[],p={toc:l},h="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(h,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"minimax-algorithm"},"MiniMax Algorithm"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Minimax"},"https://en.wikipedia.org/wiki/Minimax")),(0,r.kt)("p",null,"Minimax algorithm is a decision rule used in decision theory, game theory, statistics and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario."),(0,r.kt)("p",null,'When dealing with gains, it is referred to as "maximin" - to maximize the minimum gain. Originally formulated for two-player ',(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Zero-sum"},"zero-sum"),(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Game_theory"},"game theory"),", covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been extended to more complex games and to general decision-making in the presence of uncertainty."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction"},"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction")),(0,r.kt)("p",null,"Minimax is a kind of ",(0,r.kt)("a",{parentName:"p",href:"http://www.geeksforgeeks.org/tag/backtracking/"},"backtracking")," algorithm that is used in decision making and game theory to find the optimal move for a player, assuming that your opponent also plays optimally. It is widely used in two player turn based games such as Tic-Tac-Toe, Backgamon, Mancala, Chess, etc."),(0,r.kt)("p",null,"In Minimax the two players are called maximizer and minimizer. The ",(0,r.kt)("strong",{parentName:"p"},"maximizer")," tries to get the highest score possible while the ",(0,r.kt)("strong",{parentName:"p"},"minimizer")," tries to get the lowest score possible while minimizer tries to do opposite."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-2-evaluation-function"},"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-2-evaluation-function")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move"},"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move")),(0,r.kt)("p",null,"Create a ",(0,r.kt)("strong",{parentName:"p"},"Game-Tree")," which shows all the possible moves that an AI can take."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-4-alpha-beta-pruning"},"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-4-alpha-beta-pruning")),(0,r.kt)("p",null,"Alpha-Beta pruning is not actually a new algorithm, rather an optimization technique for minimax algorithm. It cuts off branches in the game tree which need not be searched because there already exists a better move available. It is called Alpha-Beta pruning because it passes 2 extra parameters in the minimax function, namely alpha and beta. (It is used in AI Game algorithms like minimax algorithm to pick a faster winning move)"))}c.isMDXComponent=!0}}]);