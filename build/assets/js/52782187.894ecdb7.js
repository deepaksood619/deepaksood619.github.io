"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[24923],{603905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>f});var t=n(667294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function d(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),i=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):d(d({},r),e)),n},c=function(e){var r=i(e.components);return t.createElement(l.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=i(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?t.createElement(f,d(d({ref:r},c),{},{components:n})):t.createElement(f,d({ref:r},c))}));function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,d=new Array(o);d[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[u]="string"==typeof e?e:a,d[1]=s;for(var i=2;i<o;i++)d[i]=n[i];return t.createElement.apply(null,d)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},341257:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var t=n(487462),a=(n(667294),n(603905));const o={},d="Flask-sqlalchemy",s={unversionedId:"python/others/flask/flask-sqlalchemy",id:"python/others/flask/flask-sqlalchemy",title:"Flask-sqlalchemy",description:"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4",source:"@site/docs/python/others/flask/flask-sqlalchemy.md",sourceDirName:"python/others/flask",slug:"/python/others/flask/flask-sqlalchemy",permalink:"/python/others/flask/flask-sqlalchemy",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/others/flask/flask-sqlalchemy.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/python/others/flask/documentation"},next:{title:"Others",permalink:"/python/others/flask/others"}},l={},i=[{value:"Why Flask-sqlalchemy",id:"why-flask-sqlalchemy",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Example",id:"example",level:2}],c={toc:i},u="wrapper";function p(e){let{components:r,...n}=e;return(0,a.kt)(u,(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"flask-sqlalchemy"},"Flask-sqlalchemy"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/pallets/flask-sqlalchemy"},"https://github.com/pallets/flask-sqlalchemy")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://courses.prettyprinted.com/courses/1016334/lectures/21156810"},"https://courses.prettyprinted.com/courses/1016334/lectures/21156810")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4"},(0,a.kt)("strong",{parentName:"a"},"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4"))),(0,a.kt)("h2",{id:"why-flask-sqlalchemy"},"Why Flask-sqlalchemy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Code Representation of database"),(0,a.kt)("li",{parentName:"ul"},"Database Agnostic"),(0,a.kt)("li",{parentName:"ul"},"Write code in python"),(0,a.kt)("li",{parentName:"ul"},"Integrates with Flask"),(0,a.kt)("li",{parentName:"ul"},"Automatically syncs")),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ORM"),(0,a.kt)("li",{parentName:"ul"},"Model"),(0,a.kt)("li",{parentName:"ul"},"Objects"),(0,a.kt)("li",{parentName:"ul"},"Query API"),(0,a.kt)("li",{parentName:"ul"},"Connection String")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom datetime import datetime, timedelta\nfrom faker import Faker\n\nimport random\n\nfake = Faker()\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n#db.init_app(app)\n\nclass Customer(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    first_name = db.Column(db.String(50), nullable=False)\n    last_name = db.Column(db.String(50), nullable=False)\n    address = db.Column(db.String(500), nullable=False)\n    city = db.Column(db.String(50), nullable=False)\n    postcode = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(50), nullable=False, unique=True)\n\n    orders = db.relationship('Order', backref='customer')\n\n# Association Table (for many to many relationship)\n# Multiple primary key means that it is a composite primary key, combination of both keys should be unique\norder_product = db.Table('order_product',\n    db.Column('order_id', db.Integer, db.ForeignKey('order.id'), primary_key=True),\n    db.Column('product_id', db.Integer, db.ForeignKey('product.id'), primary_key=True)\n)\n\nclass Order(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    order_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    shipped_date = db.Column(db.DateTime)\n    delivered_date = db.Column(db.DateTime)\n    coupon_code = db.Column(db.String(50))\n    customer_id = db.Column(db.Integer, db.ForeignKey('customer.id'), nullable=False)\n\n    products = db.relationship('Product', secondary=order_product)\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), nullable=False, unique=True)\n    price = db.Column(db.Integer, nullable=False)\n\ndef add_customers():\n    for _ in range(100):\n        customer = Customer(\n            first_name=fake.first_name(),\n            last_name=fake.last_name(),\n            address=fake.street_address(),\n            city=fake.city(),\n            postcode=fake.postcode(),\n            email=fake.email()\n        )\n        db.session.add(customer)\n    db.session.commit()\n\ndef add_orders():\n    customers = Customer.query.all()\n\n    for _ in range(1000):\n        #choose a random customer\n        customer = random.choice(customers)\n\n        ordered_date = fake.date_time_this_year()\n        shipped_date = random.choices([None, fake.date_time_between(start_date=ordered_date)], [10, 90])[0]\n\n        #choose either random None or random date for delivered and shipped\n        delivered_date = None\n        if shipped_date:\n            delivered_date = random.choices([None, fake.date_time_between(start_date=shipped_date)], [50, 50])[0]\n\n        #choose either random None or one of three coupon codes\n        coupon_code = random.choices([None, '50OFF', 'FREESHIPPING', 'BUYONEGETONE'], [80, 5, 5, 5])[0]\n\n        order = Order(\n            customer_id=customer.id,\n            order_date=ordered_date,\n            shipped_date=shipped_date,\n            delivered_date=delivered_date,\n            coupon_code=coupon_code\n        )\n\n        db.session.add(order)\n    db.session.commit()\n\ndef add_products():\n    for _ in range(10):\n        product = Product(\n            name=fake.color_name(),\n            price=random.randint(10,100)\n        )\n        db.session.add(product)\n    db.session.commit()\n\ndef add_order_products():\n    orders = Order.query.all()\n    products = Product.query.all()\n\n    for order in orders:\n        #select random k\n        k = random.randint(1, 3)\n        # select random products\n        purchased_products = random.sample(products, k)\n        order.products.extend(purchased_products)\n\n    db.session.commit()\n\ndef create_random_data():\n    db.create_all()\n    add_customers()\n    add_orders()\n    add_products()\n    add_order_products()\n\ndef get_orders_by(customer_id=1):\n    print('Get Orders by Customer')\n    customer_orders = Order.query.filter_by(customer_id=customer_id).all()\n    for order in customer_orders:\n        print(order.order_date)\n\ndef get_pending_orders():\n    print('Pending Orders')\n    pending_orders = Order.query.filter(Order.shipped_date.is_(None)).order_by(Order.order_date.desc()).all()\n    for order in pending_orders:\n        print(order.order_date)\n\ndef how_many_customers():\n    print('How many customers?')\n    print(Customer.query.count())\n\ndef orders_with_code():\n    print('Orders with coupon code')\n    orders = Order.query.filter(Order.coupon_code.isnot(None)).filter(Order.coupon_code != 'FREESHIPPING').all()\n    for order in orders:\n        print(order.coupon_code)\n\ndef revenue_in_last_x_days(x_days=30):\n    print('Revenue past x days')\n    print(db.session\n        .query(db.func.sum(Product.price))\n        .join(order_product).join(Order)\n        .filter(Order.order_date > (datetime.now() - timedelta(days=x_days))\n        ).scalar()\n    )\n\ndef average_fulfillment_time():\n    print('Average fulfillment time')\n    print(\n        db.session.query(\n            db.func.time(\n                db.func.avg(\n                    db.func.strftime('%s', Order.shipped_date) - db.func.strftime('%s', Order.order_date)\n                ),\n                'unixepoch'\n            )\n        ).filter(Order.shipped_date.isnot(None)).scalar()\n    )\n\ndef get_customers_who_have_purchased_x_dollars(amount=500):\n    print('All customers who have purchased x dollars')\n    customers = db.session.query(Customer).join(Order).join(order_product).join(Product).group_by(Customer).having(db.func.sum(Product.price) > amount).all()\n    for customer in customers:\n        print(customer.first_name)\n")))}p.isMDXComponent=!0}}]);