"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75404],{603905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),h=p(n),d=i,c=h["".concat(s,".").concat(d)]||h[d]||u[d]||r;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},984101:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(487462),i=(n(667294),n(603905));const r={},l="General",o={unversionedId:"algorithms/bit-manipulation/general",id:"algorithms/bit-manipulation/general",title:"General",description:"Bitwise Operators ( a = 60, b = 13)",source:"@site/docs/algorithms/bit-manipulation/general.md",sourceDirName:"algorithms/bit-manipulation",slug:"/algorithms/bit-manipulation/general",permalink:"/algorithms/bit-manipulation/general",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/bit-manipulation/general.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/algorithms/bit-manipulation/examples"},next:{title:"Complex Systems",permalink:"/algorithms/complex-systems/"}},s={},p=[{value:"Tricks",id:"tricks",level:2},{value:"Bit Shift",id:"bit-shift",level:2},{value:"XOR",id:"xor",level:2},{value:"Method 2 (Efficient method)",id:"method-2-efficient-method",level:3},{value:"Caching or Indexing",id:"caching-or-indexing",level:2},{value:"1s 2s Complement",id:"1s-2s-complement",level:2}],m={toc:p},h="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"general"},"General"),(0,i.kt)("p",null,"Bitwise Operators ( a = 60, b = 13)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a = 0011 1100"),(0,i.kt)("li",{parentName:"ul"},"b = 0000 1101")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Operator")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Description")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Example")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"& Binary AND")),(0,i.kt)("td",{parentName:"tr",align:null},"Operator copies a bit to the result if it exists in both operands"),(0,i.kt)("td",{parentName:"tr",align:null},"(a & b) (means 0000 1100)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\\| Binary OR")),(0,i.kt)("td",{parentName:"tr",align:null},"It copies a bit if it exists in either operand."),(0,i.kt)("td",{parentName:"tr",align:null},"(a ","|"," b) = 61 (means 0011 1101)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"^ Binary XOR")),(0,i.kt)("td",{parentName:"tr",align:null},"It copies the bit if it is set in one operand but not both."),(0,i.kt)("td",{parentName:"tr",align:null},"(a ^ b) = 49 (means 0011 0001)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"~ Binary Ones Complement")),(0,i.kt)("td",{parentName:"tr",align:null},"It is unary and has the effect of 'flipping' bits."),(0,i.kt)("td",{parentName:"tr",align:null},"(~a ) = -61 (means 1100 0011 in 2's complement form due to a signed binary number.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<< Binary Left Shift")),(0,i.kt)("td",{parentName:"tr",align:null},"The left operands value is moved left by the number of bits specified by the right operand."),(0,i.kt)("td",{parentName:"tr",align:null},"a << 2 = 240 (means 1111 0000)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},">> Binary Right Shift")),(0,i.kt)("td",{parentName:"tr",align:null},"The left operands value is moved right by the number of bits specified by the right operand."),(0,i.kt)("td",{parentName:"tr",align:null},"a >> 2 = 15 (means 0000 1111)")))),(0,i.kt)("h2",{id:"tricks"},"Tricks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"x & (x-1)will clear the lowest set bit of x"),(0,i.kt)("li",{parentName:"ul"},"(x & (1 << i)) != 0, Get the i^th^ bit"),(0,i.kt)("li",{parentName:"ul"},"x & ~(x-1)extracts the lowest set bit of x (all others are clear). Pretty patterns when applied to a linear sequence."),(0,i.kt)("li",{parentName:"ul"},"x & (x + (1 << n))= x, with the run of set bits (possibly length 0) starting at bit n cleared."),(0,i.kt)("li",{parentName:"ul"},"x & ~(x + (1 << n))= the run of set bits (possibly length 0) in x, starting at bit n."),(0,i.kt)("li",{parentName:"ul"},"(x & (~(1 << i))), clear i^th^ bit"),(0,i.kt)("li",{parentName:"ul"},"x | (x + 1)= x with the lowest cleared bit set."),(0,i.kt)("li",{parentName:"ul"},"(x | (1 << i)), Set the i^th^ bit"),(0,i.kt)("li",{parentName:"ul"},"x | ~(x + 1)= extracts the lowest cleared bit of x (all others are set)."),(0,i.kt)("li",{parentName:"ul"},"x | (x - (1 << n))= x, with the run of cleared bits (possibly length 0) starting at bit n set."),(0,i.kt)("li",{parentName:"ul"},"x | ~(x - (1 << n))= the lowest run of cleared bits (possibly length 0) in x, starting at bit n are the only clear bits.")),(0,i.kt)("h2",{id:"bit-shift"},"Bit Shift"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Arithmetic Shift"),(0,i.kt)("p",{parentName:"li"},"In an ",(0,i.kt)("em",{parentName:"p"},"arithmetic shift"),", the bits that are shifted out of either end are discarded. In a left arithmetic shift, zeros are shifted in on the right; in a right arithmetic shift, the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Sign_bit"},"sign bit"),"(the MSB in two's complement) is shifted in on the left, thus preserving the sign of the operand.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Logical Shift"),(0,i.kt)("p",{parentName:"li"},"In a ",(0,i.kt)("em",{parentName:"p"},"logical shift"),", zeros are shifted in to replace the discarded bits. Therefore, the logical and arithmetic left-shifts are exactly the same."),(0,i.kt)("p",{parentName:"li"},"However, as the logical right-shift inserts value 0 bits into the most significant bit, instead of copying the sign bit, it is ideal for unsigned binary numbers, while the arithmetic right-shift is ideal for signed ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Two%27s_complement"},"two's complement")," binary numbers."))),(0,i.kt)("h2",{id:"xor"},"XOR"),(0,i.kt)("p",null,"XOR by 1 can work like a toggle switch that turns 1 to 0 or 0 to 1."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 ^ 1 = 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 ^ 1 = 0"))),(0,i.kt)("p",null,"Another interesting thing to note is"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x^0 = x")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x^x = 0"))),(0,i.kt)("p",null,"XOR - Bitwise XOR of N numbers can be calculated as follows : For each bit position (lets say p), if the number of 1's in the binary representation of the involved numbers at position p is odd then the result is 1 else 0. For example, bitwise XOR of three numbers (3, 4, 5) is (011, 100, 101) => (010) = 2. The LSB and MSB has two 1's so result is 0 for those bits. In most languages, [^] operator can be used to find Xor"),(0,i.kt)("h3",{id:"method-2-efficient-method"},"Method 2 (Efficient method)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Find the remainder of n by moduling it with 4."),(0,i.kt)("li",{parentName:"ol"},"If rem = 0, then xor will be same as n."),(0,i.kt)("li",{parentName:"ol"},"If rem = 1, then xor will be 1."),(0,i.kt)("li",{parentName:"ol"},"If rem = 2, then xor will be n+1."),(0,i.kt)("li",{parentName:"ol"},"If rem = 3 , then xor will be 0.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/calculate-xor-1-n"},"https://www.geeksforgeeks.org/calculate-xor-1-n")),(0,i.kt)("p",null,"OR - Bitwise OR of N numbers can be calculated as follows : Unlike Xor, if any of the N Number has a 1 in that position (lets say p), then the result at p is 1 else 0. Bitwise OR of (3, 4, 5) is (011, 100, 101) => (111) = 7. All bit positions have atleast 1 number with a 1. In most programming languages ","[|]"," operator can be used to find Or"),(0,i.kt)("h2",{id:"caching-or-indexing"},"Caching or Indexing"),(0,i.kt)("p",null,"Caching or Indexing is a technique used to store counts of values which lie in a small range."),(0,i.kt)("h2",{id:"1s-2s-complement"},"1s 2s Complement"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=lKTsv6iVxV4"},"Binary: Plusses & Minuses (Why We Use Two's Complement) - Computerphile")))}u.isMDXComponent=!0}}]);