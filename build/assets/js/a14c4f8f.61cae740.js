"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9807],{603905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=i,f=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},930058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(487462),i=(n(667294),n(603905));const a={},o="Levenshtein distance or Edit Distance",s={unversionedId:"algorithms/dynamic-programming/levenshtein-distance-or-edit-distance",id:"algorithms/dynamic-programming/levenshtein-distance-or-edit-distance",title:"Levenshtein distance or Edit Distance",description:"The Levenshtein Distance, or Edit Distance, is the amount by which two strings differ.",source:"@site/docs/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance.md",sourceDirName:"algorithms/dynamic-programming",slug:"/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance",permalink:"/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Knapsack Problem",permalink:"/algorithms/dynamic-programming/knapsack-problem"},next:{title:"General",permalink:"/algorithms/general/"}},c={},l=[{value:"References",id:"references",level:2}],p={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"levenshtein-distance-or-edit-distance"},"Levenshtein distance or Edit Distance"),(0,i.kt)("p",null,"The Levenshtein Distance, or Edit Distance, is the amount by which two strings differ."),(0,i.kt)("p",null,"There are 3 possible actions that can be applied on a character:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Addition (Insert)"),(0,i.kt)("li",{parentName:"ol"},"Deletion (Remove)"),(0,i.kt)("li",{parentName:"ol"},"Modification (Replace)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# A Naive recursive Python program to find minimum number\n# operations to convert str1 to str2\n\ndef editDistance(str1, str2, m, n):\n\n    # If first string is empty, the only option is to\n    # insert all characters of second string into first\n    if m == 0:\n        return n\n\n    # If second string is empty, the only option is to\n    # remove all characters of first string\n    if n == 0:\n        return m\n\n    # If last characters of two strings are same, nothing\n    # much to do. Ignore last characters and get count for\n    # remaining strings.\n    if str1[m-1] == str2[n-1]:\n        return editDistance(str1, str2, m-1, n-1)\n\n    # If last characters are not same, consider all three\n    # operations on last character of first string, recursively\n    # compute minimum cost for all three operations and take\n    # minimum of three values.\n    return 1 + min(editDistance(str1, str2, m, n-1),    # Insert\n                   editDistance(str1, str2, m-1, n),    # Remove\n                   editDistance(str1, str2, m-1, n-1)    # Replace\n                   )\n\n# Driver code\nstr1 = "sunday"\nstr2 = "saturday"\nprint (editDistance(str1, str2, len(str1), len(str2)))\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Time Complexity")," of above solution is exponential. In worst case, we may end up doing O(3^m) operations. The worst case happens when none of characters of two strings match."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Auxiliary Space:")," O(1), because no extra space is utilized."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/edit-distance-dp-5/"},"https://www.geeksforgeeks.org/edit-distance-dp-5/")))}d.isMDXComponent=!0}}]);