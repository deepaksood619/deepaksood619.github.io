"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[73560],{603905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var r=a(667294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),g=i,h=u["".concat(s,".").concat(g)]||u[g]||c[g]||l;return a?r.createElement(h,n(n({ref:t},m),{},{components:a})):r.createElement(h,n({ref:t},m))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,n=new Array(l);n[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,n[1]=o;for(var p=2;p<l;p++)n[p]=a[p];return r.createElement.apply(null,n)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},907159:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>n,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(487462),i=(a(667294),a(603905));const l={},n="Types of algorithms",o={unversionedId:"algorithms/general/types-of-algorithms",id:"algorithms/general/types-of-algorithms",title:"Types of algorithms",description:"1. Simple recursive algorithms",source:"@site/docs/algorithms/general/types-of-algorithms.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/types-of-algorithms",permalink:"/algorithms/general/types-of-algorithms",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/types-of-algorithms.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Two-Stack Algorithm",permalink:"/algorithms/general/two-stack-algorithm"},next:{title:"Union-Find Algorithm",permalink:"/algorithms/general/union-find-algorithm"}},s={},p=[],m={toc:p},u="wrapper";function c(e){let{components:t,...l}=e;return(0,i.kt)(u,(0,r.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"types-of-algorithms"},"Types of algorithms"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Simple recursive algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"solves the base care directly")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"recurs with a simpler subproblem")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Backtracking algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Based on a depth-first recursive search")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ex- graph colouring (To color a map with no more than four colors)"))))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/solve-coding-interview-backtracking-problem"},"https://www.freecodecamp.org/news/solve-coding-interview-backtracking-problem")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Divide and conquer algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"divide the problems into smaller subproblems of the same type, and solve these subproblems recursively")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"combine the solutions to the subproblems into a solution to the original problem")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ex- quicksort, mergesort")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Dynamic programming algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"remembers past results and use it to find new results")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Optimal substructure")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Overlapping subproblems")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Greedy algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"optimization problem is one in which you want to find, not just a solution, but the best solution. (take the best you can get right now, without regard for future consequences)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ex- counting money")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Branch and bound algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"generally used for optimization problems")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"as the algorithm progresses, a tree of subproblems is formed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'The original problem is considered the "root problem"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A method is used to construct an upper and lower bound for a given problem")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"At each node, apply the bounding methods"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the bounds match, it is deemed a feasible solution to that particular subproblem")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If bounds do not match, partition the problem represented by that node, and make the two subproblems into children nodes")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Continue, using the best known feasible solution to trim sections of the tree, until all nodes have been solved or trimmed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ex - Travelling salesman problem")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Brute force algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"simply tries all possibilities until a satisfactory solution is found")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To improve brute force algorithms following can be used -"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Heuristic - A "rule of thumb" that helps you decide which possibilities to look at first.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Optimization - A way to eliminate certain possibilities without fully exploring them")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Randomized algorithms"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ex - Quicksort, uses a random number to choose a pivot")))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("img",{alt:"image",src:a(873414).Z,width:"1190",height:"1683"}))))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(484508).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(273461).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(238951).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(447870).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(782859).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(700292).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(596848).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(957090).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(688048).Z,width:"1190",height:"1683"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:a(321793).Z,width:"1014",height:"892"})))}c.isMDXComponent=!0},873414:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image1-03922f25149a183046b904555396d036.jpg"},688048:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image10-c74f28d80155c9484fdcbf8be9155152.jpg"},321793:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image11-5ba4b2485e1cb9658e511692f13c7edb.jpg"},484508:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image2-4e4274dd2b23abed1e2c7a632cbaaebb.jpg"},273461:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image3-cef88687a2f95d38d98059112910ebb0.jpg"},238951:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image4-62f405373c33bfd6bf7a9a6533aceade.jpg"},447870:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image5-be958a61103acf64972027ead38d434a.jpg"},782859:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image6-09d029e6cdff383e3ac4292403b2fd7e.jpg"},700292:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image7-d6db4f23cfa919481bde2df49deb1c3e.jpg"},596848:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image8-740fa84288368d852c0c86cce11829e3.jpg"},957090:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Types-of-algorithms-image9-e39deae4f77980db66497c164a654fc9.jpg"}}]);