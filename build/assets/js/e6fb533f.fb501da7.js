"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18235],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(a),m=r,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},81012:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=a(487462),r=(a(667294),a(603905));const o={},l="Data Structures",i={unversionedId:"ai/pandas/data-structures",id:"ai/pandas/data-structures",title:"Data Structures",description:"class pandas. DataFrame (data=None,index=None, columns=None, dtype=None, copy=False)",source:"@site/docs/ai/pandas/data-structures.md",sourceDirName:"ai/pandas",slug:"/ai/pandas/data-structures",permalink:"/ai/pandas/data-structures",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/ai/pandas/data-structures.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/ai/pandas/commands"},next:{title:"Examples",permalink:"/ai/pandas/examples"}},s={},d=[{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-structures"},"Data Structures"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"*class* pandas. **DataFrame** (*data=None*,*index=None*, *columns=None*, *dtype=None*, *copy=False*)")),(0,r.kt)("p",null,"Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure."),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"data :")," numpy ndarray (structured or homogeneous), dict, or DataFrame"),(0,r.kt)("p",{parentName:"li"},"  Dict can contain Series, arrays, constants, or list-like objects"),(0,r.kt)("p",{parentName:"li"},"  Changed in version 0.23.0: If data is a dict, argument order is maintained for Python 3.6 and later.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"index :")," Index or array-like"),(0,r.kt)("p",{parentName:"li"},"  Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"columns :")," Index or array-like"),(0,r.kt)("p",{parentName:"li"},"  Column labels to use for resulting frame. Will default to RangeIndex (0, 1, 2, \u2026, n) if no column labels are provided")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dtype :")," dtype, default None"),(0,r.kt)("p",{parentName:"li"},"  Data type to force. Only a single dtype is allowed. If None, infer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"copy :")," boolean, default False"),(0,r.kt)("p",{parentName:"li"},"  Copy data from inputs. Only affects DataFrame / 2d ndarray input"))),(0,r.kt)("p",null,"Note: All the manipulation operation creates a new dataframe and doesn't change the original dataframe, so either instantiate the dataframe back to the same variable, or explicitely pass inplace=True, if available."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'d = {\'col1\': [1, 2], \'col2\': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf\ncol1  col2\n0     1     3\n1     2     4\n\ndf = pandas.read_csv("http://pythonhow.com/supermarkets.csv")\ndf = pandas.read_json(\'supermarkets.json\')\ndf.set_index(\'ID\')\ndf.shape # returns a tuple with (num_of_rows, num_of_columns)\n\nloan_data_backup = df.copy()\ndf.columns.values\ndf.info()\ndf_columns[\'col_name\'].unique()\n\n# Extract row, column from the dataframe\ndf.loc[:,"Country"])\ndf.iloc[3,1:4]\ndf.ix[3,4]\n\n# Delete row, column from the dataframe\ndf.drop("332 Hill St", 0)\ndf.drop(df.columns[0:3],1)\ndf.columns # returns list of all the column of the dataframe\n\n# Add row column into the dataframe\ndf["Continent"] = df.shape[0]*[North America"] # creates a new column Continent and set all the values of the rows to "North America"\n\ndf["Continent"] = df["Country"] + "," + "North America"\ndf["Address"] = df["Address"] + ", " + df["City"] + ", " + df["State"] + ", " + df["Country"] #update the column Continent, with all addition of all the values specified in the Column.\n\ndf.T # Transpose of the dataframe\n')))}c.isMDXComponent=!0}}]);