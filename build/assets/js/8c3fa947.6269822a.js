"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[40021],{603905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(r),h=a,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||o;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},307221:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(487462),a=(r(667294),r(603905));const o={},i="OpenThread",l={unversionedId:"networking/protocols/openthread",id:"networking/protocols/openthread",title:"OpenThread",description:"Thread",source:"@site/docs/networking/protocols/openthread.md",sourceDirName:"networking/protocols",slug:"/networking/protocols/openthread",permalink:"/networking/protocols/openthread",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/networking/protocols/openthread.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenAPI",permalink:"/networking/protocols/openapi"},next:{title:"Others",permalink:"/networking/protocols/others"}},s={},p=[{value:"Thread",id:"thread",level:2},{value:"Features",id:"features",level:2},{value:"Node Roles and Types",id:"node-roles-and-types",level:2},{value:"Router",id:"router",level:2},{value:"End Device",id:"end-device",level:2},{value:"Device Types",id:"device-types",level:2},{value:"Full Thread Device",id:"full-thread-device",level:2},{value:"Minimal Thread Device",id:"minimal-thread-device",level:2}],d={toc:p},u="wrapper";function c(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"openthread"},"OpenThread"),(0,a.kt)("h2",{id:"thread"},"Thread"),(0,a.kt)("p",null,"Thread is designed to address the unique interoperability, security, power, and architecture challenges of the IoT."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Thread is a low-power wireless mesh networking protocol, based on the universally-supported Internet Protocol (IP), and built using open and proven standards."),(0,a.kt)("li",{parentName:"ul"},"Thread enables device-to-device and device-to-cloud communicationsand reliably connects hundreds (or thousands) of products and includes mandatory security features."),(0,a.kt)("li",{parentName:"ul"},"Thread networks have no single point of failure, can self-heal and reconfigure when a device is added or removed, and are simple to setup and use."),(0,a.kt)("li",{parentName:"ul"},"Thread is based on the broadly supported IEEE 802.15.4 radio standard, which is designed from the ground up for extremely low power consumption and low latency.\n",(0,a.kt)("a",{parentName:"li",href:"http://threadgroup.org/"},"Thread")," is an IPv6-based networking protocol designed for low-power Internet of Things devices in an IEEE 802.15.4-2006 wireless mesh network, commonly called a Wireless Personal Area Network (WPAN). Thread is independent of other 802.15.4 mesh networking protocols, such a ZigBee, Z-Wave, and Bluetooth LE.")),(0,a.kt)("p",null,"Thread's primary features include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simplicity - Simple installation, start up, and operation"),(0,a.kt)("li",{parentName:"ul"},"Security - All devices in a Thread network are authenticated and all communications are encrypted"),(0,a.kt)("li",{parentName:"ul"},"Reliability - Self-healing mesh networking, with no single point of failure, and spread-spectrum techniques to provide immunity to interference"),(0,a.kt)("li",{parentName:"ul"},"Efficiency - Low-power Thread devices can sleep and operate on battery power for years"),(0,a.kt)("li",{parentName:"ul"},"Scalability - Thread networks can scale up to hundreds of devices")),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("p",null,"OpenThread implements all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as Border Router support.\n",(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/reference/"},"APPLICATION SERVICES")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"IPv6 configuration and raw data interface"),(0,a.kt)("li",{parentName:"ul"},"UDP sockets"),(0,a.kt)("li",{parentName:"ul"},"CoAP client and server"),(0,a.kt)("li",{parentName:"ul"},"DHCPv6 client and server"),(0,a.kt)("li",{parentName:"ul"},"DNSv6 client")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/guides/build"},"ENHANCED FEATURES")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Child Supervision"),(0,a.kt)("li",{parentName:"ul"},"Inform Previous Parent on Reattach"),(0,a.kt)("li",{parentName:"ul"},"Jam Detection"),(0,a.kt)("li",{parentName:"ul"},"Periodic Parent Search")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/guides/ncp/"},"NCP SUPPORT")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/openthread/openthread/tree/master/src/ncp"},"Spinel"),", a general purpose NCP protocol"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/openthread/wpantund"},"wpantund"),", a user-space NCP network interface driver/daemon"),(0,a.kt)("li",{parentName:"ul"},"Sniffer support via NCP Spinel nodes")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/guides/border-router"},"BORDER ROUTER")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Web UI for configuration and management"),(0,a.kt)("li",{parentName:"ul"},"Thread Border Agent to support an External Commissioner"),(0,a.kt)("li",{parentName:"ul"},"NAT64 for connecting to IPv4 networks"),(0,a.kt)("li",{parentName:"ul"},"Thread interface driver using wpantund")),(0,a.kt)("h2",{id:"node-roles-and-types"},"Node Roles and Types"),(0,a.kt)("p",null,"In a Thread network, nodes are split into two forwarding roles:"),(0,a.kt)("h2",{id:"router"},"Router"),(0,a.kt)("p",null,"A Router is a node that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"forwards packets for network devices"),(0,a.kt)("li",{parentName:"ul"},"provides secure commissioning services for devices trying to join the network"),(0,a.kt)("li",{parentName:"ul"},"keeps its transceiver enabled at all times")),(0,a.kt)("h2",{id:"end-device"},"End Device"),(0,a.kt)("p",null,"An End Device (ED) is a node that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"communicates primarily with a single Router"),(0,a.kt)("li",{parentName:"ul"},"does not forward packets for other network devices"),(0,a.kt)("li",{parentName:"ul"},"can disable its transceiver to reduce power\n",(0,a.kt)("img",{alt:"image",src:r(633874).Z,width:"828",height:"854"}))),(0,a.kt)("h2",{id:"device-types"},"Device Types"),(0,a.kt)("h2",{id:"full-thread-device"},"Full Thread Device"),(0,a.kt)("p",null,"A Full Thread Device (FTD) always has its radio on, subscribes to the all-routers multicast address, and maintains IPv6 address mappings. There are three types of FTDs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Router"),(0,a.kt)("li",{parentName:"ul"},"Router Eligible End Device (REED) --- can be promoted to a Router"),(0,a.kt)("li",{parentName:"ul"},"Full End Device (FED) --- cannot be promoted to a Router")),(0,a.kt)("p",null,"An FTD can operate as a Router (Parent) or an End Device (Child)."),(0,a.kt)("h2",{id:"minimal-thread-device"},"Minimal Thread Device"),(0,a.kt)("p",null,"A Minimal Thread Device does not subscribe to multicast traffic and forwards all messages to its Parent. There are two types of MTDs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Minimal End Device (MED) --- transceiver always on, does not need to poll for messages from its parent"),(0,a.kt)("li",{parentName:"ul"},"Sleepy End Device (SED) --- normally disabled, wakes on occasion to poll for messages from its parent")),(0,a.kt)("p",null,"An MTD can only operate as an End Device (Child).\n",(0,a.kt)("img",{alt:"image",src:r(77367).Z,width:"740",height:"844"}),(0,a.kt)("strong",{parentName:"p"},"References")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io"},"https://openthread.io")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/guides/thread-primer"},"https://openthread.io/guides/thread-primer")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/guides/thread-primer/node-roles-and-types"},"https://openthread.io/guides/thread-primer/node-roles-and-types")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openthread.io/guides/ncp"},"https://openthread.io/guides/ncp")))}c.isMDXComponent=!0},633874:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/OpenThread-image1-acb011a2b0f28abcc1913d01aedc2b3f.jpg"},77367:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/OpenThread-image2-d833bd52c9ec070b94330bf35e965bdb.jpg"}}]);