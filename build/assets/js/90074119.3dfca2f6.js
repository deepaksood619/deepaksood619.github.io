"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75225],{603905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(r),c=a,d=u["".concat(i,".").concat(c)]||u[c]||h[c]||l;return r?n.createElement(d,o(o({ref:t},m),{},{components:r})):n.createElement(d,o({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},234354:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=r(487462),a=(r(667294),r(603905));const l={},o="Regular Expressions",s={unversionedId:"python/python-intro/regular-expressions",id:"python/python-intro/regular-expressions",title:"Regular Expressions",description:"Pythons Metacharacters",source:"@site/docs/python/python-intro/regular-expressions.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/regular-expressions",permalink:"/python/python-intro/regular-expressions",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/regular-expressions.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Questions",permalink:"/python/python-intro/questions"},next:{title:"Requirements file",permalink:"/python/python-intro/requirements-file"}},i={},p=[{value:"Pythons Metacharacters",id:"pythons-metacharacters",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Compiling",id:"compiling",level:2},{value:"Performing Matches",id:"performing-matches",level:2},{value:"re.match()",id:"rematch",level:2},{value:"group()",id:"group",level:2},{value:"groups()",id:"groups",level:2},{value:"groupdict()",id:"groupdict",level:2},{value:"re.search()",id:"research",level:2},{value:"Named Capturing Groups",id:"named-capturing-groups",level:3},{value:"re.findall()",id:"refindall",level:2},{value:"re.finditer()",id:"refinditer",level:2},{value:"re.start() &amp; re.end()",id:"restart--reend",level:2},{value:"re.sub() (Search and Replace)",id:"resub-search-and-replace",level:2},{value:"Backreference Substitution",id:"backreference-substitution",level:2},{value:"re.split(pattern, string, maxsplit=0, flags=0)",id:"resplitpattern-string-maxsplit0-flags0",level:2},{value:"Compilation Flag",id:"compilation-flag",level:2},{value:"Performance",id:"performance",level:2},{value:"References",id:"references",level:2}],m={toc:p},u="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"regular-expressions"},"Regular Expressions"),(0,a.kt)("h2",{id:"pythons-metacharacters"},"Pythons Metacharacters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},". ^ $ * + ? { } [ ]  | ( )")),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/re.html#module-re"},"re")," module provides an interface to the regular expression engine, allowing us to compile REs into objects and then perform matches with them. (Perl like regular expression)"),(0,a.kt)("h2",{id:"compiling"},"Compiling"),(0,a.kt)("p",null,"Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions."),(0,a.kt)("p",null,"re.compile() also accepts an optional ",(0,a.kt)("em",{parentName:"p"},"flags")," argument, used to enable various special features and syntax variations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>>import re\n\n>>>p = re.compile('ab*', re.IGNORECASE)\n\n>>>p\n\nre.compile(r'ab*', re.IGNORECASE|re.UNICODE)\n\nr'' represents that regular expression is in raw format\n")),(0,a.kt)("h2",{id:"performing-matches"},"Performing Matches"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Method/Attribute")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Purpose")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"match()"),(0,a.kt)("td",{parentName:"tr",align:null},"Determine if the RE matches at the beginning of the string.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"search()"),(0,a.kt)("td",{parentName:"tr",align:null},"Scan through a string, looking for any location where this RE matches.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"findall()"),(0,a.kt)("td",{parentName:"tr",align:null},"Find all substrings where the RE matches, and returns them as a list.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"finditer()"),(0,a.kt)("td",{parentName:"tr",align:null},"Find all substrings where the RE matches, and returns them as an ",(0,a.kt)("a",{parentName:"td",href:"https://docs.python.org/3/glossary.html#term-iterator"},"iterator"),".")))),(0,a.kt)("p",null,"match() and search() return None if no match can be found. If they're successful, a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/re.html#match-objects"},"match object")," instance is returned, containing information about the match: where it starts and ends, the substring it matched, and more."),(0,a.kt)("h2",{id:"rematch"},"re.match()"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/2/library/re.html#re.match"},(0,a.kt)("strong",{parentName:"a"},"re.match()"))," expression only matches at the ",(0,a.kt)("em",{parentName:"p"},"beginning"),"of the string."),(0,a.kt)("p",null,"It either returns a MatchObject instance or returns None if the string does not match the pattern."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import re\nbool(re.match(r'ly', 'similarly'))\n>> False\nbool(re.match(r'ly', 'ly how'))\n>> True\n")),(0,a.kt)("p",null,"We can query the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/re.html#match-objects"},"match object")," for information about the matching string."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Method/Attribute")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Purpose")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"group()"),(0,a.kt)("td",{parentName:"tr",align:null},"Return the string matched by the RE")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"start()"),(0,a.kt)("td",{parentName:"tr",align:null},"Return the starting position of the match")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"end()"),(0,a.kt)("td",{parentName:"tr",align:null},"Return the ending position of the match")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"span()"),(0,a.kt)("td",{parentName:"tr",align:null},"Return a tuple containing the (start, end) positions of the match")))),(0,a.kt)("p",null,"Since thematch()method only checks if the RE matches at the start of a string,start()will always be zero."),(0,a.kt)("h2",{id:"group"},"group()"),(0,a.kt)("p",null,"A group expression returns one or more subgroups of the match"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import re\nm = re.match(r'(w+)@(w+).(w+)','username@hackerrank.com')\nm.group(0) # The entire match\n'username@hackerrank.com'\nm.group(1) # The first parenthesized subgroup.\n'username'\nm.group(2) # The second parenthesized subgroup.\n'hackerrank'\nm.group(3) # The third parenthesized subgroup.\n'com'\nm.group(1,2,3) # Multiple arguments give us a tuple.\n('username', 'hackerrank', 'com')\n")),(0,a.kt)("h2",{id:"groups"},"groups()"),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"groups()")," expression returns a tuple containing all the subgroups of the match."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import re\nm = re.match(r'(w+)@(w+).(w+)','username@hackerrank.com')\nm.groups()\n('username', 'hackerrank', 'com')\n")),(0,a.kt)("h2",{id:"groupdict"},"groupdict()"),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"groupdict()")," expression returns a dictionary containing all the named subgroups of the match, keyed by the subgroup name. (Used by named capture group)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"m = re.match(r'(?P<user>w+)@(?P<website>w+).(?P<extension>w+)','myname@hackerrank.com')\nm.groupdict()\n{'website': 'hackerrank', 'user': 'myname', 'extension': 'com'}\n")),(0,a.kt)("h2",{id:"research"},"re.search()"),(0,a.kt)("p",null,"This function searches for first occurrence of RE ",(0,a.kt)("em",{parentName:"p"},"pattern"),"within ",(0,a.kt)("em",{parentName:"p"},"string"),"with optional ",(0,a.kt)("em",{parentName:"p"},"flags"),"."),(0,a.kt)("p",null,"Here is the syntax for this function\n",(0,a.kt)("inlineCode",{parentName:"p"},"re.search(pattern, string, flags = 0)")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/2/library/re.html#re.search"},"re.search()")," expression scans through a string looking for the ",(0,a.kt)("em",{parentName:"p"},"first")," location where the regex pattern produces a match."),(0,a.kt)("p",null,"It either returns a MatchObject instance or returns None if no position in the string matches the pattern."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import re\nbool(re.search(r'ly', 'similarly'))\n>> True\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"S.No.")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Parameter & Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pattern")," This is the regular expression to be matched.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")," This is the string, which would be searched to match the pattern anywhere in the string.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"flags")," You can specify different flags using ",(0,a.kt)("inlineCode",{parentName:"td"},"bitwise OR (\\|)"),". These are modifiers, which are listed in the table below.")))),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"re.search")," function returns amatchobject on success,none on failure. We use ",(0,a.kt)("em",{parentName:"p"},"group(num)")," or ",(0,a.kt)("em",{parentName:"p"},"groups()")," function ofmatchobject to get the matched expression."),(0,a.kt)("h3",{id:"named-capturing-groups"},"Named Capturing Groups"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"(?P<name>group)"),' captures the match of group into the backreference "name"\nname must be an alphanumeric sequence starting with a letter.\ngroup can be any regular expression\nWe can reference the contents of the group with the named backreference ',(0,a.kt)("inlineCode",{parentName:"p"},"(?P=name)")),(0,a.kt)("h2",{id:"refindall"},"re.findall()"),(0,a.kt)("p",null,"The expression ",(0,a.kt)("em",{parentName:"p"},"re.findall()")," returns all the non-overlapping matches of patterns in a string as a list of strings."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"re.findall(r'w+', '12 drummers drumming, 11 pipers piping, 10 lords a-leaping')")),(0,a.kt)("p",null,"We can use capture group to only capture the groups that we want to capture\nEx -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>>import re\n>>>randStr = \"My number is 412-555-1212\"\n>>>regex = re.compile(r\"412-(.*)-(.*)\")\n>>>matches = re.findall(regex, randStr)\n>>>print(matches)\n[('555', '1212')]\n>>>print(matches [0][0])\n555\n")),(0,a.kt)("h2",{id:"refinditer"},"re.finditer()"),(0,a.kt)("p",null,"The expression ",(0,a.kt)("em",{parentName:"p"},"re.finditer()")," returns an iterator yielding MatchObject instances over all non-overlapping matches for the ",(0,a.kt)("em",{parentName:"p"},"re")," pattern in the string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"iterator = re.finditer(r'w+', '12 drummers drumming, 11 pipers piping, 10 lords a-leaping')\nfor match in iterator:\n print(match.group())\n")),(0,a.kt)("h2",{id:"restart--reend"},"re.start() & re.end()"),(0,a.kt)("p",null,"These expressions return the indices of the start and end of the substring matched by the group."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import re\nm = re.search(r'd+','1234')\nm.end()\n4\nm.start()\n0\nre.start(1) # returns value for 1st capturing group\n")),(0,a.kt)("h2",{id:"resub-search-and-replace"},"re.sub() (Search and Replace)"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"re.sub()")," tool (",(0,a.kt)("em",{parentName:"p"},"sub")," stands for ",(0,a.kt)("em",{parentName:"p"},"substitution"),") evaluates a pattern and, for each valid match, it calls a ",(0,a.kt)("em",{parentName:"p"},"method")," (or ",(0,a.kt)("em",{parentName:"p"},"lambda"),")."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"method")," is called for all matches and can be used to modify strings in different ways."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"re.sub()")," method returns the modified string as an output."),(0,a.kt)("p",null,"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"re.sub(pattern, replacement, string, max=0)\ns = re.sub(r'(?<= )&&(?= )', 'and', s)\ns = re.sub(r'(?<= )||(?= )', 'or', s)\n")),(0,a.kt)("p",null,"This method replaces all occurrences of the RE ",(0,a.kt)("em",{parentName:"p"},"pattern")," in ",(0,a.kt)("em",{parentName:"p"},"string")," with ",(0,a.kt)("em",{parentName:"p"},"replacement"),", substituting all occurrences unless ",(0,a.kt)("em",{parentName:"p"},"max")," is provided. This method returns modified string."),(0,a.kt)("h2",{id:"backreference-substitution"},"Backreference Substitution"),(0,a.kt)("p",null,"Also we can use capturing group as a replacement"),(0,a.kt)("p",null,"Ex1 - This code replaces the bold tag with the content inside the bold tag i.e. The Link"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'>>>randStr = "<a href=\'#\'><b>The Link</b></a>"\n>>>regex = re.compile(r"<b>(.*?)</b>")\n>>>randStr = re.sub(regex, r"1", randStr)\n>>>print(randStr)\n<a href=\'#\'>The Link</a>\n')),(0,a.kt)("p",null,"Ex2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>>randStr = '412-555-1212'\n>>>regex = re.compile(r'([d]{3})-([d{3}-[d]{4})')\n>>>randStr = re.sub(regex, r'(1)2', randStr)\n>>>print(randStr)\n(412)555-1212\n")),(0,a.kt)("h2",{id:"resplitpattern-string-maxsplit0-flags0"},"re.split(pattern, string, maxsplit=0, flags=0)"),(0,a.kt)("p",null,"Split ",(0,a.kt)("em",{parentName:"p"},"string"),"by the occurrences of ",(0,a.kt)("em",{parentName:"p"},"pattern"),". If capturing parentheses are used in ",(0,a.kt)("em",{parentName:"p"},"pattern"),", then the text of all groups in the pattern are also returned as part of the resulting list. If ",(0,a.kt)("em",{parentName:"p"},"maxsplit"),"is nonzero, at most ",(0,a.kt)("em",{parentName:"p"},"maxsplit"),"splits occur, and the remainder of the string is returned as the final element of the list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"re.split(r'W+', 'Words, words, words.')\n['Words', 'words', 'words', '']\n\nre.split(r'(W+)', 'Words, words, words.')\n['Words', ', ', 'words', ', ', 'words', '.', '']\n\nre.split(r'W+', 'Words, words, words.', 1)\n['Words', 'words, words.']\n\nre.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)\n['0', '3', '9']\n")),(0,a.kt)("h2",{id:"compilation-flag"},"Compilation Flag"),(0,a.kt)("p",null,"Compilation flags let you modify some aspects of how regular expressions work. Flags are available in the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/re.html#module-re"},"re")," module under two names, a long name such asIGNORECASEand a short, one-letter form such asI.Multiple flags can be specified by bitwise OR-ing them;re.I|re.Msets both theI andMflags,"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Flag")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Meaning")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ASCII,A"),(0,a.kt)("td",{parentName:"tr",align:null},"Makes several escapes likew,b,sanddmatch only on ASCII characters with the respective property.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DOTALL,S"),(0,a.kt)("td",{parentName:"tr",align:null},"Make.match any character, including newlines.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"IGNORECASE,I"),(0,a.kt)("td",{parentName:"tr",align:null},"Do case-insensitive matches.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"LOCALE,L"),(0,a.kt)("td",{parentName:"tr",align:null},"Do a locale-aware match.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"MULTILINE,M"),(0,a.kt)("td",{parentName:"tr",align:null},"Multi-line matching, affecting^and$.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"VERBOSE,X(for 'extended')"),(0,a.kt)("td",{parentName:"tr",align:null},"Enable verbose REs, which can be organized more cleanly and understandably.")))),(0,a.kt)("p",null,"Also flags can be used in re.compile"),(0,a.kt)("p",null,'Ex - re.compile(r"(?m)^.?s")\nHere ?m represents multiline flag'),(0,a.kt)("h2",{id:"performance"},"Performance"),(0,a.kt)("p",null,"When using a regular expression inside a loop, always use compile and then check for regular expression match inside a loop. CPU takes a lot of time to process the regular expression and using it inside a loop should not be done."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/howto/regex.html"},"https://docs.python.org/3/howto/regex.html")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.tutorialspoint.com/python3/python_reg_expressions.htm"},"https://www.tutorialspoint.com/python3/python_reg_expressions.htm")))}h.isMDXComponent=!0}}]);