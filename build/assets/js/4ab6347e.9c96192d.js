"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[48634],{603905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},38450:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(487462),a=(r(667294),r(603905));const l={},o="Tuples",i={unversionedId:"python/python-intro/data-structure/tuples",id:"python/python-intro/data-structure/tuples",title:"Tuples",description:"Properties",source:"@site/docs/python/python-intro/data-structure/tuples.md",sourceDirName:"python/python-intro/data-structure",slug:"/python/python-intro/data-structure/tuples",permalink:"/python/python-intro/data-structure/tuples",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/data-structure/tuples.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Set",permalink:"/python/python-intro/data-structure/set"},next:{title:"DateTime",permalink:"/python/python-intro/datetime"}},s={},p=[{value:"Properties",id:"properties",level:2},{value:"Making a tuple",id:"making-a-tuple",level:2},{value:"Looping through a tuple",id:"looping-through-a-tuple",level:2},{value:"Sort a list of tuples using key",id:"sort-a-list-of-tuples-using-key",level:2},{value:"Converting list to tuples",id:"converting-list-to-tuples",level:2},{value:"Alternative to classes is Named Tuples",id:"alternative-to-classes-is-named-tuples",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tuples"},"Tuples"),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tuples are similar to lists, but the items in a tuple can't be modified"),(0,a.kt)("li",{parentName:"ul"},"Tuples are hashable"),(0,a.kt)("li",{parentName:"ul"},"Tuples are compound data type i.e. they can contain multiple data types like booleans, string, integers, etc.")),(0,a.kt)("h2",{id:"making-a-tuple"},"Making a tuple"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dimensions = (1920, 1080)")),(0,a.kt)("h2",{id:"looping-through-a-tuple"},"Looping through a tuple"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"for dimension in dimensions:\n    print(dimensions)\n")),(0,a.kt)("h2",{id:"sort-a-list-of-tuples-using-key"},"Sort a list of tuples using key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"sorted_list = sorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)], key=lambda x: x[1])\n\nfrom operator import itemgetter\ndata = [('abc', 121),('abc', 231),('abc', 148), ('abc',221)]\nsorted(data,key=itemgetter(1))\n[('abc', 121), ('abc', 148), ('abc', 221), ('abc', 231)]\n")),(0,a.kt)("p",null,"Using itemgetter is more faster since the computation will be done on c side rather than through the use of lambda"),(0,a.kt)("h2",{id:"converting-list-to-tuples"},"Converting list to tuples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"A = [1, 2, 3, 4]\nB = tuple(A)\nprint(B)\n# (1, 2, 3, 4)\n")),(0,a.kt)("h2",{id:"alternative-to-classes-is-named-tuples"},"Alternative to classes is Named Tuples"),(0,a.kt)("p",null,"Any tuple-like class whose indexable elements are also accessible using named attributes (for example, ",(0,a.kt)("a",{parentName:"p",href:"http://library/time.html"},"time.localtime()")," returns a tuple-like object where theyearis accessible either with an index such ast","[0]","or with a named attribute liket.tm_year)."),(0,a.kt)("p",null,"A named tuple can be a built-in type such as",(0,a.kt)("a",{parentName:"p",href:"http://library/time.html"},"time.struct_time"),", or it can be created with a regular class definition. A full featured named tuple can also be created with the factory function",(0,a.kt)("a",{parentName:"p",href:"http://library/collections.html"},"collections.namedtuple()"),". The latter approach automatically provides extra features such as a self-documenting representation likeEmployee(name='jones',title='programmer')."),(0,a.kt)("p",null,"Using NamedTuple is way shorter than defining a class manually"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import namedtuple\n\nCar = namedtuple('Car', 'color mileage')\n\n# Our new \"Car\" class works as expected:\nmy_car = Car('red', 3812.4)\nmy_car.color\n'red'\n\nmy_car.mileage\n3812.4\n\n# We get a nice string repr for free:\nmy_car\nCar(color='red' , mileage=3812.4)\n\n# Like tuples, namedtuples are immutable:\nmy_car.color = 'blue'\n\n# AttributeError: \"can't set attribute\"\n")))}m.isMDXComponent=!0}}]);