"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[25034],{603905:(n,t,e)=>{e.d(t,{Zo:()=>p,kt:()=>d});var i=e(667294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,i,o=function(n,t){if(null==n)return{};var e,i,o={},r=Object.keys(n);for(i=0;i<r.length;i++)e=r[i],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)e=r[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var s=i.createContext({}),m=function(n){var t=i.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},p=function(n){var t=m(n.components);return i.createElement(s.Provider,{value:t},n.children)},u="mdxType",c={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(n,t){var e=n.components,o=n.mdxType,r=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),u=m(e),h=o,d=u["".concat(s,".").concat(h)]||u[h]||c[h]||r;return e?i.createElement(d,a(a({ref:t},p),{},{components:e})):i.createElement(d,a({ref:t},p))}));function d(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var r=e.length,a=new Array(r);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=n,l[u]="string"==typeof n?n:o,a[1]=l;for(var m=2;m<r;m++)a[m]=e[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,e)}h.displayName="MDXCreateElement"},998938:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var i=e(487462),o=(e(667294),e(603905));const r={},a="Mathematics",l={unversionedId:"python/python-intro/mathematics",id:"python/python-intro/mathematics",title:"Mathematics",description:"Finding nCr for given numbers",source:"@site/docs/python/python-intro/mathematics.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/mathematics",permalink:"/python/python-intro/mathematics",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/mathematics.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Map, reduce, filter",permalink:"/python/python-intro/map-reduce-filter"},next:{title:"Modules",permalink:"/python/python-intro/modules"}},s={},m=[{value:"Finding nCr for given numbers",id:"finding-ncr-for-given-numbers",level:2},{value:"Permutation",id:"permutation",level:2},{value:"Combination",id:"combination",level:2},{value:"1. Combinations are emitted in lexicographic sort order of input. So, if the input list is sorted, the combination tuples will be produced in sorted order",id:"1-combinations-are-emitted-in-lexicographic-sort-order-of-input-so-if-the-input-list-is-sorted-the-combination-tuples-will-be-produced-in-sorted-order",level:3},{value:"2. Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each combination",id:"2-elements-are-treated-as-unique-based-on-their-position-not-on-their-value-so-if-the-input-elements-are-unique-there-will-be-no-repeat-values-in-each-combination",level:3},{value:"3. If we want to make combination of same element to same element then we use combinations_with_replacement",id:"3-if-we-want-to-make-combination-of-same-element-to-same-element-then-we-use-combinations_with_replacement",level:3}],p={toc:m},u="wrapper";function c(n){let{components:t,...e}=n;return(0,o.kt)(u,(0,i.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mathematics"},"Mathematics"),(0,o.kt)("h2",{id:"finding-ncr-for-given-numbers"},"Finding nCr for given numbers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import math\n\ndef nCr(n,r):\n        f = math.factorial\n    return f(n) // f(r) // f(n-r)\n")),(0,o.kt)("p",null,"Use memoization if large number of calls is to be made"),(0,o.kt)("h2",{id:"permutation"},"Permutation"),(0,o.kt)("p",null,"First import itertools package to implement permutations method in python. This method takes a list as an input and return an object list of tuples that contain all permutation in a list form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# A Python program to print all\n# permutations using library function\nfrom itertools import permutations\n\n# Get all permutations of [1, 2, 3]\nperm = permutations([1, 2, 3])\n\n# Print the obtained permutations\nfor i in list(perm):\n    print i\n\nOutput\n(1, 2, 3)\n(1, 3, 2)\n(2, 1, 3)\n(2, 3, 1)\n(3, 1, 2)\n(3, 2, 1)\n")),(0,o.kt)("p",null,"It generates n! permutations if length of input sequence is n.\nIf want want to get permutations of length L then implement it in this way."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# A Python program to print all\n# permutations of given length\nfrom itertools import permutations\n\n# Get all permutations of length 2\n# and length 2\nperm = permutations([1, 2, 3], 2)\n\n# Print the obtained permutations\nfor i in list(perm):\n    print i\n\nOutput\n(1, 2)\n(1, 3)\n(2, 1)\n(2, 3)\n(3, 1)\n(3, 2)\n")),(0,o.kt)("p",null,"It generate nCr * r! permutations if length of input sequence is n and input parameter is r."),(0,o.kt)("h2",{id:"combination"},"Combination"),(0,o.kt)("p",null,"This method takes a list and r (length) as an input and return an object list of tuples which contain all possible combination of length r in a list form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# A Python program to print all\n# combinations of given length\nfrom itertools import combinations\n\n# Get all combinations of [1, 2, 3]\n# and length 2\ncomb = combinations([1, 2, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(1, 2)\n(1, 3)\n(2, 3)\n")),(0,o.kt)("h3",{id:"1-combinations-are-emitted-in-lexicographic-sort-order-of-input-so-if-the-input-list-is-sorted-the-combination-tuples-will-be-produced-in-sorted-order"},"1. Combinations are emitted in lexicographic sort order of input. So, if the input list is sorted, the combination tuples will be produced in sorted order"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# A Python program to print all combinations\n# of given length with unsorted input.\nfrom itertools import combinations\n\n# Get all combinations of [2, 1, 3]\n# and length 2\ncomb = combinations([2, 1, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(2, 1)\n(2, 3)\n(1, 3)\n")),(0,o.kt)("h3",{id:"2-elements-are-treated-as-unique-based-on-their-position-not-on-their-value-so-if-the-input-elements-are-unique-there-will-be-no-repeat-values-in-each-combination"},"2. Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each combination"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# A Python program to print all combinations\n# of given length with duplicates in input\nfrom itertools import combinations\n\n# Get all combinations of [1, 1, 3]\n# and length 2\ncomb = combinations([1, 1, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(1, 1)\n(1, 3)\n(1, 3)\n")),(0,o.kt)("h3",{id:"3-if-we-want-to-make-combination-of-same-element-to-same-element-then-we-use-combinations_with_replacement"},"3. If we want to make combination of same element to same element then we use combinations_with_replacement"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# A Python program to print all combinations\n# with an element-to-itself combination is\n# also included\nfrom itertools import combinations_with_replacement\n\n# Get all combinations of [1, 2, 3] and length 2\ncomb = combinations_with_replacement([1, 2, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(1, 1)\n(1, 2)\n(1, 3)\n(2, 2)\n(2, 3)\n(3, 3)\n")))}c.isMDXComponent=!0}}]);