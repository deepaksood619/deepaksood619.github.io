"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[34650],{603905:(e,t,a)=>{a.d(t,{Zo:()=>g,kt:()=>d});var i=a(667294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),c=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},g=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),h=c(a),u=n,d=h["".concat(s,".").concat(u)]||h[u]||m[u]||r;return a?i.createElement(d,o(o({ref:t},g),{},{components:a})):i.createElement(d,o({ref:t},g))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},711304:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=a(487462),n=(a(667294),a(603905));const r={},o="Commands",l={unversionedId:"technologies/git/commands",id:"technologies/git/commands",title:"Commands",description:"Shortcuts",source:"@site/docs/technologies/git/commands.md",sourceDirName:"technologies/git",slug:"/technologies/git/commands",permalink:"/technologies/git/commands",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/technologies/git/commands.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Branching Strategies",permalink:"/technologies/git/branching-strategies"},next:{title:"Github",permalink:"/technologies/git/github"}},s={},c=[{value:"Shortcuts",id:"shortcuts",level:2},{value:"git clone without history",id:"git-clone-without-history",level:2},{value:"Git add origin",id:"git-add-origin",level:2},{value:"Git Config",id:"git-config",level:2},{value:"Create alias for a command",id:"create-alias-for-a-command",level:2},{value:"Git reset osX credentials in keychain",id:"git-reset-osx-credentials-in-keychain",level:2},{value:"Allow unrelated histories",id:"allow-unrelated-histories",level:2},{value:"Branches",id:"branches",level:2},{value:"Delete untracked files",id:"delete-untracked-files",level:2},{value:"Delete all files expect <code>.git</code>",id:"delete-all-files-expect-git",level:2},{value:"Undo all unstaged local changes",id:"undo-all-unstaged-local-changes",level:2},{value:"Checkout specific file from specific commit",id:"checkout-specific-file-from-specific-commit",level:2},{value:"Stage all files",id:"stage-all-files",level:2},{value:"Git unstage a file",id:"git-unstage-a-file",level:2},{value:"This will tell git you want to start ignoring the changes to the file",id:"this-will-tell-git-you-want-to-start-ignoring-the-changes-to-the-file",level:3},{value:"When you want to start keeping track again",id:"when-you-want-to-start-keeping-track-again",level:3},{value:"Gitlab revert/reset",id:"gitlab-revertreset",level:2},{value:"Revert",id:"revert",level:2},{value:"Reset",id:"reset",level:2},{value:"Reset head",id:"reset-head",level:2},{value:"Git Merge",id:"git-merge",level:2},{value:"git Reflog",id:"git-reflog",level:2},{value:"Git request-pull",id:"git-request-pull",level:2},{value:"Git merge-base",id:"git-merge-base",level:2},{value:"Logs",id:"logs",level:2},{value:"Move the last commit to a new branch",id:"move-the-last-commit-to-a-new-branch",level:2},{value:"Rewrite or rename the last commit message (Change the last commit message)",id:"rewrite-or-rename-the-last-commit-message-change-the-last-commit-message",level:2},{value:"Add a forgotten file after a commit",id:"add-a-forgotten-file-after-a-commit",level:2},{value:"Squashing Commits",id:"squashing-commits",level:2},{value:"Reverting The Working Copy to an Older Commit",id:"reverting-the-working-copy-to-an-older-commit",level:2},{value:"Git stashing",id:"git-stashing",level:2},{value:"Git add a file forcefully (overriding the file in .gitignore)",id:"git-add-a-file-forcefully-overriding-the-file-in-gitignore",level:2},{value:"Submodules",id:"submodules",level:2},{value:"Find a string in git repo",id:"find-a-string-in-git-repo",level:2},{value:"Checkout",id:"checkout",level:2},{value:"Cleanup branches",id:"cleanup-branches",level:2},{value:"Prune origin (remove all branches that are merged)",id:"prune-origin-remove-all-branches-that-are-merged",level:3},{value:"Delete merged branches from remote",id:"delete-merged-branches-from-remote",level:3},{value:"Cleaning git history, commits, branches",id:"cleaning-git-history-commits-branches",level:2},{value:"Rewrite history of entire branch (git-filter-branch)",id:"rewrite-history-of-entire-branch-git-filter-branch",level:3},{value:"git cherry-pick",id:"git-cherry-pick",level:2},{value:"git commit case-sensitive filename changes",id:"git-commit-case-sensitive-filename-changes",level:2},{value:"Git ignore already tracked files",id:"git-ignore-already-tracked-files",level:2},{value:"Analytics",id:"analytics",level:2},{value:"loc",id:"loc",level:3}],g={toc:c},h="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(h,(0,i.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"commands"},"Commands"),(0,n.kt)("h2",{id:"shortcuts"},"Shortcuts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"ggpull\nggpush\ngst\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh"},"https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh")),(0,n.kt)("h2",{id:"git-clone-without-history"},"git clone without history"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --depth 1 reponame.git\ngit clone --depth=1 --branch=master git://someserver/somerepo dirformynewrepo\n<https://stackoverflow.com/questions/30001304/clone-git-repository-without-history/30001366>\nClone all repo in organization - <https://gist.github.com/potter0815/42dda83fa1709693be36>\n")),(0,n.kt)("h2",{id:"git-add-origin"},"Git add origin"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git remote add origin <https://github.com/deepaksood619/DjangoDemoApplication.git>\ngit push -u origin master\ngit remote set-url origin git@gitlab.com:example-datascience/decision-engine.git (change remote repository origin)\ngit remote rm destination\ngit push -u origin --all (for pushing old repo to new place)\n")),(0,n.kt)("h2",{id:"git-config"},"Git Config"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global user.name (seeing the current set username globally)\ngit config user.email (seeing the set username for current project)\ngit config --global user.name "deepaksood619" (set username globally)\ngit config --global core.editor "vim" (Change git editor)\n')),(0,n.kt)("h2",{id:"create-alias-for-a-command"},"Create alias for a command"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global alias.a "add ."\ngit config --global alias.c "f"\n')),(0,n.kt)("h2",{id:"git-reset-osx-credentials-in-keychain"},"Git reset osX credentials in keychain"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git config --local credential.helper ""\ngit config --local credential.helper osxkeychain\ngit credential-osxkeychain erase host=github.com protocol=https (press return)\n')),(0,n.kt)("h2",{id:"allow-unrelated-histories"},"Allow unrelated histories"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git pull --allow-unrelated-histories\ngit pull origin master --allow-unrelated-histories\n")),(0,n.kt)("h2",{id:"branches"},"Branches"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git branch (Show all branches)\ngit branch -v (verify remote branch)\ngit branch -a (show all branches)\ngit branch --delete <branch>\ngit branch -d <branch> # Shorter version\ngit branch -D <branch> # Force delete un-merged branches\ngit branch --remote (check remote branches)\ngit branch | grep -v "master" | xargs git branch -D (Delete all branches except master locally)\ngit branch --merged origin/master | xargs git branch -d (Remove all local branches that are not in master (merged on master))\n\nCreate and checkout a branch\n    git checkout -b bugFix\n    git checkout [branch_name] (Checkout existing branch)\n\nCheckout remote branch in local\n    git checkout -b bugFix -t origin/bugFix\n    git checkout -t origin/bugFix (shorthand)\n    git checkout --track origin/issuefix\n\n    git branch -u origin/dev (track remote branch after checkout)\n\nDelete branch from remote\n    git push -d <remote-name> <branch-name>\n    Ex - git push -d origin master\n    git push origin --delete dev\n\nGit show all branches with author\n    git for-each-ref --format=\'%(committerdate) %09 %(authorname) %09 %(refname)\' | sort -k5n -k2M -k3n -k4n\n\nUpdate a branch with master\n    git checkout master\n    git pull\n    git checkout branch_name\n    git rebase master\n\nCreate and push new branch\n    git checkout -b my_branch\n    git commit -m "some work done"\n    git push -u origin my_branch\n\n    # error: src refspec remotes/origin/decision_engine_monika matches more than one\n    git push origin HEAD:remotes/origin/decision_engine_monika\n')),(0,n.kt)("h2",{id:"delete-untracked-files"},"Delete untracked files"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clean [-f] (delete untracked files in current directory)\ngit clean -f -d (remove untracked directories)\ngit clean -f -i (clean the working directory interactively)\n-n (to dry-run the operation and display the results without actually deleting anything)\n")),(0,n.kt)("h2",{id:"delete-all-files-expect-git"},"Delete all files expect ",(0,n.kt)("inlineCode",{parentName:"h2"},".git")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# Resetting the index is cheap, so\ngit rm -rf .\ngit clean -fxd\n\n# Then you can reset the index (with git reset) or go straight on to checking out a new branch.\n")),(0,n.kt)("h2",{id:"undo-all-unstaged-local-changes"},"Undo all unstaged local changes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout .\ngit checkout origin/master filepath #revert a file to origin/master after commiting the file\n")),(0,n.kt)("h2",{id:"checkout-specific-file-from-specific-commit"},"Checkout specific file from specific commit"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout c5f567 -- file1/to/restore file2/to/restore\n")),(0,n.kt)("h2",{id:"stage-all-files"},"Stage all files"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git add .")),(0,n.kt)("h2",{id:"git-unstage-a-file"},"Git unstage a file"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git reset <filepath>")," - will ",(0,n.kt)("strong",{parentName:"p"},"unstage")," any staged changes for the given file(s). ",(0,n.kt)("strong",{parentName:"p"},"makes git stop tracking the file completely"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git rm --cached <filepath>")," - ",(0,n.kt)("strong",{parentName:"p"},"does not unstage")," a file, it actually ",(0,n.kt)("strong",{parentName:"p"},"stages the removal of the file(s)")," from the repo (assuming it was already committed before) but leaves the file in your working tree (leaving you with an untracked file). ",(0,n.kt)("strong",{parentName:"p"},"unstages any modifications made to the file since the last commit"),"(but doesn't revert them in the filesystem, contrary to what the command name might suggest**). The file remains under revision control."),(0,n.kt)("p",null,"if you used ",(0,n.kt)("inlineCode",{parentName:"p"},"git rm --cached")," on a new file that is staged, it would basically look like you had just unstaged it since it had never been committed before."),(0,n.kt)("h3",{id:"this-will-tell-git-you-want-to-start-ignoring-the-changes-to-the-file"},"This will tell git you want to start ignoring the changes to the file"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git update-index --assume-unchanged path/to/file")),(0,n.kt)("h3",{id:"when-you-want-to-start-keeping-track-again"},"When you want to start keeping track again"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git update-index --no-assume-unchanged path/to/file")),(0,n.kt)("h2",{id:"gitlab-revertreset"},"Gitlab revert/reset"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"1. unprotect the branch\n2. git reset cba55c24dfe8fe96ae3abe6b38888bd12bb97980 (the commit you want to go to)\n3. git reset --hard\n4. git push -f origin master\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://dev.to/neshaz/when-to-use-git-reset-git-revert--git-checkout-18je"},"https://dev.to/neshaz/when-to-use-git-reset-git-revert--git-checkout-18je")),(0,n.kt)("h2",{id:"revert"},"Revert"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Rollback changes you have committed."),(0,n.kt)("li",{parentName:"ul"},"Creates a new commit from a specified commit by inverting it. Hence, adds a new commit history to the project, but it does not modify the existing one."),(0,n.kt)("li",{parentName:"ul"},"Has the potential to overwrite files in the working directory.")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git revert HEAD~1")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-revert"},"https://git-scm.com/docs/git-revert")),(0,n.kt)("h2",{id:"reset"},"Reset"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use this to return the entire working tree to the last committed state.This will discard commits in a private branch or throw away uncommitted changes!"),(0,n.kt)("li",{parentName:"ul"},"Changes which commit a branch HEAD is currently pointing at. It alters the existing commit history."),(0,n.kt)("li",{parentName:"ul"},"Can be used tounstagea file.")),(0,n.kt)("h2",{id:"reset-head"},"Reset head"),(0,n.kt)("p",null,"This will discard commits in a private branch or throw away uncommitted changes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git reset --hard [HEAD]\ngit reset .\ngit reset HEAD~ (revert a last commit with changes shown)\ngit reset HEAD~ --hard (Revert a last commit with all changes removed)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Tilde vs Caret")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use ",(0,n.kt)("inlineCode",{parentName:"li"},"~")," most of the time - to go back a number of generations, usually what you want"),(0,n.kt)("li",{parentName:"ul"},"Use ",(0,n.kt)("inlineCode",{parentName:"li"},"^")," on merge commits - because they have two or more (immediate) parents")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Mnemonics:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Tilde ",(0,n.kt)("inlineCode",{parentName:"li"},"~")," is almost linear in appearance and wants to go backward in a straight line"),(0,n.kt)("li",{parentName:"ul"},"Caret ",(0,n.kt)("inlineCode",{parentName:"li"},"^")," suggests an interesting segment of a tree or a fork in the road")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:a(336773).Z,width:"1100",height:"701"})),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git"},"https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde"},"http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Move to forward commit")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git reset 'HEAD@{1}'")),(0,n.kt)("h2",{id:"git-merge"},"Git Merge"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout --theirs path/to/file # accept their changes in conflict state\ngit checkout --theirs .\ngit merge --abort\ngit reset --hard HEAD\ngit reset HEAD~1\n")),(0,n.kt)("h2",{id:"git-reflog"},"git Reflog"),(0,n.kt)("p",null,'reflog is a local record of all commits referenced in your repository, and can be seen as a "safety net", useful for recovering lost commits.'),(0,n.kt)("p",null,"Show histories of references"),(0,n.kt)("h2",{id:"git-request-pull"},"Git request-pull"),(0,n.kt)("p",null,"Prints in the standard output a report asking the upstream project to pull changes into their tree."),(0,n.kt)("h2",{id:"git-merge-base"},"Git merge-base"),(0,n.kt)("p",null,"Finds best common ancestor(s) between two commits to use in a three-way merge."),(0,n.kt)("h2",{id:"logs"},"Logs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git log --abbrev-commit -- preety=oneline (get abbreviated commit hash)\ngit log --pretty=format:"%h %s" --graph (show commit history as a graph)\ngit log --graph\ngit log --oneline\ngit log --oneline --graph\n[A DOG] git log --all --decorate --oneline --graph\n')),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"image",src:a(265140).Z,width:"407",height:"405"})),(0,n.kt)("h2",{id:"move-the-last-commit-to-a-new-branch"},"Move the last commit to a new branch"),(0,n.kt)("p",null,"If you commit to the current branch when instead you wanted to commit to a new branch, you can easily correct your mistake."),(0,n.kt)("p",null,"For example if you made your commit to master instead of test:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# create new branch from current HEAD but stays on master\n$ git branch test\n\n# reset master to before last commit\n$ git reset --hard HEAD~\n\n# continue on new branch\n$ git checkout test\n\n")),(0,n.kt)("h2",{id:"rewrite-or-rename-the-last-commit-message-change-the-last-commit-message"},"Rewrite or rename the last commit message (Change the last commit message)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git commit --amend\ngit commit --amend --signoff # Add DCO (contributing)\ngit commit --amend --reuse-message HEAD\n")),(0,n.kt)("h2",{id:"add-a-forgotten-file-after-a-commit"},"Add a forgotten file after a commit"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git add forgotten_file\ngit commit --amend\n")),(0,n.kt)("h2",{id:"squashing-commits"},"Squashing Commits"),(0,n.kt)("p",null,"If you contribute to an open source project, e.g. by submitting a pull request with a bug fix, it should be presented as one unit of code."),(0,n.kt)("p",null,"You should ",(0,n.kt)("strong",{parentName:"p"},"squash")," your commits together. For example, if you have three commits:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git reset HEAD~3\ngit add .\ngit commit -am "Fix bug #14"\ngit push --force\n')),(0,n.kt)("p",null,"The --force option is needed if the commits have already been pushed, in order for them to be replaced. ",(0,n.kt)("strong",{parentName:"p"},"Beware")," that this overwrites previous history so always avoid when possible"),(0,n.kt)("h2",{id:"reverting-the-working-copy-to-an-older-commit"},"Reverting The Working Copy to an Older Commit"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# Resets index to former commit; replace '56e05fced' with your commit code\ngit reset 56e05fced\n# Moves pointer back to previous HEAD\ngit reset --soft HEAD@{1}\ngit commit -m \"Revert to 56e05fced\"\n# Updates working copy to reflect the new commit\ngit reset --hard\n")),(0,n.kt)("h2",{id:"git-stashing"},"Git stashing"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git-stash - Stash the changes in a dirty working directory away\n\ngit stash --all #stashes all files, including untracked and ignored files.\n\ngit stash list [<options>]\ngit stash show [<stash>]\ngit stash drop [-q|--quiet] [<stash>]\ngit stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]\ngit stash branch <branchname> [<stash>]\ngit stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n        [-u|--include-untracked] [-a|--all] [-m|--message <message>]]\n        [--] [<pathspec>\u2026\u200b]]\ngit stash clear\ngit stash create [<message>]\ngit stash store [-m|--message <message>] [-q|--quiet] <commit>\n\nGit stash apply stash@{1}\nGit stash drop stash@{1}\n\n# push specific file to stash\ngit stash push -m test alert_driver/alertdriver.py\n\n")),(0,n.kt)("h2",{id:"git-add-a-file-forcefully-overriding-the-file-in-gitignore"},"Git add a file forcefully (overriding the file in .gitignore)"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git add -f assets/debug.apk")),(0,n.kt)("h2",{id:"submodules"},"Submodules"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git submodule update --recursive --remote (1.8.2)\ngit submodule update --recursive (1.7.3)\ngit pull --recurse-submodules\n\n# Submodules init and update recursively\n    git submodule update --init -recursive\n    git submodule update --recursive\n\n# Adding submodule to a repository\n    git submodule add http://github.com/submodule\n\n# git submodule reset\ngit submodule update -f --recursive\n")),(0,n.kt)("h2",{id:"find-a-string-in-git-repo"},"Find a string in git repo"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git grep "the magic string"\ngit show-ref --heads\'\n')),(0,n.kt)("h2",{id:"checkout"},"Checkout"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use this to move the ",(0,n.kt)("a",{parentName:"li",href:"https://kolosek.com/git-branches/"},"HEAD pointer")," to a specific commit orswitchbetween branches."),(0,n.kt)("li",{parentName:"ul"},"Itrollbacksany content changes to those of the specific commit."),(0,n.kt)("li",{parentName:"ul"},"This willnotmake changes to the commit history."),(0,n.kt)("li",{parentName:"ul"},"Has potential tooverwritefiles in the working directory.")),(0,n.kt)("h2",{id:"cleanup-branches"},"Cleanup branches"),(0,n.kt)("h3",{id:"prune-origin-remove-all-branches-that-are-merged"},"Prune origin (remove all branches that are merged)"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git remote prune origin")),(0,n.kt)("h3",{id:"delete-merged-branches-from-remote"},"Delete merged branches from remote"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git branch -r --merged | egrep -v \"(^*|master|dev)\" | sed 's/origin///' | xargs -n 1 git push origin --delete")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://nickymeuleman.netlify.app/blog/delete-git-branches"},"https://nickymeuleman.netlify.app/blog/delete-git-branches")),(0,n.kt)("h2",{id:"cleaning-git-history-commits-branches"},"Cleaning git history, commits, branches"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar ~/Downloads/office/bfg-1.13.0.jar --strip-blobs-bigger-than 1M .\njava -jar ~/Downloads/office/bfg-1.13.0.jar --strip-blobs-bigger-than 128K .\n\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\ngit gc --aggressive --prune=all\n\n# unprotect the branch in gitlab first\ngit push --force origin master\n\n# brew install coreutils\n# This shell script displays all blob objects in the repository, sorted from smallest to largest.\ngit rev-list --objects --all \\\n| git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \\\n| sed -n 's/^blob //p' \\\n| sort --numeric-sort --key=2 \\\n| cut -c 1-12,41- \\\n| $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://passingcuriosity.com/2017/truncating-git-history"},"https://passingcuriosity.com/2017/truncating-git-history")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/newren/git-filter-repo"},(0,n.kt)("strong",{parentName:"a"},"https://github.com/newren/git-filter-repo"))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"brew install git-filter-repo")),(0,n.kt)("h3",{id:"rewrite-history-of-entire-branch-git-filter-branch"},"Rewrite history of entire branch (git-filter-branch)"),(0,n.kt)("p",null,"One common use case for this is removing sensitive data (e.g. login credentials for production systems) that were committed to a public repository."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# Manual\nman git-filter-branch\n\ngit filter-branch --force --index-filter\n'git rm --cached --ignore-unmatch k8s/secrets.txt'\n--prune-empty --tag-name-filter cat -- --all\n\ngit push --force\n")),(0,n.kt)("p",null,"This will remove the filesecrets.txt from every branch and tag. It will also remove any commits that would be empty as a result of the above operation. Keep in mind that this will rewrite your project's entire history, which can be very disruptive in a distributed workflow. Also while the file in question has now been removed, the credentials it contained should still be considered compromised!"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/newren/git-filter-repo"},"https://github.com/newren/git-filter-repo")," (filter-branch replacement)"),(0,n.kt)("h2",{id:"git-cherry-pick"},"git cherry-pick"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git cherry-pick <hash>\ngit cherry-pick --skip\ngit cherry-pick --abort\n")),(0,n.kt)("h2",{id:"git-commit-case-sensitive-filename-changes"},"git commit case-sensitive filename changes"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"git mv -f OldFileNameCase newfilenamecase")),(0,n.kt)("h2",{id:"git-ignore-already-tracked-files"},"Git ignore already tracked files"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"git update-index --skip-worktree")),(0,n.kt)("p",{parentName:"li"},"  ",(0,n.kt)("inlineCode",{parentName:"p"},"--skip-worktree")," is the flag which means the files should change locally"),(0,n.kt)("p",{parentName:"li"},"  That is, Use the command when you want to modify files managed by Git locally (or updated automatically) but you do not want Git to manage that change."),(0,n.kt)("p",{parentName:"li"},"  Because the command is to prevent local changes from being managed by Git,we will use the command in most cases."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ git update-index --skip-worktree path/to/file # Exclude from the management of Git\n\n$ git ls-files -v | grep ^S # Confirming\n    git ls-files shows all files managed by git.\n    -v check the file being ignored.\n    --skip-worktree is displayed withS.\n\n$ git update-index --no-skip-worktree path/to/file # Restore to the management of Git\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"git update-index --assume-unchanged")),(0,n.kt)("p",{parentName:"li"},"  ",(0,n.kt)("inlineCode",{parentName:"p"},"--assume-unchanged")," is the flag which means the files should not change locally"),(0,n.kt)("p",{parentName:"li"},"  In other words, it is used whenignore files that you do not need to change locally (or should not change)."),(0,n.kt)("p",{parentName:"li"},"  --assume-unchanged is used when you want to speed up Git's behavior by ignoring unnecessary files."),(0,n.kt)("p",{parentName:"li"},"  Also, since it is an idea to ignore local changes,git reset - hardcommand will delete local changes."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ git update-index --assume-unchanged path/to/file # Exclude from the management of Git\n$ git ls-files -v | grep ^h # Confirming\n    assume-unchanged is displayed with h\n\n$ git update-index --no-assume-unchanged path/to/file # Restore to the management of Git\n")))),(0,n.kt)("h2",{id:"analytics"},"Analytics"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git shortlog -sn\ngit shortlog -sn --no-merges\nhttps://github.com/IonicaBizau/git-stats\n\ngit ls-files | xargs wc -l #git count number of lines\n\nhttps://www.gitclear.com/measuring_developer_productivity_a_comprehensive_guide_for_the_data_driven\n\nbrew install cloc (count lines of code)\n    cloc --vcs=git\n")),(0,n.kt)("h3",{id:"loc"},"loc"),(0,n.kt)("p",null,"loc is a tool for counting lines of code. It's a rust implementation of cloc, but it's more than 100x faster. There's another rust code counting tool called tokei, loc is ~2-10x faster than tokei, depending on how many files are being counted."),(0,n.kt)("p",null,"Counting just the dragonflybsd codebase (~9 million lines):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"loc: 1.09 seconds\ntokei: 5.3 seconds\ncloc: 1 minute, 50 seconds\n\nbrew install loc\n\nloc\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/cgag/loc"},"GitHub - cgag/loc: Count lines of code quickly.")))}m.isMDXComponent=!0},336773:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/Technologies-Git-Commands-image1-7e8b220c0b8ea40b897ad62523aa2f6a.jpg"},265140:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/Technologies-Git-Commands-image2-ca6bf0fa7f38083ac954f0af75e62ace.jpg"}}]);