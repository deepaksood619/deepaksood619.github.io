"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[50096],{603905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(667294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),p=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(a.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,f=u["".concat(a,".").concat(d)]||u[d]||k[d]||c;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<c;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},351293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>k,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var r=n(487462),o=(n(667294),n(603905));const c={},i="Sockets",s={unversionedId:"networking/networking-concepts/sockets",id:"networking/networking-concepts/sockets",title:"Sockets",description:"Socket",source:"@site/docs/networking/networking-concepts/sockets.md",sourceDirName:"networking/networking-concepts",slug:"/networking/networking-concepts/sockets",permalink:"/networking/networking-concepts/sockets",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/networking/networking-concepts/sockets.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Routing",permalink:"/networking/networking-concepts/routing"},next:{title:"TCP/IP",permalink:"/networking/networking-concepts/tcp-ip"}},a={},p=[{value:"Socket",id:"socket",level:2},{value:"UDP socket server in python",id:"udp-socket-server-in-python",level:2},{value:"UDP socket client in python",id:"udp-socket-client-in-python",level:2},{value:"TCP socket",id:"tcp-socket",level:2}],l={toc:p},u="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sockets"},"Sockets"),(0,o.kt)("h2",{id:"socket"},"Socket"),(0,o.kt)("p",null,"The first function is socket(), which creates an object called a socket. A socket is a number that a program can use to communicate with another program. In UNIX terms, it is no different from a file descriptor, which is a number that is used for reading or writing from an open file. Instead, with a socket, a program is reading (receiving) or writing (sending) from or to the network.\nnc -l 8000 # for tcp listen"),(0,o.kt)("p",null,"nc -l 8000 -u"),(0,o.kt)("p",null,"This just tells nc to create a UDP receiver (the argument -u) that is expecting data on port 8000. Now, let's use sock object to send data to nc."),(0,o.kt)("h2",{id:"udp-socket-server-in-python"},"UDP socket server in python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from socket import *\n\nsock_receiver = socket(AF_INET, SOCK_DGRAM)\n\nsock_receiver.bind(("127.0.0.1", 8000))\n\nsock_receiver.recv(4096)\n')),(0,o.kt)("h2",{id:"udp-socket-client-in-python"},"UDP socket client in python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from socket import *\n\nsock_object=socket(AF_INET, SOCK_DGRAM)\n\nsock_object.sendto(b"hello", ("127.0.0.1", 8000))\n')),(0,o.kt)("h2",{id:"tcp-socket"},"TCP socket"),(0,o.kt)("p",null,"tcp_socket = socket(AF_INET, SOCK_STREAM)\n",(0,o.kt)("a",{parentName:"p",href:"https://cs.nyu.edu/courses/fall17/CSCI-UA.0480-009"},"https://cs.nyu.edu/courses/fall17/CSCI-UA.0480-009")))}k.isMDXComponent=!0}}]);