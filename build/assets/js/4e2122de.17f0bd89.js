"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[96398],{603905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=n,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||o;return r?a.createElement(m,i(i({ref:t},p),{},{components:r})):a.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},92742:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=r(487462),n=(r(667294),r(603905));const o={},i="Apache Zookeeper",l={unversionedId:"technologies/apache/apache-zookeeper",id:"technologies/apache/apache-zookeeper",title:"Apache Zookeeper",description:"Apache Zookeeper is a distributed, open-source configuration, synchronization service along with naming registry for distributed applications.",source:"@site/docs/technologies/apache/apache-zookeeper.md",sourceDirName:"technologies/apache",slug:"/technologies/apache/apache-zookeeper",permalink:"/technologies/apache/apache-zookeeper",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/technologies/apache/apache-zookeeper.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Apache Storm",permalink:"/technologies/apache/apache-storm"},next:{title:"Celery",permalink:"/technologies/apache/celery/"}},c={},s=[{value:"Architecture",id:"architecture",level:2},{value:"References",id:"references",level:2}],p={toc:s},u="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"apache-zookeeper"},"Apache Zookeeper"),(0,n.kt)("p",null,"Apache Zookeeper is a distributed, open-source configuration, synchronization service along with naming registry for distributed applications."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Centralized configuration management tool"),(0,n.kt)("li",{parentName:"ul"},"Used for leader election and distributed locking"),(0,n.kt)("li",{parentName:"ul"},"Scales well for the reads but not for the writes"),(0,n.kt)("li",{parentName:"ul"},"Stores data in-memory"),(0,n.kt)("li",{parentName:"ul"},"Great if storing a limited amount of data with high number of reads is the requirement"),(0,n.kt)("li",{parentName:"ul"},"ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services"),(0,n.kt)("li",{parentName:"ul"},"Quorum management service and manage topic metadata"),(0,n.kt)("li",{parentName:"ul"},"Highly reliable distributed coordination kernet, which can be used for distributed locking, configuration management, leadership election, work queues"),(0,n.kt)("li",{parentName:"ul"},"Zookeeper is a replicated service that holds the metadata of distributed applications"),(0,n.kt)("li",{parentName:"ul"},"Key attributed of such data",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Small size"),(0,n.kt)("li",{parentName:"ul"},"Performance sensitive"),(0,n.kt)("li",{parentName:"ul"},"Dynamic"),(0,n.kt)("li",{parentName:"ul"},"Critical"))),(0,n.kt)("li",{parentName:"ul"},"In very simple words, it is a central store of key-value using which distributed system can coordinate. Since it needs to be able to handle the load, Zookeeper itself runs on many machines.")),(0,n.kt)("h2",{id:"architecture"},"Architecture"),(0,n.kt)("p",null,"The basic terminologies that you need to know before knowing the architecture are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Node: The systems installed on the cluster"),(0,n.kt)("li",{parentName:"ul"},"ZNode: The nodes where the status is updated by other nodes in cluster"),(0,n.kt)("li",{parentName:"ul"},"Client Applications: The tools that interact with the distributed applications"),(0,n.kt)("li",{parentName:"ul"},"Server Applications: Allows the client applications to interact using a common interface")),(0,n.kt)("p",null,'The services in the cluster are replicated and stored on a set of servers (called an "ensemble"), each of which maintains an in-memory database containing the entire data tree of state as well as a transaction log and snapshots stored persistently. Multiple client applications can connect to a server, and each client maintains a TCP connection through which it sends requests and heartbeats and receives responses and watch events for monitoring.'),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Apache_ZooKeeper"},"https://en.wikipedia.org/wiki/Apache_ZooKeeper")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.quora.com/What-is-the-actual-role-of-Zookeeper-in-Kafka-What-benefits-will-I-miss-out-on-if-I-don%E2%80%99t-use-Zookeeper-and-Kafka-together"},"https://www.quora.com/What-is-the-actual-role-of-Zookeeper-in-Kafka-What-benefits-will-I-miss-out-on-if-I-don%E2%80%99t-use-Zookeeper-and-Kafka-together#")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://zookeeper.apache.org/doc/r3.3.4/zookeeperInternals.html#ch_Introduction"},"https://zookeeper.apache.org/doc/r3.3.4/zookeeperInternals.html#ch_Introduction")))}h.isMDXComponent=!0}}]);