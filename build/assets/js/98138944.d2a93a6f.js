"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[34460],{603905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>f});var a=r(667294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},h=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,p=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),l=d(r),u=i,f=l["".concat(p,".").concat(u)]||l[u]||c[u]||n;return r?a.createElement(f,o(o({ref:t},h),{},{components:r})):a.createElement(f,o({ref:t},h))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,o=new Array(n);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<n;d++)o[d]=r[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},691661:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>d});var a=r(487462),i=(r(667294),r(603905));const n={},o="Chord",s={unversionedId:"data-structures/hashtable/chord",id:"data-structures/hashtable/chord",title:"Chord",description:'In computing, Chordis a protocol and algorithm for a peer-to-peerdistributed hash table. A distributed hash table stores key-value pairs by assigning keys to different computers (known as "nodes"); a node will store the values for all the keys for which it is responsible. Chord specifies how keys are assigned to nodes, and how a node can discover the value for a given key by first locating the node responsible for that key.',source:"@site/docs/data-structures/hashtable/chord.md",sourceDirName:"data-structures/hashtable",slug:"/data-structures/hashtable/chord",permalink:"/data-structures/hashtable/chord",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/hashtable/chord.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bloom Filters",permalink:"/data-structures/hashtable/bloom-filters"},next:{title:"Count-min Sketch",permalink:"/data-structures/hashtable/count-min-sketch"}},p={},d=[{value:"References",id:"references",level:2}],h={toc:d},l="wrapper";function c(e){let{components:t,...r}=e;return(0,i.kt)(l,(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"chord"},"Chord"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Computing"},"computing"),", Chordis a protocol and ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Algorithm"},"algorithm")," for a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Peer-to-peer"},"peer-to-peer"),(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Distributed_hash_table"},"distributed hash table"),". A distributed hash table stores ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Associative_array"},"key-value pairs"),' by assigning keys to different computers (known as "nodes"); a node will store the values for all the keys for which it is responsible. Chord specifies how keys are assigned to nodes, and how a node can discover the value for a given key by first locating the node responsible for that key.\nChord is one of the four original ',(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Distributed_hash_table"},"distributed hash table")," protocols, along with ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Content_addressable_network"},"CAN"),", ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tapestry_(DHT)"},"Tapestry"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pastry_(DHT)"},"Pastry"),". It was introduced in 2001 by ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Ion_Stoica"},"Ion Stoica"),", ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Robert_Tappan_Morris"},"Robert Morris"),", ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/David_Karger"},"David Karger"),", ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Frans_Kaashoek"},"Frans Kaashoek"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hari_Balakrishnan"},"Hari Balakrishnan"),", and was developed at ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/MIT"},"MIT"),"."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)"},"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)")))}c.isMDXComponent=!0}}]);