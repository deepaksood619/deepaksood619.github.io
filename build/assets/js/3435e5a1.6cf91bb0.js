"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[45766],{603905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var i=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,r=function(e,t){if(null==e)return{};var a,i,r={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||n;return a?i.createElement(f,o(o({ref:t},c),{},{components:a})):i.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,o=new Array(n);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<n;l++)o[l]=a[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"},503712:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var i=a(487462),r=(a(667294),a(603905));const n={},o="TLA+",s={unversionedId:"languages/others/tla-plus",id:"languages/others/tla-plus",title:"TLA+",description:"TLA+(pronounced astee ell a plus, /\u02c8ti\u02d0\u025ble\u026apl\u028cs/) is a formal specification language developed by Leslie Lamport. It is used to design, model, document, and verify concurrent systems. TLA+has been described as exhaustively-testable pseudocode, and its use likened to drawing blueprints for software systems;TLAis an acronym for Temporal Logic of Actions.",source:"@site/docs/languages/others/tla-plus.md",sourceDirName:"languages/others",slug:"/languages/others/tla-plus",permalink:"/languages/others/tla-plus",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/others/tla-plus.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift",permalink:"/languages/others/swift"},next:{title:"TOML",permalink:"/languages/others/toml"}},p={},l=[],c={toc:l},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tla"},"TLA+"),(0,r.kt)("p",null,"TLA+(",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/English_alphabet#Letter_names"},"pronounced")," astee ell a plus, ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Help:IPA/English"},"/\u02c8ti\u02d0\u025ble\u026apl\u028cs/"),") is a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Formal_specification"},"formal specification")," language developed by ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Leslie_Lamport"},"Leslie Lamport"),". It is used to design, model, document, and verify ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Concurrent_systems"},"concurrent systems"),". TLA+has been described as exhaustively-testable ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pseudocode"},"pseudocode"),", and its use likened to ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Technical_drawing"},"drawing blueprints")," for software systems;TLAis an ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Acronym"},"acronym")," for ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Temporal_Logic_of_Actions"},"Temporal Logic of Actions"),"."),(0,r.kt)("p",null,"For design and documentation, TLA+fulfills the same purpose as informal ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Technical_specifications"},"technical specifications"),". However, TLA+specifications are written in a formal language of ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Logic"},"logic")," and mathematics, and the precision of specifications written in this language is intended to uncover design flaws before system implementation is underway."),(0,r.kt)("p",null,"Since TLA+specifications are written in a formal language, they are amenable to finite ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Model_checking"},"model checking"),". The model checker finds all possible system behaviours up to some number of execution steps, and examines them for violations of desired ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Invariant_(computer_science)"},"invariance")," properties such as ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Safety_(distributed_computing)"},"safety")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Liveness"},"liveness"),". TLA+specifications use basic ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Set_theory"},"set theory")," to define safety (bad things won't happen) and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Temporal_logic"},"temporal logic")," to define liveness (good things eventually happen)."),(0,r.kt)("p",null,"TLA+is also used to write ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Automated_theorem_proving"},"machine-checked proofs of correctness")," both for ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Algorithms"},"algorithms")," and mathematical theorems. The proofs are written in a declarative, hierarchical style independent of any single theorem prover backend. Both formal and informal structured mathematical proofs can be written in TLA+; the language is similar to ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/LaTeX"},"LaTeX"),", and tools exist to translate TLA+specifications to LaTeX documents."),(0,r.kt)("p",null,"TLA+was introduced in 1999, following several decades of research into a verification method for concurrent systems. A toolchain has since developed, including an ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Interactive_development_environment"},"IDE")," and distributed model checker. The pseudocode-like language ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PlusCal"},"PlusCal")," was created in 2009; it ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Source-to-source_compiler"},"transpiles")," to TLA+and is useful for specifying sequential algorithms. TLA+2was announced in 2014, expanding language support for proof constructs. The current TLA+reference is ",(0,r.kt)("a",{parentName:"p",href:"http://research.microsoft.com/en-us/um/people/lamport/tla/hyperbook.html"},"The TLA+Hyperbook")," by Leslie Lamport."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/TLA%2B"},"https://en.wikipedia.org/wiki/TLA%2B")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/playlist?list=PLWAv2Etpa7AOAwkreYImYt0gIpOdWQevD"},"https://www.youtube.com/playlist?list=PLWAv2Etpa7AOAwkreYImYt0gIpOdWQevD")))}u.isMDXComponent=!0}}]);