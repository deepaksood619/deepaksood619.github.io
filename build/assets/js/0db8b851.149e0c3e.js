"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[32827],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,d=p["".concat(s,".").concat(h)]||p[h]||m[h]||o;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},905361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(487462),a=(n(667294),n(603905));const o={},l="N Queens Problem",i={unversionedId:"algorithms/general/n-queens-problem",id:"algorithms/general/n-queens-problem",title:"N Queens Problem",description:"The N Queen is the problem of placing N chess queens on an N\xd7N chessboard so that no two queens attack each other. For example, following is a solution for 4 Queen problem.",source:"@site/docs/algorithms/general/n-queens-problem.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/n-queens-problem",permalink:"/algorithms/general/n-queens-problem",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/n-queens-problem.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List of Algorithms",permalink:"/algorithms/general/list-of-algorithms"},next:{title:"Orthogonal rectangle intersection search",permalink:"/algorithms/general/orthogonal-rectangle-intersection-search"}},s={},u=[{value:"Question Types",id:"question-types",level:2},{value:"Naive Algorithm",id:"naive-algorithm",level:2},{value:"Backtracking Algorithm",id:"backtracking-algorithm",level:2},{value:"Recursion tree",id:"recursion-tree",level:3},{value:"Time Complexity - Exponential O(n^n / n!)",id:"time-complexity---exponential-onn--n",level:2},{value:"References",id:"references",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"n-queens-problem"},"N Queens Problem"),(0,a.kt)("p",null,"The N Queen is the problem of placing N chess queens on an N\xd7N chessboard so that no two queens attack each other. For example, following is a solution for 4 Queen problem."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:n(195587).Z,width:"960",height:"720"})),(0,a.kt)("h2",{id:"question-types"},"Question Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Find any placement of queens that do not attack each other"),(0,a.kt)("li",{parentName:"ul"},"Find all placement of queens on the board")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:n(953392).Z,width:"530",height:"267"})),(0,a.kt)("h2",{id:"naive-algorithm"},"Naive Algorithm"),(0,a.kt)("p",null,"Generate all possible configurations of queens on board and print a configuration that satisfies the given constraints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"while there are untried conflagrations\n{\n    generate the next configuration\n    if queens don't attack in this configuration then\n    {\n        print this configuration;\n    }\n}\n")),(0,a.kt)("h2",{id:"backtracking-algorithm"},"Backtracking Algorithm"),(0,a.kt)("p",null,"The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes then we backtrack and return false."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Start in the leftmost column"),(0,a.kt)("li",{parentName:"ul"},"If all queens are placed return true"),(0,a.kt)("li",{parentName:"ul"},"Try all rows in the current column. Do following for every tried row.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If the queen can be placed safely in this row then mark this ","[row, column]"," as part of the solution and recursively check if placing queen here leads to a solution."),(0,a.kt)("li",{parentName:"ul"},"If placing queen in ","[row, column]"," leads to a solution then return true."),(0,a.kt)("li",{parentName:"ul"},"If placing queen doesn't lead to a solution then umark this ","[row, column]"," (Backtrack) and go to step (a) to try other rows."))),(0,a.kt)("li",{parentName:"ul"},"If all rows have been tried and nothing worked, return false to trigger backtracking.")),(0,a.kt)("h3",{id:"recursion-tree"},"Recursion tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For a board of 4x4, recursion will be 4 level deep"),(0,a.kt)("li",{parentName:"ul"},"At 0th level of recursion, we will place 0th queen on 0th row"),(0,a.kt)("li",{parentName:"ul"},"At 1st level of recursion, we will place 1st queen on 1st row such that she does not attack the 0th queen"),(0,a.kt)("li",{parentName:"ul"},"At 2nd level of recursion, we will place 2nd queen on 2nd row such that she does not attack the 0th queen and 1st queen.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:n(523781).Z,width:"730",height:"400"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:n(361468).Z,width:"712",height:"403"})),(0,a.kt)("h2",{id:"time-complexity---exponential-onn--n"},"Time Complexity - Exponential O(n^n / n!)"),(0,a.kt)("p",null,"Space Complexity - n*n"),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Eight_queens_puzzle"},"https://en.wikipedia.org/wiki/Eight_queens_puzzle")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=xouin83ebxE"},"N Queen Problem Using Backtracking Algorithm")))}m.isMDXComponent=!0},195587:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/N-Queens-Problem-image1-dba59fd1c19ed413c46d21947ab01867.jpg"},953392:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/N-Queens-Problem-image2-2affe8b67a325daae82ea48da311bc70.jpg"},523781:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/N-Queens-Problem-image3-b3ac52fe4662d9ddb9a9788f54fcd6da.jpg"},361468:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/N-Queens-Problem-image4-080fd764ef1c9a55bf79a69cc9e7179c.jpg"}}]);