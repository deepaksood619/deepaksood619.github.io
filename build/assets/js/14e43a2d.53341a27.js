"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[37236],{603905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var r=a(667294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},p=Object.keys(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),s=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(a),d=n,h=c["".concat(l,".").concat(d)]||c[d]||u[d]||p;return a?r.createElement(h,o(o({ref:t},m),{},{components:a})):r.createElement(h,o({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,o=new Array(p);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:n,o[1]=i;for(var s=2;s<p;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},876171:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>i,toc:()=>s});var r=a(487462),n=(a(667294),a(603905));const p={},o="Faster Python",i={unversionedId:"python/advanced/faster-python",id:"python/advanced/faster-python",title:"Faster Python",description:"1. Line Profiling",source:"@site/docs/python/advanced/faster-python.md",sourceDirName:"python/advanced",slug:"/python/advanced/faster-python",permalink:"/python/advanced/faster-python",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/advanced/faster-python.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CPython",permalink:"/python/advanced/cpython"},next:{title:"Idiomatic Python",permalink:"/python/advanced/idiomatic-python"}},l={},s=[{value:"Optimizing Python Memory Objects",id:"optimizing-python-memory-objects",level:2},{value:"Performant Python (reducing memory usage)",id:"performant-python-reducing-memory-usage",level:2}],m={toc:s},c="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"faster-python"},"Faster Python"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Line Profiling")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Numpy Vectorization")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Specilized data structures"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"scipy.spatial"),(0,n.kt)("p",{parentName:"li"},"For spatial query like distances, nearest neighbor, kd trees etc.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"pandas"),(0,n.kt)("p",{parentName:"li"},"for SQL-like grouping or aggregation")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"xarray"),(0,n.kt)("p",{parentName:"li"},"for grouping across multiple dimensions")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"scipy.sparse"),(0,n.kt)("p",{parentName:"li"},"sparse matrices for 2-dimensional structured data")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"sparse package"),(0,n.kt)("p",{parentName:"li"},"for N-dimensional structured data")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"scipy.sparse.csgraph"),(0,n.kt)("p",{parentName:"li"},"for graph-like problems (e.g. finding shortest paths)")))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"CPython")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Numba"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=x58W9A2lnQc"},"https://www.youtube.com/watch?v=x58W9A2lnQc"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Dask"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Parallel Computation"),(0,n.kt)("li",{parentName:"ul"},"Task Graph")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://www.kdnuggets.com/2020/04/dask-big-data.html"},"https://www.kdnuggets.com/2020/04/dask-big-data.html"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://rapids.ai"},"https://rapids.ai")," ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rapidsai"},"https://github.com/rapidsai"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://vaex.io/"},"Vaex: A Fast DataFrame for Python \ud83d\ude80")))),(0,n.kt)("h2",{id:"optimizing-python-memory-objects"},"Optimizing Python Memory Objects"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://habr.com/en/post/458518"},"https://habr.com/en/post/458518")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9"},"https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9")),(0,n.kt)("h2",{id:"performant-python-reducing-memory-usage"},"Performant Python (reducing memory usage)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Tuples save a bit of memory when replacing lists"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Tuples save lots of memory when replacing dictionaries")),(0,n.kt)("li",{parentName:"ul"},"Generators save memory only for large tuples, but are faster to iterate"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Slotted classes save a lot of memory")),(0,n.kt)("li",{parentName:"ul"},"Namedtuples are better than classes but worse than slotted classes"),(0,n.kt)("li",{parentName:"ul"},"Map and filter are sometimes faster than comprehensions")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://strangemachines.io/articles/performant-python"},"https://strangemachines.io/articles/performant-python")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://blog.esciencecenter.nl/parallel-programming-in-python-7fd62c90217d"},"https://blog.esciencecenter.nl/parallel-programming-in-python-7fd62c90217d")))}u.isMDXComponent=!0}}]);