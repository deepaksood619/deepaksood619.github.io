"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6083],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var r=a(667294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),m=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(a),d=n,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return a?r.createElement(k,l(l({ref:t},p),{},{components:a})):r.createElement(k,l({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:n,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},463644:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=a(487462),n=(a(667294),a(603905));const i={},l="Coursera - Algorithms Part - 2",o={unversionedId:"computer-science/courses/coursera-algorithms-part-2",id:"computer-science/courses/coursera-algorithms-part-2",title:"Coursera - Algorithms Part - 2",description:"Week - 1",source:"@site/docs/computer-science/courses/coursera-algorithms-part-2.md",sourceDirName:"computer-science/courses",slug:"/computer-science/courses/coursera-algorithms-part-2",permalink:"/computer-science/courses/coursera-algorithms-part-2",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/computer-science/courses/coursera-algorithms-part-2.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Coursera - Algorithms Part - 1",permalink:"/computer-science/courses/coursera-algorithms-part-1"},next:{title:"Coursera - How Google does ML",permalink:"/computer-science/courses/coursera-how-google-does-ml"}},s={},m=[{value:"Week - 1",id:"week---1",level:2},{value:"Undirected Graph",id:"undirected-graph",level:3},{value:"Directed Graph",id:"directed-graph",level:3},{value:"Assignment",id:"assignment",level:3},{value:"Week - 2",id:"week---2",level:2},{value:"Minimum Spanning Tree",id:"minimum-spanning-tree",level:3},{value:"Shortest Path",id:"shortest-path",level:3},{value:"Assignment",id:"assignment-1",level:3},{value:"Week - 3",id:"week---3",level:2},{value:"Maximum Flow and Minimum Cut",id:"maximum-flow-and-minimum-cut",level:3},{value:"Assignment",id:"assignment-2",level:3},{value:"Radix Sorts",id:"radix-sorts",level:3},{value:"Week - 4",id:"week---4",level:2},{value:"Tries",id:"tries",level:3},{value:"Substring Search",id:"substring-search",level:3},{value:"Assignment",id:"assignment-3",level:3},{value:"Week - 5",id:"week---5",level:2},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Data Compression",id:"data-compression",level:3},{value:"Assignment",id:"assignment-4",level:3},{value:"Week - 6",id:"week---6",level:2},{value:"Reductions",id:"reductions",level:3},{value:"Linear Programming",id:"linear-programming",level:3},{value:"Intractability",id:"intractability",level:3},{value:"Interview Questions",id:"interview-questions",level:2},{value:"1.1 Undirected Graphs",id:"11-undirected-graphs",level:3},{value:"Assignments",id:"assignments",level:2},{value:"WordNet: is a semantic lexicon for the English language that is used extensively by computational linguists and cognitive scientists",id:"wordnet-is-a-semantic-lexicon-for-the-english-language-that-is-used-extensively-by-computational-linguists-and-cognitive-scientists",level:3},{value:"References",id:"references",level:2}],p={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"coursera---algorithms-part---2"},"Coursera - Algorithms Part - 2"),(0,n.kt)("h2",{id:"week---1"},"Week - 1"),(0,n.kt)("h3",{id:"undirected-graph"},"Undirected Graph"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Introduction to graph"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Adjacency Matrix"),(0,n.kt)("li",{parentName:"ul"},"Adjacency List"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Graph API")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Depth-First Search")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Breadth-First Search")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Connected Components")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Graph Challenges"))),(0,n.kt)("h3",{id:"directed-graph"},"Directed Graph"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Introduction to Digraphs")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Digraph API")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Digraph Search")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Topological Sort"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Topological order of an acyclic digraph"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Strong Components"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Kosaraju-Sharir algorithm for computing strong components of a digraph"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Applications"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Garbage Collection"),(0,n.kt)("li",{parentName:"ul"},"Web Crawling")))),(0,n.kt)("h3",{id:"assignment"},"Assignment"),(0,n.kt)("p",null,"WordNet"),(0,n.kt)("h2",{id:"week---2"},"Week - 2"),(0,n.kt)("h3",{id:"minimum-spanning-tree"},"Minimum Spanning Tree"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Introduction to MSTs"),(0,n.kt)("li",{parentName:"ol"},"Greedy Algorithms"),(0,n.kt)("li",{parentName:"ol"},"Edge-Weighted Graph API"),(0,n.kt)("li",{parentName:"ol"},"Kruskal's Algorithm"),(0,n.kt)("li",{parentName:"ol"},"Prim's Algorithm"),(0,n.kt)("li",{parentName:"ol"},"MST Context")),(0,n.kt)("h3",{id:"shortest-path"},"Shortest Path"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Shortest Path APIs"),(0,n.kt)("li",{parentName:"ol"},"Shortest Path Properties"),(0,n.kt)("li",{parentName:"ol"},"Dijkstra's Algorithm"),(0,n.kt)("li",{parentName:"ol"},"Edge-Weighted DAGs"),(0,n.kt)("li",{parentName:"ol"},"Negative Weights (Bellman Ford Algorithm)")),(0,n.kt)("h3",{id:"assignment-1"},"Assignment"),(0,n.kt)("p",null,"Seam Carving"),(0,n.kt)("h2",{id:"week---3"},"Week - 3"),(0,n.kt)("h3",{id:"maximum-flow-and-minimum-cut"},"Maximum Flow and Minimum Cut"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Introduction to Maxflow"),(0,n.kt)("li",{parentName:"ol"},"Ford-Fulkerson Algorithm"),(0,n.kt)("li",{parentName:"ol"},"Maxflow-Mincut Theorem"),(0,n.kt)("li",{parentName:"ol"},"Running Time Analysis"),(0,n.kt)("li",{parentName:"ol"},"Java Implementation"),(0,n.kt)("li",{parentName:"ol"},"Maxflow Applications")),(0,n.kt)("h3",{id:"assignment-2"},"Assignment"),(0,n.kt)("p",null,"Baseball Elimination"),(0,n.kt)("h3",{id:"radix-sorts"},"Radix Sorts"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Strings in Java"),(0,n.kt)("li",{parentName:"ol"},"Key-Indexed Counting"),(0,n.kt)("li",{parentName:"ol"},"LSD Radix Sort"),(0,n.kt)("li",{parentName:"ol"},"MSD Radix Sort"),(0,n.kt)("li",{parentName:"ol"},"3-way Radix Quicksort"),(0,n.kt)("li",{parentName:"ol"},"Suffix Arrays")),(0,n.kt)("h2",{id:"week---4"},"Week - 4"),(0,n.kt)("h3",{id:"tries"},"Tries"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"R-way Tries"),(0,n.kt)("li",{parentName:"ol"},"Ternary Search Tries"),(0,n.kt)("li",{parentName:"ol"},"Character-Based Operations")),(0,n.kt)("h3",{id:"substring-search"},"Substring Search"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Introduction to Substring Search"),(0,n.kt)("li",{parentName:"ol"},"Brute-Force Substring Search"),(0,n.kt)("li",{parentName:"ol"},"Knuth-Morris-Pratt"),(0,n.kt)("li",{parentName:"ol"},"Boyer-Moore"),(0,n.kt)("li",{parentName:"ol"},"Rabin-Karp")),(0,n.kt)("h3",{id:"assignment-3"},"Assignment"),(0,n.kt)("p",null,"Boggle"),(0,n.kt)("h2",{id:"week---5"},"Week - 5"),(0,n.kt)("h3",{id:"regular-expressions"},"Regular Expressions"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Regular Expressions"),(0,n.kt)("li",{parentName:"ol"},"Res and NFAs"),(0,n.kt)("li",{parentName:"ol"},"NFA Simulation"),(0,n.kt)("li",{parentName:"ol"},"NFA Construction"),(0,n.kt)("li",{parentName:"ol"},"RE Applications")),(0,n.kt)("h3",{id:"data-compression"},"Data Compression"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Introduction"),(0,n.kt)("li",{parentName:"ol"},"Run-Length Coding"),(0,n.kt)("li",{parentName:"ol"},"Huffman Compression"),(0,n.kt)("li",{parentName:"ol"},"LZW Compression")),(0,n.kt)("h3",{id:"assignment-4"},"Assignment"),(0,n.kt)("p",null,"Burrows-Wheeler"),(0,n.kt)("h2",{id:"week---6"},"Week - 6"),(0,n.kt)("h3",{id:"reductions"},"Reductions"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Introduction"),(0,n.kt)("li",{parentName:"ol"},"Designing Algorithms"),(0,n.kt)("li",{parentName:"ol"},"Establishing Lower Bounds"),(0,n.kt)("li",{parentName:"ol"},"Classifying Problems")),(0,n.kt)("h3",{id:"linear-programming"},"Linear Programming"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Brewer's Problem"),(0,n.kt)("li",{parentName:"ol"},"Simplex Algorithm"),(0,n.kt)("li",{parentName:"ol"},"Simplex Implementations"),(0,n.kt)("li",{parentName:"ol"},"Linear Programming Reductions")),(0,n.kt)("h3",{id:"intractability"},"Intractability"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Introduction"),(0,n.kt)("li",{parentName:"ol"},"Search Problems"),(0,n.kt)("li",{parentName:"ol"},"P vs NP"),(0,n.kt)("li",{parentName:"ol"},"Classifying Problems"),(0,n.kt)("li",{parentName:"ol"},"NP-Completeness"),(0,n.kt)("li",{parentName:"ol"},"Coping with Intractability")),(0,n.kt)("h2",{id:"interview-questions"},"Interview Questions"),(0,n.kt)("h3",{id:"11-undirected-graphs"},"1.1 Undirected Graphs"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Nonrecursive depth-first search.")," Implement depth-first search in an undirected graph without using recursion."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Diameter and center of a tree.")," Given a connected graph with no cycles",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Diameter: design a linear-time algorithm to find the longest simple path in the graph."),(0,n.kt)("li",{parentName:"ul"},"Center: design a linear-time algorithm to find a vertex such that its maximum distance from any other vertex is minimized."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Euler cycle.")," An Euler cycle in a graph is a cycle (not necessarily simple) that uses every edge in the graph exactly one.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Show that a connected graph has an Euler cycle if and only if every vertex has even degree."),(0,n.kt)("li",{parentName:"ul"},"Design a linear-time algorithm to determine whether a graph has an Euler cycle, and if so, find one.")))),(0,n.kt)("h2",{id:"assignments"},"Assignments"),(0,n.kt)("h3",{id:"wordnet-is-a-semantic-lexicon-for-the-english-language-that-is-used-extensively-by-computational-linguists-and-cognitive-scientists"},"WordNet: is a semantic lexicon for the English language that is used extensively by computational linguists and cognitive scientists"),(0,n.kt)("p",null,"WordNet groups words into sets of synonyms called ",(0,n.kt)("em",{parentName:"p"},"synsets"),"and describes semantic relationships between them."),(0,n.kt)("p",null,"One such relationship is the",(0,n.kt)("em",{parentName:"p"},"is-a"),"relationship, which connects a",(0,n.kt)("em",{parentName:"p"},"hyponym"),"(more specific synset) to a",(0,n.kt)("em",{parentName:"p"},"hypernym"),"(more general synset)."),(0,n.kt)("p",null,"For example,"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"animal")," is a hypernym of both ",(0,n.kt)("em",{parentName:"li"},"bird"),"and ",(0,n.kt)("em",{parentName:"li"},"fish"),";"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"bird")," is a hypernym of ",(0,n.kt)("em",{parentName:"li"},"eagle"),",",(0,n.kt)("em",{parentName:"li"},"pigeon"),", and ",(0,n.kt)("em",{parentName:"li"},"seagull"),"."),(0,n.kt)("li",{parentName:"ul"},"Spoon is a hyponym of cutlery")),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html"},"http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"http://coursera.cs.princeton.edu/algs4/checklists/wordnet.html"},"http://coursera.cs.princeton.edu/algs4/checklists/wordnet.html")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/CtheSky/Coursera-Algorithms/tree/master/Assignment6_WordNet"},"https://github.com/CtheSky/Coursera-Algorithms/tree/master/Assignment6_WordNet")))}c.isMDXComponent=!0}}]);