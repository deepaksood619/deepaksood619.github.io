"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[81885],{603905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(667294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),h=n,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return r?a.createElement(m,i(i({ref:t},u),{},{components:r})):a.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},490850:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(487462),n=(r(667294),r(603905));const o={},i="2-3 Search Trees",l={unversionedId:"data-structures/hierarchical-data-structure/2-3-search-trees",id:"data-structures/hierarchical-data-structure/2-3-search-trees",title:"2-3 Search Trees",description:"Properties",source:"@site/docs/data-structures/hierarchical-data-structure/2-3-search-trees.md",sourceDirName:"data-structures/hierarchical-data-structure",slug:"/data-structures/hierarchical-data-structure/2-3-search-trees",permalink:"/data-structures/hierarchical-data-structure/2-3-search-trees",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/hierarchical-data-structure/2-3-search-trees.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hierarchical Data Structure",permalink:"/data-structures/hierarchical-data-structure/"},next:{title:"AVL Tree",permalink:"/data-structures/hierarchical-data-structure/avl-tree"}},s={},c=[{value:"Properties",id:"properties",level:2},{value:"Search",id:"search",level:2},{value:"Insertion into a 3-node at bottom",id:"insertion-into-a-3-node-at-bottom",level:2},{value:"Height of a 2-3 tree increases only when root node of the tree splits",id:"height-of-a-2-3-tree-increases-only-when-root-node-of-the-tree-splits",level:2},{value:"Tree height",id:"tree-height",level:2},{value:"Direct implementation is complicated, because",id:"direct-implementation-is-complicated-because",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...o}=e;return(0,n.kt)(d,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"2-3-search-trees"},"2-3 Search Trees"),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Every non-leaf is a 2-node or a 3-node. A 2-node contains one data item and has two children. A 3-node contains two data items and has 3 children."),(0,n.kt)("li",{parentName:"ul"},"All leaves are at the same level (the bottom level)"),(0,n.kt)("li",{parentName:"ul"},"All data is kept in sorted order"),(0,n.kt)("li",{parentName:"ul"},"Every non-leaf node will contain 1 or 2 fields.",(0,n.kt)("strong",{parentName:"li"},"2-3 Tree"))),(0,n.kt)("p",null,"Allow 1 or 2 keys per node -"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"2-node: one key, two children"),(0,n.kt)("li",{parentName:"ul"},"3-node: two keys, three children")),(0,n.kt)("p",null,"Symmetric order: Inorder traversal yields keys in ascending order"),(0,n.kt)("p",null,"Perfect balance: Every path from root to null links has same length"),(0,n.kt)("p",null,"Each transformation maintains symmetric order and perfect balance"),(0,n.kt)("h2",{id:"search"},"Search"),(0,n.kt)("p",null,"\u30fbCompare search key against keys in node."),(0,n.kt)("p",null,"\u30fbFind interval containing search key."),(0,n.kt)("p",null,"\u30fbFollow associated link (recursively)."),(0,n.kt)("h2",{id:"insertion-into-a-3-node-at-bottom"},"Insertion into a 3-node at bottom"),(0,n.kt)("p",null,"\u30fbAdd new key to 3-node to create temporary 4-node."),(0,n.kt)("p",null,"\u30fbMove middle key in 4-node into parent."),(0,n.kt)("p",null,"\u30fbRepeat up the tree, as necessary."),(0,n.kt)("p",null,"\u30fbIf you reach the root and it's a 4-node, split it into three 2-nodes."),(0,n.kt)("h2",{id:"height-of-a-2-3-tree-increases-only-when-root-node-of-the-tree-splits"},"Height of a 2-3 tree increases only when root node of the tree splits"),(0,n.kt)("h2",{id:"tree-height"},"Tree height"),(0,n.kt)("p",null,"\u30fbWorst case: lg ",(0,n.kt)("em",{parentName:"p"},"N"),". ","[all 2-nodes]"),(0,n.kt)("p",null,"\u30fbBest case: log3 ",(0,n.kt)("em",{parentName:"p"},"N")," \u2248 .631 lg ",(0,n.kt)("em",{parentName:"p"},"N"),". ","[all 3-nodes]"),(0,n.kt)("p",null,"\u30fbBetween 12 and 20 for a million nodes."),(0,n.kt)("p",null,"\u30fbBetween 18 and 30 for a billion nodes."),(0,n.kt)("p",null,"Guaranteed logarithmic performance for search and insert"),(0,n.kt)("h2",{id:"direct-implementation-is-complicated-because"},"Direct implementation is complicated, because"),(0,n.kt)("p",null,"\u30fbMaintaining multiple node types is cumbersome."),(0,n.kt)("p",null,"\u30fbNeed multiple compares to move down tree."),(0,n.kt)("p",null,"\u30fbNeed to move back up the tree to split 4-nodes."),(0,n.kt)("p",null,"\u30fbLarge number of cases for splitting.\n",(0,n.kt)("img",{alt:"image",src:r(46232).Z,width:"1032",height:"596"})))}p.isMDXComponent=!0},46232:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/2-3-Search-Trees-image1-7ce544feec84cd7cef159c4de8717a4e.jpg"}}]);