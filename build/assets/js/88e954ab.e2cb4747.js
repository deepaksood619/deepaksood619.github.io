"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94907],{603905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>y});var a=n(667294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),d=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(o.Provider,{value:e},t.children)},u="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),u=d(n),k=r,y=u["".concat(o,".").concat(k)]||u[k]||s[k]||l;return n?a.createElement(y,i(i({ref:e},m),{},{components:n})):a.createElement(y,i({ref:e},m))}));function y(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p[u]="string"==typeof t?t:r,i[1]=p;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},18663:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(487462),r=(n(667294),n(603905));const l={},i="Data Types",p={unversionedId:"ai/numpy/data-types",id:"ai/numpy/data-types",title:"Data Types",description:"| Sr.No. | Data Types & Description |",source:"@site/docs/ai/numpy/data-types.md",sourceDirName:"ai/numpy",slug:"/ai/numpy/data-types",permalink:"/ai/numpy/data-types",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/ai/numpy/data-types.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cheatsheet",permalink:"/ai/numpy/cheatsheet"},next:{title:"Internals",permalink:"/ai/numpy/internals"}},o={},d=[{value:"Data Type Objects (dtype)",id:"data-type-objects-dtype",level:2},{value:"Example",id:"example",level:3}],m={toc:d},u="wrapper";function s(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-types"},"Data Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Sr.No."),(0,r.kt)("th",{parentName:"tr",align:null},"Data Types & Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool_")," - Boolean (True or False) stored as a byte")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int_")," - Default integer type (same as C long; normally either int64 or int32)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"intc")," - Identical to C int (normally int32 or int64)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"intp")," - Integer used for indexing (same as C ssize_t; normally either int32 or int64)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int8")," - Byte (-128 to 127)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int16")," - Integer (-32768 to 32767)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int32")," - Integer (-2147483648 to 2147483647)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int64")," - Integer (-9223372036854775808 to 9223372036854775807)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint8")," - Unsigned integer (0 to 255)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint16")," - Unsigned integer (0 to 65535)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint32")," - Unsigned integer (0 to 4294967295)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")," - Unsigned integer (0 to 18446744073709551615)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"13"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float_")," - Shorthand for float64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"14"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float16")," - Half precision float: sign bit, 5 bits exponent, 10 bits mantissa")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"15"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float32")," - Single precision float: sign bit, 8 bits exponent, 23 bits mantissa")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float64")," - Double precision float: sign bit, 11 bits exponent, 52 bits mantissa")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"17"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"complex_")," - Shorthand for complex128")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"18"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"complex64")," - Complex number, represented by two 32-bit floats (real and imaginary components)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"19"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"complex128")," - Complex number, represented by two 64-bit floats (real and imaginary components)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"20"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")," - python object type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"21"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"np.string_")," - fixed-length string type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"22"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"np.unicode_")," - fixed-length unicode type")))),(0,r.kt)("p",null,"NumPy numerical types are instances of dtype (data-type) objects"),(0,r.kt)("h2",{id:"data-type-objects-dtype"},"Data Type Objects (dtype)"),(0,r.kt)("p",null,"A data type object describes interpretation of fixed block of memory corresponding to an array, depending on the following aspects \u2212"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type of data (integer, float or Python object)"),(0,r.kt)("li",{parentName:"ul"},"Size of data"),(0,r.kt)("li",{parentName:"ul"},"Byte order (little-endian or big-endian)"),(0,r.kt)("li",{parentName:"ul"},"In case of structured type, the names of fields, data type of each field and part of the memory block taken by each field."),(0,r.kt)("li",{parentName:"ul"},"If data type is a subarray, its shape and data type")),(0,r.kt)("p",null,"The byte order is decided by prefixing '<' or '>' to data type. '<' means that encoding is little-endian (least significant is stored in smallest address). '>' means that encoding is big-endian (most significant byte is stored in smallest address)."),(0,r.kt)("p",null,"A dtype object is constructed using the following syntax"),(0,r.kt)("p",null,"numpy.dtype(object, align, copy)"),(0,r.kt)("p",null,"The parameters are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Object\u2212 To be converted to data type object"),(0,r.kt)("li",{parentName:"ul"},"Align\u2212 If true, adds padding to the field to make it similar to C-struct"),(0,r.kt)("li",{parentName:"ul"},"Copy\u2212 Makes a new copy of dtype object. If false, the result is reference to builtin data type object")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\n\nstudent = np.dtype([('name','S20'), ('age', 'i1'), ('marks', 'f4')])\na = np.array([('abc', 21, 50),('xyz', 18, 75)], dtype = student)\nprint (a)\n\n[('abc', 21, 50.0), ('xyz', 18, 75.0)]\n\n")),(0,r.kt)("p",null,"Each built-in data type has a character code that uniquely identifies it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"'b'\u2212 boolean"),(0,r.kt)("li",{parentName:"ul"},"'i'\u2212 (signed) integer"),(0,r.kt)("li",{parentName:"ul"},"'u'\u2212 unsigned integer"),(0,r.kt)("li",{parentName:"ul"},"'f'\u2212 floating-point"),(0,r.kt)("li",{parentName:"ul"},"'c'\u2212 complex-floating point"),(0,r.kt)("li",{parentName:"ul"},"'m'\u2212 timedelta"),(0,r.kt)("li",{parentName:"ul"},"'M'\u2212 datetime"),(0,r.kt)("li",{parentName:"ul"},"'O'\u2212 (Python) objects"),(0,r.kt)("li",{parentName:"ul"},"'S', 'a'\u2212 (byte-)string"),(0,r.kt)("li",{parentName:"ul"},"'U'\u2212 Unicode"),(0,r.kt)("li",{parentName:"ul"},"'V'\u2212 raw data (void)")))}s.isMDXComponent=!0}}]);