"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83356],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},198075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(487462),i=(n(667294),n(603905));const a={},o="Structural - Facade",l={unversionedId:"computer-science/programming-paradigms/structural-facade",id:"computer-science/programming-paradigms/structural-facade",title:"Structural - Facade",description:"According to Gang of Four definition, facade provides a simplified interface for a set of interfaces of a subsystem. It defines a convenient higher-level interface to interact with.",source:"@site/docs/computer-science/programming-paradigms/structural-facade.md",sourceDirName:"computer-science/programming-paradigms",slug:"/computer-science/programming-paradigms/structural-facade",permalink:"/computer-science/programming-paradigms/structural-facade",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/computer-science/programming-paradigms/structural-facade.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structural - Decorator",permalink:"/computer-science/programming-paradigms/structural-decorator"},next:{title:"Structural - Proxy",permalink:"/computer-science/programming-paradigms/structural-proxy"}},c={},s=[{value:"Example implementation",id:"example-implementation",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"structural---facade"},"Structural - Facade"),(0,i.kt)("p",null,"According to ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Design_Patterns"},"Gang of Four")," definition, facade provides a simplified interface for a set of interfaces of a subsystem. It defines a convenient higher-level interface to interact with.\nThefacade decouples clients from subinterfaces of our modules. The client uses just one object - the facade, to delegate work to many separated components.The client doesn't have to know the details of our architecture - it is all hidden behind a clean interface of the facade.\nWithout Facade"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(504825).Z,width:"503",height:"533"})),(0,i.kt)("p",null,"The client knows the elements of module and orchestrates the work.\nWith Facade"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(46900).Z,width:"503",height:"533"})),(0,i.kt)("p",null,"The client doesn't know anything about subsystem, it communicates with the facade only.\nWhen to use?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"when you want to provide an easy interface to interact with a more complicated system"),(0,i.kt)("li",{parentName:"ul"},"to decouple the clients from implementation details"),(0,i.kt)("li",{parentName:"ul"},"to use as an entry point to some submodule\nElements"),(0,i.kt)("li",{parentName:"ul"},"Facade- knows subsystem, orchestrates work, delegates requests to module components"),(0,i.kt)("li",{parentName:"ul"},"Submodule Class- elements of our module"),(0,i.kt)("li",{parentName:"ul"},"Client- uses facade to interact with the system")),(0,i.kt)("h2",{id:"example-implementation"},"Example implementation"),(0,i.kt)("p",null,"Let's pretend that we're working on an e-commerce application. We want to implement product ordering. We already got a few services in our app, but they are not integrated."),(0,i.kt)("p",null,"public interface InventoryService {"),(0,i.kt)("p",null,"boolean isAvailable(int productId);"),(0,i.kt)("p",null,"int order(int productId);"),(0,i.kt)("p",null,"}\npublic interface ShipmentService {"),(0,i.kt)("p",null,"void shipTo(int userId, int productId);"),(0,i.kt)("p",null,"}\npublic interface NotificationService {"),(0,i.kt)("p",null,"void notifyAboutOrder(int userId, int orderId);"),(0,i.kt)("p",null,"void notifyAboutIssue(int userId);"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"(For simplicity, we use ints to represent users, orders etc.)\nWith those building blocks, we want to provide an API to order a product.\npublic interface OrderFacade {"),(0,i.kt)("p",null,"void order(int productId, int userId);"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"We don't want the client code to interact with all services just to make an order, so we provide nice and clean API with Facade."),(0,i.kt)("p",null,"Here's its implementation:"),(0,i.kt)("p",null,"public class DefaultOrderFacade implements OrderFacade {"),(0,i.kt)("p",null,"// Dependencies could be injected using Dependency Injection tool"),(0,i.kt)("p",null,"public DefaultOrderFacade(final InventoryService inventory,"),(0,i.kt)("p",null,"final NotificationService notifications,"),(0,i.kt)("p",null,"final ShipmentService shipments) {"),(0,i.kt)("p",null,"this.inventory = inventory;"),(0,i.kt)("p",null,"this.notifications = notifications;"),(0,i.kt)("p",null,"this.shipments = shipments;"),(0,i.kt)("p",null,"}\nprivate final InventoryService inventory;"),(0,i.kt)("p",null,"private final NotificationService notifications;"),(0,i.kt)("p",null,"private final ShipmentService shipments;\n@Override"),(0,i.kt)("p",null,"public void order(int productId, int userId) {"),(0,i.kt)("p",null,"if (inventory.isAvailable(productId)) {"),(0,i.kt)("p",null,"final int orderId = inventory.order(productId);"),(0,i.kt)("p",null,"shipments.shipTo(userId, productId);"),(0,i.kt)("p",null,"notifications.notifyAboutOrder(userId, orderId);"),(0,i.kt)("p",null,"} else {"),(0,i.kt)("p",null,"notifications.notifyAboutIssue(userId);"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"In this way, instead of using three different services to make an order, we are using just one - the Facade. All services methods are hidden behind the facade - making an order is much simpler now.\npublic class SomeClientCode {"),(0,i.kt)("p",null,"// This could be injected by some DI framework"),(0,i.kt)("p",null,"private OrderFacade orderfacde;\npublic static void main(String [] args) {"),(0,i.kt)("p",null,"final int someProductId;"),(0,i.kt)("p",null,"final int forSomeUserId;\n// ordering product is much easier now with Facade"),(0,i.kt)("p",null,"orderFacade.order(someProductId, forSomeUserId);"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"}"),(0,i.kt)("p",null,"In real apps the services would have even more methods - we could hide them all and provide higher-level APIs by adding more methods to Facades."))}d.isMDXComponent=!0},504825:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Structural-Facade-image1-19383c52ccff9afc4d3dbe692fd7e2bc.jpg"},46900:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Structural-Facade-image2-80ef399b3a81cdd187f65a8a9341d6ef.jpg"}}]);