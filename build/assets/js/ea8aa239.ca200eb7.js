"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[97645],{603905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>g});var n=t(667294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return t?n.createElement(g,i(i({ref:r},d),{},{components:t})):n.createElement(g,i({ref:r},d))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},419940:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(487462),a=(t(667294),t(603905));const o={},i="1d Range Search",l={unversionedId:"algorithms/general/1d-range-search",id:"algorithms/general/1d-range-search",title:"1d Range Search",description:"Operations",source:"@site/docs/algorithms/general/1d-range-search.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/1d-range-search",permalink:"/algorithms/general/1d-range-search",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/general/1d-range-search.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"General",permalink:"/algorithms/general/"},next:{title:"2d orthogonal range search",permalink:"/algorithms/general/2d-orthogonal-range-search"}},s={},c=[{value:"Operations",id:"operations",level:2},{value:"Geometric interpretation",id:"geometric-interpretation",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Unordered list - Fast insert, slow range search",id:"unordered-list---fast-insert-slow-range-search",level:3},{value:"Ordered array - Slow insert, binary search for k1 and k2 to do range search",id:"ordered-array---slow-insert-binary-search-for-k1-and-k2-to-do-range-search",level:3},{value:"BST implementation",id:"bst-implementation",level:3}],d={toc:c},p="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1d-range-search"},"1d Range Search"),(0,a.kt)("h2",{id:"operations"},"Operations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Insert key-value pair"),(0,a.kt)("li",{parentName:"ul"},"Search for key k"),(0,a.kt)("li",{parentName:"ul"},"Delete key k"),(0,a.kt)("li",{parentName:"ul"},"Range Search: find all keys between k1 and k2"),(0,a.kt)("li",{parentName:"ul"},"Range Count: number of keys between k1 and k2")),(0,a.kt)("p",null,"Application - Database queries"),(0,a.kt)("h3",{id:"geometric-interpretation"},"Geometric interpretation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Keys are point on a line"),(0,a.kt)("li",{parentName:"ul"},"Find/count points in a given 1 d interval")),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("h3",{id:"unordered-list---fast-insert-slow-range-search"},"Unordered list - Fast insert, slow range search"),(0,a.kt)("h3",{id:"ordered-array---slow-insert-binary-search-for-k1-and-k2-to-do-range-search"},"Ordered array - Slow insert, binary search for k1 and k2 to do range search"),(0,a.kt)("h3",{id:"bst-implementation"},"BST implementation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For range count - use rank with each node ( log N )"),(0,a.kt)("li",{parentName:"ul"},"For range search - Find all keys between lo and hi ( R + log N )")))}u.isMDXComponent=!0}}]);