"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52148],{603905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(667294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(r),f=a,y=c["".concat(l,".").concat(f)]||c[f]||u[f]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},218176:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var n=r(487462),a=(r(667294),r(603905));const o={},i="System Sort",s={unversionedId:"algorithms/searching-sorting/system-sort",id:"algorithms/searching-sorting/system-sort",title:"System Sort",description:"Java System Sort - Arrays.sort()",source:"@site/docs/algorithms/searching-sorting/system-sort.md",sourceDirName:"algorithms/searching-sorting",slug:"/algorithms/searching-sorting/system-sort",permalink:"/algorithms/searching-sorting/system-sort",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/searching-sorting/system-sort.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Shuffle Sort",permalink:"/algorithms/searching-sorting/shuffle-sort"},next:{title:"TimSort",permalink:"/algorithms/searching-sorting/timsort"}},l={},m=[],p={toc:m},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"system-sort"},"System Sort"),(0,a.kt)("p",null,"Java System Sort - Arrays.sort()"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Has different method for each primitive type"),(0,a.kt)("li",{parentName:"ul"},"Has a method for data types that implement Comparable"),(0,a.kt)("li",{parentName:"ul"},"Has a method that uses a Comparator"),(0,a.kt)("li",{parentName:"ul"},"Uses tuned quicksort for primitive types; tuned mergesort for objects")),(0,a.kt)("p",null,"Quicksort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cutoff to insertion sort for small subarrays"),(0,a.kt)("li",{parentName:"ul"},"Partitioning scheme: Bentley-Mcllroy 3-way partitioning"),(0,a.kt)("li",{parentName:"ul"},"Partitioning item",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Small arrays: middle entry"),(0,a.kt)("li",{parentName:"ul"},"Medium arrays: median of 3"),(0,a.kt)("li",{parentName:"ul"},"Large arrays: Tukey's ninther (median of the median of 3 samples, each of 3 entries)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Approximate the median of 9"),(0,a.kt)("li",{parentName:"ul"},"Uses at most 12 compares"),(0,a.kt)("li",{parentName:"ul"},"Better partitioning than random shuffle and less costly")))))))}u.isMDXComponent=!0}}]);