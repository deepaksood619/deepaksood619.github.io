"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[88594],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var i=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,r=function(e,t){if(null==e)return{};var a,i,r={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||n;return a?i.createElement(u,l(l({ref:t},p),{},{components:a})):i.createElement(u,l({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,l=new Array(n);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<n;c++)l[c]=a[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"},441047:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var i=a(487462),r=(a(667294),a(603905));const n={},l="JVM Architecture",o={unversionedId:"languages/java/jvm-architecture",id:"languages/java/jvm-architecture",title:"JVM Architecture",description:"image",source:"@site/docs/languages/java/jvm-architecture.md",sourceDirName:"languages/java",slug:"/languages/java/jvm-architecture",permalink:"/languages/java/jvm-architecture",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/java/jvm-architecture.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/languages/java/intro"},next:{title:"Knowledge",permalink:"/languages/java/knowledge"}},s={},c=[{value:"Java Native Interface (JNI): JNIwill be interacting with theNative Method Librariesand provides the Native Libraries required for the Execution Engine",id:"java-native-interface-jni-jniwill-be-interacting-with-thenative-method-librariesand-provides-the-native-libraries-required-for-the-execution-engine",level:2},{value:"Native Method Libraries:It is aCollection of the Native Libraries which isrequired for the Execution Engine",id:"native-method-librariesit-is-acollection-of-the-native-libraries-which-isrequired-for-the-execution-engine",level:2},{value:"Z Garbage Collector (Introduced in Java 11)",id:"z-garbage-collector-introduced-in-java-11",level:2}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jvm-architecture"},"JVM Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:a(907184).Z,width:"669",height:"588"})),(0,r.kt)("p",null,"JVM is divided into three main subsystems"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class Loader Subsystem")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Runtime Data Area")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execution Engine")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Class Loader Subsystem"))),(0,r.kt)("p",null,"Java's dynamic class loading functionality is handled by the class loader subsystem. It loads, links and initializes the class when it refers to a class for the first time atruntime, not atcompile-time.It performs three major functionality such as Loading, Linking, and Initialization."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Loading")),(0,r.kt)("p",null,"Classes will be loaded by this component.BootStrap ClassLoader, Extension ClassLoader, Application ClassLoader are the three class loader which will help in achieving it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"BootStrapClassLoader-- Responsible for loading classes from the bootstrap classpath, nothing butrt.jar.Highest priority will be given to this loader.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Extension ClassLoader-- Responsible for loading classes which are insideextfolder(jrelib)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Application ClassLoader--Responsible for loadingApplication Level Classpath, path mentioned Environment Variable etc."))),(0,r.kt)("p",null,"The aboveClass Loaderswill followDelegation Hierarchy Algorithmwhile loading the class files."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Linking"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Verify-- Bytecode verifier willverify whether the generated bytecode is proper or not if verification fails we will getverification error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Prepare-- For allstatic variables memory will be allocated and assigned withdefault values.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Resolve-- Allsymbolic memory referencesare replaced with theoriginal referencesfromMethod Area.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Initialization"))),(0,r.kt)("p",null,"This is the final phase of Class Loading, here all ",(0,r.kt)("a",{parentName:"p",href:"https://www.javainterviewpoint.com/use-of-static-keyword-in-java/"},"static variable")," will be assigned with theoriginal values and ",(0,r.kt)("a",{parentName:"p",href:"https://www.javainterviewpoint.com/java-static-import/"},"static block")," will be executed."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Runtime Data Area")),(0,r.kt)("p",null,"Runtime Data Area is divided into 5 major components"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Method Area-- All theClass level datawill be stored hereincludingstatic variables.Method Areaisone per JVMand it is a shared resource.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Heap Area-- All theObjectsand its correspondinginstance variablesandarrayswill be stored here.Heap Areais alsoone per JVMsinceMethod areaandHeap areashares memory for multiple threads the data stored isnot thread safe.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Stack Area-- For every thread, a separateruntime stackwill be created. For everymethod call, one entry will be made in the stack memorywhichis called asStack Frame. Alllocal variableswill be created in the stack memory.Stack area is thread safe since it is not a shared resource. Stack Frame is divided into three sub-entities such as"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Local Variable Array-- Related to the method how manylocal variablesare involved and the corresponding values will be stored here.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Operand stack-- If any intermediate operation is required to perform, operand stackact as runtime workspace to perform the operation.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Frame data-- All symbols corresponding to the method is stored here. In the case of anyexception, the catch block information will be maintained in the frame data.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"PC Registers-- Each thread will have separatePC Registers, to hold address ofcurrent executing instructiononce the instruction is executed the PC register will beupdatedwith the next instruction")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Native Method stacks-- Native Method Stack holds native method information. For every thread, separate native method stack will be created.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execution Engine"))),(0,r.kt)("p",null,"The bytecode which is assigned to theRuntime Data Areawill be executed by the Execution Engine. The Execution Engine reads the byte code and executes one by one."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Interpreter-- Reads the bytecode, interprets it and executes it one by one. The interpreter interprets the bytecode faster but executes slowly. The disadvantage of the interpreter is that when one method called multiple times, every time interpretation is required.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JIT Compiler-- JIT Compiler neutralizes the disadvantage of the Interpreter ( a single method called multiple times, each time interpretation is required ), The Execution Engine will be using the help of Interpreter in converting but when it found repeated code it uses JIT compiler which compiles the entire bytecode andchanges it to native code. This native code will be used directly for repeated method calls which improve the performance of the system.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Intermediate Code generator-- produces intermediate code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Code Optimizer-- Code Optimizer is responsible for optimizing the intermediate code generated above")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Target Code Generator-- Target Code Generator is responsible for Generating Machine Code/ Native Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Profiler--Profileris a special component, it is responsible for finding the hotspots (i.e) Used to identify whether the method is called multiple time or not.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Garbage Collector: Garbage Collector is a part of Execution Engine, it collects/removes the unreferenced objects. Garbage Collection can be triggered by calling"System.gc()", but the execution is not guaranteed.Garbage collector of JVM collects only those objects that are created bynewkeyword. So if you have created any object withoutnew, you can usefinalize methodto perform cleanup.'))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java"},"https://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java")),(0,r.kt)("h2",{id:"java-native-interface-jni-jniwill-be-interacting-with-thenative-method-librariesand-provides-the-native-libraries-required-for-the-execution-engine"},"Java Native Interface (JNI): JNIwill be interacting with theNative Method Librariesand provides the Native Libraries required for the Execution Engine"),(0,r.kt)("h2",{id:"native-method-librariesit-is-acollection-of-the-native-libraries-which-isrequired-for-the-execution-engine"},"Native Method Libraries:It is aCollection of the Native Libraries which isrequired for the Execution Engine"),(0,r.kt)("h2",{id:"z-garbage-collector-introduced-in-java-11"},"Z Garbage Collector (Introduced in Java 11)"),(0,r.kt)("p",null,"The Z Garbage Collector, also known asZGC, is ascalablelow latency garbage collector designed to meet the following goals:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pause timesdo notexceed10ms"),(0,r.kt)("li",{parentName:"ul"},"Pause timesdo notincrease with the heap or live-set size"),(0,r.kt)("li",{parentName:"ul"},"Handle heaps ranging from afew hundred megabytestomulti terabytesin size")),(0,r.kt)("p",null,"At a glance, ZGC is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Concurrent"),(0,r.kt)("li",{parentName:"ul"},"Region-based"),(0,r.kt)("li",{parentName:"ul"},"Compacting"),(0,r.kt)("li",{parentName:"ul"},"NUMA-aware"),(0,r.kt)("li",{parentName:"ul"},"Using colored pointers"),(0,r.kt)("li",{parentName:"ul"},"Using load barriers")),(0,r.kt)("p",null,"At its core, ZGC is aconcurrentgarbage collector, meaning all heavy lifting work is done whileJava threads continue to execute. This greatly limits the impact garbage collection will have on your application's response time."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://wiki.openjdk.java.net/display/zgc/Main"},"https://wiki.openjdk.java.net/display/zgc/Main")))}h.isMDXComponent=!0},907184:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/JVM-Architecture-image1-b0cde87ec690ba252b9d054075ff274a.jpg"}}]);