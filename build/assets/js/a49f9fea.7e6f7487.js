"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[87943],{603905:(n,t,e)=>{e.d(t,{Zo:()=>u,kt:()=>f});var r=e(667294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function p(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=r.createContext({}),l=function(n){var t=r.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},u=function(n){var t=l(n.components);return r.createElement(s.Provider,{value:t},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,o=n.originalType,s=n.parentName,u=p(n,["components","mdxType","originalType","parentName"]),m=l(e),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return e?r.createElement(f,a(a({ref:t},u),{},{components:e})):r.createElement(f,a({ref:t},u))}));function f(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var o=e.length,a=new Array(o);a[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=n,p[m]="string"==typeof n?n:i,a[1]=p;for(var l=2;l<o;l++)a[l]=e[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},546081:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=e(487462),i=(e(667294),e(603905));const o={},a="Input Output Template",p={unversionedId:"python/python-intro/input-output-template",id:"python/python-intro/input-output-template",title:"Input Output Template",description:"",source:"@site/docs/python/python-intro/input-output-template.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/input-output-template",permalink:"/python/python-intro/input-output-template",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/python-intro/input-output-template.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generators",permalink:"/python/python-intro/generators"},next:{title:"Iterators",permalink:"/python/python-intro/iterators"}},s={},l=[],u={toc:l},m="wrapper";function c(n){let{components:t,...e}=n;return(0,i.kt)(m,(0,r.Z)({},u,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"input-output-template"},"Input Output Template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#Input Template\ndef func(lst, n):\n    res = 0\n\n    return res\n\n# t = int(input())\n\n# for _ in range(t):\n#     n = int(input())\n#     lst = list(map(int, input().split()))\n#     print(func(lst, n))\n\ndef test(st, n):\n    return func(list(map(int, st.split())), n)\n\nassert test('1 4 45 6 10 8', 4) == 0\n\n# Input multiple lines of integers in a single line -\n\n 1. input(\"\\nPress the enter key to exit\\n\")\n name = input('What's your name?')\n print('Hello', + name)\n\n 2. Using a list comprehension (for single line)\n a, b, c, d = [int(x) for x in input().split()]\n arr = [int(x) for x in input().split()]\n\n 3. For multiple lines of input\n a, b, c, d = [int(input()) for _ in range(4)]\n\n 3. Using the map funtion\n a, b, c, d = map(int, input().split())\n lst = list(map(int, input().split()))\n\n 4. Input string (hello 2 3)\n Test = input()\n Val = Test.split(' ')\n #['hello', '2', '3']\n\n 5. Split Line -\n Line = 'hello how are you'\n a, *b = line.split()\n # a = 'hello'\n # b = ['how', 'are', 'you']\n\n 6. For single assignment\n Line = 'hello how are you'\n *a, = Line.split()\n\n 7. Input and recurse\n for _ in range(int(input)):\n  print(input())\n\n 8. Read from a file\n fo = open('test.txt', 'r')\n print(fo.readline())\n\n# Fast Input\n import sys\n\n t = int(sys.stdin.readline().strip())\n\n for _ in range(t):\n     n, m = map(int, sys.stdin.readline().strip().split())\n     sys.stdout.write('0')\n     sys.stdout.write('\\n')\n\n FAST IO Example\n # import inbuilt standard input output\n from sys import stdin, stdout\n\n # suppose a function called main() and\n # all the operations are performed\n def main():\n\n     # input via readline method\n     n = stdin.readline()\n\n     # array input similar method\n     arr = [int(x) for x in stdin.readline().split()]\n\n     #initialize variable\n     summation = 0\n\n     # calculate sum\n     for x in arr:\n         summation += x\n\n     # could use inbuilt summation = sum(arr)\n\n     # print answer via write, write method writes only string operations so we need to convert any data into string for input\n     stdout.write(str(summation))\n\n # call the main method\n if __name__ == \"__main__\":\n     main()\n\n# Output\n end is used to define the end statement. default is \\n (newline)\n lst = [1, 2, 3]\n for x in lst:\n  print(x, end=' ')\n")))}c.isMDXComponent=!0}}]);