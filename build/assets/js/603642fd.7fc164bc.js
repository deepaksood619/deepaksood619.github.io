"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[24222],{603905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(667294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),g=o,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},853238:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(487462),o=(r(667294),r(603905));const i={},a="Others",s={unversionedId:"algorithms/searching-sorting/others",id:"algorithms/searching-sorting/others",title:"Others",description:"Beating sorting lower bounds",source:"@site/docs/algorithms/searching-sorting/others.md",sourceDirName:"algorithms/searching-sorting",slug:"/algorithms/searching-sorting/others",permalink:"/algorithms/searching-sorting/others",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/searching-sorting/others.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MSD Radix Sort",permalink:"/algorithms/searching-sorting/msd-radix-sort"},next:{title:"Quick Sort",permalink:"/algorithms/searching-sorting/quick-sort"}},l={},c=[{value:"Beating sorting lower bounds",id:"beating-sorting-lower-bounds",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"others"},"Others"),(0,o.kt)("h2",{id:"beating-sorting-lower-bounds"},"Beating sorting lower bounds"),(0,o.kt)("p",null,"There is an O(n",(0,o.kt)("em",{parentName:"p"},"log(n)) sorting lower bound for comparison based sorts, however, in this talk we'll see a new model for computation, the word RAM model, and data structures based on this model, which solve the Predecessor Problem efficiently leading to O(n"),"sqrt(log(n))) and usage of bit tricks in manipulating numbers. The data structures that we'll primarily see include the van Embde Boas Trees (FOCS '75) and an introduction to Y-Fast Tries."))}d.isMDXComponent=!0}}]);