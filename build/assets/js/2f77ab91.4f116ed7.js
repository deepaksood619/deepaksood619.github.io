"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[72038],{603905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=m(n),d=i,c=f["".concat(l,".").concat(d)]||f[d]||u[d]||r;return n?a.createElement(c,o(o({ref:t},p),{},{components:n})):a.createElement(c,o({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:i,o[1]=s;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},440762:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(487462),i=(n(667294),n(603905));const r={},o="Huffman Compression",s={unversionedId:"algorithms/data-compression/huffman-compression",id:"algorithms/data-compression/huffman-compression",title:"Huffman Compression",description:"Variable-length codes",source:"@site/docs/algorithms/data-compression/huffman-compression.md",sourceDirName:"algorithms/data-compression",slug:"/algorithms/data-compression/huffman-compression",permalink:"/algorithms/data-compression/huffman-compression",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/data-compression/huffman-compression.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bitmap Compression Algorithms",permalink:"/algorithms/data-compression/bitmap-compression-algorithms"},next:{title:"Intro",permalink:"/algorithms/data-compression/intro"}},l={},m=[{value:"Variable-length codes",id:"variable-length-codes",level:2},{value:"Prefix-free codes: trie representation",id:"prefix-free-codes-trie-representation",level:2},{value:"Compression",id:"compression",level:2},{value:"Expansion",id:"expansion",level:2},{value:"Huffman trie node data type",id:"huffman-trie-node-data-type",level:2},{value:"Prefix-free codes: expansion",id:"prefix-free-codes-expansion",level:2},{value:"How to transmit",id:"how-to-transmit",level:2},{value:"Shannon-Fano codes",id:"shannon-fano-codes",level:2},{value:"Huffman codes",id:"huffman-codes",level:2},{value:"Constructing a Huffman encoding trie: Java implementation",id:"constructing-a-huffman-encoding-trie-java-implementation",level:2},{value:"Huffman encoding summary",id:"huffman-encoding-summary",level:2}],p={toc:m},f="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(f,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"huffman-compression"},"Huffman Compression"),(0,i.kt)("h2",{id:"variable-length-codes"},"Variable-length codes"),(0,i.kt)("p",null,"Use different number of bits to encode different chars"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(634404).Z,width:"1230",height:"754"})),(0,i.kt)("p",null,"Que: How do we avoid ambiguity?"),(0,i.kt)("p",null,"Ans: Ensure that no condeword is a prefix of another"),(0,i.kt)("p",null,"Ex 1: Fixed-length code"),(0,i.kt)("p",null,"Ex 2: Append special stop char to each codeword"),(0,i.kt)("p",null,"Ex 3: General prefix-free code"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(832185).Z,width:"1036",height:"346"})),(0,i.kt)("h2",{id:"prefix-free-codes-trie-representation"},"Prefix-free codes: trie representation"),(0,i.kt)("p",null,"Que: How to represent the prefix-free code?"),(0,i.kt)("p",null,"Ans: A binary trie"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Chars in leaves"),(0,i.kt)("li",{parentName:"ul"},"Codeword is path from root to leaf")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(365874).Z,width:"1050",height:"354"})),(0,i.kt)("h2",{id:"compression"},"Compression"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Method 1: start at leaf; follow path up to the root; print bits in reverse"),(0,i.kt)("li",{parentName:"ul"},"Method 2: create ST of key-value pairs")),(0,i.kt)("h2",{id:"expansion"},"Expansion"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Start at root"),(0,i.kt)("li",{parentName:"ul"},"Go left if bit is 0; go right if 1"),(0,i.kt)("li",{parentName:"ul"},"If leaf node, print char and return to root")),(0,i.kt)("h2",{id:"huffman-trie-node-data-type"},"Huffman trie node data type"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(565949).Z,width:"1242",height:"678"})),(0,i.kt)("h2",{id:"prefix-free-codes-expansion"},"Prefix-free codes: expansion"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(973459).Z,width:"1042",height:"642"})),(0,i.kt)("p",null,"Running time: Linear in input size N"),(0,i.kt)("h2",{id:"how-to-transmit"},"How to transmit"),(0,i.kt)("p",null,"Que: How to write the trie?"),(0,i.kt)("p",null,"Ans: Write preorder traversal of trie; mark leaf and internal nodes with a bit"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(586814).Z,width:"1284",height:"454"})),(0,i.kt)("p",null,"Note: If message is long, overhead of transmitting trie is small"),(0,i.kt)("p",null,"Que: How to read in the trie?"),(0,i.kt)("p",null,"Ans: Reconstruct from preorder traversal of trie"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(441267).Z,width:"1276",height:"444"})),(0,i.kt)("h2",{id:"shannon-fano-codes"},"Shannon-Fano codes"),(0,i.kt)("p",null,"Que: How to find best prefix-free code?"),(0,i.kt)("p",null,"Shannon-Fano algorithm:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Partition symbols S into two subsets S~0~ and S~1~ of (roughly) equal freq"),(0,i.kt)("li",{parentName:"ul"},"Codewords for symbols in S~0~ start with 0; for symbols in S~1~ start with 1"),(0,i.kt)("li",{parentName:"ul"},"Recur in S~0~ and S~1~.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(511613).Z,width:"882",height:"364"})),(0,i.kt)("p",null,"Problem 1: How to divide up symbols?"),(0,i.kt)("p",null,"Problem 2: Not optimal"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(165516).Z,width:"1070",height:"768"})),(0,i.kt)("h2",{id:"huffman-codes"},"Huffman codes"),(0,i.kt)("p",null,"Que: How to find best prefix-free code?"),(0,i.kt)("p",null,"Huffman algorithm:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Count frequency freq","[i]"," for each char i in input"),(0,i.kt)("li",{parentName:"ul"},"Start with one node corresponding to each char i (with weight freq","[i]",")"),(0,i.kt)("li",{parentName:"ul"},"Repeat until single trie formed:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Select two tries with min weight freq","[i]"," and freq","[j]"),(0,i.kt)("li",{parentName:"ul"},"merge into single trie with weight freq","[i]"," + freq","[j]")))),(0,i.kt)("h2",{id:"constructing-a-huffman-encoding-trie-java-implementation"},"Constructing a Huffman encoding trie: Java implementation"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(891888).Z,width:"1276",height:"666"})),(0,i.kt)("h2",{id:"huffman-encoding-summary"},"Huffman encoding summary"),(0,i.kt)("p",null,"Proposition: Huffman algorithm produces an optimal prefix-free code"),(0,i.kt)("p",null,"Implementation:"),(0,i.kt)("p",null,"Pass 1: tabulate char frequencies and build trie"),(0,i.kt)("p",null,"Pass 2: encode file by traversing frie or lookup table"),(0,i.kt)("p",null,"Running time: Using a binary heap => N+R log R"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(326044).Z,width:"1557",height:"396"})))}u.isMDXComponent=!0},634404:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image1-da837e967385f1c6d5d86bca1b2ccd6c.jpg"},891888:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image10-f99200807f54287ce863dced0c320ea5.jpg"},326044:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image11-ada42e5178243b9be644f2f650a7d9e7.jpg"},832185:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image2-37affa148b40fe12eddd0982ec75e912.jpg"},365874:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image3-41a3694ae389ba18213ad5d60ba1f510.jpg"},565949:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image4-90931efe260ac7f21cc43952abeab3c5.jpg"},973459:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image5-16947c6299b71aaf8122abf29ce87e1c.jpg"},586814:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image6-b55353e103819e4f716463d0d16da629.jpg"},441267:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image7-3e6c5ad6669b41bdc90daad47a9c26a2.jpg"},511613:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image8-293dd54c2540844d52e07a1a169c65a0.jpg"},165516:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Huffman-Compression-image9-6733b49814413b991b8fd842499548ea.jpg"}}]);