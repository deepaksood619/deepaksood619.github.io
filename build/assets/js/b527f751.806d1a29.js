"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94424],{603905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var i=t(667294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||a;return t?i.createElement(f,o(o({ref:n},s),{},{components:t})):i.createElement(f,o({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var m={};for(var l in n)hasOwnProperty.call(n,l)&&(m[l]=n[l]);m.originalType=e,m[u]="string"==typeof e?e:r,o[1]=m;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>m,toc:()=>p});var i=t(487462),r=(t(667294),t(603905));const a={},o="28. Debugging and Profiling",m={unversionedId:"python/documentation/28-debugging-and-profiling",id:"python/documentation/28-debugging-and-profiling",title:"28. Debugging and Profiling",description:"27.1. bdb - Debugger framework",source:"@site/docs/python/documentation/28-debugging-and-profiling.md",sourceDirName:"python/documentation",slug:"/python/documentation/28-debugging-and-profiling",permalink:"/python/documentation/28-debugging-and-profiling",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/python/documentation/28-debugging-and-profiling.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/python/documentation/27-development-tools/testing"},next:{title:"30. Python Runtime Services",permalink:"/python/documentation/30-python-runtime-services"}},l={},p=[{value:"time",id:"time",level:2},{value:"timeit",id:"timeit",level:2},{value:"Command Line Interface",id:"command-line-interface",level:3},{value:"Callable Python Interface",id:"callable-python-interface",level:3},{value:"Functions",id:"functions",level:3},{value:"Example",id:"example",level:2},{value:"Profiling",id:"profiling",level:2}],s={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"28-debugging-and-profiling"},"28. Debugging and Profiling"),(0,r.kt)("p",null,"27.1. bdb - Debugger framework"),(0,r.kt)("p",null,"27.2. faulthandler - Dump the Python traceback"),(0,r.kt)("p",null,"27.3. pdb - The Python Debugger"),(0,r.kt)("p",null,"27.4. The Python Profilers"),(0,r.kt)("p",null,"27.5. timeit - Measure execution time of small code snippets"),(0,r.kt)("p",null,"27.6. trace - Trace or track Python statement execution"),(0,r.kt)("p",null,"27.7. tracemalloc - Trace memory allocations"),(0,r.kt)("h2",{id:"time"},"time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import time\n\nstart = time.time()\nprint("hello")\nend = time.time()\nprint(end - start)\n')),(0,r.kt)("p",null,"This gives the execution time in seconds."),(0,r.kt)("h2",{id:"timeit"},"timeit"),(0,r.kt)("h3",{id:"command-line-interface"},"Command Line Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ python3 -m timeit '\"-\".join(str(n) for n in range(100))'\n10000 loops, best of 3: 30.2 usec per loop\n$ python3 -m timeit '\"-\".join([str(n) for n in range(100)])'\n10000 loops, best of 3: 27.5 usec per loop\n$ python3 -m timeit '\"-\".join(map(str, range(100)))'\n10000 loops, best of 3: 23.2 usec per loop\n")),(0,r.kt)("h3",{id:"callable-python-interface"},"Callable Python Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"import timeit\ntimeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000)\n0.3018611848820001\ntimeit.timeit('\"-\".join([str(n) for n in range(100)])', number=10000)\n0.2727368790656328\ntimeit.timeit('\"-\".join(map(str, range(100)))', number=10000)\n0.23702679807320237\n\ntimeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"To give the",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/timeit.html#module-timeit"},"timeit")," module access to functions you define, you can pass a ",(0,r.kt)("em",{parentName:"p"},"setup")," parameter which contains an import statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def test():\n    """Stupid test function"""\n    L = [i for i in range(100)]\nif __name__ == \'__main__\':\n    import timeit\n    print(timeit.timeit("test()", setup="from __main__ import test"))\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," # importing the required modules\n import timeit\n\n # binary search function\n def binary_search(mylist, find):\n     while len(mylist) > 0:\n         mid = (len(mylist))//2\n         if mylist[mid] == find:\n             return True\n         elif mylist[mid] < find:\n             mylist = mylist[:mid]\n         else:\n             mylist = mylist[mid + 1:]\n     return False\n\n # linear search function\n def linear_search(mylist, find):\n     for x in mylist:\n         if x == find:\n             return True\n     return False\n\n # compute binary search time\n def binary_time():\n     SETUP_CODE = '''\n from __main__ import binary_search\n from random import randint'''\n\n     TEST_CODE = '''\n mylist = [x for x in range(10000)]\n find = randint(0, len(mylist))\n binary_search(mylist, find)'''\n\n     # timeit.repeat statement\n     times = timeit.repeat(setup = SETUP_CODE,\n                           stmt = TEST_CODE,\n                           repeat = 3,\n                           number = 10000)\n\n     # priniting minimum exec. time\n     print('Binary search time: {}'.format(min(times)))\n\n # compute linear search time\n def linear_time():\n     SETUP_CODE = '''\n from __main__ import linear_search\n from random import randint'''\n\n     TEST_CODE = '''\n mylist = [x for x in range(10000)]\n find = randint(0, len(mylist))\n linear_search(mylist, find)\n     '''\n     # timeit.repeat statement\n     times = timeit.repeat(setup = SETUP_CODE,\n                           stmt = TEST_CODE,\n                           repeat = 3,\n                           number = 10000)\n\n     # priniting minimum exec. time\n     print('Linear search time: {}'.format(min(times)))\n\n if __name__ == \"__main__\":\n     linear_time()\n    binary_time()\n")),(0,r.kt)("h2",{id:"profiling"},"Profiling"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Flame Graph")))}c.isMDXComponent=!0}}]);