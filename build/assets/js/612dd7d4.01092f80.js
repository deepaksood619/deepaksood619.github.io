"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12803],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(667294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(a),d=o,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||r;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},216724:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(487462),o=(a(667294),a(603905));const r={},i="Joins",s={unversionedId:"technologies/apache/apache-spark/joins",id:"technologies/apache/apache-spark/joins",title:"Joins",description:"Sort Merge Joins",source:"@site/docs/technologies/apache/apache-spark/joins.md",sourceDirName:"technologies/apache/apache-spark",slug:"/technologies/apache/apache-spark/joins",permalink:"/technologies/apache/apache-spark/joins",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/technologies/apache/apache-spark/joins.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Apache Spark",permalink:"/technologies/apache/apache-spark/intro"},next:{title:"Key points",permalink:"/technologies/apache/apache-spark/key-points"}},l={},c=[{value:"Sort Merge Joins",id:"sort-merge-joins",level:2},{value:"Broadcast Joins",id:"broadcast-joins",level:2},{value:"Takeaways",id:"takeaways",level:2}],p={toc:c},h="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(h,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"joins"},"Joins"),(0,o.kt)("h2",{id:"sort-merge-joins"},"Sort Merge Joins"),(0,o.kt)("p",null,"When Spark translates an operation in the execution plan as a Sort Merge Join it enables anall-to-all communication strategy among the nodes: the Driver Node will orchestrate the Executors, each of which will hold a particular set of joining keys.Before running the actual operation, the partitions are first sorted(this operation is obviously heavy itself). As you can imagine this kind of strategy can be expensive: nodes need to use the network to share data;note that Sort Merge Joins tend to minimize data movements in the cluster, especially compared to Shuffle Hash Joins."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:a(643976).Z,width:"644",height:"501"})),(0,o.kt)("p",null,"In a Sort Merge Join partitions are sorted on the join key prior to the join operation."),(0,o.kt)("h2",{id:"broadcast-joins"},"Broadcast Joins"),(0,o.kt)("p",null,"Broadcast joins happen when Spark decides to senda copy of a table to all the executor nodes. The intuition here is that, if we broadcast one of the datasets, Spark no longer needs an all-to-all communication strategy andeach Executor will be self-sufficient in joining the big dataset records in each node, with the small (broadcasted) table. We'll see that this simple idea improves performance... usually."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:a(304232).Z,width:"561",height:"611"})),(0,o.kt)("p",null,"In a Broadcast Join a copy of the small table is sent to all the Executors. Each executor will then perform the join without the need of network communication"),(0,o.kt)("h2",{id:"takeaways"},"Takeaways"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Joins can be difficult to tune since performance are bound to both the code and the Spark configuration (number of executors, memory, etc.)"),(0,o.kt)("li",{parentName:"ul"},"Some of the most common issues with joins are all-to-all communication between the nodes and data skewness"),(0,o.kt)("li",{parentName:"ul"},"We can avoid all-to-all communication using broadcasting of small tables or of medium-sized tables if we have enough memory in the cluster"),(0,o.kt)("li",{parentName:"ul"},"Broadcasting is not always beneficial to performance: we need to have an eye for the Spark config"),(0,o.kt)("li",{parentName:"ul"},"Broadcasting can make the code unstable if broadcast tables grow through time"),(0,o.kt)("li",{parentName:"ul"},"Skewness leads to an uneven workload on the cluster, resulting in a very small subset of tasks to take much longer than the average"),(0,o.kt)("li",{parentName:"ul"},"There are multiple ways to fight skewness, one is repartitioning."),(0,o.kt)("li",{parentName:"ul"},"We can create our own repartitioning key, e.g. using the key salting technique")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/the-art-of-joining-in-spark-dcbd33d693c"},"https://towardsdatascience.com/the-art-of-joining-in-spark-dcbd33d693c")))}u.isMDXComponent=!0},643976:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Technologies-Apache-Joins-image1-af6a93f6838525eb772e4547b1e67f96.jpg"},304232:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Technologies-Apache-Joins-image2-93985f85a636e73e2fabb0ed2eb8eb56.jpg"}}]);