"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[24190],{603905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>d});var r=t(667294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function n(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,s=function(e,a){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),p=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):n(n({},a),e)),t},u=function(e){var a=p(e.components);return r.createElement(l.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},k=r.forwardRef((function(e,a){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),k=s,d=c["".concat(l,".").concat(k)]||c[k]||m[k]||i;return t?r.createElement(d,n(n({ref:a},u),{},{components:t})):r.createElement(d,n({ref:a},u))}));function d(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var i=t.length,n=new Array(i);n[0]=k;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[c]="string"==typeof e?e:s,n[1]=o;for(var p=2;p<i;p++)n[p]=t[p];return r.createElement.apply(null,n)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},576136:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>n,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(487462),s=(t(667294),t(603905));const i={},n="Intro to Kafka",o={unversionedId:"technologies/kafka/intro-to-kafka",id:"technologies/kafka/intro-to-kafka",title:"Intro to Kafka",description:"Kafka: a streaming data platform, Unix Pipelines Analogy",source:"@site/docs/technologies/kafka/intro-to-kafka.md",sourceDirName:"technologies/kafka",slug:"/technologies/kafka/intro-to-kafka",permalink:"/technologies/kafka/intro-to-kafka",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/technologies/kafka/intro-to-kafka.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installing Kafka",permalink:"/technologies/kafka/installing-kafka"},next:{title:"Intro",permalink:"/technologies/kafka/intro"}},l={},p=[{value:"Kafka: a streaming data platform, Unix Pipelines Analogy",id:"kafka-a-streaming-data-platform-unix-pipelines-analogy",level:2},{value:"Characteristics",id:"characteristics",level:2},{value:"History",id:"history",level:2},{value:"Kafka Data Model",id:"kafka-data-model",level:2},{value:"Topics",id:"topics",level:2},{value:"Partitions",id:"partitions",level:2},{value:"Partiton distribution",id:"partiton-distribution",level:2},{value:"Producers",id:"producers",level:2},{value:"Consumers",id:"consumers",level:2},{value:"Kafka Architecture",id:"kafka-architecture",level:2},{value:"Types of messaging systems",id:"types-of-messaging-systems",level:2},{value:"Brokers",id:"brokers",level:2},{value:"Kafka Guarantees",id:"kafka-guarantees",level:2},{value:"Replication in Kafka",id:"replication-in-kafka",level:2},{value:"Persistence in Kafka",id:"persistence-in-kafka",level:2},{value:"3 major components",id:"3-major-components",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:p},c="wrapper";function m(e){let{components:a,...i}=e;return(0,s.kt)(c,(0,r.Z)({},u,i,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"intro-to-kafka"},"Intro to Kafka"),(0,s.kt)("h2",{id:"kafka-a-streaming-data-platform-unix-pipelines-analogy"},"Kafka: a streaming data platform, Unix Pipelines Analogy"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Kafka Core is the distributed, durable equivalent of Unix pipes. Use it to connect and compose your large-scale data applications"),(0,s.kt)("li",{parentName:"ul"},"Kafka Streams are the commands of your Unix pipelines. Use it to transform data stored in Kafka"),(0,s.kt)("li",{parentName:"ul"},"Kafka Connect is the I/O redirection in your Unix pipelines. Use it to get your data into an out of Kafka.")),(0,s.kt)("h2",{id:"characteristics"},"Characteristics"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It is a distributed and partitioned messaging system"),(0,s.kt)("li",{parentName:"ul"},"It is highly fault-tolerant"),(0,s.kt)("li",{parentName:"ul"},"It is highly scalable"),(0,s.kt)("li",{parentName:"ul"},"It can process and send millions of messages per second to several receivers")),(0,s.kt)("h2",{id:"history"},"History"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Originally developed by LinkedIn and later, handed over to the open source community in early 2011"),(0,s.kt)("li",{parentName:"ul"},"It became a main Apache project in October, 2012"),(0,s.kt)("li",{parentName:"ul"},"A stable Apache Kafka version 0.8.2.0 was release in Feb, 2015.")),(0,s.kt)("h2",{id:"kafka-data-model"},"Kafka Data Model"),(0,s.kt)("p",null,"The Kafka data model consists of messages and topics"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Messages represent information such as, lines in a log file, a row of stock market data, or an error message from a system"),(0,s.kt)("li",{parentName:"ul"},"Messages are grouped into categories called topics. Example: LogMessage and Stock Message"),(0,s.kt)("li",{parentName:"ul"},"The processes that publish messages into a topic in Kafka are known as producers."),(0,s.kt)("li",{parentName:"ul"},"The processes that receive the messages from a topic in Kafka are known as consumers."),(0,s.kt)("li",{parentName:"ul"},"The processes or servers within Kafka that process the messages are known as brokers."),(0,s.kt)("li",{parentName:"ul"},"A Kafka cluster consists of a set of brokers that process the messages")),(0,s.kt)("h2",{id:"topics"},"Topics"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A topic is a category of messages in Kafka"),(0,s.kt)("li",{parentName:"ul"},"The producers publish the messages into topics"),(0,s.kt)("li",{parentName:"ul"},"The consumers read the messages from topics"),(0,s.kt)("li",{parentName:"ul"},"A topic is divided into one or more partitions"),(0,s.kt)("li",{parentName:"ul"},"A partition is also known as a commit log"),(0,s.kt)("li",{parentName:"ul"},"Each partition contains an ordered set of messages"),(0,s.kt)("li",{parentName:"ul"},"Each message is identified by its offset in the partition"),(0,s.kt)("li",{parentName:"ul"},"Messages are added at one end of the partition and consumed at the other")),(0,s.kt)("h2",{id:"partitions"},"Partitions"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Topics are divided into partitions, which are the unit of parallelism in Kafka",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Partitions allow messages in a topic to be distributed to multiple servers"),(0,s.kt)("li",{parentName:"ul"},"A topic can have any number of partitions"),(0,s.kt)("li",{parentName:"ul"},"Each partition should fit in a single Kafka server"),(0,s.kt)("li",{parentName:"ul"},"The number of partitions decide the parallelism of the topic")))),(0,s.kt)("h2",{id:"partiton-distribution"},"Partiton distribution"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Partitions can be distributed across the Kafka cluster"),(0,s.kt)("li",{parentName:"ul"},"Each Kafka server may handle one or more partitions"),(0,s.kt)("li",{parentName:"ul"},"A partition can be replicated across serveral servers for fault-tolerance"),(0,s.kt)("li",{parentName:"ul"},"One server is marked as a leader for the partition and the others are marked as followers"),(0,s.kt)("li",{parentName:"ul"},"The leader controls the read and write for the partition, whereas the followers replicate the data"),(0,s.kt)("li",{parentName:"ul"},"If a leader fails, one of the followers automatically become the leader."),(0,s.kt)("li",{parentName:"ul"},"Zookeeper is used for the leader selection")),(0,s.kt)("h2",{id:"producers"},"Producers"),(0,s.kt)("p",null,"The producer is the creator of the message in Kafka"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The producers place the message to a particular topic"),(0,s.kt)("li",{parentName:"ul"},"The producers also decide which partition to place the message into"),(0,s.kt)("li",{parentName:"ul"},"Topics should already exist before a message is placed by the producer"),(0,s.kt)("li",{parentName:"ul"},"Messages are added at one end of the partition")),(0,s.kt)("h2",{id:"consumers"},"Consumers"),(0,s.kt)("p",null,"The consumer is the receiver of the message in Kafka"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Each consumer belongs to a consumer group"),(0,s.kt)("li",{parentName:"ul"},"A consumer group may have one or more consumers"),(0,s.kt)("li",{parentName:"ul"},"The consumers specify what topics they want to listen to"),(0,s.kt)("li",{parentName:"ul"},"A message is sent to all the consumers in a consumer group"),(0,s.kt)("li",{parentName:"ul"},"The consumer groups are used to control the messaging system")),(0,s.kt)("h2",{id:"kafka-architecture"},"Kafka Architecture"),(0,s.kt)("p",null,"Kafka consists of brokers that take messages from the producers and add to a partition of a topic. Brokers provide the messages to the consumers from the partitions."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A topic is divided into multiple partitions"),(0,s.kt)("li",{parentName:"ul"},"The messages are added to the partitions at one end and consumed in the same order"),(0,s.kt)("li",{parentName:"ul"},"Each partition acts as a message queue"),(0,s.kt)("li",{parentName:"ul"},"Consumers are divided into consumer groups")),(0,s.kt)("h2",{id:"types-of-messaging-systems"},"Types of messaging systems"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Kafka architecture supports the publish-subscribe and queue system"),(0,s.kt)("li",{parentName:"ul"},"Publish-subscribe system",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Each message is received by all the subscribers"),(0,s.kt)("li",{parentName:"ul"},"Each subscriber receives all the messages"),(0,s.kt)("li",{parentName:"ul"},"Messages are received in the same order that they are produced"))),(0,s.kt)("li",{parentName:"ul"},"Queue system",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Each message has to be consumed by only one consumer"),(0,s.kt)("li",{parentName:"ul"},"Each message is consumed by any one of the available consumers"),(0,s.kt)("li",{parentName:"ul"},"Messages are consumed in the same order that they are received")))),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:t(526216).Z,width:"1440",height:"1080"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:t(500565).Z,width:"1440",height:"1080"})),(0,s.kt)("h2",{id:"brokers"},"Brokers"),(0,s.kt)("p",null,"Brokers are the Kafka processes that process the messages in Kafka"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Each machine in the cluster can run one broker"),(0,s.kt)("li",{parentName:"ul"},"They coordinate among each other using Zookeeper"),(0,s.kt)("li",{parentName:"ul"},"One broker acts as a leader for a partition and handles the delivery and persistence, where as, the others act as followers")),(0,s.kt)("h2",{id:"kafka-guarantees"},"Kafka Guarantees"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Messages sent by a producer to a topic and a partition are appended in the same order"),(0,s.kt)("li",{parentName:"ul"},"A consumer instance gets the messages in the same order as they are produced"),(0,s.kt)("li",{parentName:"ul"},"A topic with replication factor N, tolerates upto N-1 server failures")),(0,s.kt)("h2",{id:"replication-in-kafka"},"Replication in Kafka"),(0,s.kt)("p",null,"Kafka uses the primary-backup method of replication"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"One machine (one replica) is called a leader and is chosen as the primary; the remaining machines (replicas) are chosen as the followers and act as backups"),(0,s.kt)("li",{parentName:"ul"},"The leader propagates the writes to the followers"),(0,s.kt)("li",{parentName:"ul"},"The leader waits until the writes are completed on all the replicas"),(0,s.kt)("li",{parentName:"ul"},"If a replica is down, it is skipped for the write until it comes back"),(0,s.kt)("li",{parentName:"ul"},"If the leader fails, one of the followers will be chosen as the new leader; this mechanism can tolerate n-1 failures if the replication factor is n")),(0,s.kt)("h2",{id:"persistence-in-kafka"},"Persistence in Kafka"),(0,s.kt)("p",null,"Kafka uses the Linux file system for persistence of messages"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Persistence ensures no messages are lost"),(0,s.kt)("li",{parentName:"ul"},"Kafka relies on the file system page cache for fast reads and writes"),(0,s.kt)("li",{parentName:"ul"},"All the data is immediately written to a file in file system"),(0,s.kt)("li",{parentName:"ul"},"Messages are grouped as message sets for more efficient writes"),(0,s.kt)("li",{parentName:"ul"},"Message sets can be compressed to reduce network bandwidth"),(0,s.kt)("li",{parentName:"ul"},"A standarized binary message format is used among producers, brokers, and consumers to minimize data modification")),(0,s.kt)("h2",{id:"3-major-components"},"3 major components"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Kafka Core:")," A central hub to transport and store event streams in real-time")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Kafka Connect:")," A framework to import event streams from other soure data systems into Kafka and export event streams from Kafka to destination data systems")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Kafka Streams:")," A Java library to process event streams live as they occur"))),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Kafka is a high-performance, real-time messaging system"),(0,s.kt)("li",{parentName:"ul"},"Kafka can be used as an external commit log for distributed systems"),(0,s.kt)("li",{parentName:"ul"},"Kafka data model consists of messages and topics"),(0,s.kt)("li",{parentName:"ul"},"Kafka architecture consists of brokers that take messages from the producers and add to a partition of a topics"),(0,s.kt)("li",{parentName:"ul"},"Kafka architecture supports two types of messaging system called publish-subscribe and queue system"),(0,s.kt)("li",{parentName:"ul"},"Brokers are the Kafka processes that process the messages in Kafka")))}m.isMDXComponent=!0},526216:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/Technologies-Kafka-Intro-to-Kafka-image1-c7009743ffb6bd20489928d588cfcd5f.jpg"},500565:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/Technologies-Kafka-Intro-to-Kafka-image2-9c01e76cd6530df23d24676e6e770eff.jpg"}}]);