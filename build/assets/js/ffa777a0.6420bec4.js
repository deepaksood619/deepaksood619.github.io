"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[68701],{603905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>g});var t=n(667294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),u=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=u(e.components);return t.createElement(i.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},E=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),E=r,g=m["".concat(i,".").concat(E)]||m[E]||d[E]||l;return n?t.createElement(g,o(o({ref:a},c),{},{components:n})):t.createElement(g,o({ref:a},c))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=E;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}E.displayName="MDXCreateElement"},240056:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var t=n(487462),r=(n(667294),n(603905));const l={},o="Aggregation / Analytical Queries / SQL Analytics",s={unversionedId:"languages/sql/dql-data-query-language/aggregation-analytical-queries-sql-analytics",id:"languages/sql/dql-data-query-language/aggregation-analytical-queries-sql-analytics",title:"Aggregation / Analytical Queries / SQL Analytics",description:"Aggregate functions perform calculations based on sets of rows",source:"@site/docs/languages/sql/dql-data-query-language/aggregation-analytical-queries-sql-analytics.md",sourceDirName:"languages/sql/dql-data-query-language",slug:"/languages/sql/dql-data-query-language/aggregation-analytical-queries-sql-analytics",permalink:"/languages/sql/dql-data-query-language/aggregation-analytical-queries-sql-analytics",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/languages/sql/dql-data-query-language/aggregation-analytical-queries-sql-analytics.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DQL - Data Query Language",permalink:"/languages/sql/dql-data-query-language/"},next:{title:"Functions",permalink:"/languages/sql/functions"}},i={},u=[{value:"Aggregate functions perform calculations based on sets of rows",id:"aggregate-functions-perform-calculations-based-on-sets-of-rows",level:2},{value:"Functions",id:"functions",level:2},{value:"AVG",id:"avg",level:3},{value:"COUNT",id:"count",level:3},{value:"DIFFERENCE",id:"difference",level:3},{value:"MAX",id:"max",level:3},{value:"MIN",id:"min",level:3},{value:"ROUND",id:"round",level:3},{value:"SUM",id:"sum",level:3},{value:"GROUP BY",id:"group-by",level:3},{value:"Examples",id:"examples",level:3}],c={toc:u},m="wrapper";function d(e){let{components:a,...l}=e;return(0,r.kt)(m,(0,t.Z)({},c,l,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aggregation--analytical-queries--sql-analytics"},"Aggregation / Analytical Queries / SQL Analytics"),(0,r.kt)("h2",{id:"aggregate-functions-perform-calculations-based-on-sets-of-rows"},"Aggregate functions perform calculations based on sets of rows"),(0,r.kt)("p",null,"Unlike aggregate functions, ",(0,r.kt)("strong",{parentName:"p"},"analytic functions")," return a (potentially different) value for each row in the original table."),(0,r.kt)("p",null,"All analytic functions have an ",(0,r.kt)("strong",{parentName:"p"},"OVER")," clause, which defines the sets of rows used in each calculation."),(0,r.kt)("p",null,"TheOVERclause has three (optional) parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"PARTITION BY")," clause divides the rows of the table into different groups"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"ORDER BY")," clause defines an ordering within each partition."),(0,r.kt)("li",{parentName:"ul"},"The final clause (ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) is known as a",(0,r.kt)("strong",{parentName:"li"},"window frame")," clause. It identifies the set of rows used in each calculation. We can refer to this group of rows as a ",(0,r.kt)("strong",{parentName:"li"},"window"),". (Actually, analytic functions are sometimes referred to as ",(0,r.kt)("strong",{parentName:"li"},"analytic window functions")," or simply ",(0,r.kt)("strong",{parentName:"li"},"window functions"),"!)")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(747435).Z,width:"1420",height:"527"})),(0,r.kt)("p",null,"There are many ways to write window frame clauses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ROWS BETWEEN 1 PRECEDING AND CURRENT ROW- the previous row and the current row."),(0,r.kt)("li",{parentName:"ul"},"ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING- the 3 previous rows, the current row, and the following row."),(0,r.kt)("li",{parentName:"ul"},"ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING- all rows in the partition.")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"avg"},"AVG"),(0,r.kt)("p",null,"AVG() is an aggregate function that returns the average value for a numeric column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(column_name)\nFROM table_name;\n")),(0,r.kt)("h3",{id:"count"},"COUNT"),(0,r.kt)("p",null,"COUNT() is a function that takes the name of a column as an argument and counts the number of rows where the column is not NULL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(column_name)\nFROM table_name;\n\n-- To count all rows\nSELECT COUNT(*) FROM table_name;\n")),(0,r.kt)("h3",{id:"difference"},"DIFFERENCE"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MAX(POPULATION) - MIN(POPULATION)\nFROM CITY;\n")),(0,r.kt)("h3",{id:"max"},"MAX"),(0,r.kt)("p",null,"MAX() is a function that takes the name of a column as an argument and returns the largest value in that column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MAX(column_name)\nFROM table_name;\n")),(0,r.kt)("h3",{id:"min"},"MIN"),(0,r.kt)("p",null,"MIN() is a function that takes the name of a column as an argument and returns the smallest value in that column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MIN(column_name)\nFROM table_name;\n")),(0,r.kt)("h3",{id:"round"},"ROUND"),(0,r.kt)("p",null,"ROUND() is a function that takes a column name and an integer as an argument. It rounds the values in the column to the number of decimal places specified by the integer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ROUND(column_name, integer)\nFROM table_name;\n")),(0,r.kt)("h3",{id:"sum"},"SUM"),(0,r.kt)("p",null,"SUM() is a function that takes the name of a column as an argument and returns the sum of all the values in that column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SUM(column_name)\nFROM table_name;\n")),(0,r.kt)("h3",{id:"group-by"},"GROUP BY"),(0,r.kt)("p",null,"GROUP BY is a clause in SQL that is only used with aggregate functions. It is used in collaboration with the SELECT statement to arrange identical data into groups."),(0,r.kt)("p",null,"The GROUP BY statement comes after any WHERE statements, but before ORDER BY or LIMIT"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*)\nFROM table_name\nGROUP BY column_name;\n\nSELECT ROUND(imdb_rating), COUNT(name) FROM movies GROUP BY 1 ORDER BY 1;\n-- Here, the 1 refers to the first column in our SELECT statement, ROUND(imdb_rating)\n")),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    CONCAT(HOUR(create_date),\n            ':00-',\n            HOUR(create_date) + 1,\n            ':00') AS Hours,\n    COUNT(*) AS `usage`\nFROM\n    communication_log\nWHERE\n    channel = 'sms'\n        AND create_date BETWEEN '2021-08-25 00:00:00' AND NOW()\nGROUP BY HOUR(create_date);\n\nSELECT create_date, count(*)\nFROM communication_log\nWHERE\n    channel = 'sms'\n        AND create_date BETWEEN '2021-08-25 00:00:00' AND NOW()\nGROUP BY hour( create_date ) , day( create_date );\n\nSELECT YEAR(create_date),\n    MONTH(create_date),\n    count(id)\nFROM st_customer_detail\nGROUP BY YEAR(create_date),\n        MONTH(create_date)\nORDER BY YEAR(create_date) DESC, MONTH(create_date) DESC;\n\nSELECT\n    template_id, COUNT(*) AS template_count\nFROM\n    (SELECT\n        customer_id, template_id, COUNT(*) AS count\n    FROM\n        communication_log\n    WHERE\n        channel = 'sms' AND is_success = 1\n            AND create_date BETWEEN NOW() - INTERVAL 16 HOUR AND NOW()\n    GROUP BY customer_id , template_id) inner_query\nWHERE\n    count > 2\nGROUP BY template_id\nORDER BY template_count DESC;\n\n-- Department wise bifurcation\nselect a.channel, a.department, a.name, count(*) from (\nSELECT ct.department, ct.channel, ct.name\nFROM communication_log cl\nLEFT JOIN communication_templates ct ON cl.template_id = ct.name\nWHERE cl.id BETWEEN 422020686 AND 435852382\n    AND is_success = '1'\nGROUP BY cl.id\n) a group by a.channel, a.department, a.name;\n\n-- average temperature by hour and month\n-- output hours in rows and months in columns\n-- transform row as column using CASE\nSELECT\n    DAY(exam_date),\n    AVG(marks),\n    round(AVG(CASE WHEN MONTH(exam_date) = 1 THEN marks ELSE 0 END),2) jan,\n    round(AVG(CASE WHEN MONTH(exam_date) = 2 THEN marks ELSE 0 END),2) feb,\n    round(AVG(CASE WHEN MONTH(exam_date) = 3 THEN marks ELSE 0 END),2) mar,\n    round(AVG(CASE WHEN MONTH(exam_date) = 4 THEN marks ELSE 0 END),2) apr,\n    round(AVG(CASE WHEN MONTH(exam_date) = 5 THEN marks ELSE 0 END),2) may,\n    round(AVG(CASE WHEN MONTH(exam_date) = 6 THEN marks ELSE 0 END),2) june,\n    round(AVG(CASE WHEN MONTH(exam_date) = 7 THEN marks ELSE 0 END),2) july,\n    round(AVG(CASE WHEN MONTH(exam_date) = 8 THEN marks ELSE 0 END),2) aug,\n    round(AVG(CASE WHEN MONTH(exam_date) = 9 THEN marks ELSE 0 END),2) sep,\n    round(AVG(CASE WHEN MONTH(exam_date) = 10 THEN marks ELSE 0 END),2) oct,\n    round(AVG(CASE WHEN MONTH(exam_date) = 11 THEN marks ELSE 0 END),2) nov,\n    round(AVG(CASE WHEN MONTH(exam_date) = 12 THEN marks ELSE 0 END),2) december\nFROM\n    demo_table\nGROUP BY MONTH(exam_date) , DAY(exam_date);\n\n-- count vowels in names in a table\nselect d_name, sum(\n    if (d_name like '%a%', 1, 0)\n    + if( d_name like '%e%', 1, 0)\n    + if( d_name like '%i%', 1, 0)\n    + if( d_name like '%o%', 1, 0)\n    + if( d_name like '%u%', 1, 0)\n) as vowel_count from (select distinct name as d_name\nfrom demo_table) a group by a.d_name;\n")))}d.isMDXComponent=!0},747435:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/DQL-Data-Query-Language_Aggregation-Analytical-Queries-SQL-Analytics-image1-c52ba2820a19c8b088a4aac2737ffabc.jpg"}}]);