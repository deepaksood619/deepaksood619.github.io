"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[149],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var r=a(667294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(a),m=n,g=s["".concat(o,".").concat(m)]||s[m]||d[m]||l;return a?r.createElement(g,i(i({ref:t},p),{},{components:a})):r.createElement(g,i({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[s]="string"==typeof e?e:n,i[1]=c;for(var u=2;u<l;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},25560:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var r=a(487462),n=(a(667294),a(603905));const l={},i="Interval Search Tree",c={unversionedId:"data-structures/hierarchical-data-structure/interval-search-tree",id:"data-structures/hierarchical-data-structure/interval-search-tree",title:"Interval Search Tree",description:"Operations",source:"@site/docs/data-structures/hierarchical-data-structure/interval-search-tree.md",sourceDirName:"data-structures/hierarchical-data-structure",slug:"/data-structures/hierarchical-data-structure/interval-search-tree",permalink:"/data-structures/hierarchical-data-structure/interval-search-tree",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/hierarchical-data-structure/interval-search-tree.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fibonacci Heap",permalink:"/data-structures/hierarchical-data-structure/fibonacci-heap"},next:{title:"k-ary heap / d-ary heap / d-way heap",permalink:"/data-structures/hierarchical-data-structure/k-ary-heap-d-ary-heap-d-way-heap"}},o={},u=[{value:"Implementation - Use a red-black BST to guarantee performance",id:"implementation---use-a-red-black-bst-to-guarantee-performance",level:2}],p={toc:u},s="wrapper";function d(e){let{components:t,...l}=e;return(0,n.kt)(s,(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"interval-search-tree"},"Interval Search Tree"),(0,n.kt)("p",null,"Operations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Insert an interval"),(0,n.kt)("li",{parentName:"ul"},"Search for an interval"),(0,n.kt)("li",{parentName:"ul"},"Delete an interval"),(0,n.kt)("li",{parentName:"ul"},"Interval intersection query: Given an interval (lo, hi), find all intervals (or one interval) in data structure that intersects (lo, hi)\n",(0,n.kt)("img",{alt:"image",src:a(14919).Z,width:"984",height:"878"}),(0,n.kt)("img",{alt:"image",src:a(246834).Z,width:"1006",height:"808"}),(0,n.kt)("img",{alt:"image",src:a(463478).Z,width:"1086",height:"908"}),(0,n.kt)("img",{alt:"image",src:a(582957).Z,width:"918",height:"358"}))),(0,n.kt)("h2",{id:"implementation---use-a-red-black-bst-to-guarantee-performance"},"Implementation - Use a red-black BST to guarantee performance"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"operation"),(0,n.kt)("th",{parentName:"tr",align:null},"brute"),(0,n.kt)("th",{parentName:"tr",align:null},"interval search tree"),(0,n.kt)("th",{parentName:"tr",align:null},"best in theory"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"insert interval"),(0,n.kt)("td",{parentName:"tr",align:null},"1"),(0,n.kt)("td",{parentName:"tr",align:null},"log N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"find interval"),(0,n.kt)("td",{parentName:"tr",align:null},"N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"delete interval"),(0,n.kt)("td",{parentName:"tr",align:null},"N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"find any one interval that intersects (",(0,n.kt)("em",{parentName:"td"},"lo"),", ",(0,n.kt)("em",{parentName:"td"},"hi"),")"),(0,n.kt)("td",{parentName:"tr",align:null},"N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N"),(0,n.kt)("td",{parentName:"tr",align:null},"log N")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"find all intervals that intersects (",(0,n.kt)("em",{parentName:"td"},"lo"),", ",(0,n.kt)("em",{parentName:"td"},"hi"),")"),(0,n.kt)("td",{parentName:"tr",align:null},"N"),(0,n.kt)("td",{parentName:"tr",align:null},"R log N"),(0,n.kt)("td",{parentName:"tr",align:null},"R + log N")))))}d.isMDXComponent=!0},14919:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Interval-Search-Tree-image1-338e48a185d4021ea1cdea4643263b1f.jpg"},246834:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Interval-Search-Tree-image2-103aacb6d05af196b31ab69a6b46e297.jpg"},463478:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Interval-Search-Tree-image3-4ebcf77addb5216a351c751dfde4bd93.jpg"},582957:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/Interval-Search-Tree-image4-cf283e0ae77d6bd10dc7bdcb50fc5009.jpg"}}]);