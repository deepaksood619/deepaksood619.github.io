"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12493],{603905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(667294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(n),m=o,g=l["".concat(s,".").concat(m)]||l[m]||h[m]||a;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},180333:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(487462),o=(n(667294),n(603905));const a={},i="Connected Components",c={unversionedId:"algorithms/graphtheory/connected-components",id:"algorithms/graphtheory/connected-components",title:"Connected Components",description:"Connected Components",source:"@site/docs/algorithms/graphtheory/connected-components.md",sourceDirName:"algorithms/graphtheory",slug:"/algorithms/graphtheory/connected-components",permalink:"/algorithms/graphtheory/connected-components",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/algorithms/graphtheory/connected-components.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Breadth First Search (BFS)",permalink:"/algorithms/graphtheory/breadth-first-search-bfs"},next:{title:"Depth First Search (DFS)",permalink:"/algorithms/graphtheory/depth-first-search-dfs"}},s={},p=[{value:"Connected Components",id:"connected-components-1",level:2},{value:"Union-Find vs DFS",id:"union-find-vs-dfs",level:2},{value:"Static graph - DFS",id:"static-graph---dfs",level:2},{value:"Dynamic graph - Union-find",id:"dynamic-graph---union-find",level:2}],d={toc:p},l="wrapper";function h(e){let{components:t,...a}=e;return(0,o.kt)(l,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connected-components"},"Connected Components"),(0,o.kt)("h2",{id:"connected-components-1"},"Connected Components"),(0,o.kt)("p",null,"Definition: Vertices v and w are connected if there is a path between them."),(0,o.kt)("p",null,"Goal: Preprocess graph to answer queries of the form is v connected to w in constant time."),(0,o.kt)("p",null,"Union-find: Does not answer in constant time"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(443093).Z,width:"1118",height:"736"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(953612).Z,width:"1022",height:"722"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(530810).Z,width:"1104",height:"728"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(289707).Z,width:"1040",height:"768"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(901721).Z,width:"1048",height:"450"})),(0,o.kt)("h2",{id:"union-find-vs-dfs"},"Union-Find vs DFS"),(0,o.kt)("p",null,"The union-find algorithm is best suited for situations where the equivalence relationship is changing, i.e., there are \"Union\" operations which need to be performed on your set of partitions. Given a fixed undirected graph, you don't have the equivalence relationships changing at all - the edges are all fixed. OTOH, if you have a graph with new edges being added, DFS won't cut it. While DFS is asymptotically faster than union-find, in practice, the likely deciding factor would be the actual problem that you are trying to solve."),(0,o.kt)("h2",{id:"static-graph---dfs"},"Static graph - DFS"),(0,o.kt)("h2",{id:"dynamic-graph---union-find"},"Dynamic graph - Union-find"))}h.isMDXComponent=!0},443093:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Connected-Components-image1-5b2da3d689191a8a19dd137d8da5dabc.jpg"},953612:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Connected-Components-image2-960b607ba897555c8d5a18cc75bfc27b.jpg"},530810:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Connected-Components-image3-fc28d0acd8b2036360470e4610f8fab7.jpg"},289707:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Connected-Components-image4-8cbb9807c1c1383c060f4da4513b6c67.jpg"},901721:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Connected-Components-image5-853b0c8f26cf9b959f0d01453d13464a.jpg"}}]);