"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[14955],{603905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var r=a(667294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(a),m=n,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return a?r.createElement(k,l(l({ref:t},p),{},{components:a})):r.createElement(k,l({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:n,l[1]=s;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},188611:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=a(487462),n=(a(667294),a(603905));const i={},l="Design",s={unversionedId:"databases/nosql-databases/cassandra/design",id:"databases/nosql-databases/cassandra/design",title:"Design",description:"Partitioner",source:"@site/docs/databases/nosql-databases/cassandra/design.md",sourceDirName:"databases/nosql-databases/cassandra",slug:"/databases/nosql-databases/cassandra/design",permalink:"/databases/nosql-databases/cassandra/design",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/databases/nosql-databases/cassandra/design.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Model",permalink:"/databases/nosql-databases/cassandra/data-model"},next:{title:"Drivers / Clients",permalink:"/databases/nosql-databases/cassandra/drivers-clients"}},o={},u=[{value:"Partitioner",id:"partitioner",level:2},{value:"Membership",id:"membership",level:2},{value:"Joining the cluster",id:"joining-the-cluster",level:2},{value:"Drivers",id:"drivers",level:2},{value:"Data Placement Strategies",id:"data-placement-strategies",level:2},{value:"Snitches",id:"snitches",level:2},{value:"Suspicion mechanisms",id:"suspicion-mechanisms",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"design"},"Design"),(0,n.kt)("h2",{id:"partitioner"},"Partitioner"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Token Value Distribution",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"+2^63^ - 1 to -2^63^")))),(0,n.kt)("h2",{id:"membership"},"Membership"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any server in cluster could be the coordinator"),(0,n.kt)("li",{parentName:"ul"},"So every server needs to maintain a list of all the other servers that are currently in the server"),(0,n.kt)("li",{parentName:"ul"},"List needs to be updated automatically as servers join, leave, and fail"),(0,n.kt)("li",{parentName:"ul"},"Cassandra uses gossip-based cluster membership",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Nodes periodically gossip their membership list"),(0,n.kt)("li",{parentName:"ul"},"On receipt, the local membership list is updated"),(0,n.kt)("li",{parentName:"ul"},"If any heartbeat older than Tfail, node is marked as failed")))),(0,n.kt)("h2",{id:"joining-the-cluster"},"Joining the cluster"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Nodes join the cluster by communicating with any node"),(0,n.kt)("li",{parentName:"ul"},"Cassandra finds these nodes list of possible nodes in cassandra.yaml"),(0,n.kt)("li",{parentName:"ul"},"Seed nodes communicate cluster topology to the joining node"),(0,n.kt)("li",{parentName:"ul"},"Once the new node joins the cluster, all nodes are peers"),(0,n.kt)("li",{parentName:"ul"},"States of nodes",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Joining"),(0,n.kt)("li",{parentName:"ul"},"Leaving"),(0,n.kt)("li",{parentName:"ul"},"Up"),(0,n.kt)("li",{parentName:"ul"},"Down- Cassandra uses a Ring-based DHT but without finger tables or routing")))),(0,n.kt)("h2",{id:"drivers"},"Drivers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Drivers intelligently choose which node would best coordinate a request"),(0,n.kt)("li",{parentName:"ul"},"Per-query basis:")),(0,n.kt)("p",null,'ResultSet results = session.execute("',"[query]",'");- TokenAwarePolicy - driver chooses node which contains the data'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"RoundRobinPolicy - driver round robins the ring"),(0,n.kt)("li",{parentName:"ul"},"DCAwareRoundRobinPolicy - driver round robins the target data center")),(0,n.kt)("h2",{id:"data-placement-strategies"},"Data Placement Strategies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Replication Strategy",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"SimpleStrategy"))))),(0,n.kt)("p",null,"Uses the partitioner, of which there are two kinds"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"RandomPartitioner"),": Chord-like hash partitioning")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"ByteOrderedPartitioner"),": Assigns ranges of keys to servers"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Easier for range queries (e.g., Get me all twitter users starting with ","[a-b]",")")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"NetworkTopologyStrategy"),": for multi-DC deployments",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Two replicas per DC"),(0,n.kt)("li",{parentName:"ul"},"Three replicas per DC"),(0,n.kt)("li",{parentName:"ul"},"Per DC",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"First replica placed according to Partitioner"),(0,n.kt)("li",{parentName:"ul"},"Then go clockwise around ring until you hit a different rack")))))),(0,n.kt)("h2",{id:"snitches"},"Snitches"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Maps:")," IPs to racks and DCs. Configured in cassandra.yaml config file"),(0,n.kt)("li",{parentName:"ul"},"Some options:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"SimpleSnitch:")," Unaware of Topology (Rack-unaware)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"RackInferring:")," Assumes topology of network by octet of server's IP address",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"101.102.103.104 = x.< DC octet >.< rack octet >.< node octet >"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"PropertyFileSnitch:")," uses a config file"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"EC2Snitch:")," uses EC@",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"EC2 Region = DC"),(0,n.kt)("li",{parentName:"ul"},"Availability zone = rack"))),(0,n.kt)("li",{parentName:"ul"},"Other snitch options available")))),(0,n.kt)("h2",{id:"suspicion-mechanisms"},"Suspicion mechanisms"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Suspicion mechanisms to adaptively set the timeout based on underlying network and failure behavior"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Accural detector:")," Failure Detector outputs a value (PHI) representing suspicion"),(0,n.kt)("li",{parentName:"ul"},"Applications set an appropriate threshold"),(0,n.kt)("li",{parentName:"ul"},"PHI calculation for a member",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Inter-arrival times for gossip messages"),(0,n.kt)("li",{parentName:"ul"},"PHI(t) = -log(CDF or Probability(t_now - t_last))/log 10"),(0,n.kt)("li",{parentName:"ul"},"PHI basically determines the detection timeout, but takes into account historical inter-arrival time variations for gossiped heatbeats"))),(0,n.kt)("li",{parentName:"ul"},"In practice, PHI = 5 => 10-15 sec detection time")))}d.isMDXComponent=!0}}]);