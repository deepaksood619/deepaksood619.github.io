"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[22301],{603905:(e,n,t)=>{t.d(n,{Zo:()=>f,kt:()=>g});var r=t(667294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},f=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,g=u["".concat(i,".").concat(d)]||u[d]||p[d]||a;return t?r.createElement(g,s(s({ref:n},f),{},{components:t})):r.createElement(g,s({ref:n},f))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},256017:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(487462),o=(t(667294),t(603905));const a={},s="Commands & Configs",l={unversionedId:"devops/monitoring/telegraf/commands-and-configs",id:"devops/monitoring/telegraf/commands-and-configs",title:"Commands & Configs",description:"Telegraf",source:"@site/docs/devops/monitoring/telegraf/commands-and-configs.md",sourceDirName:"devops/monitoring/telegraf",slug:"/devops/monitoring/telegraf/commands-and-configs",permalink:"/devops/monitoring/telegraf/commands-and-configs",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/devops/monitoring/telegraf/commands-and-configs.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Telegraf",permalink:"/devops/monitoring/telegraf/"},next:{title:"Other DevOps",permalink:"/devops/others/"}},i={},c=[{value:"Telegraf",id:"telegraf",level:2},{value:"Commands",id:"commands",level:2},{value:"Test Telegraf",id:"test-telegraf",level:2},{value:"Config",id:"config",level:2}],f={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"commands--configs"},"Commands & Configs"),(0,o.kt)("h2",{id:"telegraf"},"Telegraf"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#run default conf file\ndocker run --rm --net=influxdb --name telegraf telegraf\n\n# get conf file for editing\ndocker run --rm telegraf telegraf config > telegraf.conf\n\ndocker run --rm -d --net=influxdb -e "HOST_PROC=/rootfs/proc" -e "HOST_SYS=/rootfs/sys" -e "HOST_ETC=/rootfs/etc" -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro -v /var/run/docker.sock:/var/run/docker.sock:ro -v /sys:/rootfs/sys:ro -v /proc:/rootfs/proc:ro -v /etc:/rootfs/etc:ro --name telegraf telegraf\n\ndocker run --rm -d --net=influxdb -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro -v /var/run/docker.sock:/var/run/docker.sock:ro -v /rootfs/sys:/sys:ro -v /rootfs/proc:/proc:ro -v /rootfs/etc:/etc:ro -v /var/run/utmp:/var/run/utmp -v --name telegraf telegraf\n\n--add-host="influxdb:192.168.0.73"\n')),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#conf file\nsudo nano /etc/telegraf/telegraf.conf\n\n# restart telegraf and load telegraf.conf\nsudo service telegraf restart\n\nsudo service telegraf status\n\n#telegraf logs\ntail -f /var/log/telegraf/telegraf.log\n")),(0,o.kt)("h2",{id:"test-telegraf"},"Test Telegraf"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"telegraf -config telegraf.conf -test\n\nsudo sed -i 's+telegraf:.*+telegraf:x:0:0::/etc/telegraf:/bin/false+g' /etc/passwd\n")),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[global_tags]\n  dc = "$CLUSTER"\n  user = "$USER_SYSTEM"\n\n[agent]\n  interval = "10s"\n  round_interval = true\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  collection_jitter = "2s"\n  flush_interval = "30s"\n  flush_jitter = "2s"\n  precision = ""\n  debug = $DEBUG\n  quiet = false\n  logfile = ""\n  hostname = "$HOSTNAME_SYSTEM"\n  omit_hostname = false\n\n[[outputs.influxdb]]\n  urls = ["http://servermonitor.zenatix.com:8086"]\n  database = "telegraf"\n  username = ""\n  password = ""\n  namedrop = ["tail", "docker_log"]\n\n[[outputs.elasticsearch]]\n  urls = ["http://elasticsearch.zenatix.com:9200"]\n  timeout = "1m"\n  enable_sniffer = false\n  health_check_interval = "0s"\n  index_name = "server_log-%Y.%m.%d"\n  manage_template = true\n  template_name = "telegraf"\n  overwrite_template = false\n  namepass = ["tail", "docker_log"]\n\n[[inputs.cpu]]\n  percpu = true\n  totalcpu = true\n  collect_cpu_time = false\n  report_active = false\n\n[[inputs.disk]]\n  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]\n\n[[inputs.kernel]]\n\n[[inputs.mem]]\n\n[[inputs.processes]]\n\n[[inputs.swap]]\n\n[[inputs.system]]\n\n[[inputs.diskio]]\n\n[[inputs.docker]]\n  endpoint = "unix:///var/run/docker.sock"\n  gather_services = false\n  container_names = []\n  timeout = "5s"\n  perdevice = true\n  total = false\n\n[[inputs.internal]]\n\n[[inputs.interrupts]]\n\n[[inputs.net]]\n\n[[inputs.net_response]]\n  protocol = "tcp"\n  address = "localhost:80"\n\n[[inputs.netstat]]\n\n[[inputs.tail]]\n  files = ["/rootfs/var/log/cron/*.log", "/rootfs/var/log/nginx/error.log"]\n  from_beginning = false\n  pipe = false\n  watch_method = "inotify"\n  data_format = "value"\n  data_type = "string"\n\n[[inputs.docker_log]]\n  endpoint = "unix:///var/run/docker.sock"\n  from_beginning = false\n  timeout = "5s"\n  container_name_include = []\n  container_name_exclude = []\n  container_state_include = []\n  container_state_exclude = []\n  docker_label_include = []\n  docker_label_exclude = []\n\n[[inputs.logparser]]\n  files = ["/rootfs/var/log/nginx/access.log"]\n  from_beginning = false\n  watch_method = "inotify"\n\n  [inputs.logparser.grok]\n    patterns = ["%{COMBINED_LOG_FORMAT}"]\n    measurement = "nginx_access_log"\n    timezone = "Asia/Kolkata"\n')))}p.isMDXComponent=!0}}]);