"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[51876],{603905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(667294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var h=n.createContext({}),p=function(e){var t=n.useContext(h),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(h.Provider,{value:t},e.children)},c="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,h=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=i,f=c["".concat(h,".").concat(d)]||c[d]||l[d]||r;return a?n.createElement(f,s(s({ref:t},u),{},{components:a})):n.createElement(f,s({ref:t},u))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=d;var o={};for(var h in t)hasOwnProperty.call(t,h)&&(o[h]=t[h]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},611392:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(487462),i=(a(667294),a(603905));const r={},s="Hash Functions",o={unversionedId:"data-structures/hashtable/hash-functions",id:"data-structures/hashtable/hash-functions",title:"Hash Functions",description:"Bad Hash Functions",source:"@site/docs/data-structures/hashtable/hash-functions.md",sourceDirName:"data-structures/hashtable",slug:"/data-structures/hashtable/hash-functions",permalink:"/data-structures/hashtable/hash-functions",draft:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/main/docs/data-structures/hashtable/hash-functions.md",tags:[],version:"current",lastUpdatedAt:1677955187,formattedLastUpdatedAt:"Mar 4, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dictionaries",permalink:"/data-structures/hashtable/dictionaries"},next:{title:"Hash Tables",permalink:"/data-structures/hashtable/hash-tables"}},h={},p=[{value:"Bad Hash Functions",id:"bad-hash-functions",level:2},{value:"MurmurHash / MurmurHash3",id:"murmurhash--murmurhash3",level:2},{value:"SipHash (for strings in python dictionary implementation)",id:"siphash-for-strings-in-python-dictionary-implementation",level:2}],u={toc:p},c="wrapper";function l(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hash-functions"},"Hash Functions"),(0,i.kt)("h2",{id:"bad-hash-functions"},"Bad Hash Functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First 3 digits of a phone number"),(0,i.kt)("li",{parentName:"ul"},"Memory address of an object (will only be power of 2's so odd locations will never get filled)")),(0,i.kt)("h2",{id:"murmurhash--murmurhash3"},"MurmurHash / MurmurHash3"),(0,i.kt)("p",null,"MurmurHashis a non-",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cryptographic_hash_function"},"cryptographic"),(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_function"},"hash function")," suitable for general hash-based lookup.It was created by Austin Appleby in 2008and is currently hosted on GitHub along with its test suite named 'SMHasher'. It also exists in a number of variants,all of which have been released into the public domain. The name comes from two basic operations, multiply (MU) and rotate (R), used in its inner loop.\nUnlike ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cryptographic_hash_function"},"cryptographic hash functions"),", it is not specifically designed to be difficult to reverse by an adversary, making it unsuitable for cryptographic purposes.\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/MurmurHash"},"https://en.wikipedia.org/wiki/MurmurHash")),(0,i.kt)("h2",{id:"siphash-for-strings-in-python-dictionary-implementation"},"SipHash (for strings in python dictionary implementation)"),(0,i.kt)("p",null,"SipHashis a relatively fast hash function. On a 64-bit machine, SipHash returns a 64-bit hash. The hash is then converted into an index to be used in an array.\nSipHashis an ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Block_cipher#ARX_(add%E2%80%93rotate%E2%80%93xor)"},"add--rotate--xor"),"(ARX) based family of ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pseudorandom_function"},"pseudorandom functions")," created by ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/w/index.php?title=Jean-Philippe_Aumasson&action=edit&redlink=1"},"Jean-Philippe Aumasson")," and ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Daniel_J._Bernstein"},"Daniel J. Bernstein"),' in 2012, in response to a spate of "hash flooding"',(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Denial-of-service_attack"},"denial-of-service attacks")," in late 2011.\nAlthough designed for use as a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hash_function"},"hash function")," in the computer science sense, SipHash is fundamentally different from ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cryptographic_hash_functions"},"cryptographic hash functions")," like ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Secure_Hash_Algorithm"},"SHA")," in that it is only suitable as a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Message_authentication_code"},"message authentication code"),": akeyedhash function like ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/HMAC"},"HMAC"),". That is, SHA is designed so that it is difficult for an attacker to find two messagesXandYsuch that SHA(X) = SHA(Y), even though anyone may compute SHA(X). SipHash instead guarantees that, having seenXiand SipHash(Xi,k), an attacker who does not know the keykcannot find (any information about) kor SipHash(Y,k) for any messageY\u2209 {Xi} which they have not seen before.\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SipHash"},"https://en.wikipedia.org/wiki/SipHash")))}l.isMDXComponent=!0}}]);