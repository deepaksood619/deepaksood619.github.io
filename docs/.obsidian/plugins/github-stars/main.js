/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitHubStarsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  cacheExpiry: 60,
  // Default cache expiry: 60 minutes
  displayFormat: "\u2B50 {stars}",
  apiToken: "",
  numberFormat: "abbreviated"
};
var GitHubStarsPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.cache = {};
  }
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("star", "Github stars", (evt) => {
      new import_obsidian.Notice("Processing GitHub stars...");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        activeView.previewMode.rerender(true);
        new import_obsidian.Notice("GitHub star counts refreshed!");
      } else {
        new import_obsidian.Notice("No active markdown view found");
      }
    });
    ribbonIconEl.addClass("github-stars-ribbon-class");
    try {
      const loadedCache = await this.loadData();
      if (loadedCache && loadedCache.cache) {
        this.cache = loadedCache.cache;
      }
    } catch (error) {
      console.error("Error loading cache:", error);
    }
    this.registerMarkdownPostProcessor(this.processMarkdown.bind(this));
    this.addSettingTab(new GitHubStarsSettingTab(this.app, this));
    this.addCommand({
      id: "clear-github-stars-cache",
      name: "Clear cache",
      callback: () => {
        this.cache = {};
        this.saveSettings();
        new import_obsidian.Notice("GitHub stars cache cleared");
      }
    });
    this.addCommand({
      id: "refresh-github-stars",
      name: "Refresh for current note",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView) {
          if (!checking) {
            activeView.previewMode.rerender(true);
            new import_obsidian.Notice("Refreshing GitHub star counts...");
          }
          return true;
        }
        return false;
      }
    });
  }
  onunload() {
    this.saveSettings();
  }
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
    if (data && data.cache) {
      this.cache = data.cache;
    }
  }
  async saveSettings() {
    const dataToSave = {
      ...this.settings,
      cache: this.cache
    };
    await this.saveData(dataToSave);
  }
  /**
   * Process markdown content to find and enhance GitHub links
   */
  async processMarkdown(el, ctx) {
    const links = el.querySelectorAll("a");
    for (let i = 0; i < links.length; i++) {
      const link = links[i];
      const url = link.getAttribute("href");
      if (!url) {
        continue;
      }
      const repoInfo = this.extractRepoInfo(url);
      if (repoInfo) {
        const starSpan = document.createElement("span");
        starSpan.addClass("github-stars-count");
        starSpan.addClass("github-stars-loading");
        starSpan.setText("\u2B50 ...");
        link.after(starSpan);
        try {
          const stars = await this.getStarCount(repoInfo.owner, repoInfo.repo);
          starSpan.removeClass("github-stars-loading");
          if (stars !== null) {
            const formattedStars = this.formatStarCount(stars);
            starSpan.setText(formattedStars);
          } else {
            starSpan.setText("\u2B50 ?");
            starSpan.addClass("github-stars-error");
          }
        } catch (error) {
          console.error(`Error getting star count for ${repoInfo.owner}/${repoInfo.repo}:`, error);
          starSpan.removeClass("github-stars-loading");
          starSpan.setText("\u2B50 ?");
          starSpan.addClass("github-stars-error");
        }
      }
    }
  }
  /**
   * Extract repository owner and name from a GitHub URL
   * Returns null if the URL is not a valid GitHub repository URL
   */
  extractRepoInfo(url) {
    const normalizedUrl = url.trim().toLowerCase();
    if (!normalizedUrl.includes("github.com")) {
      return null;
    }
    const githubRegex = /https?:\/\/(www\.)?github\.com\/([^/\s]+)\/([^/\s#?]+)(\/.*)?$/;
    const match = url.match(githubRegex);
    if (match && match[2] && match[3]) {
      const owner = match[2];
      let repo = match[3];
      if (repo.endsWith(".git")) {
        repo = repo.slice(0, -4);
      }
      return { owner, repo };
    }
    return null;
  }
  /**
   * Get star count for a GitHub repository
   * Uses cache if available and not expired
   */
  async getStarCount(owner, repo) {
    const cacheKey = `${owner}/${repo}`;
    if (this.cache[cacheKey]) {
      const entry = this.cache[cacheKey];
      const now = Date.now();
      const expiryTime = this.settings.cacheExpiry * 60 * 1e3;
      if (now - entry.timestamp < expiryTime) {
        return entry.stars;
      }
    }
    try {
      const headers = {
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Obsidian-GitHub-Stars-Plugin"
      };
      if (this.settings.apiToken && this.settings.apiToken.trim() !== "") {
        headers["Authorization"] = `token ${this.settings.apiToken.trim()}`;
      }
      const apiUrl = `https://api.github.com/repos/${owner}/${repo}`;
      const response = await (0, import_obsidian.requestUrl)({
        url: apiUrl,
        headers,
        method: "GET"
      });
      const rateLimitRemaining = response.headers["X-RateLimit-Remaining"];
      const rateLimitReset = response.headers["X-RateLimit-Reset"];
      if (rateLimitRemaining === "0" && rateLimitReset) {
        const resetTime = new Date(parseInt(rateLimitReset) * 1e3);
        const now = new Date();
        const minutesUntilReset = Math.ceil((resetTime.getTime() - now.getTime()) / (60 * 1e3));
        console.warn(`GitHub API rate limit exceeded. Resets in ${minutesUntilReset} minutes.`);
        if (this.cache[cacheKey]) {
          return this.cache[cacheKey].stars;
        }
        return null;
      }
      if (response.status === 404) {
        console.error(`Repository ${owner}/${repo} not found`);
        return null;
      }
      if (response.status !== 200) {
        console.error(`Failed to fetch star count for ${owner}/${repo}: ${response.status}`);
        if (this.cache[cacheKey]) {
          return this.cache[cacheKey].stars;
        }
        return null;
      }
      const data = await response.json();
      if (!data || typeof data.stargazers_count !== "number") {
        console.error(`Invalid response data for ${owner}/${repo}`);
        return null;
      }
      const stars = data.stargazers_count;
      this.cache[cacheKey] = {
        stars,
        timestamp: Date.now()
      };
      this.saveSettings();
      return stars;
    } catch (error) {
      console.error(`Error fetching star count for ${owner}/${repo}:`, error);
      if (this.cache[cacheKey]) {
        return this.cache[cacheKey].stars;
      }
      return null;
    }
  }
  /**
   * Format star count according to settings
   */
  formatStarCount(stars) {
    const formatted = this.settings.displayFormat.replace("{stars}", this.formatNumber(stars));
    return formatted;
  }
  /**
   * Format number with thousands separators or abbreviate for large numbers
   */
  formatNumber(num) {
    if (this.settings.numberFormat === "full") {
      return num.toLocaleString();
    }
    if (num < 1e3) {
      return num.toLocaleString();
    }
    if (num < 1e4) {
      return (num / 1e3).toFixed(1) + "k";
    } else if (num < 1e6) {
      return Math.round(num / 1e3) + "k";
    } else {
      return (num / 1e6).toFixed(1) + "M";
    }
  }
};
var GitHubStarsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Cache expiry").setDesc("Time in minutes before the GitHub star count cache expires").addText((text) => text.setPlaceholder("60").setValue(this.plugin.settings.cacheExpiry.toString()).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.cacheExpiry = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Display format").setDesc("Format for displaying star counts. Use {stars} as a placeholder for the number.").addText((text) => text.setPlaceholder("\u2B50 {stars}").setValue(this.plugin.settings.displayFormat).onChange(async (value) => {
      if (value.includes("{stars}")) {
        this.plugin.settings.displayFormat = value;
        await this.plugin.saveSettings();
      } else {
        new import_obsidian.Notice("Display format must include {stars} placeholder");
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Number format").setDesc("How to format star counts").addDropdown((dropdown) => dropdown.addOption("full", "Full numbers (e.g., 1,234)").addOption("abbreviated", "Abbreviated (e.g., 1.2k)").setValue(this.plugin.settings.numberFormat).onChange(async (value) => {
      this.plugin.settings.numberFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("GitHub API token (optional)").setDesc("Personal access token for GitHub API to increase rate limits").addText((text) => text.setPlaceholder("ghp_xxxxxxxxxxxxxxxxxxxx").setValue(this.plugin.settings.apiToken).onChange(async (value) => {
      this.plugin.settings.apiToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Clear cache").setDesc("Clear the GitHub stars cache").addButton((button) => button.setButtonText("Clear").onClick(async () => {
      this.plugin.cache = {};
      await this.plugin.saveSettings();
      new import_obsidian.Notice("GitHub stars cache cleared");
    }));
  }
};


/* nosourcemap */
