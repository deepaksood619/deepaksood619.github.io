"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[83229],{195956:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"devops/devops-intro/load-balancer-features","title":"Load Balancer Features","description":"Service discovery","source":"@site/docs/devops/devops-intro/load-balancer-features.md","sourceDirName":"devops/devops-intro","slug":"/devops/devops-intro/load-balancer-features","permalink":"/devops/devops-intro/load-balancer-features","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/devops-intro/load-balancer-features.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1734554726000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/devops/devops-intro/intro"},"next":{"title":"Tools","permalink":"/devops/devops-intro/load-balancer-tools"}}');var r=n(474848),a=n(28453);const t={},l="Load Balancer Features",c={},o=[{value:"Service discovery",id:"service-discovery",level:2},{value:"Health checking",id:"health-checking",level:2},{value:"Active",id:"active",level:3},{value:"Passive",id:"passive",level:3},{value:"Others",id:"others",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Traffic Distribution",id:"traffic-distribution",level:3},{value:"High Availability",id:"high-availability",level:3},{value:"SSL Termination",id:"ssl-termination",level:3},{value:"Session Persistence",id:"session-persistence",level:3},{value:"Scalability",id:"scalability",level:3},{value:"Health Monitoring",id:"health-monitoring",level:3}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"load-balancer-features",children:"Load Balancer Features"})}),"\n",(0,r.jsx)(i.h2,{id:"service-discovery",children:"Service discovery"}),"\n",(0,r.jsx)(i.p,{children:"Service discovery is the process by which a load balancer determines the set of available backends. The methods are quite varied and some examples include:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Static configuration file."}),"\n",(0,r.jsx)(i.li,{children:"DNS."}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"https://zookeeper.apache.org/",children:"Zookeeper"}),", ",(0,r.jsx)(i.a,{href:"https://coreos.com/etcd/",children:"Etcd"}),", ",(0,r.jsx)(i.a,{href:"https://www.consul.io/",children:"Consul"}),", etc."]}),"\n",(0,r.jsxs)(i.li,{children:["Envoy's ",(0,r.jsx)(i.a,{href:"https://medium.com/@mattklein123/the-universal-data-plane-api-d15cec7a",children:"universal data plane API"}),"."]}),"\n",(0,r.jsx)(i.li,{children:"Client-side discovery pattern"}),"\n",(0,r.jsx)(i.li,{children:"Server-side discovery pattern"}),"\n",(0,r.jsxs)(i.li,{children:["Service Registry","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"etcd"}),"\n",(0,r.jsx)(i.li,{children:"zookeeper"}),"\n",(0,r.jsx)(i.li,{children:"consul"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Service registry pattern","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"self-registration pattern"}),"\n",(0,r.jsx)(i.li,{children:"third-party registration pattern"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.li,{children:"DNS based Service Discovery (DNS-SD)"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture",children:"https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://iximiuz.com/en/posts/service-discovery-in-kubernetes",children:"https://iximiuz.com/en/posts/service-discovery-in-kubernetes"})}),"\n",(0,r.jsx)(i.h2,{id:"health-checking",children:"Health checking"}),"\n",(0,r.jsx)(i.p,{children:"Health checking is the process by which the load balancer determines if the backend is available to serve traffic. Health checking generally falls into two categories:"}),"\n",(0,r.jsx)(i.h3,{id:"active",children:"Active"}),"\n",(0,r.jsxs)(i.p,{children:["The load balancer sends a ping on a regular interval (e.g., an HTTP request to a ",(0,r.jsx)(i.code,{children:"/healthcheck"})," endpoint) to the backend and uses this to gauge health"]}),"\n",(0,r.jsx)(i.h3,{id:"passive",children:"Passive"}),"\n",(0,r.jsx)(i.p,{children:"The load balancer detects health status from the primary data flow. e.g., an L4 load balancer might decide a backend is unhealthy if there have been three connection errors in a row. An L7 load balancer might decide a backend is unhealthy if there have been three HTTP 503 response codes in a row"}),"\n",(0,r.jsx)(i.h3,{id:"others",children:"Others"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Deep Health Checks"}),"\n",(0,r.jsx)(i.li,{children:"Shallow Health Checks"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsx)(i.h3,{id:"traffic-distribution",children:"Traffic Distribution"}),"\n",(0,r.jsx)(i.p,{children:"Load balancers evenly distribute incoming traffic among multiple servers, preventing any single server from becoming overwhelmed. This helps maintain optimal performance, scalability, and reliability of applications or websites."}),"\n",(0,r.jsx)(i.h3,{id:"high-availability",children:"High Availability"}),"\n",(0,r.jsx)(i.p,{children:"Load balancers enhance system availability by rerouting traffic away from failed or unhealthy servers to healthy ones. This ensures uninterrupted service even if certain servers experience issues."}),"\n",(0,r.jsx)(i.h3,{id:"ssl-termination",children:"SSL Termination"}),"\n",(0,r.jsx)(i.p,{children:"Load balancers can offload SSL/TLS encryption and decryption tasks from backend servers, reducing their workload and improving overall performance."}),"\n",(0,r.jsx)(i.h3,{id:"session-persistence",children:"Session Persistence"}),"\n",(0,r.jsx)(i.p,{children:"For applications that require maintaining a user's session on a specific server, load balancers can ensure that subsequent requests from a user are sent to the same server."}),"\n",(0,r.jsx)(i.h3,{id:"scalability",children:"Scalability"}),"\n",(0,r.jsx)(i.p,{children:"Load balancers facilitate horizontal scaling by effectively managing increased traffic. Additional servers can be easily added to the pool, and the load balancer will distribute traffic across all servers."}),"\n",(0,r.jsx)(i.h3,{id:"health-monitoring",children:"Health Monitoring"}),"\n",(0,r.jsx)(i.p,{children:"Load balancers continuously monitor the health and performance of servers, removing failed or unhealthy servers from the pool to maintain optimal performance."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"Load Balancer Use Cases",src:n(222520).A+"",width:"1000",height:"1300"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},222520:(e,i,n)=>{n.d(i,{A:()=>s});const s=n.p+"assets/images/Pasted image 20240117160744-16cc534877d940cbde3d289d34465ab0.jpg"},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var s=n(296540);const r={},a=s.createContext(r);function t(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);