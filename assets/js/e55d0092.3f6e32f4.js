"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[74671],{597735:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"cloud/aws/compute/amazon-ec2","title":"Amazon EC2","description":"Virtual Servers in the Cloud","source":"@site/docs/cloud/aws/compute/amazon-ec2.md","sourceDirName":"cloud/aws/compute","slug":"/cloud/aws/compute/amazon-ec2","permalink":"/cloud/aws/compute/amazon-ec2","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/cloud/aws/compute/amazon-ec2.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1760382503000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Compute","permalink":"/cloud/aws/compute/"},"next":{"title":"Amazon ECS (Elastic Container Service)","permalink":"/cloud/aws/compute/amazon-ecs"}}');var t=s(474848),a=s(28453);const i={},r="Amazon EC2",c={},l=[{value:"installing docker in ubuntu ec2 instance",id:"installing-docker-in-ubuntu-ec2-instance",level:3},{value:"installing docker in amazon-linux ec2 instance",id:"installing-docker-in-amazon-linux-ec2-instance",level:3},{value:"Deploy code to EC2",id:"deploy-code-to-ec2",level:3},{value:"Increase volume size",id:"increase-volume-size",level:2},{value:"Amazon EC2 Auto Scaling Group (ASG)",id:"amazon-ec2-auto-scaling-group-asg",level:2},{value:"EC2 &gt; Networking &gt; Elastic IP Addresses",id:"ec2--networking--elastic-ip-addresses",level:2},{value:"EC2 &gt; Networking &gt; ENI",id:"ec2--networking--eni",level:2},{value:"Placement groups for your Amazon EC2 instances",id:"placement-groups-for-your-amazon-ec2-instances",level:2},{value:"Pricing",id:"pricing",level:3},{value:"Rules and limitations",id:"rules-and-limitations",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"amazon-ec2",children:"Amazon EC2"})}),"\n",(0,t.jsx)(n.p,{children:"Virtual Servers in the Cloud"}),"\n",(0,t.jsx)(n.h3,{id:"installing-docker-in-ubuntu-ec2-instance",children:"installing docker in ubuntu ec2 instance"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/ubuntu/",children:"Ubuntu | Docker Docs"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Add Docker\'s official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n\n# installation\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update\nsudo apt-get upgrade -y\nsudo apt-get install docker\nsudo usermod -aG docker ubuntu\n# log out of terminal and log back in\nsudo systemctl start docker\ndocker run hello-world\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/ubuntu/",children:"Ubuntu | Docker Docs"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"ec2-instance-types",children:"AWS EC2 Instance Types"})}),"\n",(0,t.jsx)(n.h3,{id:"installing-docker-in-amazon-linux-ec2-instance",children:"installing docker in amazon-linux ec2 instance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 1. Update your system\nsudo yum update -y\n\n# 2. Install Docker (Amazon Linux 2 uses yum, not apt)\nsudo yum install docker -y\n\n# 3. Start the Docker service\nsudo service docker start\n\n# 4. Add the ec2-user to the docker group (so you can run Docker without sudo)\nsudo usermod -aG docker ec2-user\n\n# 5. Log out and log back in (or run the next command for current session)\nnewgrp docker\n\n# 6. Test Docker installation\ndocker run hello-world\n\n# install git\nsudo yum install -y git\ngit --version\n\n# install docker-compose\nsudo yum install -y python3-pip\nsudo pip3 install docker-compose --ignore-installed requests\ndocker-compose --version\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-code-to-ec2",children:"Deploy code to EC2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chmod +x /home/ubuntu/deploy.sh\n*/5 * * * * /home/ubuntu/deploy.sh\n\n*/5 * * * * /home/ubuntu/deploy.sh >> /var/log/deploy.log 2>&1\n\nsudo touch /var/log/deploy.log\nsudo chmod +777 /var/log/deploy.log\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="deploy.sh"',children:'#!/bin/bash\n\n# Set the path to your Git repository\nGIT_PATH="/home/ubuntu/repo"\n\n# Change to the Git repository directory\ncd $GIT_PATH\n\ngit fetch origin\n\nNEW_COMMITS=$(git rev-list HEAD..origin/main)\n\n# Check if there are any changes in the repository\nif [ -n "$NEW_COMMITS" ]; then\n  # If there are changes, run the docker-compose command\n  git reset --hard origin/main\n  sudo docker compose -f docker-compose.prod.yaml up -d --no-deps --build web worker metabase\n  # docker clean\n  sudo docker rm $(sudo docker ps -a -f status=exited -q); sudo docker volume rm $(sudo docker volume ls -f dangling=true -q); sudo docker images -qf dangling=true | xargs sudo docker rmi\nelse\n  # If there are no changes, do nothing\n  echo "$(date \'+%Y-%m-%d %H:%M:%S\') - No changes in Git repository."\nfi\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"chmod +x /home/ubuntu/deploy.sh"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Advanced Deployment"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="deploy.sh"',children:'#!/bin/bash\n\n# List of project directories and their corresponding branches\ndeclare -A projects\nprojects["/home/ubuntu/repoA"]="main"\nprojects["/home/ubuntu/repoB"]="master"\n\n# Loop through each project and branch\nfor GIT_PATH in "${!projects[@]}"; do\n  BRANCH="${projects[$GIT_PATH]}"\n  echo "Checking for updates in $GIT_PATH on branch $BRANCH"\n  cd "$GIT_PATH" || continue\n\n  # Fetch the latest branch\n  git fetch origin "$BRANCH"\n\n  # Get new commits compared to origin/branch\n  NEW_COMMITS=$(git rev-list HEAD..origin/"$BRANCH")\n\n  if [ -n "$NEW_COMMITS" ]; then\n    echo "New updates found on $BRANCH branch. Pulling and rebuilding..."\n    git reset --hard origin/"$BRANCH"\n\n    docker compose build --no-cache\n    docker compose down --volumes --remove-orphans\n\n    # Rebuild and restart containers\n    sudo docker compose -f docker-compose.yml up -d\n\n    # Clean up unused docker resources\n    echo "Cleaning up unused Docker resources..."\n    sudo docker rm $(sudo docker ps -a -f status=exited -q) 2>/dev/null\n    sudo docker volume rm $(sudo docker volume ls -f dangling=true -q) 2>/dev/null\n    sudo docker images -qf dangling=true | xargs -r sudo docker rmi\n  else\n    echo "$(date \'+%Y-%m-%d %H:%M:%S\') - No changes in $GIT_PATH ($BRANCH branch)"\n  fi\ndone\n'})}),"\n",(0,t.jsx)(n.h2,{id:"increase-volume-size",children:"Increase volume size"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Windows"})," - ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/ebs/latest/userguide/recognize-expanded-volume-linux.html",children:"Extend the file system after resizing an Amazon EBS volume - Amazon EBS"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"t2 instances resize"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"df -hT\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/root       6.8G  5.5G  1.3G  82% /\ntmpfs           2.0G     0  2.0G   0% /dev/shm\ntmpfs           783M  1.3M  782M   1% /run\ntmpfs           5.0M     0  5.0M   0% /run/lock\n/dev/xvda16     881M  148M  672M  18% /boot\n/dev/xvda15     105M  6.2M   99M   6% /boot/efi\ntmpfs           392M   12K  392M   1% /run/user/1000\n\nsudo lsblk\nNAME     MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\nloop0      7:0    0 27.2M  1 loop /snap/amazon-ssm-agent/11320\nloop2      7:2    0 73.9M  1 loop /snap/core22/2010\nloop3      7:3    0 49.3M  1 loop /snap/snapd/24792\nloop4      7:4    0 50.9M  1 loop /snap/snapd/24718\nloop5      7:5    0 73.9M  1 loop /snap/core22/2045\nxvda     202:0    0   30G  0 disk\n\u251c\u2500xvda1  202:1    0    7G  0 part /\n\u251c\u2500xvda14 202:14   0    4M  0 part\n\u251c\u2500xvda15 202:15   0  106M  0 part /boot/efi\n\u2514\u2500xvda16 259:0    0  913M  0 part /boot\n\nsudo growpart /dev/xvda 1\nCHANGED: partition=1 start=2099200 old: size=14677983 end=16777182 new: size=60815327 end=62914526\n\ndf -hT\n\nsudo resize2fs /dev/xvda1\nresize2fs 1.47.0 (5-Feb-2023)\nFilesystem at /dev/xvda1 is mounted on /; on-line resizing required\nold_desc_blocks = 1, new_desc_blocks = 4\nThe filesystem on /dev/xvda1 is now 7601915 (4k) blocks long.\n\ndf -hT\nFilesystem     Type   Size  Used Avail Use% Mounted on\n/dev/root      ext4    29G  5.5G   23G  20% /\ntmpfs          tmpfs  2.0G     0  2.0G   0% /dev/shm\ntmpfs          tmpfs  783M  1.3M  782M   1% /run\ntmpfs          tmpfs  5.0M     0  5.0M   0% /run/lock\n/dev/xvda16    ext4   881M  148M  672M  18% /boot\n/dev/xvda15    vfat   105M  6.2M   99M   6% /boot/efi\ntmpfs          tmpfs  392M   12K  392M   1% /run/user/1000\n"})}),"\n",(0,t.jsx)(n.h2,{id:"amazon-ec2-auto-scaling-group-asg",children:"Amazon EC2 Auto Scaling Group (ASG)"}),"\n",(0,t.jsx)(n.p,{children:"Scale Compute Capacity to Meet Demand"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html?icmpid=docs_ec2as_help_panel",children:"Amazon EC2 Auto Scaling lifecycle hooks - Amazon EC2 Auto Scaling"})}),"\n",(0,t.jsx)(n.p,{children:"Auto Scaling Policies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simple Scaling"}),"\n",(0,t.jsx)(n.li,{children:"Step Scaling"}),"\n",(0,t.jsx)(n.li,{children:"Target Tracking"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Simple Scaling"})," uses a single, static capacity adjustment in response to an alarm, while ",(0,t.jsx)(n.strong,{children:"Step Scaling"}),' uses predefined, varying adjustments based on the "size" of the alarm breach for more granular control. ',(0,t.jsx)(n.strong,{children:"Target Tracking"})," is the most automated and recommended policy, continuously adjusting capacity to keep a specific metric (like CPU utilization) at a defined target value without requiring you to set thresholds."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://tutorialsdojo.com/step-scaling-vs-simple-scaling-policies-in-amazon-ec2/",children:"Step Scaling vs Simple Scaling Policies vs Target Tracking Policies in Amazon EC2"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html",children:"Temporarily remove instances from your Auto Scaling group - Amazon EC2 Auto Scaling"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You can put an instance that is in the\xa0",(0,t.jsx)(n.code,{children:"InService"}),"\xa0state into the\xa0",(0,t.jsx)(n.code,{children:"Standby"}),"\xa0state, update or troubleshoot the instance, and then return the instance to service. Instances that are on standby are still part of the Auto Scaling group, but they do not actively handle load balancer traffic."]}),"\n",(0,t.jsxs)(n.li,{children:["The\xa0",(0,t.jsx)(n.code,{children:"ReplaceUnhealthy"}),"\xa0process terminates instances that are marked as unhealthy and then creates new instances to replace them. Amazon EC2 Auto Scaling stops replacing instances that are marked as unhealthy. Instances that fail EC2 or Elastic Load Balancing health checks are still marked as unhealthy. As soon as you resume the\xa0",(0,t.jsx)(n.code,{children:"ReplaceUnhealthly"}),"\xa0process, Amazon EC2 Auto Scaling replaces instances that were marked unhealthy while this process was suspended."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ec2--networking--elastic-ip-addresses",children:"EC2 > Networking > Elastic IP Addresses"}),"\n",(0,t.jsx)(n.p,{children:"An Elastic IP address is a static IPv4 address designed for dynamic cloud computing. An Elastic IP address is associated with your AWS account. With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account."}),"\n",(0,t.jsx)(n.p,{children:"An Elastic IP address is a public IPv4 address, which is reachable from the internet. If your instance does not have a public IPv4 address, you can associate an Elastic IP address with your instance to enable communication with the internet; for example, to connect to your instance from your local computer."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html",children:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html"})}),"\n",(0,t.jsx)(n.h2,{id:"ec2--networking--eni",children:"EC2 > Networking > ENI"}),"\n",(0,t.jsxs)(n.p,{children:["An elastic network interface (referred to as a",(0,t.jsx)(n.em,{children:"network interface"}),"in this documentation) is a logical networking component in a VPC that represents a virtual network card."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html",children:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html"})}),"\n",(0,t.jsx)(n.h2,{id:"placement-groups-for-your-amazon-ec2-instances",children:"Placement groups for your Amazon EC2 instances"}),"\n",(0,t.jsxs)(n.p,{children:["To meet the needs of your workload, you can launch a group of\xa0",(0,t.jsx)(n.em,{children:"interdependent"}),"\xa0EC2 instances into a\xa0",(0,t.jsx)(n.em,{children:"placement group"}),"\xa0to influence their placement."]}),"\n",(0,t.jsx)(n.p,{children:"Depending on the type of workload, you can create a placement group using one of the following placement strategies:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cluster"}),"\xa0\u2013 Packs instances close together inside an Availability Zone. This strategy enables workloads to achieve the low-latency network performance necessary for tightly-coupled node-to-node communication that is typical of high-performance computing (HPC) applications."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Partition"}),"\xa0\u2013 Spreads your instances across logical partitions such that groups of instances in one partition do not share the underlying hardware with groups of instances in different partitions. This strategy is typically used by large distributed and replicated workloads, such as Hadoop, Cassandra, and Kafka."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spread"}),"\xa0\u2013 Strictly places a small group of instances across distinct underlying hardware to reduce correlated failures."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Placement groups are optional. If you don't launch your instances into a placement group, EC2 tries to place the instances in such a way that all of your instances are spread out across the underlying hardware to minimize correlated failures."}),"\n",(0,t.jsx)(n.h3,{id:"pricing",children:"Pricing"}),"\n",(0,t.jsx)(n.p,{children:"There is no charge for creating a placement group."}),"\n",(0,t.jsx)(n.h3,{id:"rules-and-limitations",children:"Rules and limitations"}),"\n",(0,t.jsx)(n.p,{children:"Before you use placement groups, be aware of the following rules:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An instance can be placed in one placement group at a time; you can't place an instance in multiple placement groups."}),"\n",(0,t.jsx)(n.li,{children:"You can't merge placement groups."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html#capacity-reservations-limits",children:"On-Demand Capacity Reservations"}),"\xa0and\xa0",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/reserved-instances-scope.html",children:"zonal Reserved Instances"}),"\xa0allow you to reserve capacity for EC2 instances in Availability Zones. When you launch an instance, if the instance attributes match those specified by an On-Demand Capacity Reservation or a zonal Reserved Instance, then the reserved capacity is automatically used by the instance. This is also true if you launch the instance into a placement group."]}),"\n",(0,t.jsx)(n.li,{children:"You can't launch Dedicated Hosts in placement groups."}),"\n",(0,t.jsx)(n.li,{children:"You can't launch a Spot Instance that is configured to stop or hibernate on interruption in a placement group."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html",children:"Placement groups for your Amazon EC2 instances - Amazon Elastic Compute Cloud"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-strategies.html",children:"Placement strategies for your placement groups - Amazon Elastic Compute Cloud"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://medium.com/@dbrandonbawe/choosing-the-right-ec2-placement-group-type-for-your-workloads-3d93b6d83fc8",children:"Choosing the Right EC2 Placement Group Type for Your Workloads | by Brandon Damue | Medium"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var o=s(296540);const t={},a=o.createContext(t);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);