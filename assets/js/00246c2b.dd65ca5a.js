"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[73560],{950690:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var i=n(785893),t=n(511151);const r={},l="Types of algorithms",o={id:"algorithms/general/types-of-algorithms",title:"Types of algorithms",description:"1. Simple recursive algorithms",source:"@site/docs/algorithms/general/types-of-algorithms.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/types-of-algorithms",permalink:"/algorithms/general/types-of-algorithms",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/types-of-algorithms.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Two-Stack Algorithm",permalink:"/algorithms/general/two-stack-algorithm"},next:{title:"Union-Find Algorithm",permalink:"/algorithms/general/union-find-algorithm"}},a={},h=[];function c(e){const s={a:"a",h1:"h1",img:"img",li:"li",ol:"ol",p:"p",table:"table",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"types-of-algorithms",children:"Types of algorithms"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Simple recursive algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"solves the base care directly"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"recurs with a simpler subproblem"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Backtracking algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Based on a depth-first recursive search"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"ex- graph colouring (To color a map with no more than four colors)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://www.freecodecamp.org/news/solve-coding-interview-backtracking-problem",children:"https://www.freecodecamp.org/news/solve-coding-interview-backtracking-problem"})}),"\n",(0,i.jsxs)(s.ol,{start:"3",children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Divide and conquer algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"divide the problems into smaller subproblems of the same type, and solve these subproblems recursively"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"combine the solutions to the subproblems into a solution to the original problem"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"ex- quicksort, mergesort"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Dynamic programming algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"remembers past results and use it to find new results"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Optimal substructure"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Overlapping subproblems"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Greedy algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"optimization problem is one in which you want to find, not just a solution, but the best solution. (take the best you can get right now, without regard for future consequences)"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"ex- counting money"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Branch and bound algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"generally used for optimization problems"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"as the algorithm progresses, a tree of subproblems is formed"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:'The original problem is considered the "root problem"'}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"A method is used to construct an upper and lower bound for a given problem"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"At each node, apply the bounding methods"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"If the bounds match, it is deemed a feasible solution to that particular subproblem"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"If bounds do not match, partition the problem represented by that node, and make the two subproblems into children nodes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Continue, using the best known feasible solution to trim sections of the tree, until all nodes have been solved or trimmed."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"ex - Travelling salesman problem"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Brute force algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"simply tries all possibilities until a satisfactory solution is found"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"To improve brute force algorithms following can be used -"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:'Heuristic - A "rule of thumb" that helps you decide which possibilities to look at first.'}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Optimization - A way to eliminate certain possibilities without fully exploring them"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Randomized algorithms"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"ex - Quicksort, uses a random number to choose a pivot"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.table,{children:(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{}),(0,i.jsx)(s.th,{children:(0,i.jsx)(s.img,{alt:"image",src:n(361477).Z+"",width:"1190",height:"1683"})})]})})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(880070).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(502919).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(372833).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(390436).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(947880).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(655112).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(142637).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(504953).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(726215).Z+"",width:"1190",height:"1683"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"image",src:n(327102).Z+"",width:"1014",height:"892"})})]})}function d(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},361477:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image1-03922f25149a183046b904555396d036.jpg"},726215:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image10-c74f28d80155c9484fdcbf8be9155152.jpg"},327102:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image11-5ba4b2485e1cb9658e511692f13c7edb.jpg"},880070:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image2-4e4274dd2b23abed1e2c7a632cbaaebb.jpg"},502919:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image3-cef88687a2f95d38d98059112910ebb0.jpg"},372833:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image4-62f405373c33bfd6bf7a9a6533aceade.jpg"},390436:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image5-be958a61103acf64972027ead38d434a.jpg"},947880:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image6-09d029e6cdff383e3ac4292403b2fd7e.jpg"},655112:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image7-d6db4f23cfa919481bde2df49deb1c3e.jpg"},142637:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image8-740fa84288368d852c0c86cce11829e3.jpg"},504953:(e,s,n)=>{n.d(s,{Z:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image9-e39deae4f77980db66497c164a654fc9.jpg"},511151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>l});var i=n(667294);const t={},r=i.createContext(t);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);