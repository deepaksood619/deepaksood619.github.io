"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[81871],{139884:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>h,default:()=>o,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"courses/coursera-algorithms-part-2","title":"Coursera - Algorithms Part - 2","description":"https://www.coursera.org/learn/algorithms-part2","source":"@site/docs/courses/coursera-algorithms-part-2.md","sourceDirName":"courses","slug":"/courses/coursera-algorithms-part-2","permalink":"/courses/coursera-algorithms-part-2","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/courses/coursera-algorithms-part-2.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1706784574000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Coursera - Algorithms Part - 1","permalink":"/courses/coursera-algorithms-part-1"},"next":{"title":"Coursera - How Google does ML","permalink":"/courses/coursera-how-google-does-ml"}}');var r=i(474848),l=i(28453);const t={},h="Coursera - Algorithms Part - 2",a={},d=[{value:"Week - 1",id:"week---1",level:2},{value:"Undirected Graph",id:"undirected-graph",level:3},{value:"Directed Graph",id:"directed-graph",level:3},{value:"Assignment",id:"assignment",level:3},{value:"Week - 2",id:"week---2",level:2},{value:"Minimum Spanning Tree",id:"minimum-spanning-tree",level:3},{value:"Shortest Path",id:"shortest-path",level:3},{value:"Assignment",id:"assignment-1",level:3},{value:"Week - 3",id:"week---3",level:2},{value:"Maximum Flow and Minimum Cut",id:"maximum-flow-and-minimum-cut",level:3},{value:"Assignment",id:"assignment-2",level:3},{value:"Radix Sorts",id:"radix-sorts",level:3},{value:"Week - 4",id:"week---4",level:2},{value:"Tries",id:"tries",level:3},{value:"Substring Search",id:"substring-search",level:3},{value:"Assignment",id:"assignment-3",level:3},{value:"Week - 5",id:"week---5",level:2},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Data Compression",id:"data-compression",level:3},{value:"Assignment",id:"assignment-4",level:3},{value:"Week - 6",id:"week---6",level:2},{value:"Reductions",id:"reductions",level:3},{value:"Linear Programming",id:"linear-programming",level:3},{value:"Intractability",id:"intractability",level:3},{value:"Interview Questions",id:"interview-questions",level:2},{value:"1.1 Undirected Graphs",id:"11-undirected-graphs",level:3},{value:"Assignments",id:"assignments",level:2},{value:"WordNet: is a semantic lexicon for the English language that is used extensively by computational linguists and cognitive scientists",id:"wordnet-is-a-semantic-lexicon-for-the-english-language-that-is-used-extensively-by-computational-linguists-and-cognitive-scientists",level:3},{value:"References",id:"references",level:2}];function c(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"coursera---algorithms-part---2",children:"Coursera - Algorithms Part - 2"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.coursera.org/learn/algorithms-part2",children:"https://www.coursera.org/learn/algorithms-part2"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/deepaksood619/Coursera-Algorithms-Part-2",children:"https://github.com/deepaksood619/Coursera-Algorithms-Part-2"})}),"\n",(0,r.jsx)(n.h2,{id:"week---1",children:"Week - 1"}),"\n",(0,r.jsx)(n.h3,{id:"undirected-graph",children:"Undirected Graph"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Introduction to graph"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Adjacency Matrix"}),"\n",(0,r.jsx)(n.li,{children:"Adjacency List"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Graph API"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Depth-First Search"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Breadth-First Search"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Connected Components"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Graph Challenges"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"directed-graph",children:"Directed Graph"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Introduction to Digraphs"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Digraph API"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Digraph Search"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Topological Sort"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Topological order of an acyclic digraph"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Strong Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Kosaraju-Sharir algorithm for computing strong components of a digraph"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Applications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Garbage Collection"}),"\n",(0,r.jsx)(n.li,{children:"Web Crawling"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"assignment",children:"Assignment"}),"\n",(0,r.jsx)(n.p,{children:"WordNet"}),"\n",(0,r.jsx)(n.h2,{id:"week---2",children:"Week - 2"}),"\n",(0,r.jsx)(n.h3,{id:"minimum-spanning-tree",children:"Minimum Spanning Tree"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Introduction to MSTs"}),"\n",(0,r.jsx)(n.li,{children:"Greedy Algorithms"}),"\n",(0,r.jsx)(n.li,{children:"Edge-Weighted Graph API"}),"\n",(0,r.jsx)(n.li,{children:"Kruskal's Algorithm"}),"\n",(0,r.jsx)(n.li,{children:"Prim's Algorithm"}),"\n",(0,r.jsx)(n.li,{children:"MST Context"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"shortest-path",children:"Shortest Path"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Shortest Path APIs"}),"\n",(0,r.jsx)(n.li,{children:"Shortest Path Properties"}),"\n",(0,r.jsx)(n.li,{children:"Dijkstra's Algorithm"}),"\n",(0,r.jsx)(n.li,{children:"Edge-Weighted DAGs"}),"\n",(0,r.jsx)(n.li,{children:"Negative Weights (Bellman Ford Algorithm)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"assignment-1",children:"Assignment"}),"\n",(0,r.jsx)(n.p,{children:"Seam Carving"}),"\n",(0,r.jsx)(n.h2,{id:"week---3",children:"Week - 3"}),"\n",(0,r.jsx)(n.h3,{id:"maximum-flow-and-minimum-cut",children:"Maximum Flow and Minimum Cut"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Introduction to Maxflow"}),"\n",(0,r.jsx)(n.li,{children:"Ford-Fulkerson Algorithm"}),"\n",(0,r.jsx)(n.li,{children:"Maxflow-Mincut Theorem"}),"\n",(0,r.jsx)(n.li,{children:"Running Time Analysis"}),"\n",(0,r.jsx)(n.li,{children:"Java Implementation"}),"\n",(0,r.jsx)(n.li,{children:"Maxflow Applications"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"assignment-2",children:"Assignment"}),"\n",(0,r.jsx)(n.p,{children:"Baseball Elimination"}),"\n",(0,r.jsx)(n.h3,{id:"radix-sorts",children:"Radix Sorts"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Strings in Java"}),"\n",(0,r.jsx)(n.li,{children:"Key-Indexed Counting"}),"\n",(0,r.jsx)(n.li,{children:"LSD Radix Sort"}),"\n",(0,r.jsx)(n.li,{children:"MSD Radix Sort"}),"\n",(0,r.jsx)(n.li,{children:"3-way Radix Quicksort"}),"\n",(0,r.jsx)(n.li,{children:"Suffix Arrays"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"week---4",children:"Week - 4"}),"\n",(0,r.jsx)(n.h3,{id:"tries",children:"Tries"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"R-way Tries"}),"\n",(0,r.jsx)(n.li,{children:"Ternary Search Tries"}),"\n",(0,r.jsx)(n.li,{children:"Character-Based Operations"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"substring-search",children:"Substring Search"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Introduction to Substring Search"}),"\n",(0,r.jsx)(n.li,{children:"Brute-Force Substring Search"}),"\n",(0,r.jsx)(n.li,{children:"Knuth-Morris-Pratt"}),"\n",(0,r.jsx)(n.li,{children:"Boyer-Moore"}),"\n",(0,r.jsx)(n.li,{children:"Rabin-Karp"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"assignment-3",children:"Assignment"}),"\n",(0,r.jsx)(n.p,{children:"Boggle"}),"\n",(0,r.jsx)(n.h2,{id:"week---5",children:"Week - 5"}),"\n",(0,r.jsx)(n.h3,{id:"regular-expressions",children:"Regular Expressions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Regular Expressions"}),"\n",(0,r.jsx)(n.li,{children:"Res and NFAs"}),"\n",(0,r.jsx)(n.li,{children:"NFA Simulation"}),"\n",(0,r.jsx)(n.li,{children:"NFA Construction"}),"\n",(0,r.jsx)(n.li,{children:"RE Applications"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-compression",children:"Data Compression"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Introduction"}),"\n",(0,r.jsx)(n.li,{children:"Run-Length Coding"}),"\n",(0,r.jsx)(n.li,{children:"Huffman Compression"}),"\n",(0,r.jsx)(n.li,{children:"LZW Compression"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"assignment-4",children:"Assignment"}),"\n",(0,r.jsx)(n.p,{children:"Burrows-Wheeler"}),"\n",(0,r.jsx)(n.h2,{id:"week---6",children:"Week - 6"}),"\n",(0,r.jsx)(n.h3,{id:"reductions",children:"Reductions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Introduction"}),"\n",(0,r.jsx)(n.li,{children:"Designing Algorithms"}),"\n",(0,r.jsx)(n.li,{children:"Establishing Lower Bounds"}),"\n",(0,r.jsx)(n.li,{children:"Classifying Problems"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"linear-programming",children:"Linear Programming"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Brewer's Problem"}),"\n",(0,r.jsx)(n.li,{children:"Simplex Algorithm"}),"\n",(0,r.jsx)(n.li,{children:"Simplex Implementations"}),"\n",(0,r.jsx)(n.li,{children:"Linear Programming Reductions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"intractability",children:"Intractability"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Introduction"}),"\n",(0,r.jsx)(n.li,{children:"Search Problems"}),"\n",(0,r.jsx)(n.li,{children:"P vs NP"}),"\n",(0,r.jsx)(n.li,{children:"Classifying Problems"}),"\n",(0,r.jsx)(n.li,{children:"NP-Completeness"}),"\n",(0,r.jsx)(n.li,{children:"Coping with Intractability"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interview-questions",children:"Interview Questions"}),"\n",(0,r.jsx)(n.h3,{id:"11-undirected-graphs",children:"1.1 Undirected Graphs"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Nonrecursive depth-first search."})," Implement depth-first search in an undirected graph without using recursion."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Diameter and center of a tree."})," Given a connected graph with no cycles","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Diameter: design a linear-time algorithm to find the longest simple path in the graph."}),"\n",(0,r.jsx)(n.li,{children:"Center: design a linear-time algorithm to find a vertex such that its maximum distance from any other vertex is minimized."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Euler cycle."})," An Euler cycle in a graph is a cycle (not necessarily simple) that uses every edge in the graph exactly one.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Show that a connected graph has an Euler cycle if and only if every vertex has even degree."}),"\n",(0,r.jsx)(n.li,{children:"Design a linear-time algorithm to determine whether a graph has an Euler cycle, and if so, find one."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"assignments",children:"Assignments"}),"\n",(0,r.jsx)(n.h3,{id:"wordnet-is-a-semantic-lexicon-for-the-english-language-that-is-used-extensively-by-computational-linguists-and-cognitive-scientists",children:"WordNet: is a semantic lexicon for the English language that is used extensively by computational linguists and cognitive scientists"}),"\n",(0,r.jsxs)(n.p,{children:["WordNet groups words into sets of synonyms called ",(0,r.jsx)(n.em,{children:"synsets"}),"and describes semantic relationships between them."]}),"\n",(0,r.jsxs)(n.p,{children:["One such relationship is the",(0,r.jsx)(n.em,{children:"is-a"}),"relationship, which connects a",(0,r.jsx)(n.em,{children:"hyponym"}),"(more specific synset) to a",(0,r.jsx)(n.em,{children:"hypernym"}),"(more general synset)."]}),"\n",(0,r.jsx)(n.p,{children:"For example,"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"animal"})," is a hypernym of both ",(0,r.jsx)(n.em,{children:"bird"}),"and ",(0,r.jsx)(n.em,{children:"fish"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"bird"})," is a hypernym of ",(0,r.jsx)(n.em,{children:"eagle"}),",",(0,r.jsx)(n.em,{children:"pigeon"}),", and ",(0,r.jsx)(n.em,{children:"seagull"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Spoon is a hyponym of cutlery"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html",children:"http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"http://coursera.cs.princeton.edu/algs4/checklists/wordnet.html",children:"http://coursera.cs.princeton.edu/algs4/checklists/wordnet.html"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/CtheSky/Coursera-Algorithms/tree/master/Assignment6_WordNet",children:"https://github.com/CtheSky/Coursera-Algorithms/tree/master/Assignment6_WordNet"})})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>h});var s=i(296540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);