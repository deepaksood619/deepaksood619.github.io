"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[94424],{820145:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>m,toc:()=>l});var t=i(785893),r=i(511151);const a={},o="28. Debugging and Profiling",m={id:"python/documentation/28-debugging-and-profiling",title:"28. Debugging and Profiling",description:"27.1. bdb - Debugger framework",source:"@site/docs/python/documentation/28-debugging-and-profiling.md",sourceDirName:"python/documentation",slug:"/python/documentation/28-debugging-and-profiling",permalink:"/python/documentation/28-debugging-and-profiling",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/documentation/28-debugging-and-profiling.md",tags:[],version:"current",lastUpdatedAt:1678191863,formattedLastUpdatedAt:"Mar 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/python/documentation/27-development-tools/testing"},next:{title:"30. Python Runtime Services",permalink:"/python/documentation/30-python-runtime-services"}},s={},l=[{value:"time",id:"time",level:2},{value:"timeit",id:"timeit",level:2},{value:"Command Line Interface",id:"command-line-interface",level:3},{value:"Callable Python Interface",id:"callable-python-interface",level:3},{value:"Functions",id:"functions",level:3},{value:"Example",id:"example",level:2},{value:"Profiling",id:"profiling",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"28-debugging-and-profiling",children:"28. Debugging and Profiling"}),"\n",(0,t.jsx)(e.p,{children:"27.1. bdb - Debugger framework"}),"\n",(0,t.jsx)(e.p,{children:"27.2. faulthandler - Dump the Python traceback"}),"\n",(0,t.jsx)(e.p,{children:"27.3. pdb - The Python Debugger"}),"\n",(0,t.jsx)(e.p,{children:"27.4. The Python Profilers"}),"\n",(0,t.jsx)(e.p,{children:"27.5. timeit - Measure execution time of small code snippets"}),"\n",(0,t.jsx)(e.p,{children:"27.6. trace - Trace or track Python statement execution"}),"\n",(0,t.jsx)(e.p,{children:"27.7. tracemalloc - Trace memory allocations"}),"\n",(0,t.jsx)(e.h2,{id:"time",children:"time"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import time\n\nstart = time.time()\nprint("hello")\nend = time.time()\nprint(end - start)\n'})}),"\n",(0,t.jsx)(e.p,{children:"This gives the execution time in seconds."}),"\n",(0,t.jsx)(e.h2,{id:"timeit",children:"timeit"}),"\n",(0,t.jsx)(e.h3,{id:"command-line-interface",children:"Command Line Interface"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"$ python3 -m timeit '\"-\".join(str(n) for n in range(100))'\n10000 loops, best of 3: 30.2 usec per loop\n$ python3 -m timeit '\"-\".join([str(n) for n in range(100)])'\n10000 loops, best of 3: 27.5 usec per loop\n$ python3 -m timeit '\"-\".join(map(str, range(100)))'\n10000 loops, best of 3: 23.2 usec per loop\n"})}),"\n",(0,t.jsx)(e.h3,{id:"callable-python-interface",children:"Callable Python Interface"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"import timeit\ntimeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000)\n0.3018611848820001\ntimeit.timeit('\"-\".join([str(n) for n in range(100)])', number=10000)\n0.2727368790656328\ntimeit.timeit('\"-\".join(map(str, range(100)))', number=10000)\n0.23702679807320237\n\ntimeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"functions",children:"Functions"}),"\n",(0,t.jsxs)(e.p,{children:["To give the",(0,t.jsx)(e.a,{href:"https://docs.python.org/3/library/timeit.html#module-timeit",children:"timeit"})," module access to functions you define, you can pass a ",(0,t.jsx)(e.em,{children:"setup"})," parameter which contains an import statement:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def test():\n    """Stupid test function"""\n    L = [i for i in range(100)]\nif __name__ == \'__main__\':\n    import timeit\n    print(timeit.timeit("test()", setup="from __main__ import test"))\n'})}),"\n",(0,t.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:" # importing the required modules\n import timeit\n\n # binary search function\n def binary_search(mylist, find):\n     while len(mylist) > 0:\n         mid = (len(mylist))//2\n         if mylist[mid] == find:\n             return True\n         elif mylist[mid] < find:\n             mylist = mylist[:mid]\n         else:\n             mylist = mylist[mid + 1:]\n     return False\n\n # linear search function\n def linear_search(mylist, find):\n     for x in mylist:\n         if x == find:\n             return True\n     return False\n\n # compute binary search time\n def binary_time():\n     SETUP_CODE = '''\n from __main__ import binary_search\n from random import randint'''\n\n     TEST_CODE = '''\n mylist = [x for x in range(10000)]\n find = randint(0, len(mylist))\n binary_search(mylist, find)'''\n\n     # timeit.repeat statement\n     times = timeit.repeat(setup = SETUP_CODE,\n                           stmt = TEST_CODE,\n                           repeat = 3,\n                           number = 10000)\n\n     # priniting minimum exec. time\n     print('Binary search time: {}'.format(min(times)))\n\n # compute linear search time\n def linear_time():\n     SETUP_CODE = '''\n from __main__ import linear_search\n from random import randint'''\n\n     TEST_CODE = '''\n mylist = [x for x in range(10000)]\n find = randint(0, len(mylist))\n linear_search(mylist, find)\n     '''\n     # timeit.repeat statement\n     times = timeit.repeat(setup = SETUP_CODE,\n                           stmt = TEST_CODE,\n                           repeat = 3,\n                           number = 10000)\n\n     # priniting minimum exec. time\n     print('Linear search time: {}'.format(min(times)))\n\n if __name__ == \"__main__\":\n     linear_time()\n    binary_time()\n"})}),"\n",(0,t.jsx)(e.h2,{id:"profiling",children:"Profiling"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Flame Graph"}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},511151:(n,e,i)=>{i.d(e,{Z:()=>m,a:()=>o});var t=i(667294);const r={},a=t.createContext(r);function o(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function m(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);