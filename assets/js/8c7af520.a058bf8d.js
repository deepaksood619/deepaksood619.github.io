"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[71487],{592170:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=r(785893),n=r(511151);const a={},s="Structural - Decorator",o={id:"computer-science/programming-paradigms/structural-decorator",title:"Structural - Decorator",description:"In object-oriented programming, the**decorator pattern** is a design pattern) that allows behavior to be added to an individual object), either statically or dynamically, without affecting the behavior of other objects from the same class).The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.The decorator pattern is structurally nearly identical to the chain of responsibility pattern, the difference being that in a chain of responsibility, exactly one of the classes handles the request, while for the decorator, all classes handle the request.",source:"@site/docs/computer-science/programming-paradigms/structural-decorator.md",sourceDirName:"computer-science/programming-paradigms",slug:"/computer-science/programming-paradigms/structural-decorator",permalink:"/computer-science/programming-paradigms/structural-decorator",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/programming-paradigms/structural-decorator.md",tags:[],version:"current",lastUpdatedAt:1699511710,formattedLastUpdatedAt:"Nov 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structural - Bridge",permalink:"/computer-science/programming-paradigms/structural-bridge"},next:{title:"Structural - Facade",permalink:"/computer-science/programming-paradigms/structural-facade"}},c={},d=[{value:"Starbuzz Coffee",id:"starbuzz-coffee",level:2},{value:"Adding Ingredients: First Try",id:"adding-ingredients-first-try",level:2},{value:"Adding Ingredients: Second Try",id:"adding-ingredients-second-try",level:2},{value:"Solution: Decorator Pattern",id:"solution-decorator-pattern",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"structural---decorator",children:"Structural - Decorator"}),"\n",(0,i.jsxs)(t.p,{children:["In ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Object-oriented_programming",children:"object-oriented programming"}),", the",(0,i.jsx)(t.strong,{children:"decorator pattern"})," is a ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Design_pattern_(computer_science)",children:"design pattern"})," that allows behavior to be added to an individual ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Object_(computer_science)",children:"object"}),", either statically or dynamically, without affecting the behavior of other objects from the same ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Class_(computer_science)",children:"class"}),".The decorator pattern is often useful for adhering to the ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Single_responsibility_principle",children:"Single Responsibility Principle"}),", as it allows functionality to be divided between classes with unique areas of concern.The decorator pattern is structurally nearly identical to the ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Chain_of_responsibility_pattern",children:"chain of responsibility pattern"}),", the difference being that in a chain of responsibility, exactly one of the classes handles the request, while for the decorator, all classes handle the request."]}),"\n",(0,i.jsx)(t.h2,{id:"starbuzz-coffee",children:"Starbuzz Coffee"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"image",src:r(864694).Z+"",width:"916",height:"694"})}),"\n",(0,i.jsx)(t.h2,{id:"adding-ingredients-first-try",children:"Adding Ingredients: First Try"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"image",src:r(572991).Z+"",width:"840",height:"658"}),"- But what if we want more ingredients? Open-closed principle?"]}),"\n",(0,i.jsx)(t.h2,{id:"adding-ingredients-second-try",children:"Adding Ingredients: Second Try"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"image",src:r(49885).Z+"",width:"910",height:"356"})}),"\n",(0,i.jsx)(t.p,{children:"What we want:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Adding a new ingredient like soy milk should not modify the original beverage classes"}),"\n",(0,i.jsx)(t.li,{children:"Adding new ingredients should be simple and work automatically across all beverages"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"solution-decorator-pattern",children:"Solution: Decorator Pattern"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"image",src:r(177435).Z+"",width:"1078",height:"476"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Composition solves the problem"}),"\n",(0,i.jsx)(t.li,{children:"Note: Do not confuse this with Python function decorators"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},864694:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/Structural-Decorator-image1-e46a7f119573c53352fbba9dafe6f020.jpg"},572991:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/Structural-Decorator-image2-bd27289ad0c144942ea69f210cc9f886.jpg"},49885:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/Structural-Decorator-image3-9434fd95ca85d7257785ce3070b641fa.jpg"},177435:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/Structural-Decorator-image4-f2584554e761b232c7fbadc26403e20c.jpg"},511151:(e,t,r)=>{r.d(t,{Z:()=>o,a:()=>s});var i=r(667294);const n={},a=i.createContext(n);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);