"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[95282],{666889:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"languages/golang/interview-questions","title":"Interview Questions","description":"1. Using\xa0sync.Mutex\xa0in Go","source":"@site/docs/languages/golang/interview-questions.md","sourceDirName":"languages/golang","slug":"/languages/golang/interview-questions","permalink":"/languages/golang/interview-questions","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/golang/interview-questions.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1733071902000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hello World","permalink":"/languages/golang/hello-world"},"next":{"title":"Intro","permalink":"/languages/golang/intro"}}');var i=r(474848),s=r(28453);const o={},a="Interview Questions",l={},c=[{value:"1. Using\xa0<code>sync.Mutex</code>\xa0in Go",id:"1-usingsyncmutexin-go",level:2},{value:"2. Issues with Locks and Mitigation",id:"2-issues-with-locks-and-mitigation",level:2},{value:"3. Mapping JSON Data to Structs",id:"3-mapping-json-data-to-structs",level:2},{value:"4. Error Handling in Go",id:"4-error-handling-in-go",level:2},{value:"5. Understanding Goroutines",id:"5-understanding-goroutines",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"interview-questions",children:"Interview Questions"})}),"\n",(0,i.jsxs)(e.h2,{id:"1-usingsyncmutexin-go",children:["1. Using\xa0",(0,i.jsx)(e.code,{children:"sync.Mutex"}),"\xa0in Go"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Question"})}),"\n",(0,i.jsxs)(e.p,{children:["How would you use a\xa0",(0,i.jsx)(e.code,{children:"sync.Mutex"}),"\xa0in Go to handle concurrent access to a shared resource? Can you provide a simple example?"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Answer"})}),"\n",(0,i.jsxs)(e.p,{children:["A\xa0",(0,i.jsx)(e.code,{children:"sync.Mutex"}),"\xa0is used to ensure only one Goroutine accesses a shared resource at a time."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"sync"\n)\n\nvar (\n\tcounter int\n\tmutex   sync.Mutex\n)\n\nfunc increment(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tmutex.Lock() // Locking\n\tcounter++\n\tmutex.Unlock() // Unlocking\n}\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo increment(&wg)\n\t}\n\n\twg.Wait()\n\tfmt.Println("Final Counter:", counter)\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["In this example,\xa0",(0,i.jsx)(e.code,{children:"mutex.Lock()"}),"\xa0and\xa0",(0,i.jsx)(e.code,{children:"mutex.Unlock()"}),"\xa0protect the\xa0",(0,i.jsx)(e.code,{children:"counter"}),"\xa0from concurrent access."]}),"\n",(0,i.jsx)(e.h2,{id:"2-issues-with-locks-and-mitigation",children:"2. Issues with Locks and Mitigation"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Question"})}),"\n",(0,i.jsx)(e.p,{children:"What is a potential issue with using locks in a highly concurrent system, and how can it be mitigated?"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Answer"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Issues"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Deadlocks"}),": Occurs when two Goroutines are waiting on each other to release locks."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Performance Bottlenecks"}),": Locks serialize execution, reducing concurrency."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Mitigation"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use\xa0",(0,i.jsx)(e.code,{children:"sync.RWMutex"}),"\xa0to allow multiple reads simultaneously but restrict writes."]}),"\n",(0,i.jsx)(e.li,{children:"Minimize the duration of critical sections to reduce contention."}),"\n",(0,i.jsxs)(e.li,{children:["Use atomic operations (",(0,i.jsx)(e.code,{children:"sync/atomic"}),") for lightweight synchronization when possible."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"3-mapping-json-data-to-structs",children:"3. Mapping JSON Data to Structs"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Question"})}),"\n",(0,i.jsx)(e.p,{children:"How do you map incoming JSON data from a REST API request to a Go struct, and how would you handle validation errors in the mapping process?"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Answer"})}),"\n",(0,i.jsxs)(e.p,{children:["You can map JSON data using the\xa0",(0,i.jsx)(e.code,{children:"encoding/json"}),"\xa0package and handle errors appropriately."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n\t"encoding/json"\n\t"fmt"\n)\n\ntype User struct {\n\tName  string `json:"name"`\n\tEmail string `json:"email"`\n\tAge   int    `json:"age"`\n}\n\nfunc main() {\n\tjsonData := `{"name": "John", "email": "john@example.com", "age": 30}`\n\n\tvar user User\n\terr := json.Unmarshal([]byte(jsonData), &user)\n\tif err != nil {\n\t\tfmt.Println("Error unmarshalling JSON:", err)\n\t\treturn\n\t}\n\n\t// Simple validation\n\tif user.Name == "" || user.Age < 0 {\n\t\tfmt.Println("Invalid user data")\n\t\treturn\n\t}\n\n\tfmt.Println("Parsed User:", user)\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["For validation, use libraries like\xa0",(0,i.jsx)(e.code,{children:"go-playground/validator"}),"\xa0in real-world applications."]}),"\n",(0,i.jsx)(e.h2,{id:"4-error-handling-in-go",children:"4. Error Handling in Go"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Question"})}),"\n",(0,i.jsx)(e.p,{children:"How do you handle and log errors in a Go codebase to ensure they are both user-friendly and helpful for debugging?"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Answer"})}),"\n",(0,i.jsxs)(e.p,{children:["Errors can be handled and logged using the Go\xa0",(0,i.jsx)(e.code,{children:"error"}),"\xa0interface and logging libraries."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"fmt"\n)\n\nfunc divide(a, b int) (int, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New("cannot divide by zero")\n\t}\n\treturn a / b, nil\n}\n\nfunc main() {\n\tresult, err := divide(10, 0)\n\tif err != nil {\n\t\tfmt.Println("Error:", err)\n\t\treturn\n\t}\n\tfmt.Println("Result:", result)\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"For structured logging:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use libraries like\xa0",(0,i.jsx)(e.code,{children:"logrus"}),"\xa0or\xa0",(0,i.jsx)(e.code,{children:"zap"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Wrap errors with context using\xa0",(0,i.jsx)(e.code,{children:"fmt.Errorf"}),":"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'return 0, fmt.Errorf("divide function failed: %w", err)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"5-understanding-goroutines",children:"5. Understanding Goroutines"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Question"})}),"\n",(0,i.jsx)(e.p,{children:"Can you explain what Goroutines are and how they differ from threads? Provide an example of a situation where Goroutines would be beneficial."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Answer"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Goroutines"}),": Lightweight, managed threads in Go, created using the\xa0",(0,i.jsx)(e.code,{children:"go"}),"\xa0keyword."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Differences from Threads"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Goroutines are lightweight and managed by the Go runtime, not the OS."}),"\n",(0,i.jsx)(e.li,{children:"Goroutines share memory space, whereas threads may not."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Example Use Case"}),": Handling concurrent HTTP requests."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int) {\n\tfmt.Printf("Worker %d starting\\n", id)\n\ttime.Sleep(1 * time.Second)\n\tfmt.Printf("Worker %d done\\n", id)\n}\n\nfunc main() {\n\tfor i := 1; i <= 5; i++ {\n\t\tgo worker(i) // Launch a Goroutine\n\t}\n\ttime.Sleep(2 * time.Second) // Wait for Goroutines to complete\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Output"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"Worker 1 starting\nWorker 2 starting\nWorker 3 starting\nWorker 4 starting\nWorker 5 starting\nWorker 1 done\nWorker 2 done\nWorker 3 done\nWorker 4 done\nWorker 5 done\n"})}),"\n",(0,i.jsx)(e.p,{children:"This allows handling thousands of tasks concurrently with minimal resource usage."})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var t=r(296540);const i={},s=t.createContext(i);function o(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);