"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[30152],{645666:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(785893),r=t(511151);const a={},n="Kd-trees",o={id:"data-structures/hierarchical-data-structure/kd-trees",title:"Kd-trees",description:"In computer science, a***k*-d tree**(short for*k-dimensional tree*) is a space-partitioningdata structure for organizing points) in ak-dimensional space.*k*-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g.range searches and nearest neighbor searches).k-d trees are a special case of binary space partitioning trees.",source:"@site/docs/data-structures/hierarchical-data-structure/kd-trees.md",sourceDirName:"data-structures/hierarchical-data-structure",slug:"/data-structures/hierarchical-data-structure/kd-trees",permalink:"/data-structures/hierarchical-data-structure/kd-trees",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hierarchical-data-structure/kd-trees.md",tags:[],version:"current",lastUpdatedAt:1681237065,formattedLastUpdatedAt:"Apr 11, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"k-ary heap / d-ary heap / d-way heap",permalink:"/data-structures/hierarchical-data-structure/k-ary-heap-d-ary-heap-d-way-heap"},next:{title:"Left Leaning Red-Black BSTs (LLRB tree)",permalink:"/data-structures/hierarchical-data-structure/left-leaning-red-black-bsts-llrb-tree"}},c={},l=[{value:"Operations",id:"operations",level:2},{value:"Applications of 2d trees",id:"applications-of-2d-trees",level:2},{value:"Flocking Boids Algorithm",id:"flocking-boids-algorithm",level:2},{value:"Appel&#39;s algorithm for N-body simulation",id:"appels-algorithm-for-n-body-simulation",level:2}];function d(e){const i={a:"a",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"kd-trees",children:"Kd-trees"}),"\n",(0,s.jsxs)(i.p,{children:["In ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Computer_science",children:"computer science"}),", a",(0,s.jsxs)(i.strong,{children:[(0,s.jsx)(i.em,{children:"k"}),"-d tree"]}),"(short for",(0,s.jsxs)(i.em,{children:["k-dimensional ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Tree_data_structure",children:"tree"})]}),") is a ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Space_partitioning",children:"space-partitioning"}),(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Data_structure",children:"data structure"})," for organizing ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Point_(geometry)",children:"points"})," in a",(0,s.jsx)(i.em,{children:"k"}),"-dimensional ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Euclidean_space",children:"space"}),".",(0,s.jsx)(i.em,{children:"k"}),"-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g.",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Range_search",children:"range searches"})," and ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Nearest_neighbor_search",children:"nearest neighbor searches"}),").",(0,s.jsx)(i.em,{children:"k"}),"-d trees are a special case of ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Binary_space_partitioning",children:"binary space partitioning"})," trees."]}),"\n",(0,s.jsx)(i.p,{children:"A non-leaf node in K-D tree divides the space into two parts, called as half-spaces."}),"\n",(0,s.jsx)(i.p,{children:"Points to the left of this space are represented by the left subtree of that node and points to the right of the space are represented by the right subtree."}),"\n",(0,s.jsx)(i.p,{children:"Extension of BSTs that allow us to do efficient processing of sets of points in space."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"image",src:t(757330).Z+"",width:"1172",height:"832"})}),"\n",(0,s.jsxs)(i.p,{children:["Problem with Grid implementation - ",(0,s.jsx)(i.strong,{children:"Clustering"})]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Lists are too long, even though average length is short."}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"image",src:t(235020).Z+"",width:"1099",height:"726"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"image",src:t(246012).Z+"",width:"1206",height:"910"})}),"\n",(0,s.jsx)(i.h2,{id:"operations",children:"Operations"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Range search in a 2d tree"}),"\n",(0,s.jsx)(i.li,{children:"Nearest neighbor search in a 2d tree"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"image",src:t(53941).Z+"",width:"1194",height:"884"})}),"\n",(0,s.jsx)(i.h2,{id:"applications-of-2d-trees",children:"Applications of 2d trees"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Classifying astronomical objects"}),"\n",(0,s.jsx)(i.li,{children:"Computer animation"}),"\n",(0,s.jsx)(i.li,{children:"Speeding up neural networks"}),"\n",(0,s.jsx)(i.li,{children:"Mining data"}),"\n",(0,s.jsx)(i.li,{children:"Image retrieval"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"flocking-boids-algorithm",children:"Flocking Boids Algorithm"}),"\n",(0,s.jsx)(i.p,{children:"Boids: Three simple rules lead to complex emergent flocking behavior in birds:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Collision avoidance: point away from k nearest boids"}),"\n",(0,s.jsx)(i.li,{children:"Flock centering: point towards the center of mass of k nearest boids"}),"\n",(0,s.jsx)(i.li,{children:"Velocity matching: update velocity to the average of k nearest boids"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"appels-algorithm-for-n-body-simulation",children:"Appel's algorithm for N-body simulation"}),"\n",(0,s.jsx)(i.p,{children:"Key idea: suppose particle is far, far away from cluster of particles:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Treat cluster of particles as a single aggregate particle"}),"\n",(0,s.jsx)(i.li,{children:"Compute force between particle and center of mass of aggregate"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Algorithm"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Build 3-d tree with N particles as nodes"}),"\n",(0,s.jsx)(i.li,{children:"Store center-of-mass of subtree in each node"}),"\n",(0,s.jsx)(i.li,{children:"To compute total force acting on a particle, traverse tree, but stop as soon as distance from particle to subdivision is sufficiently large"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Running time per step is N log N"})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},757330:(e,i,t)=>{t.d(i,{Z:()=>s});const s=t.p+"assets/images/Kd-trees-image1-b23e1a0f6bb979580a726659e0d34a96.jpg"},235020:(e,i,t)=>{t.d(i,{Z:()=>s});const s=t.p+"assets/images/Kd-trees-image2-bde7448e2751145bc5885275848f1b2d.jpg"},246012:(e,i,t)=>{t.d(i,{Z:()=>s});const s=t.p+"assets/images/Kd-trees-image3-1f7c6ee1ba722f44ec5182e8d2d224e5.jpg"},53941:(e,i,t)=>{t.d(i,{Z:()=>s});const s=t.p+"assets/images/Kd-trees-image4-040266caf8a076852fe3bbb72b01caf3.jpg"},511151:(e,i,t)=>{t.d(i,{Z:()=>o,a:()=>n});var s=t(667294);const r={},a=s.createContext(r);function n(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);