"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[63845],{469424:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"python/python-intro/mathematics","title":"Mathematics","description":"Finding nCr for given numbers","source":"@site/docs/python/python-intro/mathematics.md","sourceDirName":"python/python-intro","slug":"/python/python-intro/mathematics","permalink":"/python/python-intro/mathematics","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/mathematics.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Map, reduce, filter","permalink":"/python/python-intro/map-reduce-filter"},"next":{"title":"Modules","permalink":"/python/python-intro/modules"}}');var o=t(474848),a=t(28453);const r={},s="Mathematics",l={},m=[{value:"Finding nCr for given numbers",id:"finding-ncr-for-given-numbers",level:2},{value:"Permutation",id:"permutation",level:2},{value:"Combination",id:"combination",level:2},{value:"1. Combinations are emitted in lexicographic sort order of input. So, if the input list is sorted, the combination tuples will be produced in sorted order",id:"1-combinations-are-emitted-in-lexicographic-sort-order-of-input-so-if-the-input-list-is-sorted-the-combination-tuples-will-be-produced-in-sorted-order",level:3},{value:"2. Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each combination",id:"2-elements-are-treated-as-unique-based-on-their-position-not-on-their-value-so-if-the-input-elements-are-unique-there-will-be-no-repeat-values-in-each-combination",level:3},{value:"3. If we want to make combination of same element to same element then we use combinations_with_replacement",id:"3-if-we-want-to-make-combination-of-same-element-to-same-element-then-we-use-combinations_with_replacement",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"mathematics",children:"Mathematics"})}),"\n",(0,o.jsx)(e.h2,{id:"finding-ncr-for-given-numbers",children:"Finding nCr for given numbers"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import math\n\ndef nCr(n,r):\n        f = math.factorial\n    return f(n) // f(r) // f(n-r)\n"})}),"\n",(0,o.jsx)(e.p,{children:"Use memoization if large number of calls is to be made"}),"\n",(0,o.jsx)(e.h2,{id:"permutation",children:"Permutation"}),"\n",(0,o.jsx)(e.p,{children:"First import itertools package to implement permutations method in python. This method takes a list as an input and return an object list of tuples that contain all permutation in a list form."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# A Python program to print all\n# permutations using library function\nfrom itertools import permutations\n\n# Get all permutations of [1, 2, 3]\nperm = permutations([1, 2, 3])\n\n# Print the obtained permutations\nfor i in list(perm):\n    print i\n\nOutput\n(1, 2, 3)\n(1, 3, 2)\n(2, 1, 3)\n(2, 3, 1)\n(3, 1, 2)\n(3, 2, 1)\n"})}),"\n",(0,o.jsx)(e.p,{children:"It generates n! permutations if length of input sequence is n.\nIf want want to get permutations of length L then implement it in this way."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# A Python program to print all\n# permutations of given length\nfrom itertools import permutations\n\n# Get all permutations of length 2\n# and length 2\nperm = permutations([1, 2, 3], 2)\n\n# Print the obtained permutations\nfor i in list(perm):\n    print i\n\nOutput\n(1, 2)\n(1, 3)\n(2, 1)\n(2, 3)\n(3, 1)\n(3, 2)\n"})}),"\n",(0,o.jsx)(e.p,{children:"It generate nCr * r! permutations if length of input sequence is n and input parameter is r."}),"\n",(0,o.jsx)(e.h2,{id:"combination",children:"Combination"}),"\n",(0,o.jsx)(e.p,{children:"This method takes a list and r (length) as an input and return an object list of tuples which contain all possible combination of length r in a list form."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# A Python program to print all\n# combinations of given length\nfrom itertools import combinations\n\n# Get all combinations of [1, 2, 3]\n# and length 2\ncomb = combinations([1, 2, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(1, 2)\n(1, 3)\n(2, 3)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"1-combinations-are-emitted-in-lexicographic-sort-order-of-input-so-if-the-input-list-is-sorted-the-combination-tuples-will-be-produced-in-sorted-order",children:"1. Combinations are emitted in lexicographic sort order of input. So, if the input list is sorted, the combination tuples will be produced in sorted order"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# A Python program to print all combinations\n# of given length with unsorted input.\nfrom itertools import combinations\n\n# Get all combinations of [2, 1, 3]\n# and length 2\ncomb = combinations([2, 1, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(2, 1)\n(2, 3)\n(1, 3)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-elements-are-treated-as-unique-based-on-their-position-not-on-their-value-so-if-the-input-elements-are-unique-there-will-be-no-repeat-values-in-each-combination",children:"2. Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each combination"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# A Python program to print all combinations\n# of given length with duplicates in input\nfrom itertools import combinations\n\n# Get all combinations of [1, 1, 3]\n# and length 2\ncomb = combinations([1, 1, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(1, 1)\n(1, 3)\n(1, 3)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"3-if-we-want-to-make-combination-of-same-element-to-same-element-then-we-use-combinations_with_replacement",children:"3. If we want to make combination of same element to same element then we use combinations_with_replacement"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# A Python program to print all combinations\n# with an element-to-itself combination is\n# also included\nfrom itertools import combinations_with_replacement\n\n# Get all combinations of [1, 2, 3] and length 2\ncomb = combinations_with_replacement([1, 2, 3], 2)\n\n# Print the obtained combinations\nfor i in list(comb):\n    print i\n\nOutput\n(1, 1)\n(1, 2)\n(1, 3)\n(2, 2)\n(2, 3)\n(3, 3)\n"})})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var i=t(296540);const o={},a=i.createContext(o);function r(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);