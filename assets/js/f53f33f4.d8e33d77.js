"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[70223],{667174:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>n});const i=JSON.parse('{"id":"algorithms/graphtheory/topological-sort-algorithm","title":"Topological Sort Algorithm","description":"Acyclic Edge Weighted Digraphs","source":"@site/docs/algorithms/graphtheory/topological-sort-algorithm.md","sourceDirName":"algorithms/graphtheory","slug":"/algorithms/graphtheory/topological-sort-algorithm","permalink":"/algorithms/graphtheory/topological-sort-algorithm","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/graphtheory/topological-sort-algorithm.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Strong Components","permalink":"/algorithms/graphtheory/strong-components"},"next":{"title":"Mathematics","permalink":"/algorithms/mathematics/"}}');var s=o(474848),r=o(28453);const a={},c="Topological Sort Algorithm",l={},n=[{value:"Acyclic Edge Weighted Digraphs",id:"acyclic-edge-weighted-digraphs",level:2},{value:"Precedence Scheduling",id:"precedence-scheduling",level:2}];function h(e){const t={h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"topological-sort-algorithm",children:"Topological Sort Algorithm"})}),"\n",(0,s.jsx)(t.h2,{id:"acyclic-edge-weighted-digraphs",children:"Acyclic Edge Weighted Digraphs"}),"\n",(0,s.jsx)(t.p,{children:"It is easier to find shortest paths in an edge-weighted digraph that has no directed cycles than general digraph."}),"\n",(0,s.jsx)(t.p,{children:"The topological sort algorithm compute the shortest-paths tree in an edge-weighted DAG in time proportional to O(E+V). It process the V vertices in topological order and relaxes each of the E edges exactly once."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"image",src:o(438560).A+"",width:"999",height:"811"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"image",src:o(552175).A+"",width:"1000",height:"726"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"image",src:o(379794).A+"",width:"1000",height:"631"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"image",src:o(505281).A+"",width:"999",height:"659"})}),"\n",(0,s.jsx)(t.h2,{id:"precedence-scheduling",children:"Precedence Scheduling"}),"\n",(0,s.jsx)(t.p,{children:"Goal: Given a set of tasks to be completed with precedence constraints, in which order should we schedule the tasks?"}),"\n",(0,s.jsx)(t.p,{children:"Digraph model: vertex = task; edge = precedence constraint"}),"\n",(0,s.jsx)(t.p,{children:"Topological Sort can only work with DAG (Directed Acyclic Graph)"}),"\n",(0,s.jsx)(t.p,{children:"Topological sort: Redraw DAG so all edges point upwards."}),"\n",(0,s.jsx)(t.p,{children:"Using DFS we can solve topological sort easily"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Run depth-first search"}),"\n",(0,s.jsx)(t.li,{children:"Return vertices in reverse postorder"}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.img,{alt:"image",src:o(827236).A+"",width:"999",height:"832"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"image",src:o(521395).A+"",width:"1000",height:"800"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"image",src:o(634934).A+"",width:"999",height:"678"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},438560:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image1-9b244723c07bdf117a1f029cd529a505.jpg"},552175:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image2-830e8036e3343b83932cc17b837a3b75.jpg"},379794:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image3-69e22cf283d9d761e7cd9b3cba2c071b.jpg"},505281:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image4-5ed49db85122dfbc7a149f1f9f785df0.jpg"},827236:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image5-e9f51f39f86df8fd3284c57d3a391827.jpg"},521395:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image6-3cd0194a007c411608efa54918d4bfb2.jpg"},634934:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Topological-Sort-Algorithm-image7-205e5fa887eedf850a040020c016e073.jpg"},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>c});var i=o(296540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);