"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[89843],{173171:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>h,toc:()=>o});var n=r(785893),s=r(511151);const i={},a="Breadth First Search (BFS)",h={id:"algorithms/graphtheory/breadth-first-search-bfs",title:"Breadth First Search (BFS)",description:'BFS "is an algorithm for traversing or searching tree data structure. It starts at the tree root and explores the neighbor nodes first, before moving to the next level neighbors."',source:"@site/docs/algorithms/graphtheory/breadth-first-search-bfs.md",sourceDirName:"algorithms/graphtheory",slug:"/algorithms/graphtheory/breadth-first-search-bfs",permalink:"/algorithms/graphtheory/breadth-first-search-bfs",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/graphtheory/breadth-first-search-bfs.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bellman Ford Algorithm",permalink:"/algorithms/graphtheory/bellman-ford-algorithm"},next:{title:"Connected Components",permalink:"/algorithms/graphtheory/connected-components"}},l={},o=[{value:"Breadth-First Search(BFS)",id:"breadth-first-searchbfs",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"breadth-first-search-bfs",children:"Breadth First Search (BFS)"}),"\n",(0,n.jsx)(t.p,{children:'BFS "is an algorithm for traversing or searching tree data structure. It starts at the tree root and explores the neighbor nodes first, before moving to the next level neighbors."'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Breadth-first_search",children:"https://en.wikipedia.org/wiki/Breadth-first_search"})}),"\n",(0,n.jsx)(t.h2,{id:"breadth-first-searchbfs",children:"Breadth-First Search(BFS)"}),"\n",(0,n.jsx)(t.p,{children:"BFS algorithm traverses the tree level by level and depth by depth."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(972836).Z+"",width:"1100",height:"619"})}),"\n",(0,n.jsx)(t.p,{children:"Here is an example that helps to better explain this algorithm:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(131972).Z+"",width:"1100",height:"619"})}),"\n",(0,n.jsx)(t.p,{children:"So we traverse level by level. In this example, the result is 1--2--5--3--4--6--7."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Level/Depth 0: only node with value 1"}),"\n",(0,n.jsx)(t.li,{children:"Level/Depth 1: nodes with values 2 and 5"}),"\n",(0,n.jsx)(t.li,{children:"Level/Depth 2: nodes with values 3, 4, 6, and 7"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Now let's code it."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"def bfs(self):\n queue = Queue()\n queue.put(self)\n\n while not queue.empty():\n  current_node = queue.get()\n  print(current_node.value)\n\n  if current_node.left_child:\n   queue.put(current_node.left_child)\n\n  if current_node.right_child:\n   queue.put(current_node.right_child)\n"})}),"\n",(0,n.jsx)(t.p,{children:"To implement a BFS algorithm, we use the queue data structure to help."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(443287).Z+"",width:"1100",height:"1222"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"First add the root node into the queue with the put method."}),"\n",(0,n.jsx)(t.li,{children:"Iterate while the queue is not empty."}),"\n",(0,n.jsx)(t.li,{children:"Get the first node in the queue, and then print its value."}),"\n",(0,n.jsx)(t.li,{children:"Add both left and right children into the queue (if the current node has children)."}),"\n",(0,n.jsx)(t.li,{children:"Done. We will print the value of each node, level by level, with our queue helper."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Other Way"})}),"\n",(0,n.jsx)(t.p,{children:"Can color the vertices of the graph using 3 color, white, gray and black"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"White - Initialized / Undiscovered Vetex"}),"\n",(0,n.jsx)(t.li,{children:"Gray - Initially discovered"}),"\n",(0,n.jsx)(t.li,{children:"Black - Completely Explored"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This means that once a vetex is colored black, it has no white vertices adjacent to it."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(31715).Z+"",width:"1122",height:"652"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(10780).Z+"",width:"1086",height:"750"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Properties"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"BFS computes shortest paths (fewest number of edges) from s to all other vertices in a graph in time proportional to E + V."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(2555).Z+"",width:"690",height:"752"})})]})}function c(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},972836:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Breadth-First-Search-(BFS)-image1-4f51c2863c9ce81710dacaa6e718e307.jpg"},131972:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Breadth-First-Search-(BFS)-image2-512a9c15541a5d577025f4a9ce8968f3.jpg"},443287:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Breadth-First-Search-(BFS)-image3-c4ff3178b0dc161334e8a984f72b2916.jpg"},31715:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Breadth-First-Search-(BFS)-image4-5f3509a5b07f429057c8af782554170a.jpg"},10780:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Breadth-First-Search-(BFS)-image5-42cba46d33b8c4aea5cda21d4411cea3.jpg"},2555:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Breadth-First-Search-(BFS)-image6-df2533b200785aa2ab69ea7db2f1d69b.jpg"},511151:(e,t,r)=>{r.d(t,{Z:()=>h,a:()=>a});var n=r(667294);const s={},i=n.createContext(s);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);