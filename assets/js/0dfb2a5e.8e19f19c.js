"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[95070],{530887:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"technologies/apache-airflow/concepts","title":"Concepts","description":"DAGs","source":"@site/docs/technologies/apache-airflow/concepts.md","sourceDirName":"technologies/apache-airflow","slug":"/technologies/apache-airflow/concepts","permalink":"/technologies/apache-airflow/concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/technologies/apache-airflow/concepts.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1734022610000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Commands / Configs","permalink":"/technologies/apache-airflow/commands-configs"},"next":{"title":"Dags Example","permalink":"/technologies/apache-airflow/dags-example"}}');var o=r(474848),s=r(28453);const n={},i="Concepts",l={},c=[{value:"DAGs",id:"dags",level:2},{value:"Scope",id:"scope",level:3},{value:"Default Arguments",id:"default-arguments",level:3},{value:"Context Manager",id:"context-manager",level:3},{value:"Operators",id:"operators",level:2},{value:"DAG Assignment",id:"dag-assignment",level:2},{value:"Bitshift Composition",id:"bitshift-composition",level:2},{value:"Tasks",id:"tasks",level:2},{value:"Errors",id:"errors",level:3},{value:"Task Instances",id:"task-instances",level:2},{value:"Workflows",id:"workflows",level:2},{value:"Additional Functionality",id:"additional-functionality",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"concepts",children:"Concepts"})}),"\n",(0,o.jsx)(a.h2,{id:"dags",children:"DAGs"}),"\n",(0,o.jsx)(a.p,{children:"In Airflow, a DAG -- or a Directed Acyclic Graph -- is a collection of all the tasks you want to run, organized in a way that reflects their relationships and dependencies."}),"\n",(0,o.jsx)(a.h3,{id:"scope",children:"Scope"}),"\n",(0,o.jsx)(a.p,{children:"Airflow will load any DAG object it can import from a DAG file. Critically, that means the DAG must appear in globals()"}),"\n",(0,o.jsx)(a.h3,{id:"default-arguments",children:"Default Arguments"}),"\n",(0,o.jsx)(a.p,{children:"If a dictionary of default_args is passed to a DAG, it will apply them to any of its operators. This makes it easy to apply a common parameter to many operators without having to type it many times."}),"\n",(0,o.jsx)(a.h3,{id:"context-manager",children:"Context Manager"}),"\n",(0,o.jsx)(a.p,{children:"DAGs can be used as context managers to automatically assign new operators to that DAG."}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.a,{href:"https://medium.com/datareply/airflow-lesser-known-tips-tricks-and-best-practises-cf4d4a90f8f",children:"https://medium.com/datareply/airflow-lesser-known-tips-tricks-and-best-practises-cf4d4a90f8f"})}),"\n",(0,o.jsx)(a.h2,{id:"operators",children:"Operators"}),"\n",(0,o.jsx)(a.p,{children:"While DAGs describe how to run a workflow, Operators determine what actually gets done."}),"\n",(0,o.jsx)(a.p,{children:"An operator describes a single task in a workflow. Operators are usually (but not always) atomic, meaning they can stand on their own and don't need to share resources with any other operators. The DAG will make sure that operators run in the correct certain order; other than those dependencies, operators generally run independently. In fact, they may run on two completely different machines."}),"\n",(0,o.jsx)(a.p,{children:"Airflow provides operators for many common tasks, including:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/bash_operator/index.html#airflow.operators.bash_operator.BashOperator",children:"BashOperator"}),"- executes a bash command"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/python_operator/index.html#airflow.operators.python_operator.PythonOperator",children:"PythonOperator"}),"- calls an arbitrary Python function"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/email_operator/index.html#airflow.operators.email_operator.EmailOperator",children:"EmailOperator"}),"- sends an email"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/http_operator/index.html#airflow.operators.http_operator.SimpleHttpOperator",children:"SimpleHttpOperator"}),"- sends an HTTP request"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/mysql_operator/index.html#airflow.operators.mysql_operator.MySqlOperator",children:"MySqlOperator"}),", ",(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/sqlite_operator/index.html#airflow.operators.sqlite_operator.SqliteOperator",children:"SqliteOperator"}),", ",(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/postgres_operator/index.html#airflow.operators.postgres_operator.PostgresOperator",children:"PostgresOperator"}),", ",(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/mssql_operator/index.html#airflow.operators.mssql_operator.MsSqlOperator",children:"MsSqlOperator"}),", ",(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/oracle_operator/index.html#airflow.operators.oracle_operator.OracleOperator",children:"OracleOperator"}),", ",(0,o.jsx)(a.a,{href:"https://airflow.apache.org/_api/airflow/operators/jdbc_operator/index.html#airflow.operators.jdbc_operator.JdbcOperator",children:"JdbcOperator"}),", etc. - executes a SQL command"]}),"\n",(0,o.jsx)(a.li,{children:"Sensor- waits for a certain time, file, database row, S3 key, etc..."}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"dag-assignment",children:"DAG Assignment"}),"\n",(0,o.jsx)(a.p,{children:"Operators do not have to be assigned to DAGs immediately (previously dag was a required argument). However, once an operator is assigned to a DAG, it can not be transferred or unassigned. DAG assignment can be done explicitly when the operator is created, through deferred assignment, or even inferred from other operators."}),"\n",(0,o.jsx)(a.h2,{id:"bitshift-composition",children:"Bitshift Composition"}),"\n",(0,o.jsxs)(a.p,{children:["Traditionally, operator relationships are set with the ",(0,o.jsx)(a.code,{children:"set_upstream()"})," and ",(0,o.jsx)(a.code,{children:"set_downstream()"})," methods. In Airflow 1.8, this can be done with the Python bitshift operators ",(0,o.jsx)(a.code,{children:">> and <<"}),". The following four statements are all functionally equivalent:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-bash",children:"op1 >> op2\nop1.set_downstream(op2)\n\nop2 << op1\nop2.set_upstream(op1)\n"})}),"\n",(0,o.jsx)(a.h2,{id:"tasks",children:"Tasks"}),"\n",(0,o.jsx)(a.p,{children:'Once an operator is instantiated, it is referred to as a "task". The instantiation defines specific values when calling the abstract operator, and the parameterized task becomes a node in a DAG.'}),"\n",(0,o.jsx)(a.h3,{id:"errors",children:"Errors"}),"\n",(0,o.jsx)(a.p,{children:'The error "Detected zombie job" in Apache Airflow typically occurs when a task is marked as running, but the process that was executing the task is no longer active. This can happen for several reasons and indicates that the task did not finish successfully and its state was not updated correctly in the Airflow metadata database.'}),"\n",(0,o.jsx)(a.h2,{id:"task-instances",children:"Task Instances"}),"\n",(0,o.jsx)(a.p,{children:'A task instance represents a specific run of a task and is characterized as the combination of a dag, a task, and a point in time. Task instances also have an indicative state, which could be "running", "success", "failed", "skipped", "up for retry", etc.'}),"\n",(0,o.jsx)(a.h2,{id:"workflows",children:"Workflows"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"DAG:"})," a description of the order in which work should take place"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Operator:"})," a class that acts as a template for carrying out some work"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Task:"})," a parameterized instance of an operator"]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Task Instance:"})," a task that 1) has been assigned to a DAG and 2) has a state associated with a specific run of the DAG"]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"By combining DAGs and Operators to createTaskInstances, you can build complex workflows."}),"\n",(0,o.jsx)(a.h2,{id:"additional-functionality",children:"Additional Functionality"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Hooks"}),"\n",(0,o.jsx)(a.li,{children:"Pools"}),"\n",(0,o.jsx)(a.li,{children:"Connections"}),"\n",(0,o.jsx)(a.li,{children:"Queues"}),"\n",(0,o.jsx)(a.li,{children:"XComs"}),"\n",(0,o.jsx)(a.li,{children:"Variables"}),"\n",(0,o.jsx)(a.li,{children:"Branching"}),"\n",(0,o.jsx)(a.li,{children:"SubDAGs"}),"\n",(0,o.jsx)(a.li,{children:"SLAs"}),"\n",(0,o.jsx)(a.li,{children:"Trigger Rules"}),"\n",(0,o.jsx)(a.li,{children:"Latest Run Only"}),"\n",(0,o.jsx)(a.li,{children:"Zombies and Undeads"}),"\n",(0,o.jsx)(a.li,{children:"Cluster Policy"}),"\n",(0,o.jsx)(a.li,{children:"Documentation and Notes"}),"\n",(0,o.jsx)(a.li,{children:"Jinja Templating"}),"\n"]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>n,x:()=>i});var t=r(296540);const o={},s=t.createContext(o);function n(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);