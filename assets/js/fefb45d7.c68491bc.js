"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[18334],{71083:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"data-structures/hierarchical-data-structure/kd-trees","title":"Kd-trees","description":"In computer science, a***k*-d tree**(short for*k-dimensional tree*) is a space-partitioningdata structure for organizing points) in ak-dimensional space.*k*-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g.range searches and nearest neighbor searches).k-d trees are a special case of binary space partitioning trees.","source":"@site/docs/data-structures/hierarchical-data-structure/kd-trees.md","sourceDirName":"data-structures/hierarchical-data-structure","slug":"/data-structures/hierarchical-data-structure/kd-trees","permalink":"/data-structures/hierarchical-data-structure/kd-trees","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hierarchical-data-structure/kd-trees.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1681237065000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"k-ary heap / d-ary heap / d-way heap","permalink":"/data-structures/hierarchical-data-structure/k-ary-heap-d-ary-heap-d-way-heap"},"next":{"title":"Left Leaning Red-Black BSTs (LLRB tree)","permalink":"/data-structures/hierarchical-data-structure/left-leaning-red-black-bsts-llrb-tree"}}');var r=t(474848),a=t(28453);const n={},o="Kd-trees",c={},l=[{value:"Operations",id:"operations",level:2},{value:"Applications of 2d trees",id:"applications-of-2d-trees",level:2},{value:"Flocking Boids Algorithm",id:"flocking-boids-algorithm",level:2},{value:"Appel&#39;s algorithm for N-body simulation",id:"appels-algorithm-for-n-body-simulation",level:2}];function d(e){const i={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"kd-trees",children:"Kd-trees"})}),"\n",(0,r.jsxs)(i.p,{children:["In ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Computer_science",children:"computer science"}),", a",(0,r.jsxs)(i.strong,{children:[(0,r.jsx)(i.em,{children:"k"}),"-d tree"]}),"(short for",(0,r.jsxs)(i.em,{children:["k-dimensional ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Tree_data_structure",children:"tree"})]}),") is a ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Space_partitioning",children:"space-partitioning"}),(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Data_structure",children:"data structure"})," for organizing ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Point_(geometry)",children:"points"})," in a",(0,r.jsx)(i.em,{children:"k"}),"-dimensional ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Euclidean_space",children:"space"}),".",(0,r.jsx)(i.em,{children:"k"}),"-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g.",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Range_search",children:"range searches"})," and ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Nearest_neighbor_search",children:"nearest neighbor searches"}),").",(0,r.jsx)(i.em,{children:"k"}),"-d trees are a special case of ",(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Binary_space_partitioning",children:"binary space partitioning"})," trees."]}),"\n",(0,r.jsx)(i.p,{children:"A non-leaf node in K-D tree divides the space into two parts, called as half-spaces."}),"\n",(0,r.jsx)(i.p,{children:"Points to the left of this space are represented by the left subtree of that node and points to the right of the space are represented by the right subtree."}),"\n",(0,r.jsx)(i.p,{children:"Extension of BSTs that allow us to do efficient processing of sets of points in space."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"image",src:t(925205).A+"",width:"999",height:"709"})}),"\n",(0,r.jsxs)(i.p,{children:["Problem with Grid implementation - ",(0,r.jsx)(i.strong,{children:"Clustering"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Lists are too long, even though average length is short."}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"image",src:t(333130).A+"",width:"999",height:"660"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"image",src:t(300871).A+"",width:"999",height:"754"})}),"\n",(0,r.jsx)(i.h2,{id:"operations",children:"Operations"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Range search in a 2d tree"}),"\n",(0,r.jsx)(i.li,{children:"Nearest neighbor search in a 2d tree"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"image",src:t(182972).A+"",width:"1000",height:"740"})}),"\n",(0,r.jsx)(i.h2,{id:"applications-of-2d-trees",children:"Applications of 2d trees"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Classifying astronomical objects"}),"\n",(0,r.jsx)(i.li,{children:"Computer animation"}),"\n",(0,r.jsx)(i.li,{children:"Speeding up neural networks"}),"\n",(0,r.jsx)(i.li,{children:"Mining data"}),"\n",(0,r.jsx)(i.li,{children:"Image retrieval"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"flocking-boids-algorithm",children:"Flocking Boids Algorithm"}),"\n",(0,r.jsx)(i.p,{children:"Boids: Three simple rules lead to complex emergent flocking behavior in birds:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Collision avoidance: point away from k nearest boids"}),"\n",(0,r.jsx)(i.li,{children:"Flock centering: point towards the center of mass of k nearest boids"}),"\n",(0,r.jsx)(i.li,{children:"Velocity matching: update velocity to the average of k nearest boids"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"appels-algorithm-for-n-body-simulation",children:"Appel's algorithm for N-body simulation"}),"\n",(0,r.jsx)(i.p,{children:"Key idea: suppose particle is far, far away from cluster of particles:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Treat cluster of particles as a single aggregate particle"}),"\n",(0,r.jsx)(i.li,{children:"Compute force between particle and center of mass of aggregate"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Algorithm"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Build 3-d tree with N particles as nodes"}),"\n",(0,r.jsx)(i.li,{children:"Store center-of-mass of subtree in each node"}),"\n",(0,r.jsx)(i.li,{children:"To compute total force acting on a particle, traverse tree, but stop as soon as distance from particle to subdivision is sufficiently large"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Running time per step is N log N"})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},925205:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/Kd-trees-image1-6e9cf42664395692e4640971fe5bdfcf.jpg"},333130:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/Kd-trees-image2-ff1ff3217ffa44f85d2eee461fbec56b.jpg"},300871:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/Kd-trees-image3-944cbfac5a053eb51c0703f47e001209.jpg"},182972:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/Kd-trees-image4-29a9fbdc3d3a40e04e2b365b36e077f6.jpg"},28453:(e,i,t)=>{t.d(i,{R:()=>n,x:()=>o});var s=t(296540);const r={},a=s.createContext(r);function n(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);