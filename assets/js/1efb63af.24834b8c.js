"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[86021],{73354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"computer-science/programming-paradigms/structural-facade","title":"Structural - Facade","description":"According to Gang of Four definition, facade provides a simplified interface for a set of interfaces of a subsystem. It defines a convenient higher-level interface to interact with.","source":"@site/docs/computer-science/programming-paradigms/structural-facade.md","sourceDirName":"computer-science/programming-paradigms","slug":"/computer-science/programming-paradigms/structural-facade","permalink":"/computer-science/programming-paradigms/structural-facade","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/programming-paradigms/structural-facade.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701846168000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Structural - Decorator","permalink":"/computer-science/programming-paradigms/structural-decorator"},"next":{"title":"Structural - Proxy","permalink":"/computer-science/programming-paradigms/structural-proxy"}}');var r=t(474848),a=t(28453);const s={},o="Structural - Facade",c={},d=[{value:"Example implementation",id:"example-implementation",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structural---facade",children:"Structural - Facade"})}),"\n",(0,r.jsxs)(n.p,{children:["According to ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Design_Patterns",children:"Gang of Four"})," definition, facade provides a simplified interface for a set of interfaces of a subsystem. It defines a convenient higher-level interface to interact with."]}),"\n",(0,r.jsx)(n.p,{children:"The facade decouples clients from subinterfaces of our modules. The client uses just one object - the facade, to delegate work to many separated components.The client doesn't have to know the details of our architecture - it is all hidden behind a clean interface of the facade."}),"\n",(0,r.jsx)(n.p,{children:"Without Facade"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:t(369882).A+"",width:"503",height:"533"})}),"\n",(0,r.jsx)(n.p,{children:"The client knows the elements of module and orchestrates the work."}),"\n",(0,r.jsx)(n.p,{children:"With Facade"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:t(476133).A+"",width:"503",height:"533"})}),"\n",(0,r.jsx)(n.p,{children:"The client doesn't know anything about subsystem, it communicates with the facade only."}),"\n",(0,r.jsx)(n.p,{children:"When to use?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"when you want to provide an easy interface to interact with a more complicated system"}),"\n",(0,r.jsx)(n.li,{children:"to decouple the clients from implementation details"}),"\n",(0,r.jsx)(n.li,{children:"to use as an entry point to some submodule"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Elements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Facade- knows subsystem, orchestrates work, delegates requests to module components"}),"\n",(0,r.jsx)(n.li,{children:"Submodule Class- elements of our module"}),"\n",(0,r.jsx)(n.li,{children:"Client- uses facade to interact with the system"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-implementation",children:"Example implementation"}),"\n",(0,r.jsx)(n.p,{children:"Let's pretend that we're working on an e-commerce application. We want to implement product ordering. We already got a few services in our app, but they are not integrated."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface InventoryService {\nboolean isAvailable(int productId);\nint order(int productId);\n}\npublic interface ShipmentService {\nvoid shipTo(int userId, int productId);\n}\npublic interface NotificationService {\nvoid notifyAboutOrder(int userId, int orderId);\nvoid notifyAboutIssue(int userId);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"(For simplicity, we use ints to represent users, orders etc.)\nWith those building blocks, we want to provide an API to order a product."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface OrderFacade {\nvoid order(int productId, int userId);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"We don't want the client code to interact with all services just to make an order, so we provide nice and clean API with Facade."}),"\n",(0,r.jsx)(n.p,{children:"Here's its implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class DefaultOrderFacade implements OrderFacade {\n// Dependencies could be injected using Dependency Injection tool\npublic DefaultOrderFacade(final InventoryService inventory,\nfinal NotificationService notifications,\nfinal ShipmentService shipments) {\nthis.inventory = inventory;\nthis.notifications = notifications;\nthis.shipments = shipments;\n}\n\nprivate final InventoryService inventory;\nprivate final NotificationService notifications;\nprivate final ShipmentService shipments;\n\n@Override\npublic void order(int productId, int userId) {\nif (inventory.isAvailable(productId)) {\nfinal int orderId = inventory.order(productId);\nshipments.shipTo(userId, productId);\nnotifications.notifyAboutOrder(userId, orderId);\n} else {\nnotifications.notifyAboutIssue(userId);\n}\n}\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this way, instead of using three different services to make an order, we are using just one - the Facade. All services methods are hidden behind the facade - making an order is much simpler now."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class SomeClientCode {\n// This could be injected by some DI framework\nprivate OrderFacade orderfacde;\npublic static void main(String [] args) {\nfinal int someProductId;\nfinal int forSomeUserId;\n// ordering product is much easier now with Facade\norderFacade.order(someProductId, forSomeUserId);\n}\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In real apps the services would have even more methods - we could hide them all and provide higher-level APIs by adding more methods to Facades."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},369882:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Structural-Facade-image1-19383c52ccff9afc4d3dbe692fd7e2bc.jpg"},476133:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Structural-Facade-image2-80ef399b3a81cdd187f65a8a9341d6ef.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(296540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);