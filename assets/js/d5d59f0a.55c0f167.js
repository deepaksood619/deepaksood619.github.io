"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[96523],{685385:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"algorithms/general/sweep-line-algorithm","title":"Sweep Line Algorithm","description":"Orthogonal Line Segment Intersection","source":"@site/docs/algorithms/general/sweep-line-algorithm.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/sweep-line-algorithm","permalink":"/algorithms/general/sweep-line-algorithm","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/sweep-line-algorithm.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Reverse Polish Notation / Postfix Notation","permalink":"/algorithms/general/reverse-polish-notation-postfix-notation"},"next":{"title":"Two-Stack Algorithm","permalink":"/algorithms/general/two-stack-algorithm"}}');var o=t(474848),r=t(28453);const l={},s="Sweep Line Algorithm",a={},h=[{value:"Orthogonal Line Segment Intersection",id:"orthogonal-line-segment-intersection",level:2},{value:"Sweep-line algorithm (Sweep vertical line from left to right)",id:"sweep-line-algorithm-sweep-vertical-line-from-left-to-right",level:2},{value:"Sweep-line analysis",id:"sweep-line-analysis",level:2}];function c(e){const n={h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"sweep-line-algorithm",children:"Sweep Line Algorithm"})}),"\n",(0,o.jsx)(n.h2,{id:"orthogonal-line-segment-intersection",children:"Orthogonal Line Segment Intersection"}),"\n",(0,o.jsx)(n.p,{children:"Given N horizontal and vertical line segments, find all intersections"}),"\n",(0,o.jsx)(n.p,{children:"Na\xefve and brute-force algorithm - Check all pairs of line segments for intersection."}),"\n",(0,o.jsx)(n.p,{children:"Non degeneracy Assumption - All x- and y- coordinates are distinct"}),"\n",(0,o.jsx)(n.h2,{id:"sweep-line-algorithm-sweep-vertical-line-from-left-to-right",children:"Sweep-line algorithm (Sweep vertical line from left to right)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"x - coordinates define events."}),"\n",(0,o.jsx)(n.li,{children:"h-segment (left endpoint): insert y-coordinate into BST"}),"\n",(0,o.jsx)(n.li,{children:"h-segment (right endpoint): remove y-coordinate from BST"}),"\n",(0,o.jsx)(n.li,{children:"v-segment: 1 d range search for interval of y-endpoints"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image",src:t(220303).A+"",width:"1100",height:"491"})}),"\n",(0,o.jsx)(n.h2,{id:"sweep-line-analysis",children:"Sweep-line analysis"}),"\n",(0,o.jsx)(n.p,{children:"Proposition: The sweep-line algorithm takes time proportional to N log N + R to find all R intersections among N orthogonal line segments"}),"\n",(0,o.jsx)(n.p,{children:"Bottom line: Sweep line reduces 2d orthogonal line segment intersection search to 1d range search"})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},220303:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Sweep-Line-Algorithm-image1-ad1631e3a65a7ab90a4e435aae5c8cc7.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(296540);const o={},r=i.createContext(o);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);