"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[82582],{175448:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"databases/data-warehouses/clickhouse/virtual-columns","title":"Virtual Columns","description":"A virtual column is an integral table engine attribute that is defined in the engine source code.","source":"@site/docs/databases/data-warehouses/clickhouse/virtual-columns.md","sourceDirName":"databases/data-warehouses/clickhouse","slug":"/databases/data-warehouses/clickhouse/virtual-columns","permalink":"/databases/data-warehouses/clickhouse/virtual-columns","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/data-warehouses/clickhouse/virtual-columns.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1747376238000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Table Engines","permalink":"/databases/data-warehouses/clickhouse/table-engines"},"next":{"title":"Comparisons","permalink":"/databases/data-warehouses/comparisons"}}');var a=n(474848),i=n(28453);const r={},o="Virtual Columns",l={},c=[];function d(e){const s={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"virtual-columns",children:"Virtual Columns"})}),"\n",(0,a.jsx)(s.p,{children:"A virtual column is an integral table engine attribute that is defined in the engine source code."}),"\n",(0,a.jsxs)(s.p,{children:["You shouldn't specify virtual columns in the\xa0",(0,a.jsx)(s.code,{children:"CREATE TABLE"}),"\xa0query, and you can't see them in\xa0",(0,a.jsx)(s.code,{children:"SHOW CREATE TABLE"}),"\xa0and\xa0",(0,a.jsx)(s.code,{children:"DESCRIBE TABLE"}),"\xa0query results. Virtual columns are also read-only, so you can't insert data into virtual columns."]}),"\n",(0,a.jsxs)(s.p,{children:["To select data from a virtual column, you must specify its name in the\xa0",(0,a.jsx)(s.code,{children:"SELECT"}),"\xa0query.\xa0",(0,a.jsx)(s.code,{children:"SELECT *"}),"\xa0does not return values from virtual columns."]}),"\n",(0,a.jsx)(s.p,{children:"If you create a table with a column that has the same name as one of the table virtual columns, the virtual column becomes inaccessible. We do not recommend doing this. To help avoid conflicts, virtual column names are usually prefixed with an underscore."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_part"}),"\xa0\u2014 Name of a part."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_part_index"}),"\xa0\u2014 Sequential index of the part in the query result."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_part_starting_offset"}),"\xa0\u2014 Cumulative starting row of the part in the query result."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_part_offset"}),"\xa0\u2014 Number of row in the part."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_partition_id"}),"\xa0\u2014 Name of a partition."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_part_uuid"}),"\xa0\u2014 Unique part identifier (if enabled MergeTree setting\xa0",(0,a.jsx)(s.code,{children:"assign_part_uuids"}),")."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_part_data_version"}),"\xa0\u2014 Data version of part (either min block number or mutation version)."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_partition_value"}),"\xa0\u2014 Values (a tuple) of a\xa0",(0,a.jsx)(s.code,{children:"partition by"}),"\xa0expression."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_sample_factor"}),"\xa0\u2014 Sample factor (from the query)."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"_block_number"}),"\xa0\u2014 Block number of the row, it is persisted on merges when\xa0",(0,a.jsx)(s.code,{children:"allow_experimental_block_number_column"}),"\xa0is set to true."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"https://clickhouse.com/docs/engines/table-engines#table_engines-virtual_columns",children:"Table Engines | ClickHouse Docs"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"https://clickhouse.com/docs/engines/table-engines/mergetree-family/mergetree#virtual-columns",children:"MergeTree | ClickHouse Docs"})})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var t=n(296540);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);