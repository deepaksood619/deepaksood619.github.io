"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[73382],{770825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"algorithms/graphtheory/connected-components","title":"Connected Components","description":"Connected Components","source":"@site/docs/algorithms/graphtheory/connected-components.md","sourceDirName":"algorithms/graphtheory","slug":"/algorithms/graphtheory/connected-components","permalink":"/algorithms/graphtheory/connected-components","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/graphtheory/connected-components.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Breadth First Search (BFS)","permalink":"/algorithms/graphtheory/breadth-first-search-bfs"},"next":{"title":"Depth First Search (DFS)","permalink":"/algorithms/graphtheory/depth-first-search-dfs"}}');var o=t(474848),s=t(28453);const a={},r="Connected Components",c={},d=[{value:"Connected Components",id:"connected-components-1",level:2},{value:"Union-Find vs DFS",id:"union-find-vs-dfs",level:2},{value:"Static graph - DFS",id:"static-graph---dfs",level:2},{value:"Dynamic graph - Union-find",id:"dynamic-graph---union-find",level:2}];function h(e){const n={h1:"h1",h2:"h2",header:"header",img:"img",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connected-components",children:"Connected Components"})}),"\n",(0,o.jsx)(n.h2,{id:"connected-components-1",children:"Connected Components"}),"\n",(0,o.jsx)(n.p,{children:"Definition: Vertices v and w are connected if there is a path between them."}),"\n",(0,o.jsx)(n.p,{children:"Goal: Preprocess graph to answer queries of the form is v connected to w in constant time."}),"\n",(0,o.jsx)(n.p,{children:"Union-find: Does not answer in constant time"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image",src:t(37740).A+"",width:"1118",height:"736"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image",src:t(864187).A+"",width:"1022",height:"722"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image",src:t(744030).A+"",width:"1104",height:"728"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image",src:t(3269).A+"",width:"1040",height:"768"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"image",src:t(359304).A+"",width:"1048",height:"450"})}),"\n",(0,o.jsx)(n.h2,{id:"union-find-vs-dfs",children:"Union-Find vs DFS"}),"\n",(0,o.jsx)(n.p,{children:"The union-find algorithm is best suited for situations where the equivalence relationship is changing, i.e., there are \"Union\" operations which need to be performed on your set of partitions. Given a fixed undirected graph, you don't have the equivalence relationships changing at all - the edges are all fixed. OTOH, if you have a graph with new edges being added, DFS won't cut it. While DFS is asymptotically faster than union-find, in practice, the likely deciding factor would be the actual problem that you are trying to solve."}),"\n",(0,o.jsx)(n.h2,{id:"static-graph---dfs",children:"Static graph - DFS"}),"\n",(0,o.jsx)(n.h2,{id:"dynamic-graph---union-find",children:"Dynamic graph - Union-find"})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},37740:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Connected-Components-image1-5b2da3d689191a8a19dd137d8da5dabc.jpg"},864187:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Connected-Components-image2-960b607ba897555c8d5a18cc75bfc27b.jpg"},744030:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Connected-Components-image3-fc28d0acd8b2036360470e4610f8fab7.jpg"},3269:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Connected-Components-image4-8cbb9807c1c1383c060f4da4513b6c67.jpg"},359304:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Connected-Components-image5-853b0c8f26cf9b959f0d01453d13464a.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(296540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);