"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[85242],{835052:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"python/python-intro/strings","title":"Strings","description":"fstrings","source":"@site/docs/python/python-intro/strings.md","sourceDirName":"python/python-intro","slug":"/python/python-intro/strings","permalink":"/python/python-intro/strings","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/strings.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sorting","permalink":"/python/python-intro/sorting"},"next":{"title":"Time complexities","permalink":"/python/python-intro/time-complexities"}}');var s=t(474848),i=t(28453);const a={},d="Strings",l={},c=[{value:"fstrings",id:"fstrings",level:2},{value:"String Constants",id:"string-constants",level:2},{value:"Built-in String Methods",id:"built-in-string-methods",level:2},{value:"String Formating",id:"string-formating",level:2},{value:"Positional Formating (Positional Arguments)",id:"positional-formating-positional-arguments",level:3},{value:"Keyword Formating (Keyword Arguments)",id:"keyword-formating-keyword-arguments",level:3},{value:"Padding and aligning strings (default is left alignment)",id:"padding-and-aligning-strings-default-is-left-alignment",level:4},{value:"Truncating long strings",id:"truncating-long-strings",level:4},{value:"Combining truncating and padding",id:"combining-truncating-and-padding",level:4},{value:"Numbers",id:"numbers",level:4},{value:"Padding numbers",id:"padding-numbers",level:4},{value:"Signed numbers",id:"signed-numbers",level:4},{value:"Named placeholders",id:"named-placeholders",level:4},{value:"Getitem &amp; getattr",id:"getitem--getattr",level:4},{value:"Datetime",id:"datetime",level:4},{value:"Parametrized formats",id:"parametrized-formats",level:4},{value:"Print formats for other numbers",id:"print-formats-for-other-numbers",level:4},{value:"Passing parameters",id:"passing-parameters",level:4},{value:"Strings are immutable, but can be altered using following approaches",id:"strings-are-immutable-but-can-be-altered-using-following-approaches",level:4},{value:"Regex for finding sub_string inside string with overlapping",id:"regex-for-finding-sub_string-inside-string-with-overlapping",level:4},{value:"TextWrap",id:"textwrap",level:4},{value:"<code>dec=int(input(&quot;Enter a decimal number:&quot;))</code>",id:"decintinputenter-a-decimal-number",level:4},{value:"Ascii to number and vice versa",id:"ascii-to-number-and-vice-versa",level:4},{value:"Formatting string",id:"formatting-string",level:4},{value:"String slicing",id:"string-slicing",level:4},{value:"Stride",id:"stride",level:2},{value:"DocString",id:"docstring",level:4},{value:"Remove all punctuations from a given string",id:"remove-all-punctuations-from-a-given-string",level:4},{value:"Sluggify a string",id:"sluggify-a-string",level:2},{value:"def _slugify2(self, text)",id:"def-_slugify2self-text",level:2},{value:"return text",id:"return-text",level:2},{value:"References",id:"references",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"strings",children:"Strings"})}),"\n",(0,s.jsx)(n.h2,{id:"fstrings",children:"fstrings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# equal operator inside fstrings, from python3.8\nnum_value = 2\nprint(f"{num_value = }")\nprint(f"{num_value % 2 = }")\nnum_value = 2\nnum_value = 0\n\nnow = datetime.datetime.utcnow()\nprint(f\'{now=:Y-%m-%d}\')\n'})}),"\n",(0,s.jsx)(n.h2,{id:"string-constants",children:"String Constants"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"string.ascii_letters"}),"\n",(0,s.jsx)(n.li,{children:"string.ascii_lowercase"}),"\n",(0,s.jsx)(n.li,{children:"string.ascii_uppercase"}),"\n",(0,s.jsx)(n.li,{children:"string.digits"}),"\n",(0,s.jsx)(n.li,{children:"string.hexdigits"}),"\n",(0,s.jsx)(n.li,{children:"string.octdigits"}),"\n",(0,s.jsx)(n.li,{children:"string.punctuation"}),"\n",(0,s.jsx)(n.li,{children:"string.printable"}),"\n",(0,s.jsx)(n.li,{children:"string.whitespace"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-string-methods",children:"Built-in String Methods"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Sr.No."})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Methods with Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"capitalize()"})," - Capitalizes first letter of string"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"center(width, fillchar)"})," - Returns a space-padded string with the original string centered to a total of width columns."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"count(str, beg= 0,end=len(string))"})," - Counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"decode(encoding='UTF-8',errors='strict')"})," - Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"encode(encoding='UTF-8',errors='strict')"})," - Returns encoded string version of string; on error, default is to raise a ValueError unless errors is given with 'ignore' or 'replace'."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"endswith(suffix, beg=0, end=len(string))"})," - Determines if string or a substring of string (if starting index beg and ending index end are given) ends with suffix; returns true if so and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"7"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"expandtabs(tabsize=8)"})," - Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"8"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"find(str, beg=0 end=len(string))"})," - Determine if str occurs in string or in a substring of string if starting index beg and ending index end are given returns index if found and -1 otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"9"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"index(str, beg=0, end=len(string))"})," - Same as find(), but raises an exception if str not found."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"10"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isalnum()"})," - Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"11"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isalpha()"})," - Returns true if string has at least 1 character and all characters are alphabetic and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"12"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isdigit()"})," - Returns true if string contains only digits and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"13"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"islower()"})," - Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"14"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isnumeric()"})," - Returns true if a unicode string contains only numeric characters and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"15"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isspace()"})," - Returns true if string contains only whitespace characters and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"16"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"istitle()"}),' - Returns true if string is properly "titlecased" and false otherwise.']})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"17"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isupper()"})," - Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"18"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"join(seq)"})," - Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"19"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"len(string)"})," - Returns the length of the string"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ljust(width[, fillchar])"})," - Returns a space-padded string with the original string left-justified to a total of width columns."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"21"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"lower()"})," - Converts all uppercase letters in string to lowercase."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"22"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"lstrip()"})," - Removes all leading whitespace in string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"23"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"maketrans()"})," - Returns a translation table to be used in translate function."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"24"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"max(str)"})," - Returns the max alphabetical character from the string str."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"25"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"min(str)"})," - Returns the min alphabetical character from the string str."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"26"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"replace(old, new [, max])"})," - Replaces all occurrences of old in string with new or at most max occurrences if max given."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"27"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"rfind(str, beg=0,end=len(string))"})," - Same as find(), but search backwards in string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"28"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"rindex( str, beg=0, end=len(string))"})," - Same as index(), but search backwards in string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"29"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"rjust(width,[, fillchar])"})," - Returns a space-padded string with the original string right-justified to a total of width columns."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"30"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"rstrip()"})," - Removes all trailing whitespace of string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"31"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:'split(str="", num=string.count(str))'})," - Splits string according to delimiter str (space if not provided) and returns list of substrings; split into at most num substrings if given."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"32"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"splitlines( num=string.count('\\n'))"})," - Splits string at all (or num) NEWLINEs and returns a list of each line with NEWLINEs removed."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"33"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"startswith(str, beg=0,end=len(string))"})," - Determines if string or a substring of string (if starting index beg and ending index end are given) starts with substring str; returns true if so and false otherwise."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"34"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"strip([chars])"})," - Performs both lstrip() and rstrip() on string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"35"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"swapcase()"})," - Inverts case for all letters in string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"36"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"title()"}),' - Returns "titlecased" version of string, that is, all words begin with uppercase and the rest are lowercase.']})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"37"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:'translate(table, deletechars="")'})," - Translates string according to translation table str(256 chars), removing those in the del string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"38"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"upper()"})," - Converts lowercase letters in string to uppercase."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"39"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"zfill (width)"})," - Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"40"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"isdecimal()"})," - Returns true if a unicode string contains only decimal characters and false otherwise."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"string-formating",children:"String Formating"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{} {}'.format('one', 'two')\n\n'{} {}'.format(1, 2)\n\n'Hello {}'.format('Deepak')\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://pyformat.info",children:"https://pyformat.info"})}),"\n",(0,s.jsx)(n.h3,{id:"positional-formating-positional-arguments",children:"Positional Formating (Positional Arguments)"}),"\n",(0,s.jsx)(n.p,{children:"Also optional positional indexing (positional arguments) can be passed to strings' format"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"'{1} {0}'.format('one', 'two')"})}),"\n",(0,s.jsx)(n.h3,{id:"keyword-formating-keyword-arguments",children:"Keyword Formating (Keyword Arguments)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'print("Sammy the {0} {1} a {pr}.".format("shark", "made", pr = "pull request"))'})}),"\n",(0,s.jsx)(n.p,{children:"here pr is a named keyword argument"}),"\n",(0,s.jsx)(n.h4,{id:"padding-and-aligning-strings-default-is-left-alignment",children:"Padding and aligning strings (default is left alignment)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Align Left - '{:>10}'.format('test')\n            test\nAlign Right - '{:10}'.format('test')\n    test\nAlight left with custom padding character - '{:_<10}'.format('test')\n    test______\nCenter align - '{:^10}'.format('test')\n        test\n'{:^6}'.format('zip')  #When using center alignment where the length of the string leads to an uneven split of the padding characters the extra character will be placed on the right side\n        zip\n"})}),"\n",(0,s.jsx)(n.h4,{id:"truncating-long-strings",children:"Truncating long strings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:.5}'.format('xylophone')\nxylop\n"})}),"\n",(0,s.jsx)(n.h4,{id:"combining-truncating-and-padding",children:"Combining truncating and padding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:10.5}'.format('xylophone')\nxylop\n"})}),"\n",(0,s.jsx)(n.h4,{id:"numbers",children:"Numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:d}'.format(42)\n42\n'{:f}'.format(3.141592653589793)\n3.141593\n"})}),"\n",(0,s.jsx)(n.h4,{id:"padding-numbers",children:"Padding numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:4d}'.format(42)\n42\n'{:06.2f}'.format(3.141592653589793)\n003.14\nprint('{:.0f}'.format(x))\n"})}),"\n",(0,s.jsx)(n.p,{children:"For integer values providing a precision doesn't make much sense and is actually forbidden in the new style (it will result in a ValueError)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:04d}'.format(42)\n0042\n"})}),"\n",(0,s.jsx)(n.h4,{id:"signed-numbers",children:"Signed numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:+d}'.format(42)\n+42\n"})}),"\n",(0,s.jsx)(n.p,{children:"Use a space character to indicate that negative numbers should be prefixed with a minus symbol and a leading space should be used for positive ones."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{: d}'.format((- 23))\n-23\n\n'{: d}'.format(42)\n42\n\n'{:=5d}'.format((- 23))\n- 23\n\n'{:=+5d}'.format(23)\n- 23\n"})}),"\n",(0,s.jsx)(n.h4,{id:"named-placeholders",children:"Named placeholders"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"data = {'first': 'Hodor', 'last': 'Hodor!'}\n\n'{first} {last}'.format(**data)\nHodor Hodor!\n\n'{first} {last}'.format(first='Hodor', last='Hodor!')\nHodor Hodor!\n"})}),"\n",(0,s.jsx)(n.h4,{id:"getitem--getattr",children:"Getitem & getattr"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"person = {'first': 'Jean-Luc', 'last': 'Picard'}\n\n'{p[first]} {p[last]}'.format(p=person)\nJean-Luc Picard\n\ndata = [4, 8, 15, 16, 23, 42]\n\n'{d[4]} {d[5]}'.format(d=data)\n23 42\n"})}),"\n",(0,s.jsx)(n.h4,{id:"datetime",children:"Datetime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from datetime import datetime\n'{:%Y-%m-**%d** %H:%M}'.format(datetime(2001, 2, 3, 4, 5))\n2001-02-03 04:05\n"})}),"\n",(0,s.jsx)(n.h4,{id:"parametrized-formats",children:"Parametrized formats"}),"\n",(0,s.jsx)(n.p,{children:"Parametrized alignment and width"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:{align}{width}}'.format('test', align='^', width='10')\ntest\n"})}),"\n",(0,s.jsx)(n.p,{children:"Parametrized precision"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:.{prec}} = {:.{prec}f}'.format('Gibberish', 2.7182, prec=3)\nGib = 2.718\n"})}),"\n",(0,s.jsx)(n.p,{children:"Width and precision"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:{width}.{prec}f}'.format(2.7182, width=5, prec=2)\n2.72\n'{:{prec}} = {:{prec}}'.format('Gibberish', 2.7182, prec='.3')\nGib = 2.72\n"})}),"\n",(0,s.jsx)(n.p,{children:"datetime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from datetime import datetime\ndt = datetime(2001, 2, 3, 4, 5)\n'{:{dfmt} {tfmt}}'.format(dt, dfmt='%Y-%m-**%d**', tfmt='%H:%M')\n2001-02-03 04:05\n"})}),"\n",(0,s.jsx)(n.p,{children:"Positional arguments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:{}{}{}.{}}'.format(2.7182818284, '>', '+', 10, 3)\n+2.72\n"})}),"\n",(0,s.jsx)(n.p,{children:"Positional + keyword arguments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"'{:{}{sign}{}.{}}'.format(2.7182818284, '>', 10, 3, sign='+')\n+2.72\n"})}),"\n",(0,s.jsx)(n.h4,{id:"print-formats-for-other-numbers",children:"Print formats for other numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print('{0:d}'.format(5)) #decimal\nprint('{0:f}'.format(5)) #float\nprint('{0:b}'.format(5)) #binary\nprint('{0:x}'.format(15)) #hexadecimal\n"})}),"\n",(0,s.jsx)(n.h4,{id:"passing-parameters",children:"Passing parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'A = deepak\nB = sood\n"Hello %s %s!" %(A, B) [Should be passed as tuple for more than one arguments)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"strings-are-immutable-but-can-be-altered-using-following-approaches",children:"Strings are immutable, but can be altered using following approaches"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"One solution is to convert the string to a list and then change the value."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"string = \"abracadabra\"\nl = list(string)\nl[5] = 'k'\nstring = ''.join(l)\nprint string\nAbrackdabra\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Another approach is to slice the string and join it back."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'string = string[:5] + "k" + string[6:]\nprint string\nAbrackdabra\n'})}),"\n",(0,s.jsx)(n.h4,{id:"regex-for-finding-sub_string-inside-string-with-overlapping",children:"Regex for finding sub_string inside string with overlapping"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Matches = re.findall('(?='+sub_string+')', string)\nlen(Matches)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"textwrap",children:"TextWrap"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.python.org/2/library/textwrap.html#textwrap.wrap",children:"textwrap.wrap()"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"wrap()"})," function wraps a single paragraph in text (a string) so that every line is ",(0,s.jsx)(n.em,{children:"width"}),"characters long at most."]}),"\n",(0,s.jsx)(n.p,{children:"It returns a list of output lines."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import textwrap\nstring = \"This is a very very very very very long string.\"\nprint textwrap.wrap(string,8)\n['This is', 'a very', 'very', 'very', 'very', 'very', 'long', 'string.']\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.python.org/2/library/textwrap.html#textwrap.fill",children:"textwrap.fill()"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"fill()"})," function wraps a single paragraph in text and returns a single string containing the wrapped paragraph."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import textwrap\nstring = "This is a very very very very very long string."\nprint textwrap.fill(string,8)\nThis is\na very\nvery\nvery\nvery\nvery\nlong\nstring.\n'})}),"\n",(0,s.jsx)(n.h4,{id:"decintinputenter-a-decimal-number",children:(0,s.jsx)(n.code,{children:'dec=int(input("Enter a decimal number:"))'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'print(bin(dec),"inbinary.")\nprint(oct(dec),"inoctal.")\nprint(hex(dec),"inhexadecimal."\n'})}),"\n",(0,s.jsx)(n.h4,{id:"ascii-to-number-and-vice-versa",children:"Ascii to number and vice versa"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"ord('a')\n97\nchr(97)\n'a'\nchr(ord('a') + 3)\n'd'\n"})}),"\n",(0,s.jsx)(n.h4,{id:"formatting-string",children:"Formatting string"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def __repr__(self):\n    return f'Pizza({self.ingredients!r})'\n\nPizza(['cheese', 'tomatoes'])\nPizza(['cheese', 'tomatoes'])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is used to override ",(0,s.jsx)(n.strong,{children:"repr"})," that prints the object instance when printed"]}),"\n",(0,s.jsx)(n.h4,{id:"string-slicing",children:"String slicing"}),"\n",(0,s.jsxs)(n.p,{children:["Python also allows a form of indexing syntax that extracts substrings from a string, known as string slicing. Ifsis a string, an expression of the forms[m",":n","]returns the portion ofsstarting with positionm, and up to but not including positionn"]}),"\n",(0,s.jsx)(n.p,{children:"Omitting both indices returns the original string, in its entirety. Literally. It's not a copy, it's a reference to the original string"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"s[:] is s\nTrue\n"})}),"\n",(0,s.jsx)(n.p,{children:"Negative indices can be used with slicing as well.-1refers to the last character -2 the second-to-last, and so on, just as with simple indexing. The diagram below shows how to slice the substring'oob'from the string'foobar'using both positive and negative indices:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:t(430632).A+"",width:"1086",height:"366"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"s = 'foobar'\n\ns[-5:-2]\n'oob'\ns[1:4]\n'oob'\ns[-5:-2] == s[1:4]\nTrue\n\nstring = string[:-3] (removes last 3 digits from string)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"stride",children:"Stride"}),"\n",(0,s.jsxs)(n.p,{children:["Adding an additional",":and"," a third index designates a stride (also called a step), which indicates how many characters to jump after retrieving each character in the slice."]}),"\n",(0,s.jsx)(n.p,{children:"For example, for the string'foobar', the slice0:6:2starts with the first character and ends with the last character (the whole string), and every second character is skipped. This is shown in the following diagram:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:t(264855).A+"",width:"1086",height:"366"})}),"\n",(0,s.jsx)(n.p,{children:"Similarly,1:6:2specifies a slice starting with the second character (index1) and ending with the last character, and again the stride value2causes every other character to be skipped:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:t(854042).A+"",width:"1086",height:"366"})}),"\n",(0,s.jsx)(n.p,{children:"You can specify a negative stride value as well, in which case Python steps backward through the string. In that case, the starting/first index should be greater than the ending/second index:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"s = 'foobar'\ns[5:0:-2]\n'rbo'\n"})}),"\n",(0,s.jsx)(n.p,{children:'In the above example,5:0:-2means "start at the last character and step backward by2, up to but not including the first character."'}),"\n",(0,s.jsx)(n.p,{children:"When you are stepping backward, if the first and second indices are omitted, the defaults are reversed in an intuitive way: the first index defaults to the end of the string, and the second index defaults to the beginning. Here is an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"s = '12345' * 5\ns\n'1234512345123451234512345'\ns[::-5]\n'55555'\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is a common paradigm for reversing a string:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"s = 'If Comrade Napoleon says it, it must be right.'\ns[::-1]\n'.thgir eb tsum ti ,ti syas noelopaN edarmoC fI'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"What is the slice expression that gives every third character of strings, starting with the last character and proceeding backward to the first?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"s[::-3]"})}),"\n",(0,s.jsx)(n.h4,{id:"docstring",children:"DocString"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'r""" """'})}),"\n",(0,s.jsx)(n.p,{children:"r is used to create a raw string if there are special characters inside the docstring"}),"\n",(0,s.jsx)(n.h4,{id:"remove-all-punctuations-from-a-given-string",children:"Remove all punctuations from a given string"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Ex - document = document.translate(str.maketrans('','',string.punctuation))"})}),"\n",(0,s.jsx)(n.h2,{id:"sluggify-a-string",children:"Sluggify a string"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"translate_table = {ord(char): u'' **for** char **in** non_url_safe}\nnon_url_safe_regex = re.compile(\nr'[{}]'.format(''.join(re.escape(x) **for** x **in** non_url_safe)))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"def-_slugify2self-text",children:"def _slugify2(self, text)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"text = text.translate(self.translate_table)\ntext = u'_'.join(text.split())\n"})}),"\n",(0,s.jsx)(n.h2,{id:"return-text",children:"return text"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.peterbe.com/plog/fastest-python-function-to-slugify-a-string",children:"https://www.peterbe.com/plog/fastest-python-function-to-slugify-a-string"})}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.p,{children:"Python format specification mini language are used to format strings"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.python.org/3.6/library/string.html#format-specification-mini-language",children:"https://docs.python.org/3.6/library/string.html#format-specification-mini-language"})}),"\n",(0,s.jsx)(n.p,{children:"Python string formatters"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3",children:"https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://pyformat.info",children:"https://pyformat.info"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://realpython.com/python-encodings-guide",children:"https://realpython.com/python-encodings-guide"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},430632:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/Strings-image1-62cfc1bbcf06f8540d18034b253d21a4.jpg"},264855:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/Strings-image2-7fb4283aeea234d8ce789fe97921f8d0.jpg"},854042:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/Strings-image3-4533e7ab98e6da67b441b167fd05d4b0.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var r=t(296540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);