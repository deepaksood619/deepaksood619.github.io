"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[71608],{231667:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"languages/sql/ddl-data-definition-language/truncate-delete","title":"Truncate vs Delete","description":"| Truncate                                     | Delete                                                                                     |","source":"@site/docs/languages/sql/ddl-data-definition-language/truncate-delete.md","sourceDirName":"languages/sql/ddl-data-definition-language","slug":"/languages/sql/ddl-data-definition-language/truncate-delete","permalink":"/languages/sql/ddl-data-definition-language/truncate-delete","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/sql/ddl-data-definition-language/truncate-delete.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1739572825000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Create Table","permalink":"/languages/sql/ddl-data-definition-language/create-table"},"next":{"title":"DML - Data Manipulation Language","permalink":"/languages/sql/dml-data-manipulation-language"}}');var s=t(474848),i=t(28453);const r={},a="Truncate vs Delete",d={},c=[{value:"Truncate",id:"truncate",level:3},{value:"Delete",id:"delete",level:3},{value:"Reclaiming Space",id:"reclaiming-space",level:3},{value:"Delete Performance",id:"delete-performance",level:3},{value:"Huge Deletes",id:"huge-deletes",level:2},{value:"Batch Deletion",id:"batch-deletion",level:3},{value:"Using DELETE with LIMIT",id:"using-delete-with-limit",level:3},{value:"pt-archiver (Percona Toolkit)",id:"pt-archiver-percona-toolkit",level:3},{value:"Creating a New Table",id:"creating-a-new-table",level:3},{value:"Disable Foreign Key Checks",id:"disable-foreign-key-checks",level:3},{value:"Using Stored Procedures",id:"using-stored-procedures",level:3},{value:"Using a Temporary Table",id:"using-a-temporary-table",level:3},{value:"MySQL Event Scheduler",id:"mysql-event-scheduler",level:3},{value:"Others",id:"others",level:2},{value:"Does size of server matters",id:"does-size-of-server-matters",level:3}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"truncate-vs-delete",children:"Truncate vs Delete"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Truncate"}),(0,s.jsx)(n.th,{children:"Delete"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"We can't Rollback after performing Truncate."}),(0,s.jsx)(n.td,{children:"We can Rollback after delete."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Truncate reset identity of table."}),(0,s.jsx)(n.td,{children:"Delete does not reset identity of table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"It locks the entire table."}),(0,s.jsx)(n.td,{children:"It locks the table row."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Its DDL(Data Definition Language) command."}),(0,s.jsx)(n.td,{children:"Its DML(Data Manipulation Language) command"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"We can't use WHERE clause with it."}),(0,s.jsx)(n.td,{children:"We can use WHERE to filter data to delete."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Trigger is not fired while truncate."}),(0,s.jsx)(n.td,{children:"Trigger is fired."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Syntax - TRUNCATE TABLE table_name"}),(0,s.jsx)(n.td,{children:"Syntax - DELETE FROM table_name; DELETE FROM table_name WHERE example_column_id IN (1,2,3)"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"truncate",children:"Truncate"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TRUNCATE"})," is a DDL command which removes the contents of the table while leaving the structure in place. Removes all rows from the given table."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"truncate table marketing.emailcampaign\n\nBEGIN TRAN\nTRUNCATE TABLE tranTest\nSELECT * FROM tranTest\nROLLBACK\nSELECT * FROM tranTest\n"})}),"\n",(0,s.jsx)(n.p,{children:"Performance - 283,897,938 rows truncate - 56.239 sec"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html",title:"15.1.37 TRUNCATE TABLE Statement",children:(0,s.jsx)(n.code,{children:"TRUNCATE TABLE"})})," empties a table completely. It requires the ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop",children:(0,s.jsx)(n.code,{children:"DROP"})})," privilege. Logically, ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html",title:"15.1.37 TRUNCATE TABLE Statement",children:(0,s.jsx)(n.code,{children:"TRUNCATE TABLE"})})," is similar to a ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/delete.html",title:"15.2.2 DELETE Statement",children:(0,s.jsx)(n.code,{children:"DELETE"})})," statement that deletes all rows, or a sequence of ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/drop-table.html",title:"15.1.32 DROP TABLE Statement",children:(0,s.jsx)(n.code,{children:"DROP TABLE"})})," and ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/create-table.html",title:"15.1.20 CREATE TABLE Statement",children:(0,s.jsx)(n.code,{children:"CREATE TABLE"})})," statements."]}),"\n",(0,s.jsxs)(n.p,{children:["To achieve high performance, ",(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html",title:"15.1.37 TRUNCATE TABLE Statement",children:(0,s.jsx)(n.code,{children:"TRUNCATE TABLE"})})," bypasses the DML method of deleting data. Thus, it does not cause ",(0,s.jsx)(n.code,{children:"ON DELETE"})," triggers to fire, it cannot be performed for ",(0,s.jsx)(n.code,{children:"InnoDB"})," tables with parent-child foreign key relationships, and it cannot be rolled back like a DML operation. However, ",(0,s.jsx)(n.code,{children:"TRUNCATE TABLE"})," operations on tables that use an atomic DDL-supported storage engine are either fully committed or rolled back if the server halts during their operation."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html",children:"15.1.37 TRUNCATE TABLE Statement"})}),"\n",(0,s.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"DELETE"})," is a DML command which removes rows given a WHERE clause"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"delete from\n  marketing.emailcampaign\nwhere\n  month = 'January'\n\nBEGIN TRAN\nDELETE FROM tranTest\nSELECT * FROM tranTest\nROLLBACK\nSELECT * FROM tranTest\n\n\nALTER TABLE tablename AUTO_INCREMENT = 1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"reclaiming-space",children:"Reclaiming Space"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://mysql.rjweb.org/doc.php/summarytables",children:"Summary Tables in MySQL"})}),"\n",(0,s.jsx)(n.h3,{id:"delete-performance",children:"Delete Performance"}),"\n",(0,s.jsx)(n.p,{children:"With RDS MySQL Community 8.0.36 - db.m5.8xlarge"}),"\n",(0,s.jsx)(n.p,{children:"Isolation level - REPEATABLE-READ"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Selects are not blocked"}),"\n",(0,s.jsx)(n.li,{children:"ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction (for any update or delete in that range)"}),"\n",(0,s.jsx)(n.li,{children:"inserts are not blocked"}),"\n",(0,s.jsx)(n.li,{children:"delete for out or range is not blocked"}),"\n",(0,s.jsx)(n.li,{children:"If query cancelled, nothing is deleted, and everything is rolled back"}),"\n"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Rows Deleted"}),(0,s.jsx)(n.th,{children:"Time (sec)"}),(0,s.jsx)(n.th,{children:"Range"}),(0,s.jsx)(n.th,{children:"Difference"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"62,781"}),(0,s.jsx)(n.td,{children:"6.287"}),(0,s.jsx)(n.td,{children:"314,619,930"}),(0,s.jsx)(n.td,{children:"100,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"100,639"}),(0,s.jsx)(n.td,{children:"8.79"}),(0,s.jsx)(n.td,{children:"314,819,930"}),(0,s.jsx)(n.td,{children:"200,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"463,387"}),(0,s.jsx)(n.td,{children:"41.398"}),(0,s.jsx)(n.td,{children:"315,819,930"}),(0,s.jsx)(n.td,{children:"1,000,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1,031,886"}),(0,s.jsx)(n.td,{children:"99.035"}),(0,s.jsx)(n.td,{children:"317,919,930"}),(0,s.jsx)(n.td,{children:"2,000,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2,273,353"}),(0,s.jsx)(n.td,{children:"205.871"}),(0,s.jsx)(n.td,{children:"321,919,930"}),(0,s.jsx)(n.td,{children:"4,000,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"42,000,000"}),(0,s.jsx)(n.td,{children:"4096"}),(0,s.jsx)(n.td,{children:"391,919,930"}),(0,s.jsx)(n.td,{children:"70,000,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6,352,106"}),(0,s.jsx)(n.td,{children:"676.205"}),(0,s.jsx)(n.td,{children:"401,919,930"}),(0,s.jsx)(n.td,{children:"10,000,000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2,284,370"}),(0,s.jsx)(n.td,{children:"71.758"}),(0,s.jsx)(n.td,{children:"Total - 2568547"}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"huge-deletes",children:"Huge Deletes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MyISAM will lock the table during the entire operation, thereby nothing else can be done with the table."}),"\n",(0,s.jsx)(n.li,{children:"InnoDB won't lock the table, but it will chew up a lot of resources, leading to sluggishness."}),"\n",(0,s.jsx)(n.li,{children:"InnoDB has to write the undo information to its transaction logs; this significantly increases the I/O required."}),"\n",(0,s.jsx)(n.li,{children:"Replication, being asynchronous, will effectively be delayed (on Replicas) while the DELETE is running."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://mysql.rjweb.org/doc.php/deletebig",children:"MySQL Big DELETEs"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/1318972/deleting-millions-of-rows-in-mysql",children:"query optimization - Deleting millions of rows in MySQL - Stack Overflow"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://dba.stackexchange.com/questions/312404/mysql-rds-drop-formerly-huge-table-without-freezing-db",children:"MySQL RDS: Drop formerly huge table without freezing DB? - Database Administrators Stack Exchange"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://medium.com/sysco-labs/how-to-delete-100-million-rows-in-a-mysql-table-within-30-minutes-ba39065e5928",children:"How to delete 100 million rows in a MySQL table within 30 minutes? | by Sajeban Antonyrex | Sysco LABS Sri Lanka | Medium"})}),"\n",(0,s.jsx)(n.h3,{id:"batch-deletion",children:"Batch Deletion"}),"\n",(0,s.jsx)(n.p,{children:"Perform deletions in smaller batches to avoid long-running transactions and potential locks."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Example: Delete 10,000 rows at a time\nSET @batch_size = 10000;\n\nREPEAT\n  DELETE FROM your_table\n  WHERE condition\n  LIMIT @batch_size;\nUNTIL ROW_COUNT() = 0\nEND REPEAT;\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-delete-with-limit",children:"Using DELETE with LIMIT"}),"\n",(0,s.jsx)(n.p,{children:"This approach is similar to batch deletions but ensures that each batch is explicitly controlled."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Delete in batches of 10,000 rows\nDO\nBEGIN\n  DECLARE rows_affected INT DEFAULT 1;\n\n  WHILE rows_affected > 0 DO\n    DELETE FROM your_table\n    WHERE condition\n    LIMIT 10000;\n\n    SET rows_affected = ROW_COUNT();\n  END WHILE;\nEND;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pt-archiver-percona-toolkit",children:"pt-archiver (Percona Toolkit)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pt-archiver --source h=your_host,D=your_db,t=your_table --where "condition" --purge --limit 1000 --commit-each\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.percona.com/percona-toolkit/pt-archiver.html",children:"pt-archiver \u2014 Percona Toolkit Documentation"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-new-table",children:"Creating a New Table"}),"\n",(0,s.jsx)(n.p,{children:"Create a new table with only the rows you want to keep, then swap the tables."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE new_table AS\nSELECT * FROM your_table\nWHERE NOT condition;\n\nRENAME TABLE your_table TO old_table, new_table TO your_table;\n\nDROP TABLE old_table;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"disable-foreign-key-checks",children:"Disable Foreign Key Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SET FOREIGN_KEY_CHECKS = 0;\n\n-- Perform deletion operations\n\nSET FOREIGN_KEY_CHECKS = 1;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-stored-procedures",children:"Using Stored Procedures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DELIMITER $$\n\nCREATE PROCEDURE BatchDelete()\nBEGIN\n  DECLARE done INT DEFAULT 0;\n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;\n\n  REPEAT\n    DELETE FROM your_table\n    WHERE condition\n    LIMIT 10000;\n\n    IF ROW_COUNT() = 0 THEN\n      SET done = 1;\n    END IF;\n  UNTIL done END REPEAT;\nEND $$\n\nDELIMITER ;\n\nCALL BatchDelete();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-a-temporary-table",children:"Using a Temporary Table"}),"\n",(0,s.jsx)(n.p,{children:"Copy the rows to keep into a temporary table, truncate the original table, and then reinsert the rows."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TEMPORARY TABLE temp_table AS\nSELECT * FROM your_table\nWHERE NOT condition;\n\nTRUNCATE TABLE your_table;\n\nINSERT INTO your_table\nSELECT * FROM temp_table;\n\nDROP TEMPORARY TABLE temp_table;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mysql-event-scheduler",children:"MySQL Event Scheduler"}),"\n",(0,s.jsx)(n.p,{children:"Schedule batch deletions using the MySQL event scheduler."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE EVENT batch_delete\nON SCHEDULE EVERY 1 MINUTE\nDO\n  DELETE FROM your_table\n  WHERE condition\n  LIMIT 10000;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"others",children:"Others"}),"\n",(0,s.jsx)(n.h3,{id:"does-size-of-server-matters",children:"Does size of server matters"}),"\n",(0,s.jsx)(n.p,{children:"The beefiness of the server is not likely to matter."}),"\n",(0,s.jsx)(n.p,{children:"A big delete needs to"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Locate the rows to delete"}),"\n",(0,s.jsx)(n.li,{children:"Lock the rows -- to keep others from making a mess"}),"\n",(0,s.jsx)(n.li,{children:"Save a copy of each row that is being deleted (in case of crash/rollback)"}),"\n",(0,s.jsxs)(n.li,{children:["Update indexes (some of this is delayed until after the ",(0,s.jsx)(n.code,{children:"DELETE"})," completes)"]}),"\n",(0,s.jsxs)(n.li,{children:["Clean up the deleted rows (at ",(0,s.jsx)(n.code,{children:"COMMIT"})," time)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Performance issues:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MySQL does most of this in a single CPU -- so, more cores won't help"}),"\n",(0,s.jsx)(n.li,{children:"CPU speed is not the gating factor -- anyway, today's CPUs are only slightly faster than decade-old cpus."}),"\n",(0,s.jsx)(n.li,{children:"Disk speed matters -- but most machines use SSDs today"}),"\n",(0,s.jsxs)(n.li,{children:['Cloud services "provision" IOPs. This ',(0,s.jsx)(n.em,{children:"can"})," matter. (But let's try to diminish the number of IOPs ",(0,s.jsx)(n.em,{children:"needed"}),".)"]}),"\n",(0,s.jsx)(n.li,{children:"Disk size does not matter -- well, it does matter if you fill up disk with the old copies of the rows."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"That is, a more powerful server won't help much."}),"\n",(0,s.jsxs)(n.p,{children:["What ",(0,s.jsx)(n.em,{children:"can"})," help is to answer these questions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If most of the rows are to be deleted, there is a much faster way"}),"\n",(0,s.jsxs)(n.li,{children:['If the rows being deleted are "old" rows, plan ahead with ',(0,s.jsx)(n.code,{children:"PARTITIONing"}),". (This is viable ",(0,s.jsx)(n.em,{children:"only"})," if you can replace ",(0,s.jsx)(n.code,{children:"DELETE"})," with ",(0,s.jsx)(n.code,{children:"DROP PARTITION"}),".)"]}),"\n",(0,s.jsx)(n.li,{children:"If the above fail, are you deleting in batches? (A batch of about 1000 rows is nearly optimal. It will be several times as fast as one-at-a-time. And going above 1000 won't buy much, if any, performance.)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/65119586/can-a-powerful-machine-improve-performance-of-delete",children:"mysql - Can a powerful machine improve performance of DELETE? - Stack Overflow"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var l=t(296540);const s={},i=l.createContext(s);function r(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);