"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[82789],{837606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"computer-science/system-design/retries","title":"Retries","description":"Linear Backoff","source":"@site/docs/computer-science/system-design/retries.md","sourceDirName":"computer-science/system-design","slug":"/computer-science/system-design/retries","permalink":"/computer-science/system-design/retries","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/system-design/retries.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1734554726000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Reactive Microservices / Manifesto","permalink":"/computer-science/system-design/reactive-microservices-manifesto"},"next":{"title":"Serverless Architecture","permalink":"/computer-science/system-design/serverless-architecture"}}');var s=t(474848),r=t(28453);const a={},o="Retries",c={},l=[{value:"Linear Backoff",id:"linear-backoff",level:2},{value:"Linear Jitter Backoff",id:"linear-jitter-backoff",level:2},{value:"Exponential Backoff",id:"exponential-backoff",level:2},{value:"Exponential Jitter Backoff",id:"exponential-jitter-backoff",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"retries",children:"Retries"})}),"\n",(0,s.jsx)(n.h2,{id:"linear-backoff",children:"Linear Backoff"}),"\n",(0,s.jsx)(n.p,{children:"Linear backoff involves waiting for a progressively increasing fixed interval between retry attempts."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Advantages:"})," Simple to implement and understand."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Disadvantages:"}),' May not be ideal under high load or in high-concurrency environments as it could lead to resource contention or "retry storms".']}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"linear-jitter-backoff",children:"Linear Jitter Backoff"}),"\n",(0,s.jsx)(n.p,{children:'Linear jitter backoff modifies the linear backoff strategy by introducing randomness to the retry intervals. This strategy still increases the delay linearly but adds a random "jitter" to each interval.'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Advantages:"})," The randomness helps spread out the retry attempts over time, reducing the chance of synchronized retries across instances."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Disadvantages:"})," Although better than simple linear backoff, this strategy might still lead to potential issues with synchronized retries as the base interval increases only linearly."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"exponential-backoff",children:"Exponential Backoff"}),"\n",(0,s.jsx)(n.p,{children:"Exponential backoff involves increasing the delay between retries exponentially. The interval might start at 1 second, then increase to 2 seconds, 4 seconds, 8 seconds, and so on, typically up to a maximum delay. This approach is more aggressive in spacing out retries than linear backoff."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Advantages:"})," Significantly reduces the load on the system and the likelihood of collision or overlap in retry attempts, making it suitable for high-load environments."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Disadvantages:"})," In situations where a quick retry might resolve the issue, this approach can unnecessarily delay the resolution."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"exponential-jitter-backoff",children:"Exponential Jitter Backoff"}),"\n",(0,s.jsx)(n.p,{children:"Exponential jitter backoff combines exponential backoff with randomness. After each retry, the backoff interval is exponentially increased, and then a random jitter is applied. The jitter can be either additive (adding a random amount to the exponential delay) or multiplicative (multiplying the exponential delay by a random factor)."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Advantages:"})," Offers all the benefits of exponential backoff, with the added advantage of reducing retry collisions even further due to the introduction of jitter."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Disadvantages:"})," The randomness can sometimes result in longer than necessary delays, especially if the jitter is significant."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/",children:"Exponential Backoff And Jitter | AWS Architecture Blog"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"How we retry on failures",src:t(311709).A+"",width:"1000",height:"1189"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},311709:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Pasted image 20240529204631-c7a703a4a65e9e2cf5419a3ac8a3112c.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(296540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);