"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[37612],{374496:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>h,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"data-structures/hashtable/hash-tables","title":"Hash Tables","description":"hash tables, a data structure that achieves constant-time performance for core symbol table operations, provided that search keys are standard data types or simply defined.","source":"@site/docs/data-structures/hashtable/hash-tables.md","sourceDirName":"data-structures/hashtable","slug":"/data-structures/hashtable/hash-tables","permalink":"/data-structures/hashtable/hash-tables","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hashtable/hash-tables.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1732812944000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hash Functions","permalink":"/data-structures/hashtable/hash-functions"},"next":{"title":"Hashing Techniques","permalink":"/data-structures/hashtable/hashing-techniques"}}');var t=a(474848),i=a(28453);const l={},r="Hash Tables",h={},o=[{value:"Issues",id:"issues",level:2},{value:"Classic space-time tradeoff",id:"classic-space-time-tradeoff",level:2},{value:"Computing the hash function",id:"computing-the-hash-function",level:2},{value:"Modular Hashing",id:"modular-hashing",level:2},{value:"Uniform hashing assumption",id:"uniform-hashing-assumption",level:2},{value:"Collisions - Two distinct keys hashing to same index",id:"collisions---two-distinct-keys-hashing-to-same-index",level:2},{value:"Collision Resolution methods",id:"collision-resolution-methods",level:2},{value:"1. Separate Chaining symbol table",id:"1-separate-chaining-symbol-table",level:3},{value:"2. Linear Probing (Open addressing)",id:"2-linear-probing-open-addressing",level:3},{value:"Problems",id:"problems",level:2},{value:"Optimization",id:"optimization",level:2},{value:"Hash Table Context",id:"hash-table-context",level:2},{value:"Implementation",id:"implementation",level:2}];function d(e){const s={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"hash-tables",children:"Hash Tables"})}),"\n",(0,t.jsx)(s.p,{children:"hash tables, a data structure that achieves constant-time performance for core symbol table operations, provided that search keys are standard data types or simply defined."}),"\n",(0,t.jsx)(s.p,{children:"Hash tables utilize hashing to form a data structure."}),"\n",(0,t.jsx)(s.p,{children:"Hash tables use an associative method to store data by using what is known as a key-value lookup system. All that means is that, in a hash table, keys are mapped to unique values."}),"\n",(0,t.jsx)(s.p,{children:"This system of organizing data results in a very fast way to find data efficiently. This is because since each key is mapped to a unique value -- once we know a key then we can find the associated value instantly."}),"\n",(0,t.jsx)(s.p,{children:"Hash tables are extremely fast, having a time complexity that is in the order of O(1).\nA function that takes a key and reduces it to an integer (array index) to be mapped to an array."}),"\n",(0,t.jsx)(s.h2,{id:"issues",children:"Issues"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Computing the hash function"}),"\n",(0,t.jsx)(s.li,{children:"Equality test"}),"\n",(0,t.jsx)(s.li,{children:"Collision resolution: Algorithm and data structure to handle two keys that hash to the same array index"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"classic-space-time-tradeoff",children:"Classic space-time tradeoff"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"No space limitation: trivial has function with key as index"}),"\n",(0,t.jsx)(s.li,{children:"No time limitation: trivial collision resolution with sequential search"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"computing-the-hash-function",children:"Computing the hash function"}),"\n",(0,t.jsx)(s.p,{children:"Scramble the keys uniformly to produce a table index"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Efficiently computable"}),"\n",(0,t.jsx)(s.li,{children:"Each table index equally likely for each key"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"NOTE: Always try to use all the data for calculating hash (try to involve all the bits for computing the hash function)"})}),"\n",(0,t.jsx)(s.h2,{id:"modular-hashing",children:"Modular Hashing"}),"\n",(0,t.jsx)(s.p,{children:"Hash code - An int between -2^31 and 2^31 - 1"}),"\n",(0,t.jsx)(s.p,{children:"Hash function - An int between 0 to M-1 (for use as array index)"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"First convert from negative to positive and then use modulus to get it to the size."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:a(655056).A+"",width:"950",height:"176"})}),"\n",(0,t.jsx)(s.h2,{id:"uniform-hashing-assumption",children:"Uniform hashing assumption"}),"\n",(0,t.jsx)(s.p,{children:"Each key is equally likely to hash to an integer between 0 to M - 1."}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Bins and balls Model: Throw balls uniformly at random into M bins"}),"\n",(0,t.jsx)(s.li,{children:"Birthday problem: Expect two balls in the same bin after ~ sqrt(pie M / 2) tosses."}),"\n",(0,t.jsx)(s.li,{children:"Coupon collector problem: Expect every bin has >= 1 ball after ~ M ln M tosses."}),"\n",(0,t.jsx)(s.li,{children:"Load balancing: After M tosses, expect most loaded bin has theta(log M / log log M) balls."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"collisions---two-distinct-keys-hashing-to-same-index",children:"Collisions - Two distinct keys hashing to same index"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Birthday problem: can't avoid collisions unless you have a ridiculous (quadratic) amount of memory."}),"\n",(0,t.jsx)(s.li,{children:"Coupon collector + load balancing: collisions are evenly distributed"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"collision-resolution-methods",children:"Collision Resolution methods"}),"\n",(0,t.jsx)(s.h3,{id:"1-separate-chaining-symbol-table",children:"1. Separate Chaining symbol table"}),"\n",(0,t.jsx)(s.p,{children:"Use linked list for storing the values that hash to the same value."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:a(222431).A+"",width:"698",height:"649"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Easier to implement delete"}),"\n",(0,t.jsx)(s.li,{children:"Performance degrades gracefully"}),"\n",(0,t.jsx)(s.li,{children:"Clustering less sensitive to poorly-designed hash function"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"2-linear-probing-open-addressing",children:"2. Linear Probing (Open addressing)"}),"\n",(0,t.jsx)(s.p,{children:"When a new key collides, find next empty slot, and put it there"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:a(30722).A+"",width:"999",height:"605"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Less wasted space"}),"\n",(0,t.jsx)(s.li,{children:"Better cache performance"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:a(115953).A+"",width:"999",height:"629"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:a(144148).A+"",width:"999",height:"783"})}),"\n",(0,t.jsx)(s.h2,{id:"problems",children:"Problems"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Clustering"}),"\n",(0,t.jsx)(s.li,{children:"Hash functions are often publically available (like java) so if some client has implemented back-end in java, then an adversary can send some data that can make the Hashing perform poorly and can make the system crash"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"optimization",children:"Optimization"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Create a bigger hash table when older hash table gets full and rehash all old values to new hash table"}),"\n",(0,t.jsx)(s.li,{children:"Can use Consistent Hashing Functions"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"hash-table-context",children:"Hash Table Context"}),"\n",(0,t.jsx)(s.p,{children:'One-way hash function - "Hard" to find a key that will hash to a desired value (or two keys that hash to same value)'}),"\n",(0,t.jsx)(s.p,{children:"Ex - MD4, MD5, SHA-0, SHA-1, SHA-2, WHIRLPOOL, RIPEMD-160"}),"\n",(0,t.jsx)(s.p,{children:"Applications - Digital fingerprint, message digest, storing passwords.\nHash tables vs. balanced search trees"}),"\n",(0,t.jsx)(s.p,{children:"Hash tables"}),"\n",(0,t.jsxs)(s.p,{children:["\u30fbSimpler to code.\n\u30fbNo effective alternative for unordered keys.\n\u30fbFaster for simple keys (a few arithmetic ops versus log ",(0,t.jsx)(s.em,{children:"N"})," compares).\n\u30fbBetter system support in Java for strings (e.g., cached hash code)."]}),"\n",(0,t.jsx)(s.p,{children:"Balanced search trees"}),"\n",(0,t.jsx)(s.p,{children:"\u30fbStronger performance guarantee.\n\u30fbSupport for ordered ST operations.\n\u30fbEasier to implement compareTo() correctly than equals() and hashCode()."}),"\n",(0,t.jsx)(s.p,{children:"Java system includes both"}),"\n",(0,t.jsx)(s.p,{children:"\u30fbRed-black BSTs: java.util.TreeMap, java.util.TreeSet.\n\u30fbHash tables: java.util.HashMap, java.util.IdentityHashMap."}),"\n",(0,t.jsx)(s.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(s.p,{children:"All java classes inherit a method hashCode(), which returns a 32 bit int"}),"\n",(0,t.jsx)(s.p,{children:"Integer - return value"}),"\n",(0,t.jsx)(s.p,{children:"Double - convert 64 bit to 32 bit by XOR(^) MSB 32 bot LSB 32"}),"\n",(0,t.jsx)(s.p,{children:"Boolean - return fixed numbers"}),"\n",(0,t.jsx)(s.p,{children:"Strings - Use Horner's method to hash string and cache the hash value in an instance variable for better performance, since strings are immutable"}),"\n",(0,t.jsx)(s.p,{children:"User-defined types - Include all method variables in the hash code evaluation. Use hashCode implementation for each data type with some small prime number and multiply by 31"}),"\n",(0,t.jsxs)(s.p,{children:["\u30fbCombine each significant field using the 31",(0,t.jsx)(s.em,{children:"x"})," + ",(0,t.jsx)(s.em,{children:"y"})," rule.\n\u30fbIf field is a primitive type, use wrapper type hashCode().\n\u30fbIf field is null, return 0.\n\u30fbIf field is a reference type, use hashCode().\n\u30fbIf field is an array, apply to each entry. or use Arrays.deepHashCode()"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"http://blog.chapagain.com.np/hash-table-implementation-in-python-data-structures-algorithms",children:"http://blog.chapagain.com.np/hash-table-implementation-in-python-data-structures-algorithms"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://www.youtube.com/watch?v=kuxBOGB_FlM",children:"Faster than Rust and C++ : the PERFECT Hash Table - YouTube"})})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},655056:(e,s,a)=>{a.d(s,{A:()=>n});const n=a.p+"assets/images/Hash-Tables-image1-e87f5ac71a1bbce976fb425990ab2c37.jpg"},222431:(e,s,a)=>{a.d(s,{A:()=>n});const n=a.p+"assets/images/Hash-Tables-image2-6de332f9c79bb6d19992de20aa0af41d.jpg"},30722:(e,s,a)=>{a.d(s,{A:()=>n});const n=a.p+"assets/images/Hash-Tables-image3-2ffeb976ceb615ad410fbfea941eec50.jpg"},115953:(e,s,a)=>{a.d(s,{A:()=>n});const n=a.p+"assets/images/Hash-Tables-image4-cf8b3f3cb96a047c29d56907694b8c5d.jpg"},144148:(e,s,a)=>{a.d(s,{A:()=>n});const n=a.p+"assets/images/Hash-Tables-image5-5ac57b8cb869cac8bcf0cf2bc65b02b0.jpg"},28453:(e,s,a)=>{a.d(s,{R:()=>l,x:()=>r});var n=a(296540);const t={},i=n.createContext(t);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);