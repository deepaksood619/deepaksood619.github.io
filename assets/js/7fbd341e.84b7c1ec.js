"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[84567],{933627:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var s=t(785893),a=t(511151);const i={},o="Classes",r={id:"python/python-intro/classes",title:"Classes",description:"Creating a class",source:"@site/docs/python/python-intro/classes.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/classes",permalink:"/python/python-intro/classes",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/classes.md",tags:[],version:"current",lastUpdatedAt:1678191863,formattedLastUpdatedAt:"Mar 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic",permalink:"/python/python-intro/basic"},next:{title:"Data Structure",permalink:"/python/python-intro/data-structure/"}},c={},l=[{value:"Creating a class",id:"creating-a-class",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Namespacing",id:"namespacing",level:2},{value:"Modules and attributes",id:"modules-and-attributes",level:2},{value:"Advanced",id:"advanced",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-class",children:"Creating a class"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Dog():\n    """Represent a dog."""\n\n    def __init__(self, name):\n        """Initialize dog object."""\n        self.name = name\n\n    def sit(self):\n        """Simulate sitting."""\n        print(self.name + \' is sitting.")\n\nmy_dog = Dog(\'Tommy\')\nprint(my_dog.name + \' is a great dog!\')\nmy_dog.sit()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class SDog(Dog):\n    """Represent a search dog."""\n\n    def __init__(self, name):\n        """Initialize the search dog."""\n        super().__init__(name)\n\n    def search(self):\n        """Simulate searching."""\n        print(self.name + \' is searching.\')\n\nmy_dog = SDog(\'Lucy\')\n\nprint(my_dog.name + \' is a search dog.\')\nmy_dog.sit()\nmy_dog.search()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"namespacing",children:"Namespacing"}),"\n",(0,s.jsx)(n.p,{children:"A namespace is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries."}),"\n",(0,s.jsx)(n.p,{children:"Example of namespaces:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The set of built-in names (such as abs(), and built-in exception names)"}),"\n",(0,s.jsx)(n.li,{children:"The global name in a module"}),"\n",(0,s.jsx)(n.li,{children:"Local names in a function invocation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"modules-and-attributes",children:"Modules and attributes"}),"\n",(0,s.jsx)(n.p,{children:"Ex - modname.funcname, modname is a module object and funcname is an attribute of it."}),"\n",(0,s.jsx)(n.p,{children:"Objects are Python's abstraction for data. All data in a Python program is represented by objects or by relations between objects."}),"\n",(0,s.jsx)(n.p,{children:"Every object has an identity, a type and a value. An object's identity never changes once it has been created; you may think of it as the object's address in memory."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3.2/reference/expressions.html#is",children:"is"})," operator compares the identity of two objects;"]}),"\n",(0,s.jsxs)(n.p,{children:["the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3.2/library/functions.html#id",children:"id()"})," function returns an integer representing its identity (currently implemented as its address). An object'stypeis also unchangeable."]}),"\n",(0,s.jsx)(n.p,{children:"An object's mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable."}),"\n",(0,s.jsx)(n.p,{children:"Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. An implementation is allowed to postpone garbage collection or omit it altogether - it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable."}),"\n",(0,s.jsx)(n.h2,{id:"advanced",children:"Advanced"}),"\n",(0,s.jsxs)(n.p,{children:["One can use ",(0,s.jsx)(n.code,{children:"Collections.namedtuple"})," instead of classes"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},511151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(667294);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);