"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[96779],{378451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"cloud/others/gcp-bigquery-big-query","title":"GCP BigQuery / Big Query","description":"Architecture","source":"@site/docs/cloud/others/gcp-bigquery-big-query.md","sourceDirName":"cloud/others","slug":"/cloud/others/gcp-bigquery-big-query","permalink":"/cloud/others/gcp-bigquery-big-query","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/cloud/others/gcp-bigquery-big-query.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1726144090000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GCP Anthos","permalink":"/cloud/others/gcp-anthos"},"next":{"title":"GCP / Google Cloud Platform","permalink":"/cloud/others/gcp-google-cloud-platform"}}');var i=n(474848),o=n(28453);const a={},s="GCP BigQuery / Big Query",l={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Separation of Compute and State",id:"separation-of-compute-and-state",level:2},{value:"Commands",id:"commands",level:2},{value:"Google Cloud Dataflow",id:"google-cloud-dataflow",level:2},{value:"Pricing",id:"pricing",level:2},{value:"Others",id:"others",level:2},{value:"References",id:"references",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"gcp-bigquery--big-query",children:"GCP BigQuery / Big Query"})}),"\n",(0,i.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Dremel - The execution engine"}),"\n",(0,i.jsx)(t.li,{children:"Colossus - Distributed Storage"}),"\n",(0,i.jsx)(t.li,{children:"Borg - Compute"}),"\n",(0,i.jsx)(t.li,{children:"Jupiter - The Network"}),"\n",(0,i.jsx)(t.li,{children:"BigQuery - The Service"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"image",src:n(500264).A+"",width:"500",height:"381"})}),"\n",(0,i.jsx)(t.h2,{id:"separation-of-compute-and-state",children:"Separation of Compute and State"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"Separation of compute and state"})," refers to the ability to maintain intermediate state between processing stages in a high-performance component separate from either the compute cluster or storage."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Less state in compute means compute becomes more ephemeral and scalable. It's easier to re-parallelize processing intra-stage and interstage, and easier to recover from a lost node."}),"\n",(0,i.jsx)(t.li,{children:"Processing is more streamlined; processing stages don't conflict within the same compute nodes, resulting in resource contention and bottlenecks."}),"\n",(0,i.jsx)(t.li,{children:"It's easier for the processing engine to re-partition workloads between stages."}),"\n",(0,i.jsx)(t.li,{children:"Your processing engine can take advantage of pipelined execution. In other words, it doesn't have to wait for Stage N to finish before starting Stage N+1."}),"\n",(0,i.jsx)(t.li,{children:"The processing engine can implement dynamic work repartitioning (the ability to re-parallelize work due to slow workers or data skew)."}),"\n",(0,i.jsx)(t.li,{children:"Keeping less state in processing nodes makes workloads more resilient to individual node issues."}),"\n",(0,i.jsx)(t.li,{children:"The service can utilize available resources much more efficiently across compute as well as shuffle."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://cloud.google.com/blog/products/gcp/separation-of-compute-and-state-in-google-bigquery-and-cloud-dataflow-and-why-it-matters",children:"https://cloud.google.com/blog/products/gcp/separation-of-compute-and-state-in-google-bigquery-and-cloud-dataflow-and-why-it-matters"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://cloud.google.com/blog/products/gcp/bigquery-under-the-hood",children:"https://cloud.google.com/blog/products/gcp/bigquery-under-the-hood"})}),"\n",(0,i.jsx)(t.h2,{id:"commands",children:"Commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from google.cloud import bigquery\nclient = bigquery.Client()\ndataset_ref = client.dataset("hacker_news", project="bigquery-public-data")\ndataset_ref = client.dataset("chicago_crime", project="bigquery-public-data")\ndataset = client.get_dataset(dataset_ref)\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"-- standardSQL\nSELECT\n    departure_airport,\n    arrival_airport,\n    COUNT(1) AS num_flights\nFROM\n    `bigquery-samples.airline_ontime_data.flights`\nGROUP BY\n    departure_airport,\n    arrival_airport\nORDER BY\n    num_flights DESC\nLIMIT\n    10\n\n-- standardSQL\nSELECT\n    departure_delay,\n    COUNT(1) AS num_flights,\n    APPROX_QUANTILES(arrival_delay, 5) AS arrival_delay_quantiles\nFROM\n    `bigquery-samples.airline_ontime_data.flights`\nGROUP BY\n    departure_delay\nHAVING\n    num_flights > 100\nORDER BY\n    departure_delay ASC\n"})}),"\n",(0,i.jsx)(t.h2,{id:"google-cloud-dataflow",children:"Google Cloud Dataflow"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Dataflow is a unified programming model and a managed service for developing and executing a wide range of data processing patterns including ETL, batch computation, and continuous computation."}),"\n",(0,i.jsx)(t.li,{children:"The Dataflow model combines batch and stream processing so developers don't have to make tradeoffs between correctness, cost, and processing time."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"pricing",children:"Pricing"}),"\n",(0,i.jsx)(t.p,{children:"Queries (on-demand) - $6.25 per TiB - The first 1 TiB per month is free."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://cloud.google.com/bigquery/pricing",children:"Pricing \xa0|\xa0 BigQuery: Cloud Data Warehouse \xa0|\xa0 Google Cloud"})}),"\n",(0,i.jsx)(t.h2,{id:"others",children:"Others"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"BigQuery"}),"\xa0should not be used if you expect OLTP behavior or performance."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/courses/machine_learning/deepdive/02_generalization/repeatable_splitting.ipynb",children:"https://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/courses/machine_learning/deepdive/02_generalization/repeatable_splitting.ipynb"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/GoogleCloudPlatform/training-data-analyst",children:"https://github.com/GoogleCloudPlatform/training-data-analyst"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://stackoverflow.com/questions/69463609/speed-of-inserting-to-bigquery-should-this-be-batched-in-background",children:"php - Speed of inserting to BigQuery - should this be batched in background? - Stack Overflow"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},500264:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/Cloud-Others-BigQuery-Big-Query-image1-e263fab864de760ef02b413099e59b9e.jpg"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(296540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);