"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[97519],{531626:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>i});const d=JSON.parse('{"id":"python/others/flask/flask-sqlalchemy","title":"Flask-sqlalchemy","description":"https://github.com/pallets/flask-sqlalchemy","source":"@site/docs/python/others/flask/flask-sqlalchemy.md","sourceDirName":"python/others/flask","slug":"/python/others/flask/flask-sqlalchemy","permalink":"/python/others/flask/flask-sqlalchemy","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/others/flask/flask-sqlalchemy.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Documentation","permalink":"/python/others/flask/documentation"},"next":{"title":"Others","permalink":"/python/others/flask/others"}}');var t=r(474848),s=r(28453);const o={},a="Flask-sqlalchemy",l={},i=[{value:"Why Flask-sqlalchemy",id:"why-flask-sqlalchemy",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"flask-sqlalchemy",children:"Flask-sqlalchemy"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/pallets/flask-sqlalchemy",children:"https://github.com/pallets/flask-sqlalchemy"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://courses.prettyprinted.com/courses/1016334/lectures/21156810",children:"https://courses.prettyprinted.com/courses/1016334/lectures/21156810"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4",children:(0,t.jsx)(n.strong,{children:"https://towardsdatascience.com/use-flask-and-sqlalchemy-not-flask-sqlalchemy-5a64fafe22a4"})})}),"\n",(0,t.jsx)(n.h2,{id:"why-flask-sqlalchemy",children:"Why Flask-sqlalchemy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Code Representation of database"}),"\n",(0,t.jsx)(n.li,{children:"Database Agnostic"}),"\n",(0,t.jsx)(n.li,{children:"Write code in python"}),"\n",(0,t.jsx)(n.li,{children:"Integrates with Flask"}),"\n",(0,t.jsx)(n.li,{children:"Automatically syncs"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ORM"}),"\n",(0,t.jsx)(n.li,{children:"Model"}),"\n",(0,t.jsx)(n.li,{children:"Objects"}),"\n",(0,t.jsx)(n.li,{children:"Query API"}),"\n",(0,t.jsx)(n.li,{children:"Connection String"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom datetime import datetime, timedelta\nfrom faker import Faker\n\nimport random\n\nfake = Faker()\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n#db.init_app(app)\n\nclass Customer(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    first_name = db.Column(db.String(50), nullable=False)\n    last_name = db.Column(db.String(50), nullable=False)\n    address = db.Column(db.String(500), nullable=False)\n    city = db.Column(db.String(50), nullable=False)\n    postcode = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(50), nullable=False, unique=True)\n\n    orders = db.relationship('Order', backref='customer')\n\n# Association Table (for many to many relationship)\n# Multiple primary key means that it is a composite primary key, combination of both keys should be unique\norder_product = db.Table('order_product',\n    db.Column('order_id', db.Integer, db.ForeignKey('order.id'), primary_key=True),\n    db.Column('product_id', db.Integer, db.ForeignKey('product.id'), primary_key=True)\n)\n\nclass Order(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    order_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    shipped_date = db.Column(db.DateTime)\n    delivered_date = db.Column(db.DateTime)\n    coupon_code = db.Column(db.String(50))\n    customer_id = db.Column(db.Integer, db.ForeignKey('customer.id'), nullable=False)\n\n    products = db.relationship('Product', secondary=order_product)\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), nullable=False, unique=True)\n    price = db.Column(db.Integer, nullable=False)\n\ndef add_customers():\n    for _ in range(100):\n        customer = Customer(\n            first_name=fake.first_name(),\n            last_name=fake.last_name(),\n            address=fake.street_address(),\n            city=fake.city(),\n            postcode=fake.postcode(),\n            email=fake.email()\n        )\n        db.session.add(customer)\n    db.session.commit()\n\ndef add_orders():\n    customers = Customer.query.all()\n\n    for _ in range(1000):\n        #choose a random customer\n        customer = random.choice(customers)\n\n        ordered_date = fake.date_time_this_year()\n        shipped_date = random.choices([None, fake.date_time_between(start_date=ordered_date)], [10, 90])[0]\n\n        #choose either random None or random date for delivered and shipped\n        delivered_date = None\n        if shipped_date:\n            delivered_date = random.choices([None, fake.date_time_between(start_date=shipped_date)], [50, 50])[0]\n\n        #choose either random None or one of three coupon codes\n        coupon_code = random.choices([None, '50OFF', 'FREESHIPPING', 'BUYONEGETONE'], [80, 5, 5, 5])[0]\n\n        order = Order(\n            customer_id=customer.id,\n            order_date=ordered_date,\n            shipped_date=shipped_date,\n            delivered_date=delivered_date,\n            coupon_code=coupon_code\n        )\n\n        db.session.add(order)\n    db.session.commit()\n\ndef add_products():\n    for _ in range(10):\n        product = Product(\n            name=fake.color_name(),\n            price=random.randint(10,100)\n        )\n        db.session.add(product)\n    db.session.commit()\n\ndef add_order_products():\n    orders = Order.query.all()\n    products = Product.query.all()\n\n    for order in orders:\n        #select random k\n        k = random.randint(1, 3)\n        # select random products\n        purchased_products = random.sample(products, k)\n        order.products.extend(purchased_products)\n\n    db.session.commit()\n\ndef create_random_data():\n    db.create_all()\n    add_customers()\n    add_orders()\n    add_products()\n    add_order_products()\n\ndef get_orders_by(customer_id=1):\n    print('Get Orders by Customer')\n    customer_orders = Order.query.filter_by(customer_id=customer_id).all()\n    for order in customer_orders:\n        print(order.order_date)\n\ndef get_pending_orders():\n    print('Pending Orders')\n    pending_orders = Order.query.filter(Order.shipped_date.is_(None)).order_by(Order.order_date.desc()).all()\n    for order in pending_orders:\n        print(order.order_date)\n\ndef how_many_customers():\n    print('How many customers?')\n    print(Customer.query.count())\n\ndef orders_with_code():\n    print('Orders with coupon code')\n    orders = Order.query.filter(Order.coupon_code.isnot(None)).filter(Order.coupon_code != 'FREESHIPPING').all()\n    for order in orders:\n        print(order.coupon_code)\n\ndef revenue_in_last_x_days(x_days=30):\n    print('Revenue past x days')\n    print(db.session\n        .query(db.func.sum(Product.price))\n        .join(order_product).join(Order)\n        .filter(Order.order_date > (datetime.now() - timedelta(days=x_days))\n        ).scalar()\n    )\n\ndef average_fulfillment_time():\n    print('Average fulfillment time')\n    print(\n        db.session.query(\n            db.func.time(\n                db.func.avg(\n                    db.func.strftime('%s', Order.shipped_date) - db.func.strftime('%s', Order.order_date)\n                ),\n                'unixepoch'\n            )\n        ).filter(Order.shipped_date.isnot(None)).scalar()\n    )\n\ndef get_customers_who_have_purchased_x_dollars(amount=500):\n    print('All customers who have purchased x dollars')\n    customers = db.session.query(Customer).join(Order).join(order_product).join(Product).group_by(Customer).having(db.func.sum(Product.price) > amount).all()\n    for customer in customers:\n        print(customer.first_name)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var d=r(296540);const t={},s=d.createContext(t);function o(e){const n=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);