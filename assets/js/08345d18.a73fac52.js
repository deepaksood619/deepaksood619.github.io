"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[95390],{201621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"languages/c++/io","title":"IO","description":"Char input","source":"@site/docs/languages/c++/io.md","sourceDirName":"languages/c++","slug":"/languages/c++/io","permalink":"/languages/c++/io","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/c++/io.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/languages/c++/intro"},"next":{"title":"Others","permalink":"/languages/c++/others"}}');var a=n(474848),i=n(28453);const o={},r="IO",c={},d=[{value:"Char input",id:"char-input",level:2},{value:"Template Fast IO",id:"template-fast-io",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"io",children:"IO"})}),"\n",(0,a.jsx)(t.h2,{id:"char-input",children:"Char input"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-c++",children:'char name [10];\n\nscanf("%d %s", &type, name);\n'})}),"\n",(0,a.jsx)(t.p,{children:"In case of a string (character array), the variable itself points to the first element of the array in question. Thus, there is no need to use the '&' operator to pass the address."}),"\n",(0,a.jsx)(t.h2,{id:"template-fast-io",children:"Template Fast IO"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-c++",children:'#include <iostream>\n#include <cstring>\n\n// #include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n ios_base::sync_with_stdio(false);\n cin.tie(NULL);\n cout << "\\n";\n return 0;\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"ios_base::sync_with_stdio(false);"}),"\nIt toggles on or off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding ios_base::sync_with_stdio (false); (which is true by default) before any I/O operation avoids this synchronization. It is a static member of function of std::ios_base."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"cin.tie(NULL);"}),"\ntie() is a method which simply guarantees the flushing of std::cout before std::cin accepts an input. This is useful for interactive console programs which require the console to be updated constantly but also slows down the program for large I/O. The NULL part just returns a NULL pointer."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(296540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);