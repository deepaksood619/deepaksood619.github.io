"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[77014],{419604:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"languages/others/erlang","title":"Erlang","description":"Erlang is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony and instant messaging. Erlang\'s runtime system has built-in support for concurrency, distribution and fault tolerance.","source":"@site/docs/languages/others/erlang.md","sourceDirName":"languages/others","slug":"/languages/others/erlang","permalink":"/languages/others/erlang","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/others/erlang.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707138374000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Other Languages","permalink":"/languages/others/"},"next":{"title":"General","permalink":"/languages/others/general"}}');var a=n(474848),i=n(28453);const t={},l="Erlang",o={},c=[{value:"OTP",id:"otp",level:2},{value:"Sequential Programming",id:"sequential-programming",level:2},{value:"Concurrent Programming",id:"concurrent-programming",level:2},{value:"ETS (Erlang Term Storage)",id:"ets-erlang-term-storage",level:2},{value:"References",id:"references",level:2}];function g(e){const r={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"erlang",children:"Erlang"})}),"\n",(0,a.jsx)(r.p,{children:"Erlang is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony and instant messaging. Erlang's runtime system has built-in support for concurrency, distribution and fault tolerance."}),"\n",(0,a.jsx)(r.h2,{id:"otp",children:"OTP"}),"\n",(0,a.jsx)(r.p,{children:"OTP is set of Erlang libraries and design principles providing middle-ware to develop these systems. It includes its own distributed database, applications to interface towards other languages, debugging and release handling tools."}),"\n",(0,a.jsx)(r.h2,{id:"sequential-programming",children:"Sequential Programming"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#numbers",children:"Numbers"}),".","\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#integers",children:"Integers"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#floats",children:"Floats"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#atoms",children:"Atoms"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#tuples",children:"Tuples"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#lists",children:"Lists"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#variables",children:"Variables"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#complex",children:"Complex Data Structures"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#patterns",children:"Pattern Matching"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#functions",children:"Function Calls"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#modules",children:"The Module Systems"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#starting",children:"Starting the system"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#bifs",children:"Built in Functions (BIFs)"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#funcsyntax",children:"Function syntax"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#evaluation",children:"An example of function evaluation"})}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#guardedfuncs",children:"Guarded function clauses"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#guardexample",children:"Examples of Guards"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#listtrav",children:"Traversing Lists"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#listacc",children:"Lists and Accumulators"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#shell",children:"Shell commands"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#specialfuncs",children:"Special Functions"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/sequential-programming#specialforms",children:"Special Forms"})}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"concurrent-programming",children:"Concurrent Programming"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#defs",children:"Definitions"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#newproc",children:"Creating a new process"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#messages",children:"Simple message passing"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#echo",children:"An Echo Process"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#select",children:"Selective Message Reception"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#selectany",children:"Selection of Any Message"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#telephone",children:"A Telephony Example"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#pidmsg",children:"Pids can be sent in messages"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#registered",children:"Registered Processes"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#clientserver",children:"The Client Server Model"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course/concurrent-programming#timeouts",children:"Timeouts"})}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"ets-erlang-term-storage",children:"ETS (Erlang Term Storage)"}),"\n",(0,a.jsx)(r.p,{children:"Erlang Term Storage, commonly referred to as ETS, is a powerful storage engine built into OTP and available to use in Elixir."}),"\n",(0,a.jsx)(r.p,{children:"ETS is a robust in-memory store for Elixir and Erlang objects that comes included. ETS is capable of storing large amounts of data and offers constant time data access."}),"\n",(0,a.jsx)(r.p,{children:"Tables in ETS are created and owned by individual processes. When an owner process terminates, its tables are destroyed. By default ETS is limited to 1400 tables per node."}),"\n",(0,a.jsx)(r.p,{children:"Tables are divided into four different types, set, ordered_set, bag, andduplicate_bag. Asetorordered_settable can only have one object associated with each key. Abagorduplicate_bagtable can have many objects associated with each key."}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://elixirschool.com/en/lessons/specifics/ets",children:"https://elixirschool.com/en/lessons/specifics/ets"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"http://erlang.org/doc/man/ets.html",children:"http://erlang.org/doc/man/ets.html"})}),"\n",(0,a.jsx)(r.h2,{id:"references",children:"References"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org",children:"https://www.erlang.org"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://www.erlang.org/course",children:"https://www.erlang.org/course"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>l});var s=n(296540);const a={},i=s.createContext(a);function t(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);