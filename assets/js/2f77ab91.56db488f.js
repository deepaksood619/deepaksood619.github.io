"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[44426],{351274:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"algorithms/data-compression/huffman-compression","title":"Huffman Compression","description":"Variable-length codes","source":"@site/docs/algorithms/data-compression/huffman-compression.md","sourceDirName":"algorithms/data-compression","slug":"/algorithms/data-compression/huffman-compression","permalink":"/algorithms/data-compression/huffman-compression","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/data-compression/huffman-compression.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707138374000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bitmap Compression Algorithms","permalink":"/algorithms/data-compression/bitmap-compression-algorithms"},"next":{"title":"Intro","permalink":"/algorithms/data-compression/intro"}}');var r=i(474848),a=i(28453);const t={},o="Huffman Compression",d={},l=[{value:"Variable-length codes",id:"variable-length-codes",level:2},{value:"Prefix-free codes: trie representation",id:"prefix-free-codes-trie-representation",level:2},{value:"Compression",id:"compression",level:2},{value:"Expansion",id:"expansion",level:2},{value:"Huffman trie node data type",id:"huffman-trie-node-data-type",level:2},{value:"Prefix-free codes: expansion",id:"prefix-free-codes-expansion",level:2},{value:"How to transmit",id:"how-to-transmit",level:2},{value:"Shannon-Fano codes",id:"shannon-fano-codes",level:2},{value:"Huffman codes",id:"huffman-codes",level:2},{value:"Constructing a Huffman encoding trie: Java implementation",id:"constructing-a-huffman-encoding-trie-java-implementation",level:2},{value:"Huffman encoding summary",id:"huffman-encoding-summary",level:2}];function c(e){const n={del:"del",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"huffman-compression",children:"Huffman Compression"})}),"\n",(0,r.jsx)(n.h2,{id:"variable-length-codes",children:"Variable-length codes"}),"\n",(0,r.jsx)(n.p,{children:"Use different number of bits to encode different chars"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(707240).A+"",width:"1230",height:"754"})}),"\n",(0,r.jsx)(n.p,{children:"Que: How do we avoid ambiguity?"}),"\n",(0,r.jsx)(n.p,{children:"Ans: Ensure that no condeword is a prefix of another"}),"\n",(0,r.jsx)(n.p,{children:"Ex 1: Fixed-length code"}),"\n",(0,r.jsx)(n.p,{children:"Ex 2: Append special stop char to each codeword"}),"\n",(0,r.jsx)(n.p,{children:"Ex 3: General prefix-free code"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(541463).A+"",width:"1036",height:"346"})}),"\n",(0,r.jsx)(n.h2,{id:"prefix-free-codes-trie-representation",children:"Prefix-free codes: trie representation"}),"\n",(0,r.jsx)(n.p,{children:"Que: How to represent the prefix-free code?"}),"\n",(0,r.jsx)(n.p,{children:"Ans: A binary trie"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Chars in leaves"}),"\n",(0,r.jsx)(n.li,{children:"Codeword is path from root to leaf"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(647002).A+"",width:"1050",height:"354"})}),"\n",(0,r.jsx)(n.h2,{id:"compression",children:"Compression"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Method 1: start at leaf; follow path up to the root; print bits in reverse"}),"\n",(0,r.jsx)(n.li,{children:"Method 2: create ST of key-value pairs"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"expansion",children:"Expansion"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start at root"}),"\n",(0,r.jsx)(n.li,{children:"Go left if bit is 0; go right if 1"}),"\n",(0,r.jsx)(n.li,{children:"If leaf node, print char and return to root"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"huffman-trie-node-data-type",children:"Huffman trie node data type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(332489).A+"",width:"1242",height:"678"})}),"\n",(0,r.jsx)(n.h2,{id:"prefix-free-codes-expansion",children:"Prefix-free codes: expansion"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(487116).A+"",width:"1042",height:"642"})}),"\n",(0,r.jsx)(n.p,{children:"Running time: Linear in input size N"}),"\n",(0,r.jsx)(n.h2,{id:"how-to-transmit",children:"How to transmit"}),"\n",(0,r.jsx)(n.p,{children:"Que: How to write the trie?"}),"\n",(0,r.jsx)(n.p,{children:"Ans: Write preorder traversal of trie; mark leaf and internal nodes with a bit"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(829915).A+"",width:"1284",height:"454"})}),"\n",(0,r.jsx)(n.p,{children:"Note: If message is long, overhead of transmitting trie is small"}),"\n",(0,r.jsx)(n.p,{children:"Que: How to read in the trie?"}),"\n",(0,r.jsx)(n.p,{children:"Ans: Reconstruct from preorder traversal of trie"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(958782).A+"",width:"1276",height:"444"})}),"\n",(0,r.jsx)(n.h2,{id:"shannon-fano-codes",children:"Shannon-Fano codes"}),"\n",(0,r.jsx)(n.p,{children:"Que: How to find best prefix-free code?"}),"\n",(0,r.jsx)(n.p,{children:"Shannon-Fano algorithm:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Partition symbols S into two subsets S",(0,r.jsx)(n.del,{children:"0"})," and S",(0,r.jsx)(n.del,{children:"1"})," of (roughly) equal freq"]}),"\n",(0,r.jsxs)(n.li,{children:["Codewords for symbols in S",(0,r.jsx)(n.del,{children:"0"})," start with 0; for symbols in S",(0,r.jsx)(n.del,{children:"1"})," start with 1"]}),"\n",(0,r.jsxs)(n.li,{children:["Recur in S",(0,r.jsx)(n.del,{children:"0"})," and S",(0,r.jsx)(n.del,{children:"1"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(763677).A+"",width:"882",height:"364"})}),"\n",(0,r.jsx)(n.p,{children:"Problem 1: How to divide up symbols?"}),"\n",(0,r.jsx)(n.p,{children:"Problem 2: Not optimal"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(524448).A+"",width:"1070",height:"768"})}),"\n",(0,r.jsx)(n.h2,{id:"huffman-codes",children:"Huffman codes"}),"\n",(0,r.jsx)(n.p,{children:"Que: How to find best prefix-free code?"}),"\n",(0,r.jsx)(n.p,{children:"Huffman algorithm:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Count frequency freq[i] for each char i in input"}),"\n",(0,r.jsx)(n.li,{children:"Start with one node corresponding to each char i (with weight freq[i])"}),"\n",(0,r.jsxs)(n.li,{children:["Repeat until single trie formed:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select two tries with min weight freq[i] and freq[j]"}),"\n",(0,r.jsx)(n.li,{children:"merge into single trie with weight freq[i] + freq[j]"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"constructing-a-huffman-encoding-trie-java-implementation",children:"Constructing a Huffman encoding trie: Java implementation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(675762).A+"",width:"1276",height:"666"})}),"\n",(0,r.jsx)(n.h2,{id:"huffman-encoding-summary",children:"Huffman encoding summary"}),"\n",(0,r.jsx)(n.p,{children:"Proposition: Huffman algorithm produces an optimal prefix-free code"}),"\n",(0,r.jsx)(n.p,{children:"Implementation:"}),"\n",(0,r.jsx)(n.p,{children:"Pass 1: tabulate char frequencies and build trie"}),"\n",(0,r.jsx)(n.p,{children:"Pass 2: encode file by traversing frie or lookup table"}),"\n",(0,r.jsx)(n.p,{children:"Running time: Using a binary heap => N+R log R"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(235791).A+"",width:"1557",height:"396"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},707240:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image1-da837e967385f1c6d5d86bca1b2ccd6c.jpg"},675762:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image10-f99200807f54287ce863dced0c320ea5.jpg"},235791:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image11-ada42e5178243b9be644f2f650a7d9e7.jpg"},541463:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image2-37affa148b40fe12eddd0982ec75e912.jpg"},647002:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image3-41a3694ae389ba18213ad5d60ba1f510.jpg"},332489:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image4-90931efe260ac7f21cc43952abeab3c5.jpg"},487116:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image5-16947c6299b71aaf8122abf29ce87e1c.jpg"},829915:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image6-b55353e103819e4f716463d0d16da629.jpg"},958782:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image7-3e6c5ad6669b41bdc90daad47a9c26a2.jpg"},763677:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image8-293dd54c2540844d52e07a1a169c65a0.jpg"},524448:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Huffman-Compression-image9-6733b49814413b991b8fd842499548ea.jpg"},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(296540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);