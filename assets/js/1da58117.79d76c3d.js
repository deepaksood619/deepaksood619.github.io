"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[65580],{873740:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=a(785893),t=a(511151);const o={},i="Kubernetes Manifests Examples",l={id:"devops/kubernetes/kubernetes-manifests-examples",title:"Kubernetes Manifests Examples",description:"Resource Schema Components (Manifests)",source:"@site/docs/devops/kubernetes/kubernetes-manifests-examples.md",sourceDirName:"devops/kubernetes",slug:"/devops/kubernetes/kubernetes-manifests-examples",permalink:"/devops/kubernetes/kubernetes-manifests-examples",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/kubernetes/kubernetes-manifests-examples.md",tags:[],version:"current",lastUpdatedAt:1728328563,formattedLastUpdatedAt:"Oct 7, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"KubeEdge",permalink:"/devops/kubernetes/kubeedge"},next:{title:"Operators",permalink:"/devops/kubernetes/operators"}},r={},c=[{value:"Resource Schema Components (Manifests)",id:"resource-schema-components-manifests",level:2},{value:"Configmap",id:"configmap",level:3},{value:"Service",id:"service",level:3},{value:"Deployments",id:"deployments",level:3},{value:"statefulsets",id:"statefulsets",level:3},{value:"Shared Volume Data between two containers",id:"shared-volume-data-between-two-containers",level:3},{value:"PVC",id:"pvc",level:3},{value:"Cronjob",id:"cronjob",level:3},{value:"Job",id:"job",level:3},{value:"HPA",id:"hpa",level:3},{value:"Example Sidecar - busybox / ubuntu",id:"example-sidecar---busybox--ubuntu",level:3}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"kubernetes-manifests-examples",children:"Kubernetes Manifests Examples"}),"\n",(0,s.jsx)(n.h2,{id:"resource-schema-components-manifests",children:"Resource Schema Components (Manifests)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"GVK (Group Version Kind) aka TypeMeta - apiVersion & Kind"}),"\n",(0,s.jsx)(n.li,{children:"Metadata aka ObjectMeta"}),"\n",(0,s.jsx)(n.li,{children:"Spec"}),"\n",(0,s.jsx)(n.li,{children:"Status (only controllers fills it out)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:a(781135).Z+"",width:"1102",height:"730"})}),"\n",(0,s.jsx)(n.h3,{id:"configmap",children:"Configmap"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-configmap\n  namespace: zenalytix\ndata:\n  nginx.conf: |\n    user root;\n    worker_processes auto;\n    pid /var/run/nginx.pid;\n    error_log /var/log/nginx/error.log warn;\n    events {\n            worker_connections 2048;\n            # multi_accept on;\n    }\n\n---\n\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: loanetl-configmap\n  namespace: apps\ndata:\n  DEBUG: "False"\n\n  AWS_ACCESS_KEY_ID: "xxx"\n  AWS_SECRET_ACCESS_KEY: "xxx"\n\n  # aws redshift credentials"\n  REDSHIFT_DB_HOST: "host"\n  REDSHIFT_DB_PORT: "5439"\n  REDSHIFT_DB_DBNAME: "dbname"\n  REDSHIFT_DB_USER: "user"\n  REDSHIFT_DB_PASSWORD: "pass"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"service",children:"Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n name: nginx\n namespace: nginx\n labels:\n  name: nginx\nspec:\n type: LoadBalancer / ClusterIP\n ports:\n  - port: 80\n  targetPort: 80\n  protocol: TCP\n  name: http\n selector:\n  name: nginx\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deployments",children:"Deployments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: flask-republisher\n  name: flask-republisher\n  namespace: consumers\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: flask-republisher\n  minReadySeconds: 10\n  strategy:\n type: RollingUpdate\n rollingUpdate:\n   maxSurge: 1\n   maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        name: flask-republisher\n    spec:\n      containers:\n        - name: flask-republisher\n          image: image\n          imagePullPolicy: IfNotPresent\n   ports:\n   - containerPort: 80\n          env:\n            - name: DEBUG\n              value: "True"\n          envFrom:\n            - configMapRef:\n                name: nginx-env-configmap\n   volumeMounts:\n            - mountPath: /root/zenalytix\n              name: zenalytix-data\n            - mountPath: /etc/nginx/nginx.conf\n              name: nginx-configmap\n              subPath: nginx.conf\n          command:\n            - /bin/bash\n            - -c\n            - |\n              python manage.py test\n   startupProbe:\n   httpGet:\n    path: /healthz\n    port: liveness-port\n   failureThreshold: 30\n   periodSeconds: 10\n   readinessProbe:\n   httpGet:\n    path: /\n    port: 5000\n   initialDelaySeconds: 5\n   periodSeconds: 5\n   timeoutSeconds: 5\n   successThreshold: 1\n   failureThreshold: 3\n          livenessProbe:\n            httpGet:\n              path: /healthz\n              port: 5000\n            initialDelaySeconds: 10\n            periodSeconds: 10\n   resources:\n   requests:\n    memory: 256Mi / 8Gi\n    cpu: 250m / 1000m\n   limits:\n    memory: 3Gi\n    cpu: 3000m\n      volumes:\n        - name: config-volume\n          - name: nginx-configmap\n       configMap:\n      name: nginx-configmap\n\n      restartPolicy: Always\n'})}),"\n",(0,s.jsx)(n.h3,{id:"statefulsets",children:"statefulsets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n    name: jupyterlab\n    namespace: jlab\n    labels:\n    name: jupyterlab\nspec:\n    serviceName: jupyterlab\n"})}),"\n",(0,s.jsx)(n.h3,{id:"shared-volume-data-between-two-containers",children:"Shared Volume Data between two containers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n    labels:\n    name: flask-republisher\n    name: flask-republisher\n    namespace: consumers\nspec:\n    replicas: 1\n    selector:\n    matchLabels:\n        name: flask-republisher\n    template:\n    metadata:\n        labels:\n        name: flask-republisher\n    spec:\n        containers:\n        - name: flask-republisher\n            image: gcr.io/abc-data-archiver/kafka_republisher:1.1.6\n            imagePullPolicy: IfNotPresent\n            ports:\n            - containerPort: 80\n            env:\n            - name: DEBUG\n                value: "False"\n            envFrom:\n            - configMapRef:\n                name: kafka-flask-config\n            command:\n            - /bin/bash\n            - -c\n            - |\n                gunicorn kafka_flask_republisher:app -b 0.0.0.0:5000 --workers 2 -k gevent --timeout 300 --worker-connections 1000 --max-requests 1000000 --limit-request-line 8190 --access-logfile /var/log/access.log\n            volumeMounts:\n            - name: shared-data\n                mountPath: /var/log/\n            livenessProbe:\n            httpGet:\n                path: /status\n                port: 5000\n            initialDelaySeconds: 10\n            periodSeconds: 10\n\n        - name: telegraf\n            image: telegraf:1.12.3-alpine\n            imagePullPolicy: IfNotPresent\n            volumeMounts:\n            - name: shared-data\n                mountPath: /var/log/\n            - mountPath: /etc/telegraf/telegraf.conf\n                name: kafka-flask-telegraf-config\n                subPath: telegraf.conf\n\n        - name: logrotate\n            image: blacklabelops/logrotate:1.3\n            imagePullPolicy: IfNotPresent\n            env:\n            - name: LOGROTATE_INTERVAL\n                value: "hourly"\n            - name: LOGROTATE_SIZE\n                value: "10M"\n            - name: LOG_FILE_ENDINGS\n                value: "log"\n            - name: LOGS_DIRECTORIES\n                value: "/var/log"\n            - name: LOGROTATE_COPIES\n                value: "25"\n            - name: TZ\n                value: "Asia/Kolkata"\n            volumeMounts:\n            - name: shared-data\n                mountPath: /var/log/\n        nodeSelector:\n        beta.kubernetes.io/os: linux\n        kubernetes.io/role: agent\n        type: virtual-kubelet\n        tolerations:\n        - key: virtual-kubelet.io/provider\n            operator: Equal\n            value: azure\n            effect: NoSchedule\n        volumes:\n        - name: kafka-flask-telegraf-config\n            configMap:\n            name: kafka-flask-telegraf-config\n        - name: shared-data\n            emptyDir: {}\n        restartPolicy: Always\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/",children:"https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/"})}),"\n",(0,s.jsx)(n.h3,{id:"pvc",children:"PVC"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"kind:PersistentVolumeClaim\napiVersion:v1\nmetadata:\n name:alertdriver-pvc\n namespace:monitoring\nspec:\n #for attaching again to same pv\n volumeName:pvc-0ad81c1b-fef6-11e9-9e23-3e36fc17cb95\n storageClassName:managed-premium-retain\n accessModes:\n  - ReadWriteOnce\n resources:\n  requests:\n   storage:1Gi\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cronjob",children:"Cronjob"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: livenotebook-commit\n  namespace: zenalytix\nspec:\n  # 12:15 AM\n  schedule: "15 20 * * *"\n  suspend: true #false\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n            - name: livenotebook-commit\n              image: gcr.io/abc-data-archiver/zenalytix:a7f14578479e\n              workingDir: /root/zenalytix/notebooks\n              command:\n                - /bin/bash\n                - -c\n                - |\n                  sh /root/zenalytix/k8s/scripts/livenotebook-backup.sh\n              volumeMounts:\n                - mountPath: /root/zenalytix\n                  name: zenalytix-data\n          restartPolicy: OnFailure\n          volumes:\n            - name: zenalytix-data\n              persistentVolumeClaim:\n                claimName: zenalytix-pvc\n'})}),"\n",(0,s.jsx)(n.h3,{id:"job",children:"Job"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  template:\n    spec:\n      containers:\n      - name: pi\n        image: perl:5.34.0\n        command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]\n      restartPolicy: Never\n  backoffLimit: 4\n'})}),"\n",(0,s.jsx)(n.h3,{id:"hpa",children:"HPA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: autoscaling/v2beta2\nkind: HorizontalPodAutoscaler\nmetadata:\n    name: api-v1-hpa\n    namespace: prod\nspec:\n    scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: api-v1\n    minReplicas: 3\n    maxReplicas: 8\n    metrics:\n    - type: Resource\n    resource:\n        name: cpu\n        target:\n        type: Utilization\n        averageUtilization: 90\n    - type: Resource\n    resource:\n        name: memory\n        target:\n        type: Utilization\n        averageUtilization: 80\n    behavior:\n    scaleDown:\n        stabilizationWindowSeconds: 300\n        policies:\n        - type: Percent\n        value: 50\n        periodSeconds: 60\n        - type: Pods\n        value: 2\n        periodSeconds: 60\n    scaleUp:\n        stabilizationWindowSeconds: 0\n        policies:\n        - type: Percent\n        value: 100\n        periodSeconds: 15\n        - type: Pods\n        value: 3\n        periodSeconds: 15\n        selectPolicy: Max\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-sidecar---busybox--ubuntu",children:"Example Sidecar - busybox / ubuntu"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: ubuntu\nspec:\n  containers:\n  - name: ubuntu\n    image: ubuntu:latest\n    # Just spin & wait forever\n    command: [ "/bin/bash", "-c", "--" ]\n    args: [ "while true; do sleep 600; done;" ]\n    volumeMounts:\n    - mountPath: /bitnami/postgresql\n      name: data\n      readOnly: true\n  nodeSelector:\n    kubernetes.io/hostname: lke163034-239223-343b41fd0000\n  tolerations:\n  - key: key\n    operator: Equal\n    value: value\n    effect: NoSchedule\n  volumes:\n  - name: data\n    persistentVolumeClaim:\n      claimName: data-airflow-postgresql-0\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},781135:(e,n,a)=>{a.d(n,{Z:()=>s});const s=a.p+"assets/images/DevOps-Kubernetes-Kubernetes-Manifests-Examples-image1-4c6ae9a6705d3a50396346e7d52f7c0b.jpg"},511151:(e,n,a)=>{a.d(n,{Z:()=>l,a:()=>i});var s=a(667294);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);