"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[88978],{462033:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var t=n(785893),r=n(511151);const a={},d="Dictionary",c={id:"python/python-intro/data-structure/dictionary",title:"Dictionary",description:"Each piece of information in a dictionary is stored as a key-value pair. When we provide a key, Python returns the value associated with that key.",source:"@site/docs/python/python-intro/data-structure/dictionary.md",sourceDirName:"python/python-intro/data-structure",slug:"/python/python-intro/data-structure/dictionary",permalink:"/python/python-intro/data-structure/dictionary",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/data-structure/dictionary.md",tags:[],version:"current",lastUpdatedAt:1706035064,formattedLastUpdatedAt:"Jan 23, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dictionary Architecture",permalink:"/python/python-intro/data-structure/dictionary-architecture"},next:{title:"List",permalink:"/python/python-intro/data-structure/list"}},s={},o=[{value:"Representation",id:"representation",level:2},{value:"Accessing Values in Dictionary",id:"accessing-values-in-dictionary",level:2},{value:"Using square bracket notation to fetch data",id:"using-square-bracket-notation-to-fetch-data",level:3},{value:"Using built-in function dict.get() to fetch data from dictionary",id:"using-built-in-function-dictget-to-fetch-data-from-dictionary",level:3},{value:"For multi level dict hierarchies",id:"for-multi-level-dict-hierarchies",level:3},{value:"Updating in Dictionary",id:"updating-in-dictionary",level:2},{value:"Adding in Dictionary",id:"adding-in-dictionary",level:2},{value:"Deleting in Dictionary",id:"deleting-in-dictionary",level:2},{value:"Length of a dictionary",id:"length-of-a-dictionary",level:2},{value:"Properties of Dictionary Keys",id:"properties-of-dictionary-keys",level:2},{value:"Built-in Dictionary functions &amp; Methods",id:"built-in-dictionary-functions--methods",level:2},{value:"Functions",id:"functions",level:3},{value:"cmp(dict1, dict2)",id:"cmpdict1-dict2",level:4},{value:"- len(dict)",id:"--lendict",level:4},{value:"- str(dict)",id:"--strdict",level:4},{value:"- type(variable)",id:"--typevariable",level:4},{value:"- <strong>Methods</strong>",id:"--methods",level:3},{value:"- dict.clear()",id:"--dictclear",level:4},{value:"- dict.copy()",id:"--dictcopy",level:4},{value:"- dict.items()",id:"--dictitems",level:4},{value:"- dict.keys()",id:"--dictkeys",level:4},{value:"Others",id:"others",level:4},{value:"Sorting a dictionary",id:"sorting-a-dictionary",level:2},{value:"sorting by value",id:"sorting-by-value",level:4},{value:"sorting by key",id:"sorting-by-key",level:4},{value:"Looping through all the keys in order",id:"looping-through-all-the-keys-in-order",level:2},{value:"Merging two dictionaries",id:"merging-two-dictionaries",level:2}];function l(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"dictionary",children:"Dictionary"}),"\n",(0,t.jsx)(i.p,{children:"Each piece of information in a dictionary is stored as a key-value pair. When we provide a key, Python returns the value associated with that key."}),"\n",(0,t.jsx)(i.h2,{id:"representation",children:"Representation"}),"\n",(0,t.jsx)(i.p,{children:"Use curly braces to define a dictionary. Use colons to connect keys and values, and use commas to separate individual key-value pairs."}),"\n",(0,t.jsxs)(i.p,{children:["Empty Dictionary - ",(0,t.jsx)(i.code,{children:"{}"})]}),"\n",(0,t.jsxs)(i.p,{children:["Dictionary - ",(0,t.jsx)(i.code,{children:"{'Name': 'Deepak', 'Age':25}"})]}),"\n",(0,t.jsx)(i.h2,{id:"accessing-values-in-dictionary",children:"Accessing Values in Dictionary"}),"\n",(0,t.jsx)(i.h3,{id:"using-square-bracket-notation-to-fetch-data",children:"Using square bracket notation to fetch data"}),"\n",(0,t.jsx)(i.p,{children:"If we attempt to access a data item with a key, which is not part of the dictionary, we get KeyError"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\nprint dict['Name']\nprint dict['Age']\nZara\n7\n"})}),"\n",(0,t.jsx)(i.h3,{id:"using-built-in-function-dictget-to-fetch-data-from-dictionary",children:"Using built-in function dict.get() to fetch data from dictionary"}),"\n",(0,t.jsx)(i.p,{children:"dict.get(key, default=None)"}),"\n",(0,t.jsx)(i.p,{children:"The methodget()returns a value for the given key. If key is not available then returns default value None. (or the provided default value)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zabra', 'Age': 7}\nprint \"Value : %s\" %  dict.get('Age')\nprint \"Value : %s\" %  dict.get('Education')\nprint \"Value : %s\" %  dict.get('Education', \"Never\")\nValue : 7\nValue : None\nValue : Never\n"})}),"\n",(0,t.jsx)(i.h3,{id:"for-multi-level-dict-hierarchies",children:"For multi level dict hierarchies"}),"\n",(0,t.jsx)(i.p,{children:"Returning a default empty dictionary will not raise AttributeError for second get()"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"sub_typology=project.json.get(**'area'**,{}).get(**'0'**,{}).get(**'areaSubTypology'**, **''**)"})}),"\n",(0,t.jsx)(i.h2,{id:"updating-in-dictionary",children:"Updating in Dictionary"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\ndict['Age'] = 8; # update existing entry\n"})}),"\n",(0,t.jsx)(i.p,{children:"If key is not present, then an item is added in the dictionary"}),"\n",(0,t.jsx)(i.h2,{id:"adding-in-dictionary",children:"Adding in Dictionary"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\ndict['School'] = \"DPS School\"; # Add new entry\n"})}),"\n",(0,t.jsx)(i.h2,{id:"deleting-in-dictionary",children:"Deleting in Dictionary"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\ndel dict['Name']; # remove entry with key 'Name'\ndict.clear(); # remove all entries in dict\ndel dict ; # delete entire dictionary\n"})}),"\n",(0,t.jsx)(i.p,{children:"If we attempt to delete a data item with a key, which is not part of the dictionary, we get KeyError"}),"\n",(0,t.jsx)(i.h2,{id:"length-of-a-dictionary",children:"Length of a dictionary"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"num_responses = len(fav_languages)"})}),"\n",(0,t.jsx)(i.h2,{id:"properties-of-dictionary-keys",children:"Properties of Dictionary Keys"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Dictionary values can be any arbitrary Python object, either standard objects or user-defined objects."}),"\n",(0,t.jsx)(i.li,{children:"Duplicate key not allowed. When duplicate keys encountered during assignment, the last assignment wins."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zara', 'Age': 7, 'Name': 'Manni'}\nprint \"dict['Name']: \", dict['Name']\n\ndict['Name']: Manni\n"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'Keys must be immutable. Otherwise "Type Error: objects are unhashable" error thrown. Strings, numbers, tuples can be used as dictionary keys'}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"built-in-dictionary-functions--methods",children:"Built-in Dictionary functions & Methods"}),"\n",(0,t.jsx)(i.h3,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(i.h4,{id:"cmpdict1-dict2",children:"cmp(dict1, dict2)"}),"\n",(0,t.jsx)(i.p,{children:"Compares elements of both dict"}),"\n",(0,t.jsx)(i.p,{children:"Not supported in python3, use dict1==dict2 instead"}),"\n",(0,t.jsx)(i.p,{children:"Library deepdiff can be used for advanced comparisons"}),"\n",(0,t.jsx)(i.h4,{id:"--lendict",children:"- len(dict)"}),"\n",(0,t.jsx)(i.p,{children:"Gives the total number of items in the dictionary"}),"\n",(0,t.jsx)(i.h4,{id:"--strdict",children:"- str(dict)"}),"\n",(0,t.jsx)(i.p,{children:"Produces a printable string representation of a dictionary"}),"\n",(0,t.jsx)(i.h4,{id:"--typevariable",children:"- type(variable)"}),"\n",(0,t.jsxs)(i.h3,{id:"--methods",children:["- ",(0,t.jsx)(i.strong,{children:"Methods"})]}),"\n",(0,t.jsx)(i.h4,{id:"--dictclear",children:"- dict.clear()"}),"\n",(0,t.jsx)(i.p,{children:"Removes all elements of dictionary dict"}),"\n",(0,t.jsx)(i.h4,{id:"--dictcopy",children:"- dict.copy()"}),"\n",(0,t.jsx)(i.p,{children:"Returns a shallow copy of dictionary dict"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"dict.fromkeys(seq[, value])"})}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Create a new dictionary with keys from seq and values set to value"}),"\n",(0,t.jsx)(i.p,{children:"seq\u2212 This is the list of values which would be used for dictionary keys preparation."}),"\n",(0,t.jsx)(i.p,{children:"value\u2212 This is optional, if provided then value would be set to this value"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"seq = ('name', 'age', 'sex')\ndict = dict.fromkeys(seq)\nprint \"New Dictionary : %s\" % str(dict)\nNew Dictionary : {'age': None, 'name': None, 'sex': None}\n\ndict = dict.fromkeys(seq, 10)\nprint \"New Dictionary : %s\" % str(dict)\nNew Dictionary : {'age': 10, 'name': 10, 'sex': 10}\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict.get(key, default=None)\n\ndict.has_key(key) (removed in python 3, use in operator instead)\n\ndict = {'Name': 'Zabra', 'Age': 7}\n'Name' in dict\n\nTrue\n\n'NoKey' in dict\n\nFalse\n"})}),"\n",(0,t.jsx)(i.h4,{id:"--dictitems",children:"- dict.items()"}),"\n",(0,t.jsx)(i.p,{children:"The method items() returns a list of dict's (key, value) tuple pairs"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"dict = {'Name': 'Zara', 'Age': 7}\nfor key, value in dict.items():\n print (key, value)\n\nName Zara\nAge 7\n"})}),"\n",(0,t.jsx)(i.h4,{id:"--dictkeys",children:"- dict.keys()"}),"\n",(0,t.jsx)(i.p,{children:"looping through all keys"}),"\n",(0,t.jsx)(i.h4,{id:"others",children:"Others"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"dict.setdefault(key, default=None)"}),"\n",(0,t.jsx)(i.li,{children:"dict.update(dict2)"}),"\n",(0,t.jsx)(i.li,{children:"dict.values()"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Looping through all the values"}),"\n",(0,t.jsx)(i.h2,{id:"sorting-a-dictionary",children:"Sorting a dictionary"}),"\n",(0,t.jsx)(i.h4,{id:"sorting-by-value",children:"sorting by value"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"print sorted(prices.items(), key = lambda x : x[1])"})}),"\n",(0,t.jsx)(i.h4,{id:"sorting-by-key",children:"sorting by key"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"print(sorted(prices.items())"})}),"\n",(0,t.jsx)(i.h2,{id:"looping-through-all-the-keys-in-order",children:"Looping through all the keys in order"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"for name in sorted(fav_language.keys()):\n  print(name)\n"})}),"\n",(0,t.jsx)(i.h2,{id:"merging-two-dictionaries",children:"Merging two dictionaries"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"# Python code to merge dict using update() method\ndef Merge(dict1, dict2):\n    return(dict2.update(dict1))\n\n# Driver code\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\n\n# This return None\nprint(Merge(dict1, dict2))\n\n# changes made in dict2\nprint(dict2)\n"})})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},511151:(e,i,n)=>{n.d(i,{Z:()=>c,a:()=>d});var t=n(667294);const r={},a=t.createContext(r);function d(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);