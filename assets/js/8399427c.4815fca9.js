"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[46806],{460282:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>h,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"algorithms/graphtheory/breadth-first-search-bfs","title":"Breadth First Search (BFS)","description":"BFS \\"is an algorithm for traversing or searching tree data structure. It starts at the tree root and explores the neighbor nodes first, before moving to the next level neighbors.\\"","source":"@site/docs/algorithms/graphtheory/breadth-first-search-bfs.md","sourceDirName":"algorithms/graphtheory","slug":"/algorithms/graphtheory/breadth-first-search-bfs","permalink":"/algorithms/graphtheory/breadth-first-search-bfs","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/graphtheory/breadth-first-search-bfs.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bellman Ford Algorithm","permalink":"/algorithms/graphtheory/bellman-ford-algorithm"},"next":{"title":"Connected Components","permalink":"/algorithms/graphtheory/connected-components"}}');var n=r(474848),i=r(28453);const h={},a="Breadth First Search (BFS)",l={},o=[{value:"Breadth-First Search(BFS)",id:"breadth-first-searchbfs",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"breadth-first-search-bfs",children:"Breadth First Search (BFS)"})}),"\n",(0,n.jsx)(t.p,{children:'BFS "is an algorithm for traversing or searching tree data structure. It starts at the tree root and explores the neighbor nodes first, before moving to the next level neighbors."'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Breadth-first_search",children:"https://en.wikipedia.org/wiki/Breadth-first_search"})}),"\n",(0,n.jsx)(t.h2,{id:"breadth-first-searchbfs",children:"Breadth-First Search(BFS)"}),"\n",(0,n.jsx)(t.p,{children:"BFS algorithm traverses the tree level by level and depth by depth."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(973543).A+"",width:"999",height:"562"})}),"\n",(0,n.jsx)(t.p,{children:"Here is an example that helps to better explain this algorithm:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(957048).A+"",width:"999",height:"562"})}),"\n",(0,n.jsx)(t.p,{children:"So we traverse level by level. In this example, the result is 1--2--5--3--4--6--7."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Level/Depth 0: only node with value 1"}),"\n",(0,n.jsx)(t.li,{children:"Level/Depth 1: nodes with values 2 and 5"}),"\n",(0,n.jsx)(t.li,{children:"Level/Depth 2: nodes with values 3, 4, 6, and 7"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Now let's code it."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"def bfs(self):\n queue = Queue()\n queue.put(self)\n\n while not queue.empty():\n  current_node = queue.get()\n  print(current_node.value)\n\n  if current_node.left_child:\n   queue.put(current_node.left_child)\n\n  if current_node.right_child:\n   queue.put(current_node.right_child)\n"})}),"\n",(0,n.jsx)(t.p,{children:"To implement a BFS algorithm, we use the queue data structure to help."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(501877).A+"",width:"999",height:"1110"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"First add the root node into the queue with the put method."}),"\n",(0,n.jsx)(t.li,{children:"Iterate while the queue is not empty."}),"\n",(0,n.jsx)(t.li,{children:"Get the first node in the queue, and then print its value."}),"\n",(0,n.jsx)(t.li,{children:"Add both left and right children into the queue (if the current node has children)."}),"\n",(0,n.jsx)(t.li,{children:"Done. We will print the value of each node, level by level, with our queue helper."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Other Way"})}),"\n",(0,n.jsx)(t.p,{children:"Can color the vertices of the graph using 3 color, white, gray and black"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"White - Initialized / Undiscovered Vetex"}),"\n",(0,n.jsx)(t.li,{children:"Gray - Initially discovered"}),"\n",(0,n.jsx)(t.li,{children:"Black - Completely Explored"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This means that once a vetex is colored black, it has no white vertices adjacent to it."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(364814).A+"",width:"1000",height:"581"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(660651).A+"",width:"999",height:"690"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Properties"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"BFS computes shortest paths (fewest number of edges) from s to all other vertices in a graph in time proportional to E + V."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(119132).A+"",width:"596",height:"650"})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},973543:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Breadth-First-Search-(BFS)-image1-ff7b885225b32f6b0cc06c384da092ff.jpg"},957048:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Breadth-First-Search-(BFS)-image2-04eb89e0a4404916f4cf70c194568b06.jpg"},501877:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Breadth-First-Search-(BFS)-image3-546ac5af569284ff9165bfcab8288c56.jpg"},364814:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Breadth-First-Search-(BFS)-image4-a1254d3de652ecea3d01bd4e04b23ce1.jpg"},660651:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Breadth-First-Search-(BFS)-image5-56af9a1f67278bdaa0f81dd5923195a6.jpg"},119132:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Breadth-First-Search-(BFS)-image6-7f8781b2b63ffe0820b0458861235763.jpg"},28453:(e,t,r)=>{r.d(t,{R:()=>h,x:()=>a});var s=r(296540);const n={},i=s.createContext(n);function h(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:h(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);