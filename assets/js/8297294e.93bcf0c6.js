"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[99162],{60353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(785893),a=t(511151);const r={},o="Examples",i={id:"devops/terraform/examples",title:"Examples",description:"",source:"@site/docs/devops/terraform/examples.md",sourceDirName:"devops/terraform",slug:"/devops/terraform/examples",permalink:"/devops/terraform/examples",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/terraform/examples.md",tags:[],version:"current",lastUpdatedAt:1704952979,formattedLastUpdatedAt:"Jan 11, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/devops/terraform/documentation"},next:{title:"Variables",permalink:"/devops/terraform/variables"}},c={},l=[];function p(e){const n={code:"code",h1:"h1",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#Variables\nvariable "region" {\n default = "us-east-1"\n}\n\nprovider "aws" {\n profile = "default"\n region = var.region\n}\n\nresource "aws_instance" "example" {\n ami = "ami-2757f631"\n instance_type = "t2.micro"\n\n provisioner "local-exec" {\n  command = "echo ${aws_instance.example.public_ip} > ip_address.txt"\n }\n}\n\nresource "aws_eip" "ip" {\n vpc = true\n instance = aws_instance.example.id\n}\n\n## Explicit Dependency Example\n# New resource for the S3 bucket our application will use.\nresource "aws_s3_bucket" "example" {\n # NOTE: S3 bucket names must be unique across _all_ AWS accounts, so\n # this name must be changed before applying this example to avoid naming\n # conflicts.\n bucket = "terraform-getting-started-guide"\n acl = "private"\n}\n\n# Change the aws_instance we declared earlier to now include "depends_on"\nresource "aws_instance" "example" {\n ami = "ami-2757f631" instance_type = "t2.micro"\n\n # Tells Terraform that this EC2 instance must be created only after the\n # S3 bucket has been created.\n depends_on = [aws_s3_bucket.example]\n}\n\n# remote-exec provisioner example\nresource "aws_key_pair" "example" {\n  key_name = "examplekey"\n  public_key = file("~/.ssh/id_rsa.pub")\n}\n\nresource "aws_instance" "web" {\n  key_name = aws_key_pair.example.key_name\n  # ...\n\n connection {\n    type     = "ssh"\n    user     = "root"\n    private_key = file("~/.ssh/id_rsa")\n    host     = self.public_ip\n  }\n\n  provisioner "remote-exec" {\n    inline = [\n      "sudo amazon-linux-extras enable nginx1.12",\n      "sudo yum -y install nginx",\n      "sudo systemctl start nginx"\n    ]\n  }\n}\n\n#Terraform consul module\n terraform {\n   required_version = "0.11.11"\n }\n\n provider "aws" {\n   access_key = "AWS ACCESS KEY"\n   secret_key = "AWS SECRET KEY"\n   region     = "us-east-1"\n }\n\n module "consul" {\n   source      = "hashicorp/consul/aws"\n   num_servers = "3"\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},511151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var s=t(667294);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);