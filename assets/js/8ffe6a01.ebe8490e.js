"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[81712],{223049:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"languages/java/reflection","title":"Reflection","description":"Reflection is an api used to examine or modify the behavior of methods, classes or interfaces at runtime.","source":"@site/docs/languages/java/reflection.md","sourceDirName":"languages/java","slug":"/languages/java/reflection","permalink":"/languages/java/reflection","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/java/reflection.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Questions","permalink":"/languages/java/questions"},"next":{"title":"Spring","permalink":"/languages/java/spring"}}');var a=i(474848),o=i(28453);const s={},r="Reflection",c={},l=[{value:"Java Reflectionis a<em>process of examining or modifying the run time behavior of a class at run time</em>",id:"java-reflectionis-aprocess-of-examining-or-modifying-the-run-time-behavior-of-a-class-at-run-time",level:2}];function d(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"reflection",children:"Reflection"})}),"\n",(0,a.jsx)(t.p,{children:"Reflection is an api used to examine or modify the behavior of methods, classes or interfaces at runtime."}),"\n",(0,a.jsx)(t.p,{children:"Java Reflection API"}),"\n",(0,a.jsxs)(t.h2,{id:"java-reflectionis-aprocess-of-examining-or-modifying-the-run-time-behavior-of-a-class-at-run-time",children:["Java Reflectionis a",(0,a.jsx)(t.em,{children:"process of examining or modifying the run time behavior of a class at run time"})]}),"\n",(0,a.jsxs)(t.p,{children:["In ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Computer_science",children:"computer science"}),", ",(0,a.jsx)(t.strong,{children:"reflection"})," is the ability of a ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Computer_program",children:"computer program"})," to examine, ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Introspection_(computer_science)",children:"introspect"}),", and modify its own structure and behavior at ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)",children:"runtime"})]}),"\n",(0,a.jsx)(t.p,{children:"Reflection is the ability of classes and objects to examine their own constructors, fields, methods, and so on. It is used usually for backward compatibility, to check if a given method is available for a particular OS version."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>r});var n=i(296540);const a={},o=n.createContext(a);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);