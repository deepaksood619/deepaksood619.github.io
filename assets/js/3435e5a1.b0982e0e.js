"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[91986],{481610:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"languages/others/tla-plus","title":"TLA+","description":"TLA+(pronounced astee ell a plus, /\u02c8ti\u02d0\u025ble\u026apl\u028cs/) is a formal specification language developed by Leslie Lamport. It is used to design, model, document, and verify concurrent systems. TLA+has been described as exhaustively-testable pseudocode, and its use likened to drawing blueprints for software systems;TLAis an acronym for Temporal Logic of Actions.","source":"@site/docs/languages/others/tla-plus.md","sourceDirName":"languages/others","slug":"/languages/others/tla-plus","permalink":"/languages/others/tla-plus","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/others/tla-plus.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Swift","permalink":"/languages/others/swift"},"next":{"title":"TOML","permalink":"/languages/others/toml"}}');var n=t(474848),a=t(28453);const r={},o="TLA+",l={},c=[];function d(e){const i={a:"a",h1:"h1",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"tla",children:"TLA+"})}),"\n",(0,n.jsxs)(i.p,{children:["TLA+(",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/English_alphabet#Letter_names",children:"pronounced"})," astee ell a plus, ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Help:IPA/English",children:"/\u02c8ti\u02d0\u025ble\u026apl\u028cs/"}),") is a ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Formal_specification",children:"formal specification"})," language developed by ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Leslie_Lamport",children:"Leslie Lamport"}),". It is used to design, model, document, and verify ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Concurrent_systems",children:"concurrent systems"}),". TLA+has been described as exhaustively-testable ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Pseudocode",children:"pseudocode"}),", and its use likened to ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Technical_drawing",children:"drawing blueprints"})," for software systems;TLAis an ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Acronym",children:"acronym"})," for ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Temporal_Logic_of_Actions",children:"Temporal Logic of Actions"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["For design and documentation, TLA+fulfills the same purpose as informal ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Technical_specifications",children:"technical specifications"}),". However, TLA+specifications are written in a formal language of ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Logic",children:"logic"})," and mathematics, and the precision of specifications written in this language is intended to uncover design flaws before system implementation is underway."]}),"\n",(0,n.jsxs)(i.p,{children:["Since TLA+specifications are written in a formal language, they are amenable to finite ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Model_checking",children:"model checking"}),". The model checker finds all possible system behaviours up to some number of execution steps, and examines them for violations of desired ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Invariant_(computer_science)",children:"invariance"})," properties such as ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Safety_(distributed_computing)",children:"safety"})," and ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Liveness",children:"liveness"}),". TLA+specifications use basic ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Set_theory",children:"set theory"})," to define safety (bad things won't happen) and ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Temporal_logic",children:"temporal logic"})," to define liveness (good things eventually happen)."]}),"\n",(0,n.jsxs)(i.p,{children:["TLA+is also used to write ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Automated_theorem_proving",children:"machine-checked proofs of correctness"})," both for ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Algorithms",children:"algorithms"})," and mathematical theorems. The proofs are written in a declarative, hierarchical style independent of any single theorem prover backend. Both formal and informal structured mathematical proofs can be written in TLA+; the language is similar to ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/LaTeX",children:"LaTeX"}),", and tools exist to translate TLA+specifications to LaTeX documents."]}),"\n",(0,n.jsxs)(i.p,{children:["TLA+was introduced in 1999, following several decades of research into a verification method for concurrent systems. A toolchain has since developed, including an ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Interactive_development_environment",children:"IDE"})," and distributed model checker. The pseudocode-like language ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/PlusCal",children:"PlusCal"})," was created in 2009; it ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Source-to-source_compiler",children:"transpiles"})," to TLA+and is useful for specifying sequential algorithms. TLA+2was announced in 2014, expanding language support for proof constructs. The current TLA+reference is ",(0,n.jsx)(i.a,{href:"http://research.microsoft.com/en-us/um/people/lamport/tla/hyperbook.html",children:"The TLA+Hyperbook"})," by Leslie Lamport."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/TLA%2B",children:"https://en.wikipedia.org/wiki/TLA%2B"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://www.youtube.com/playlist?list=PLWAv2Etpa7AOAwkreYImYt0gIpOdWQevD",children:"https://www.youtube.com/playlist?list=PLWAv2Etpa7AOAwkreYImYt0gIpOdWQevD"})})]})}function p(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>o});var s=t(296540);const n={},a=s.createContext(n);function r(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);