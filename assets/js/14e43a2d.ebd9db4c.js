"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[46129],{557241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"python/advanced/faster-python","title":"Faster Python","description":"1. Line Profiling","source":"@site/docs/python/advanced/faster-python.md","sourceDirName":"python/advanced","slug":"/python/advanced/faster-python","permalink":"/python/advanced/faster-python","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/advanced/faster-python.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1759945741000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CPython","permalink":"/python/advanced/cpython"},"next":{"title":"Idiomatic Python","permalink":"/python/advanced/idiomatic-python"}}');var a=n(474848),s=n(28453);const i={},o="Faster Python",l={},c=[{value:"Optimizing Python Memory Objects",id:"optimizing-python-memory-objects",level:2},{value:"Performant Python (reducing memory usage)",id:"performant-python-reducing-memory-usage",level:2},{value:"Ray",id:"ray",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"faster-python",children:"Faster Python"})}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Line Profiling"}),"\n",(0,a.jsx)(t.li,{children:"Numpy Vectorization"}),"\n",(0,a.jsxs)(t.li,{children:["Specilized data structures","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"scipy.spatial - For spatial query like distances, nearest neighbor, kd trees etc."}),"\n",(0,a.jsx)(t.li,{children:"pandas - for SQL-like grouping or aggregation"}),"\n",(0,a.jsx)(t.li,{children:"xarray - for grouping across multiple dimensions"}),"\n",(0,a.jsx)(t.li,{children:"scipy.sparse - sparse matrices for 2-dimensional structured data"}),"\n",(0,a.jsx)(t.li,{children:"sparse package - for N-dimensional structured data"}),"\n",(0,a.jsx)(t.li,{children:"scipy.sparse.csgraph - for graph-like problems (e.g. finding shortest paths)"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.li,{children:"CPython"}),"\n",(0,a.jsxs)(t.li,{children:["Numba - ",(0,a.jsx)(t.a,{href:"https://www.youtube.com/watch?v=x58W9A2lnQc",children:"https://www.youtube.com/watch?v=x58W9A2lnQc"})]}),"\n",(0,a.jsxs)(t.li,{children:["Dask","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Parallel Computation"}),"\n",(0,a.jsx)(t.li,{children:"Task Graph"}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://www.kdnuggets.com/2020/04/dask-big-data.html",children:"https://www.kdnuggets.com/2020/04/dask-big-data.html"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://rapids.ai",children:"https://rapids.ai"}),"  ",(0,a.jsx)(t.a,{href:"https://github.com/rapidsai",children:"https://github.com/rapidsai"})]}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://vaex.io/",children:"Vaex: A Fast DataFrame for Python \ud83d\ude80"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://github.com/pola-rs/polars",children:"GitHub - pola-rs/polars: Fast multi-threaded, hybrid-out-of-core DataFrame library in Rust | Python | Node.js"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://ibis-project.org/posts/1tbc/",children:"Querying 1TB on a laptop with Python dataframes \u2013 Ibis"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://github.com/ibis-project/ibis",children:"GitHub - ibis-project/ibis: the portable Python dataframe library"})}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"optimizing-python-memory-objects",children:"Optimizing Python Memory Objects"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://habr.com/en/post/458518",children:"https://habr.com/en/post/458518"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9",children:"https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9"})}),"\n",(0,a.jsx)(t.h2,{id:"performant-python-reducing-memory-usage",children:"Performant Python (reducing memory usage)"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Tuples save a bit of memory when replacing lists"}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Tuples save lots of memory when replacing dictionaries"})}),"\n",(0,a.jsx)(t.li,{children:"Generators save memory only for large tuples, but are faster to iterate"}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Slotted classes save a lot of memory"})}),"\n",(0,a.jsx)(t.li,{children:"Namedtuples are better than classes but worse than slotted classes"}),"\n",(0,a.jsx)(t.li,{children:"Map and filter are sometimes faster than comprehensions"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://strangemachines.io/articles/performant-python",children:"https://strangemachines.io/articles/performant-python"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://blog.esciencecenter.nl/parallel-programming-in-python-7fd62c90217d",children:"https://blog.esciencecenter.nl/parallel-programming-in-python-7fd62c90217d"})}),"\n",(0,a.jsx)(t.h2,{id:"ray",children:"Ray"}),"\n",(0,a.jsx)(t.p,{children:"A fast and simple framework for building and running distributed applications. Ray is packaged with RLlib, a scalable reinforcement learning library, and Tune, a scalable hyperparameter tuning library."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://ray.io",children:"https://ray.io"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://github.com/ray-project/ray",children:"https://github.com/ray-project/ray"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1",children:"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8",children:"https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://docs.ray.io/en/latest/serve/index.html",children:"Ray Serve: Scalable and Programmable Serving \u2014 Ray 2.34.0"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://www.anyscale.com/",children:"Anyscale | Scalable Compute for AI and Python"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://www.youtube.com/watch?v=pRiKZPk_-98",children:"Scalable and Cost Efficient AI Workloads with AWS and Anyscale - YouTube"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(296540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);