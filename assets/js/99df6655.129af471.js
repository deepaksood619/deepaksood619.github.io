"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[10557],{156217:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"databases-nosql/cassandra/working","title":"Working","description":"Writes","source":"@site/docs/databases-nosql/cassandra/working.md","sourceDirName":"databases-nosql/cassandra","slug":"/databases-nosql/cassandra/working","permalink":"/databases-nosql/cassandra/working","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases-nosql/cassandra/working.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1749576162000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Questions","permalink":"/databases-nosql/cassandra/questions"},"next":{"title":"Column family","permalink":"/databases-nosql/column-family"}}');var a=i(474848),t=i(28453);const r={},l="Working",d={},o=[{value:"Writes",id:"writes",level:2},{value:"Always writable: Hinted Handoff mechanism",id:"always-writable-hinted-handoff-mechanism",level:4},{value:"One ring per datacenter",id:"one-ring-per-datacenter",level:4},{value:"Writes at a replica node",id:"writes-at-a-replica-node",level:4},{value:"The Write Path",id:"the-write-path",level:2},{value:"What is an SSTable",id:"what-is-an-sstable",level:2},{value:"The Read Path",id:"the-read-path",level:2},{value:"Compaction",id:"compaction",level:3},{value:"Deletes: don&#39;t delete item right away",id:"deletes-dont-delete-item-right-away",level:2},{value:"Reads: Similar to writes, expect",id:"reads-similar-to-writes-expect",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"working",children:"Working"})}),"\n",(0,a.jsx)(n.h2,{id:"writes",children:"Writes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Need to be lock-free and fast (no reads or disk seeks)"}),"\n",(0,a.jsxs)(n.li,{children:["Client sends write to one coordinator node in Cassandra cluster","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Coordinator may be per-key, or per-client or per-query"}),"\n",(0,a.jsx)(n.li,{children:"Per-key coordinator ensures writes for the key are serialized"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Coordinator uses Partitioner to send query to all replica nodes responsible for key"}),"\n",(0,a.jsx)(n.li,{children:"When X replicas respond, coordinator returns an acknowledgement to the client"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"always-writable-hinted-handoff-mechanism",children:"Always writable: Hinted Handoff mechanism"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If any replica is down, the coordinator writes to all other replicas, and keeps the write locally until down replica comes back up"}),"\n",(0,a.jsx)(n.li,{children:"When all replicas are down, the Coordinator (front end) buffers write (for up to a few hours)"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"one-ring-per-datacenter",children:"One ring per datacenter"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Per-DC coordinator elected to coordinate with other DCs"}),"\n",(0,a.jsx)(n.li,{children:"Election done via Zookeeper, which runs a Paxos (consensus) variant"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"writes-at-a-replica-node",children:"Writes at a replica node"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Log it in disk commit log (for failure recovery)"}),"\n",(0,a.jsx)(n.li,{children:"Make changes to appropriate memtables"}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Memtable = In-memory representation of multiple key-value pairs"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Typically append-only datastructure (fast)"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Cache that can be searched by key"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Write-back as opposed to write-through"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Later When memtable is full or old, flush to disk"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Data File: An SSTable (Sorted String Table) - list of key-value pairs, sorted by key"}),"\n",(0,a.jsx)(n.li,{children:"SSTables are immutable (once created, they don't change)"}),"\n",(0,a.jsx)(n.li,{children:"Index file: An SSTable of (key, position in data sstable) pairs"}),"\n",(0,a.jsx)(n.li,{children:"And a Bloom Filter (for efficient search)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-write-path",children:"The Write Path"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Writes are written to any node in the cluster (coordinator)"}),"\n",(0,a.jsx)(n.li,{children:"Writes are written to commit log, then to memtable"}),"\n",(0,a.jsx)(n.li,{children:"Every write includes a timestamp"}),"\n",(0,a.jsx)(n.li,{children:"Memtable flushed to disk periodically (sstable)"}),"\n",(0,a.jsx)(n.li,{children:"New memtable is created in memory"}),"\n",(0,a.jsxs)(n.li,{children:['Deletes are a special write case, called a "tombstone"\n',(0,a.jsx)(n.img,{alt:"image",src:i(209672).A+"",width:"570",height:"650"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"what-is-an-sstable",children:"What is an SSTable"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Immutable data file for row storage"}),"\n",(0,a.jsx)(n.li,{children:"Every write includes a timestamp of when it was written"}),"\n",(0,a.jsx)(n.li,{children:"Partition is spread across multiple SSTables"}),"\n",(0,a.jsx)(n.li,{children:"Same column can be in multiple SSTables"}),"\n",(0,a.jsx)(n.li,{children:"Merged through compaction, only latest timestamp is kept"}),"\n",(0,a.jsx)(n.li,{children:"Deletes are written as tombstones"}),"\n",(0,a.jsx)(n.li,{children:"Easy backups"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-read-path",children:"The Read Path"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Any server may be queried, it acts as the coordinator"}),"\n",(0,a.jsx)(n.li,{children:"Contacts nodes with the requested key"}),"\n",(0,a.jsx)(n.li,{children:"On each node, data is pulled from SSTables and merged"}),"\n",(0,a.jsx)(n.li,{children:"Consistency < All performs read repair in background (read_repair_chance -default 10% of reads)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"image",src:i(136951).A+"",width:"674",height:"466"})}),"\n",(0,a.jsx)(n.h3,{id:"compaction",children:"Compaction"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Data updates accumulate over time and SSTables and logs need to be compacted","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The process of compaction merges SSTables, i.e., by merging updates for a key"}),"\n",(0,a.jsx)(n.li,{children:"Run periodically and locally at each server- TimeWindowCompactionStrategy"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html",children:"https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html"})}),"\n",(0,a.jsx)(n.h2,{id:"deletes-dont-delete-item-right-away",children:"Deletes: don't delete item right away"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Add a tombstone to the log"}),"\n",(0,a.jsx)(n.li,{children:"Eventually, when compaction encounters tombstone it will delete item"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"reads-similar-to-writes-expect",children:"Reads: Similar to writes, expect"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Coordinator can contact X replicas (e.g., in same rack)","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Coordinator sends read to replicas that have responded quickest in past"}),"\n",(0,a.jsx)(n.li,{children:"When X replicas respond, coordinator returns the latest timestamped value from among those X"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Coordinator also fetches value from other replicas","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks consistency in the background, initiating a read repair if any two values are different"}),"\n",(0,a.jsx)(n.li,{children:"This mechanism seeks to eventually bring all replicas up to date"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["At a replica","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A row may be split across SSTables => reads need to touch multiple SSTables => reads slower than writes (but still fast)"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},209672:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Cassandra_Working-image1-5b5f649aef68300486da42de248ec529.jpg"},136951:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Cassandra_Working-image2-055fd29a3f24aa0dc58cd4e43d180d5c.jpg"},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(296540);const a={},t=s.createContext(a);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);