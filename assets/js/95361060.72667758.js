"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[50890],{792344:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=t(785893),r=t(511151);const s={},i="docker-compose example",a={id:"devops/docker/docker-compose-example",title:"docker-compose example",description:"",source:"@site/docs/devops/docker/docker-compose-example.md",sourceDirName:"devops/docker",slug:"/devops/docker/docker-compose-example",permalink:"/devops/docker/docker-compose-example",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/docker/docker-compose-example.md",tags:[],version:"current",lastUpdatedAt:1728328563,formattedLastUpdatedAt:"Oct 7, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Docker Commands",permalink:"/devops/docker/docker-commands"},next:{title:"docker-compose",permalink:"/devops/docker/docker-compose"}},c={},d=[];function l(n){const e={code:"code",h1:"h1",pre:"pre",...(0,r.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"docker-compose-example",children:"docker-compose example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:'version: "3.7"\nservices:\n zenalytix-build:\n  build:\n   context: .\n   dockerfile: Dockerfile\n   args:\n    GIT_USERNAME: ${GIT_USERNAME}\n    GIT_PASSWORD: ${GIT_PASSWORD}\n  image: gcr.io/abc-data-archiver/zenalytix:fc3c0ae06074\n\n zenalytix-dev:\n  stdin_open: true\n  tty: true\n  restart: always / "no" / on-failure / unless-stopped\n  image: gcr.io/abc-data-archiver/zenalytix:fc3c0ae06074\n  deploy:\n    replicas: 5\n    resources:\n    limits:\n   cpus: "0.1"\n   memory: 50M\n    restart_policy:\n    condition: on-failure\n  container_name: zenalytix-dev\n  labels:\n   app: decision_engine\n  env_file:\n    - .env\n    - Docker/env/${ZENALYTIX_ENV}.env\n  environment:\n    - DEBUG=True\n    - DJANGO_SETTINGS_MODULE=zenalytix.settings\n    - POSTGRES_PASSWORD=airflow\n    - POSTGRES_USER=postgres\n    - POSTGRES_DB=airflow\n  working_dir: /root/src/zenalytix\n  cap_add:\n    - ALL\n  cap_drop:\n    - SYS_ADMIN\n    - NET_ADMIN\n  args:\n    - buildno=1\n    - coordinator\n  entrypoint:\n    - /bin/bash\n    - -c\n    - |\n         # mkdir -p /dev/net && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun && openvpn --config Docker/OpenVPN/energy.ovpn &\n         python manage.py runserver 0.0.0.0:9104\n   sleep infinity\n  ports:\n    - 9104:9104\n  networks:\n    abc-docker:\n   ipv4_address: ${ZENALYTIX_IP}\n  volumes:\n    - post:/root/src/zenalytix\n  healthcheck:\n    test: "curl -f -s -o /dev/null -I http://${ZENALYTIX_IP}:9104/"\n    interval: 10s\n    timeout: 10s\n    retries: 5\n\n  logging:\n        driver: awslogs\n        options:\n          awslogs-group: devec2\n          awslogs-region: us-west-2\n\n  depends_on:\n    - "postgres-zenalytix"\n    - "redis-zenalytix"\n\n  redis:\n    stdin_open: true\n    tty: true\n    restart: "no"\n    image: bitnami/redis:6.0\n    container_name: redis\n    env_file:\n      - dev.env\n    ports:\n      - 6379:6379\n    healthcheck:\n      test: "redis-cli -h localhost -p 6379 ping"\n      interval: 10s\n      timeout: 10s\n      retries: 5\n    volumes:\n      - ./data/redis:/bitnami/redis/data\n    networks:\n      - localhost_net\n\n  redisinsight:\n    stdin_open: true\n    tty: true\n    restart: "no"\n    image: redislabs/redisinsight:latest\n    container_name: redisinsight\n    ports:\n      - 8001:8001\n      # - 6379:6379\n    volumes:\n      - ./data/redis:/bitnami/redis/data\n    networks:\n      - localhost_net\n\nnetworks:\n  abc-docker:\n    external:\n      name: abc-docker\n\n  airflow-docker:\n\nvolumes:\n  postgres-zenalytix-volume:\n    external: true\n\nmysql:\n   stdin_open: true\n   tty: true\n   restart: "no"\n   image: mysql:8\n    image: mysql:8.0.19\n   container_name: mysql\n   command: --default-authentication-plugin=mysql_native_password\n   environment:\n     - MYSQL_HOST=localhost\n     - MYSQL_PORT=3306\n     - MYSQL_ROOT_PASSWORD=mysql_root_password\n     - MYSQL_DATABASE=creditengine\n     - MYSQL_USER=creditengine\n     - MYSQL_PASSWORD=creditengine\n   ports:\n     - 3306:3306\n   volumes:\n    - ./data:/var/lib/mysql\n\nmysql:\n    stdin_open: true\n    tty: true\n    restart: "no"\n    image: mysql:5.7.29\n    container_name: mysql\n    environment:\n     - MYSQL_HOST=localhost\n     - MYSQL_PORT=3306\n     - MYSQL_ROOT_PASSWORD=mysql_root_password\n     - MYSQL_DATABASE=creditengine\n     - MYSQL_USER=creditengine\n     - MYSQL_PASSWORD=creditengine\n    ports:\n      - 3306:3306\n    volumes:\n      - ./data:/var/lib/mysql\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},511151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>i});var o=t(667294);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);