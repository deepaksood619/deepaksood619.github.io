"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[61874],{629839:(n,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>r,metadata:()=>h,toc:()=>t});var e=i(785893),l=i(511151);const r={},c="Algo + DS",h={id:"algorithms/general/algo-ds",title:"Algo + DS",description:"Algorithms",source:"@site/docs/algorithms/general/algo-ds.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/algo-ds",permalink:"/algorithms/general/algo-ds",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/algo-ds.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2d orthogonal range search",permalink:"/algorithms/general/2d-orthogonal-range-search"},next:{title:"Algorithms Questions",permalink:"/algorithms/general/algorithms-questions"}},d={},t=[{value:"Algorithms",id:"algorithms",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"Strategies for algorithms",id:"strategies-for-algorithms",level:2},{value:"Resources",id:"resources",level:2},{value:"Most Important Algos / DS / Programming Concepts",id:"most-important-algos--ds--programming-concepts",level:2},{value:"BUD Optimization Strategy",id:"bud-optimization-strategy",level:2},{value:"Questions to asking when solving a coding interview questions",id:"questions-to-asking-when-solving-a-coding-interview-questions",level:2}];function o(n){const s={a:"a",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(s.h1,{id:"algo--ds",children:"Algo + DS"}),"\n",(0,e.jsx)(s.h2,{id:"algorithms",children:"Algorithms"}),"\n",(0,e.jsxs)(s.ol,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Union-Find Algorithm"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Dynamic Connectivity"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Quick Find"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Quick Union"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Improvements"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Weighted Quick Union"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Weighted Quick Union with Path Compression"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Analysis of algorithms"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Scientific Method of Analysis"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Empirical Method of Analysis"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Stacks and Queues"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Stacks"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Resizing Arrays"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Queues"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Deque"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Randomized Queues"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Elementary Sort"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Selection Sort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Insertion Sort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Shell Sort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Shuffling"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Shuffle Sort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Knuth Shuffle"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Convex Hull"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Merge Sort"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Bottom up mergesort"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Quick Sort"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Quick Select (Selection)"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"3- way partition quicksort (Duplicate Keys)"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"System sorts"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Priority Queues"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Binary heaps"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Heap sort"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Elementary Symbol Tables"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Elementary Implementations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.p,{children:"Sorted array (Binary Search)"}),"\n",(0,e.jsx)(s.p,{children:"Unordered List (Sequential Search)"}),"\n",(0,e.jsxs)(s.ol,{start:"2",children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Ordered Operations"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Binary Search Trees"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Ordered Operations in BSTs"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Deletion in BSTs"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Balanced Search Trees"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"2-3 Search Trees"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Red-Black Trees"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"B-Trees"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Geometric applications of BST"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"1d Range Search"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Line Segment Intersection"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Kd-Trees"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Interval Search Trees"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Rectangle Intersection"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ol,{start:"11",children:["\n",(0,e.jsx)(s.li,{children:"Hash Tables"}),"\n"]}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Uniform Hashing Assumption"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Separate Chaining"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Linear Probing"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ol,{start:"12",children:["\n",(0,e.jsx)(s.li,{children:"Symbol Table Applications"}),"\n"]}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Sets"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Dictionary Clients"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Indexing Clients"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Sparse Vectors"}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,e.jsxs)(s.ol,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Undirected Graphs"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Implementation"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Adjacency Matrix"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Adjacency List"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"DFS"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"BFS"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Connected Components"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Directed Graphs"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Topological Sort"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Topological order of an acyclic digraph"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Strongly Connected Components"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Kosaraju-Sharir algorithm for computing strong components of a digraph"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Minimum Spanning Trees"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Kruskal's Algorithm"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Prim's Algorithm"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Shortest Path"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Dijkstra's Algorithm"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Bellman Ford Algorithm (Negative Weights)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Maximum Flow and Minimum Cut"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Ford-Fulkerson Algorithm"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Radix Sorts"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Key-Indexed Counting"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"LSD Radix Sort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"MSD Radix Sort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"3-way Radix Quicksort"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Suffix Arrays"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Tries"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"R-way Tries"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Ternary Search Tries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Substring Search"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"KMP (Knuth-Morris-Pratt)"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Boyer-Moore"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Rabin-Karp"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Regular Expressions"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"DFA"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"NFA"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Data Compression"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Run Length Encoding"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Huffman Compression"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"LZW Compression"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Burrows-Wheeler"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ol,{start:"11",children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Reductions"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Linear Programming"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Brewer's Problem"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Simplex Algorithm"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.ol,{start:"13",children:["\n",(0,e.jsx)(s.li,{children:"Intractability"}),"\n"]}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"P"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"NP"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"NP-Complete"}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.h2,{id:"strategies-for-algorithms",children:"Strategies for algorithms"}),"\n",(0,e.jsxs)(s.ol,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"B.U.D. (Bottleneck, Unnecessary work, Duplicated work)"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Space / Time Tradeoffs"}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,e.jsxs)(s.ol,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Coursera - Algorithms Part 1"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Coursera - Algorithms Part 2"}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.p,{children:(0,e.jsx)(s.a,{href:"https://www.toptal.com/algorithms/interview-questions",children:"https://www.toptal.com/algorithms/interview-questions"})}),"\n",(0,e.jsx)(s.h2,{id:"most-important-algos--ds--programming-concepts",children:"Most Important Algos / DS / Programming Concepts"}),"\n",(0,e.jsxs)(s.ol,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Depth first search"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Breadth first search"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Matching parenthesis"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Hash Tables"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Variables / Pointer manipulations"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Reversing a linked list"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Sorting fundamentals"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Recursion"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Custom data structures (suffix tree)"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:(0,e.jsx)(s.strong,{children:"Binary search"})}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.h2,{id:"bud-optimization-strategy",children:"BUD Optimization Strategy"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Bottlenecks"}),"\n",(0,e.jsx)(s.li,{children:"Unnecessary work"}),"\n",(0,e.jsx)(s.li,{children:"Duplicated work"}),"\n"]}),"\n",(0,e.jsx)(s.p,{children:(0,e.jsx)(s.a,{href:"https://4tee-learn.blogspot.com/2017/12/optimisation-technique-15-bud.html",children:"https://4tee-learn.blogspot.com/2017/12/optimisation-technique-15-bud.html"})}),"\n",(0,e.jsx)(s.h2,{id:"questions-to-asking-when-solving-a-coding-interview-questions",children:"Questions to asking when solving a coding interview questions"}),"\n",(0,e.jsxs)(s.ol,{children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"What is the data types of the inputs?"}),"\n",(0,e.jsxs)(s.ul,{children:["\n",(0,e.jsx)(s.li,{children:"Can we assume the string is ASCII or Unicode?"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Do we have to worry about load factors?"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Do we have to validate inputs?"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Can we assume this fits in memory?"}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsx)(s.p,{children:"Can we use additional data structures?"}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(s.p,{children:(0,e.jsx)(s.a,{href:"https://www.freecodecamp.org/news/learn-algorithms-and-data-structures-in-python",children:"https://www.freecodecamp.org/news/learn-algorithms-and-data-structures-in-python"})}),"\n",(0,e.jsx)(s.p,{children:(0,e.jsx)(s.a,{href:"https://www.youtube.com/playlist?list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb",children:"MIT 6.006 Introduction to Algorithms, Fall 2011"})}),"\n",(0,e.jsx)(s.p,{children:(0,e.jsx)(s.a,{href:"https://github.com/MisterBooo/LeetCodeAnimation",children:"https://github.com/MisterBooo/LeetCodeAnimation"})})]})}function x(n={}){const{wrapper:s}={...(0,l.a)(),...n.components};return s?(0,e.jsx)(s,{...n,children:(0,e.jsx)(o,{...n})}):o(n)}},511151:(n,s,i)=>{i.d(s,{Z:()=>h,a:()=>c});var e=i(667294);const l={},r=e.createContext(l);function c(n){const s=e.useContext(r);return e.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function h(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:c(n.components),e.createElement(r.Provider,{value:s},n.children)}}}]);