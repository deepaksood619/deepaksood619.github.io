"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[64518],{29893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(785893),i=n(511151);const r={},a="Set",o={id:"python/python-intro/data-structure/set",title:"Set",description:"- Set doesn't support indexing/slicing",source:"@site/docs/python/python-intro/data-structure/set.md",sourceDirName:"python/python-intro/data-structure",slug:"/python/python-intro/data-structure/set",permalink:"/python/python-intro/data-structure/set",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/data-structure/set.md",tags:[],version:"current",lastUpdatedAt:1686161984,formattedLastUpdatedAt:"Jun 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List",permalink:"/python/python-intro/data-structure/list"},next:{title:"Tuples",permalink:"/python/python-intro/data-structure/tuples"}},d={},l=[{value:"Frozen Sets",id:"frozen-sets",level:2},{value:"Creating a set",id:"creating-a-set",level:2},{value:"Adding element to set",id:"adding-element-to-set",level:2},{value:"Removing item to set",id:"removing-item-to-set",level:2},{value:"Union of sets",id:"union-of-sets",level:2},{value:"Intersection of sets",id:"intersection-of-sets",level:2},{value:"Difference of sets",id:"difference-of-sets",level:2},{value:"Symmetric Difference",id:"symmetric-difference",level:2},{value:"Compare Sets",id:"compare-sets",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"set",children:"Set"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Set doesn't support indexing/slicing"}),"\n",(0,s.jsx)(t.li,{children:"Set doesn't support random.choices(a), since it doesn't support indexing"}),"\n",(0,s.jsx)(t.li,{children:"Implementation is mostly similar to dictionary"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python's set class represents the mathematical notion of a set. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set. This is based on a data structure known as a hash table."}),"\n",(0,s.jsx)(t.h2,{id:"frozen-sets",children:"Frozen Sets"}),"\n",(0,s.jsx)(t.p,{children:"Frozen sets are immutable objects that only support methods and operators that produce a result without affecting the frozen set or sets to which they are applied"}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-set",children:"Creating a set"}),"\n",(0,s.jsx)(t.p,{children:"A set is created by using the set() function or placing all the elements within a pair of curly braces."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'Days=set(["Mon","Tue","Wed","Thu","Fri","Sat","Sun"])\nMonths={"Jan","Feb","Mar"}\nDates={21,22,17}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"adding-element-to-set",children:"Adding element to set"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'Days.add("Sun")'})}),"\n",(0,s.jsx)(t.h2,{id:"removing-item-to-set",children:"Removing item to set"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'Days.discard("Sun")'})}),"\n",(0,s.jsx)(t.h2,{id:"union-of-sets",children:"Union of sets"}),"\n",(0,s.jsx)(t.p,{children:"The set of elements in A, B or both (written as A | B)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'DaysA = set(["Mon","Tue","Wed"])\nDaysB = set(["Wed","Thu","Fri","Sat","Sun"])\nAllDays = DaysA|DaysB\n\nset([\'Wed\', \'Fri\', \'Tue\', \'Mon\', \'Thu\', \'Sat\'])\n'})}),"\n",(0,s.jsx)(t.h2,{id:"intersection-of-sets",children:"Intersection of sets"}),"\n",(0,s.jsx)(t.p,{children:"The set of elements in both A and B (written as A & B)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'DaysA = set(["Mon","Tue","Wed"])\nDaysB = set(["Wed","Thu","Fri","Sat","Sun"])\nAllDays = DaysA & DaysB\n\nset([\'Wed\'])\n'})}),"\n",(0,s.jsx)(t.h2,{id:"difference-of-sets",children:"Difference of sets"}),"\n",(0,s.jsx)(t.p,{children:"The set of elements in A but not in B (written as A - B)"}),"\n",(0,s.jsx)(t.p,{children:"The order matters for Difference. A - B is NOT the same as B - A."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'DaysA = set(["Mon","Tue","Wed"])\nDaysB = set(["Wed","Thu","Fri","Sat","Sun"])\nAllDays = DaysA - DaysB\n\nset([\'Mon\', \'Tue\'])\n\n# or\nAllDays = DaysA.difference(DaysB) # for A - B\nAllDaysB = DaysB.difference(DaysA) # for B - A\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://www.geeksforgeeks.org/python-set-difference/",children:"Python Set | difference() - GeeksforGeeks"})}),"\n",(0,s.jsx)(t.h2,{id:"symmetric-difference",children:"Symmetric Difference"}),"\n",(0,s.jsx)(t.p,{children:"The set of elements in either A or B but not both A and B (written as A ^ B)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'DaysA = set(["Mon","Tue","Wed"])\nDaysB = set(["Wed","Thu","Fri","Sat","Sun"])\nAllDays = DaysA ^ DaysB\n\nset([\'Fri\', \'Mon\', \'Sat\', \'Sun\', \'Thu\', \'Tue\'])\n'})}),"\n",(0,s.jsx)(t.h2,{id:"compare-sets",children:"Compare Sets"}),"\n",(0,s.jsx)(t.p,{children:"We can check if a given set is a subset or superset of another set. The result is True or False depending on the elements present in the sets."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'DaysA = set(["Mon","Tue","Wed"])\nDaysB = set(["Mon","Tue","Wed","Thu","Fri","Sat","Sun"])\nSubsetRes = DaysA <= DaysB\nSupersetRes = DaysB >= DaysA\nprint(SubsetRes)\nprint(SupersetRes)\n\nTrue\nTrue\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},511151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var s=n(667294);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);