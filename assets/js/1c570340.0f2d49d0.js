"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[96654],{180118:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var s=i(785893),l=i(511151);const o={},r="Optimizations",t={id:"python/django/optimizations",title:"Optimizations",description:"Best Practices for Querysets",source:"@site/docs/python/django/optimizations.md",sourceDirName:"python/django",slug:"/python/django/optimizations",permalink:"/python/django/optimizations",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/django/optimizations.md",tags:[],version:"current",lastUpdatedAt:1732180496,formattedLastUpdatedAt:"Nov 21, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Models",permalink:"/python/django/models"},next:{title:"Other Topics",permalink:"/python/django/other-topics"}},a={},c=[{value:"Best Practices for Querysets",id:"best-practices-for-querysets",level:2},{value:"1. Fetch Only What You Need",id:"1-fetch-only-what-you-need",level:3},{value:"2. Avoid the N+1 Problem",id:"2-avoid-the-n1-problem",level:3},{value:"3. Filter Early and Accurately",id:"3-filter-early-and-accurately",level:3},{value:"4. Use Query Chaining",id:"4-use-query-chaining",level:3},{value:"5. Use <code>values()</code> or <code>values_list()</code> for Lightweight Queries",id:"5-use-values-or-values_list-for-lightweight-queries",level:3},{value:"6. Avoid Heavy Queries in Loops",id:"6-avoid-heavy-queries-in-loops",level:3},{value:"Optimization Techniques",id:"optimization-techniques",level:2},{value:"1. Indexing",id:"1-indexing",level:3},{value:"2. Use Database Functions and Annotations",id:"2-use-database-functions-and-annotations",level:3},{value:"3. Batch Querysets with <code>iterator()</code>",id:"3-batch-querysets-with-iterator",level:3},{value:"4. Limit Querysets with Slicing",id:"4-limit-querysets-with-slicing",level:3},{value:"5. Raw SQL for Complex Queries",id:"5-raw-sql-for-complex-queries",level:3},{value:"6. Caching",id:"6-caching",level:3},{value:"7. Use <code>bulk_create</code> and <code>bulk_update</code>",id:"7-use-bulk_create-and-bulk_update",level:3},{value:"8. Avoid <code>count()</code> on Large Querysets",id:"8-avoid-count-on-large-querysets",level:3},{value:"9. Optimize Database Connections",id:"9-optimize-database-connections",level:3},{value:"10. Use Database Constraints",id:"10-use-database-constraints",level:3},{value:"Common Pitfalls to Avoid",id:"common-pitfalls-to-avoid",level:2},{value:"Summary",id:"summary",level:2},{value:"Links",id:"links",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"optimizations",children:"Optimizations"}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-for-querysets",children:"Best Practices for Querysets"}),"\n",(0,s.jsx)(n.h3,{id:"1-fetch-only-what-you-need",children:"1. Fetch Only What You Need"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"only()"})," to retrieve specific fields you need."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"defer()"})," to exclude fields that you don\u2019t need immediately."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Fetch only 'name' and 'email' fields\nusers = User.objects.only('name', 'email')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-avoid-the-n1-problem",children:"2. Avoid the N+1 Problem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"select_related"})," for foreign key relationships to reduce the number of queries."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"prefetch_related"})," for many-to-many and reverse foreign key relationships."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Example with select_related\nbooks = Book.objects.select_related('author')  \n\n# Example with prefetch_related\nauthors = Author.objects.prefetch_related('books')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-filter-early-and-accurately",children:"3. Filter Early and Accurately"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Apply filters (",(0,s.jsx)(n.code,{children:"filter()"}),", ",(0,s.jsx)(n.code,{children:"exclude()"}),") as early as possible to reduce the size of the dataset."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Avoid fetching all records, then filtering in Python\n# Inefficient:\nusers = User.objects.all() active_users = [user for user in users if user.is_active]\n\n# Efficient:\nactive_users = User.objects.filter(is_active=True)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-use-query-chaining",children:"4. Use Query Chaining"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Querysets are lazy. Chain filters to construct queries efficiently."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"queryset = User.objects.filter(is_active=True).exclude(role='admin')\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"5-use-values-or-values_list-for-lightweight-queries",children:["5. Use ",(0,s.jsx)(n.code,{children:"values()"})," or ",(0,s.jsx)(n.code,{children:"values_list()"})," for Lightweight Queries"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Fetch specific fields as dictionaries (",(0,s.jsx)(n.code,{children:"values()"}),") or tuples (",(0,s.jsx)(n.code,{children:"values_list()"}),") when you don\u2019t need model instances."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Example with values_list\nemails = User.objects.filter(is_active=True).values_list('email', flat=True)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-avoid-heavy-queries-in-loops",children:"6. Avoid Heavy Queries in Loops"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Avoid executing queries in loops; use ",(0,s.jsx)(n.code,{children:"prefetch_related"})," or ",(0,s.jsx)(n.code,{children:"annotate()"})," instead."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Bad Practice\nfor book in Book.objects.all():\n    print(book.author.name)\n\n# Optimized\nbooks = Book.objects.select_related('author')\nfor book in books:\n    print(book.author.name)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"optimization-techniques",children:"Optimization Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"1-indexing",children:"1. Indexing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use database indexes for fields that are frequently queried or filtered."}),"\n",(0,s.jsxs)(n.li,{children:["Add indexes in your models with ",(0,s.jsx)(n.code,{children:"db_index=True"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class User(models.Model):\n    email = models.CharField(max_length=255, db_index=True)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-use-database-functions-and-annotations",children:"2. Use Database Functions and Annotations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"annotate()"})," and ",(0,s.jsx)(n.code,{children:"aggregate()"})," to perform calculations at the database level."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from django.db.models import Count\n\n# Count books per author\nauthors = Author.objects.annotate(book_count=Count('books'))\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-batch-querysets-with-iterator",children:["3. Batch Querysets with ",(0,s.jsx)(n.code,{children:"iterator()"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"iterator()"})," for memory-efficient iteration over large datasets."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"for user in User.objects.iterator():\n    process(user)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-limit-querysets-with-slicing",children:"4. Limit Querysets with Slicing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use slicing to limit the number of records retrieved."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"first_10_books = Book.objects.all()[:10]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-raw-sql-for-complex-queries",children:"5. Raw SQL for Complex Queries"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For highly complex queries, consider using ",(0,s.jsx)(n.code,{children:"raw()"})," to execute raw SQL."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"queryset = Book.objects.raw('SELECT id, title FROM app_book WHERE author_id = %s', [author_id])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-caching",children:"6. Caching"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache frequently accessed query results using Django\u2019s caching framework or tools like Redis."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from django.core.cache import cache\n\nbooks = cache.get('all_books')\nif not books:\n    books = Book.objects.all()\n    cache.set('all_books', books, timeout=300)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"7-use-bulk_create-and-bulk_update",children:["7. Use ",(0,s.jsx)(n.code,{children:"bulk_create"})," and ",(0,s.jsx)(n.code,{children:"bulk_update"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For inserting or updating multiple records, use ",(0,s.jsx)(n.code,{children:"bulk_create"})," or ",(0,s.jsx)(n.code,{children:"bulk_update"})," instead of looping."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Bulk create\nusers = [User(name=f'User {i}') for i in range(100)]\nUser.objects.bulk_create(users)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"8-avoid-count-on-large-querysets",children:["8. Avoid ",(0,s.jsx)(n.code,{children:"count()"})," on Large Querysets"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"exists()"})," if you only need to check for the presence of records."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Instead of this:\nif User.objects.filter(is_active=True).count() > 0:\n\n# Use this:\nif User.objects.filter(is_active=True).exists():\n"})}),"\n",(0,s.jsx)(n.h3,{id:"9-optimize-database-connections",children:"9. Optimize Database Connections"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use connection pooling tools like ",(0,s.jsx)(n.code,{children:"django-db-geventpool"})," for performance in high-traffic applications."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"10-use-database-constraints",children:"10. Use Database Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Enforce data integrity with constraints like ",(0,s.jsx)(n.code,{children:"unique"}),", ",(0,s.jsx)(n.code,{children:"unique_together"}),", or ",(0,s.jsx)(n.code,{children:"check constraints"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class User(models.Model):\n    email = models.EmailField(unique=True)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls-to-avoid",children:"Common Pitfalls to Avoid"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoid loading unnecessary fields or relationships."}),"\n",(0,s.jsx)(n.li,{children:"Avoid inefficient queries in templates; prefetch data in views instead."}),"\n",(0,s.jsx)(n.li,{children:"Avoid running queries in Python loops\u2014leverage Django ORM for bulk operations."}),"\n",(0,s.jsxs)(n.li,{children:["Don\u2019t forget to profile your queries using tools like:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Django Debug Toolbar"}),"\n",(0,s.jsxs)(n.li,{children:["Query logging (",(0,s.jsx)(n.code,{children:"django.db.connection.queries"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Database-specific profilers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"Efficient querying in Django involves:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fetching only the data you need."}),"\n",(0,s.jsx)(n.li,{children:"Reducing the number of queries (especially unnecessary ones)."}),"\n",(0,s.jsxs)(n.li,{children:["Leveraging ORM features like ",(0,s.jsx)(n.code,{children:"select_related"}),", ",(0,s.jsx)(n.code,{children:"prefetch_related"}),", ",(0,s.jsx)(n.code,{children:"annotate"}),", and ",(0,s.jsx)(n.code,{children:"values_list"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Caching, indexing, and profiling your queries regularly."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://chatgpt.com/share/673ee089-3d00-8005-b0ed-43473870060f",children:"ChatGPT - Exclude Columns Django Queryset"})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},511151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>r});var s=i(667294);const l={},o=s.createContext(l);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);