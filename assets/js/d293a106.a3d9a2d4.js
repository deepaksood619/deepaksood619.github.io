"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[91877],{108129:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"python/python-intro/iterators","title":"Iterators","description":"An iterator is an object that can be iterated (looped) upon. It is used to abstract a container of data to make it behave like an iterable object. You probably already use a few iterable objects every day: strings, lists, and dictionaries to name a few.","source":"@site/docs/python/python-intro/iterators.md","sourceDirName":"python/python-intro","slug":"/python/python-intro/iterators","permalink":"/python/python-intro/iterators","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/iterators.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Input Output Template","permalink":"/python/python-intro/input-output-template"},"next":{"title":"Keywords","permalink":"/python/python-intro/keywords"}}');var i=n(474848),a=n(28453);const s={},o="Iterators",l={},h=[{value:"References",id:"references",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"iterators",children:"Iterators"})}),"\n",(0,i.jsxs)(t.p,{children:["An ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Iterator",children:"iterator"})," is an object that can be iterated (looped) upon. It is used to abstract a container of data to make it behave like an iterable object. You probably already use a few iterable objects every day: strings, lists, and dictionaries to name a few."]}),"\n",(0,i.jsxs)(t.p,{children:["An iterator is defined by a class that implements the ",(0,i.jsx)(t.a,{href:"https://docs.python.org/3/c-api/iter.html",children:"Iterator Protocol"}),". This protocol looks for two methods within the class: ",(0,i.jsx)(t.code,{children:"__iter__"})," and ",(0,i.jsx)(t.code,{children:"__next__"}),"."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Iterator save memory space"}),"\n",(0,i.jsxs)(t.li,{children:["Iterators don't compute the value of each item when instantiated. They only compute it when you ask for it. This is known as ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Lazy_evaluation",children:"lazy evaluation"}),". Lazy evaluation is useful when you have a very large data set to compute. It allows you to start using the data immediately, while the whole data set is being computed."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Ex - Let's say we want to get all the prime numbers that are smaller than a maximum number."}),"\n",(0,i.jsx)(t.p,{children:"We first define the function that checks if a number is prime:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def check_prime(number):\n    for divisor in range(2, int(number ** 0.5) + 1):\n        if number % divisor == 0:\n            return False\n        return True\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Then, we define the iterator class that will include the ",(0,i.jsx)(t.code,{children:"__iter__"})," and ",(0,i.jsx)(t.code,{children:"__next__"})," methods:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"class Primes:\n    def __init__(self, max):\n        self.max = max\n        self.number = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.number += 1\n        if self.number >= self.max:\n            raise StopIteration\n        elif check_prime(self.number):\n            return self.number\n        else:\n            return self.__next__()\n"})}),"\n",(0,i.jsx)(t.p,{children:"Primes is instantiated with a maximum value. If the next prime is greater than themax, the iterator will raise aStopIterationexception, which ends the iterator."}),"\n",(0,i.jsx)(t.p,{children:"When we request the next element in the iterator, it will incrementnumberby 1 and check if it's a prime number. If it's not, it will call__next__again untilnumberis prime. Once it is, the iterator returns the number."}),"\n",(0,i.jsx)(t.p,{children:"By using an iterator, we're not creating a list of prime numbers in our memory. Instead, we're generating the next prime number every time we request for it."}),"\n",(0,i.jsx)(t.p,{children:"Let's try it out:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"primes = Primes(100000000000)\nprint(primes)\nfor x in primes:\nprint(x)\n---------\n<__main__.Primes object at 0x1021834a8>\n2\n3\n5\n7\n11\n...\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Every iteration of thePrimesobject calls ",(0,i.jsx)(t.code,{children:"__next__"})," to generate the next prime number."]}),"\n",(0,i.jsx)(t.p,{children:"Iterators can only be iterated over once.If you try to iterate overprimes again, no value will be returned. It will behave like an empty list."}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888",children:"https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(296540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);