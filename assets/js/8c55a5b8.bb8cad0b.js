"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[63532],{593982:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=e(785893),o=e(511151);const s={},r="CSS Transitions",a={id:"frontend/html-css/css-intro/css-transitions",title:"CSS Transitions",description:"The simplest (and most straightforward) way to animate your components is through CSS Transitions. In this article, you'll learn how CSS Transitions work, and how to make animations with it.",source:"@site/docs/frontend/html-css/css-intro/css-transitions.md",sourceDirName:"frontend/html-css/css-intro",slug:"/frontend/html-css/css-intro/css-transitions",permalink:"/frontend/html-css/css-intro/css-transitions",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/frontend/html-css/css-intro/css-transitions.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSS Positions",permalink:"/frontend/html-css/css-intro/css-positions"},next:{title:"Mastering CSS",permalink:"/frontend/html-css/css-intro/mastering-css"}},c={},l=[{value:"Triggering transitions",id:"triggering-transitions",level:2},{value:"Understanding transition-timing-function",id:"understanding-transition-timing-function",level:2},{value:"Creating your own timing function with cubic-bezier",id:"creating-your-own-timing-function-with-cubic-bezier",level:2},{value:"Transitioning two or more properties",id:"transitioning-two-or-more-properties",level:2},{value:"Transitioning in vs transitioning out",id:"transitioning-in-vs-transitioning-out",level:2},{value:"Wrapping up",id:"wrapping-up",level:2}];function h(n){const t={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"css-transitions",children:"CSS Transitions"}),"\n",(0,i.jsx)(t.p,{children:"The simplest (and most straightforward) way to animate your components is through CSS Transitions. In this article, you'll learn how CSS Transitions work, and how to make animations with it."}),"\n",(0,i.jsx)(t.p,{children:"A transition occurs when a CSS property changes from one value to another value over a period of time."}),"\n",(0,i.jsx)(t.p,{children:"You can create CSS Transitions with the transition property:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition: property duration transition-timing-function delay;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"The transition property is a shorthand of four CSS properties, transition-property, transition-duration, transition-timing-function, transition-delay."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition-property: property;\n  transition-duration: duration;\n  transition-timing-function: timing-function;\n  transition-delay: delay\n\n  /* The transition property is the shorthand for the above four properties */\n  transition: property duration timing-function delay;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"transition-property refers to the CSS property you wish to transition. It is required in the transition shorthand."}),"\n",(0,i.jsx)(t.p,{children:"transition-duration refers to the duration of the transition. How long do you want the transition to last? This value is written in seconds with the s suffix (like 3s). It is also required in the transition shorthand."}),"\n",(0,i.jsx)(t.p,{children:"transition-timing-function refers to how to transition occurs. You'll learn more about this later."}),"\n",(0,i.jsx)(t.p,{children:"transition-delay refers to how long you want to wait before starting the duration. This value is written in seconds with the s suffix (like 3s). transition-delay is optional in the transition shorthand."}),"\n",(0,i.jsx)(t.h2,{id:"triggering-transitions",children:"Triggering transitions"}),"\n",(0,i.jsxs)(t.p,{children:["You can trigger CSS transitions directly with pseudo classes like ",":hover"," (activates when mouse goes over an element), ",":focus"," (activates when a user tabs onto an element, or when a user clicks into an input element), or ",":active"," (activates when user clicks on the element)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:"/* creating transitions directly in CSS */\n.button {\n  background-color: #33ae74;\n  transition: background-color 0.5s ease-out;\n}\n\n.button:hover {\n  background-color: #1ce;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"You can also trigger CSS transitions through JavaScript by adding or removing a class."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".button {\n  background-color: #33ae74;\n  transition: background-color 0.5s ease-out;\n}\n\n.button.is-active {\n  color: #1ce;\n}\n\nconst button = document.querySelector('.button')\nbutton.addEventListener('click', _ => button.classList.toggle('is-active'))\n"})}),"\n",(0,i.jsx)(t.h2,{id:"understanding-transition-timing-function",children:"Understanding transition-timing-function"}),"\n",(0,i.jsx)(t.p,{children:"The transition-timing-function governs how a transition occurs. All transitions have a value of linear by default, which means the property changes evenly until the end of the transition."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition: transform 1s linear;\n\n  /* OR */\n  transition-property: transform;\n  transition-duration: 1s;\n  transition-timing-function: linear;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"The thing is, nothing moves linearly in life. That's not how real objects move. Sometimes, we accelerate; sometimes, we decelerate. The transition-timing-function allows you to capture all of that."}),"\n",(0,i.jsx)(t.p,{children:"Imagine yourself throwing a tennis ball into an open field. The ball leaves your hand with the maximum speed. As it moves, it loses energy, it decelerates and eventually comes to a halt. This is called ease-out. There's a timing function for it."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition-timing-function: ease-out;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Now imagine you're in a car. It's not moving right now. When you move the car, it accelerates and goes toward its top speed. This is called ease-in. There's also a timing function for it."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition-timing-function: ease-in;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Since you have ease-in and ease-out, there's also a timing function that combines the two together, ease-in-out. (I advise against using ease-in-out in your transitions unless your transitions last longer than a second. Nothing eases in and out within a second. It simply looks weird.)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition-timing-function: ease-in-out;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"See this pen for a demo of the timing functions you've learned so far:"}),"\n",(0,i.jsx)(t.p,{children:"Finally, if you don't like any of the above choices, you can create your own timing function with cubic-bezier."}),"\n",(0,i.jsx)(t.p,{children:"(Before we move on, here's a quick signup form if you'd like to read similar articles from me every Wednesday)."}),"\n",(0,i.jsx)(t.h2,{id:"creating-your-own-timing-function-with-cubic-bezier",children:"Creating your own timing function with cubic-bezier"}),"\n",(0,i.jsx)(t.p,{children:"A Cubic-bezier is a set of four values that determine your transition-timing-function. It looks like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition-timing-function: cubic-bezier(x1, y1, x2, y2);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Don't worry about the x1, y1,, x2 and y2. You'll never create cubic-bezier curves by writing numbers yourself (unless you already know what they mean and you're tweaking your timing function for perfection)."}),"\n",(0,i.jsx)(t.p,{children:"You can rely on both Chrome and Firefox's trusty developer tools to help you create your curves. To use it, you add a transition-timing-function into an element, then open up devtools and click on the timing function."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"image",src:e(915924).Z+"",width:"1533",height:"787"})}),"\n",(0,i.jsx)(t.p,{children:"Both Chrome and Firefox provides you with a cubic-bezier tool"}),"\n",(0,i.jsxs)(t.p,{children:["Going in-depth about creating your own bezier curves for your animations is out of scope for today's article. If you're interested, you can find more information about cubic-bezier curves in \"",(0,i.jsx)(t.a,{href:"https://www.smashingmagazine.com/2014/04/understanding-css-timing-functions/",children:"Understanding CSS Timing Functions"}),'" by ',(0,i.jsx)(t.a,{href:"https://twitter.com/Stephen_Greig",children:"Stephen Greig"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"transitioning-two-or-more-properties",children:"Transitioning two or more properties"}),"\n",(0,i.jsx)(t.p,{children:"You can transition two (or more) CSS properties by separating them with a comma in your transition or transition-property property."}),"\n",(0,i.jsx)(t.p,{children:"You can do the same with duration, timing-functions and delays as well. If the values are the same, you only need to specify one of them."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".selector {\n  transition: background-color 1s ease-out,\n              color 1s ease-out;\n\n  /* OR */\n  transition-property: background, color;\n  transition-duration: 1s;\n  transition-timing-function: ease-out;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"You may be tempted to transition every CSS property with all. Don't ever do this. This is bad for performance. Always specify the property you're trying to transition."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:"/* DON'T EVER DO THIS */\n.selector {\n  transition-property: all\n}\n\n/* ALWAYS DO THIS */\n.selector {\n  transition-property: background-color, color, transform;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"transitioning-in-vs-transitioning-out",children:"Transitioning in vs transitioning out"}),"\n",(0,i.jsx)(t.p,{children:"Sometimes, you want the properties to transition in and out at differently. You want the duration, timing-function or delay to be different."}),"\n",(0,i.jsx)(t.p,{children:"To do so, you write another set of transition- properties."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".button {\n  background-color: #33ae74;\n  transition: background-color 0.5s ease-out;\n}\n\n.button:hover {\n  background-color: #1ce;\n  transition-duration: 2s;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"When you write transition properties in the triggering (pseudo) class, the transition properties in the triggering class overwrites the original transition properties you've stated in the base class."}),"\n",(0,i.jsxs)(t.p,{children:["So, in the example above, when you hover on the button, the background color takes 2 seconds to change from ",(0,i.jsx)(t.code,{children:"#33ae74"})," to ",(0,i.jsx)(t.code,{children:"#1ce"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["When you hover out from the button, the background color only takes 0.5s to change back to ",(0,i.jsx)(t.code,{children:"#1ce"})," because the transition-duration of 2s no longer exists."]}),"\n",(0,i.jsx)(t.h2,{id:"wrapping-up",children:"Wrapping up"}),"\n",(0,i.jsx)(t.p,{children:"CSS Transitions are the easiest way to perform animations. You can create transitions either with the transition shorthand or with transition- properties."}),"\n",(0,i.jsx)(t.p,{children:"To create a transition, you overwrite a property in a class (or psuedo class), and you specify the property to transit in transition or transition-property."}),"\n",(0,i.jsx)(t.p,{children:"Remember to change your transition-timing-function so your animation looks more real!"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://zellwk.com/blog/css-transitions",children:"https://zellwk.com/blog/css-transitions"})})]})}function d(n={}){const{wrapper:t}={...(0,o.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}},915924:(n,t,e)=>{e.d(t,{Z:()=>i});const i=e.p+"assets/images/CSS-Intro_CSS-Transitions-image1-b94ba21de32a8e94b318bf70fc827d3f.jpg"},511151:(n,t,e)=>{e.d(t,{Z:()=>a,a:()=>r});var i=e(667294);const o={},s=i.createContext(o);function r(n){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function a(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(s.Provider,{value:t},n.children)}}}]);