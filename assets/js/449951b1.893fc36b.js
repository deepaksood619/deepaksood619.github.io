"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[39844],{292861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"python/python-intro/loops","title":"Loops","description":"http://www.geeksforgeeks.org/any-all-in-python","source":"@site/docs/python/python-intro/loops.md","sourceDirName":"python/python-intro","slug":"/python/python-intro/loops","permalink":"/python/python-intro/loops","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/loops.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Keywords","permalink":"/python/python-intro/keywords"},"next":{"title":"Map, reduce, filter","permalink":"/python/python-intro/map-reduce-filter"}}');var i=t(474848),l=t(28453);const r={},s="Loops",a={},h=[{value:"ANY",id:"any",level:2},{value:"ALL",id:"all",level:2},{value:"Range",id:"range",level:2},{value:"Range + Step Loop",id:"range--step-loop",level:2},{value:"Enumerate",id:"enumerate",level:2},{value:"Basic for in loop",id:"basic-for-in-loop",level:2},{value:"for and while loop can have else branch",id:"for-and-while-loop-can-have-else-branch",level:2},{value:"While loops",id:"while-loops",level:2},{value:"A simple while loop",id:"a-simple-while-loop",level:3},{value:"Letting the user choose when to quit",id:"letting-the-user-choose-when-to-quit",level:3},{value:"do while loop in python",id:"do-while-loop-in-python",level:3},{value:"Using Zip to loop over multiple lists at the same time",id:"using-zip-to-loop-over-multiple-lists-at-the-same-time",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"loops",children:"Loops"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"http://www.geeksforgeeks.org/any-all-in-python",children:"http://www.geeksforgeeks.org/any-all-in-python"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python",children:"http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=Qgevy75co8c",children:"https://www.youtube.com/watch?v=Qgevy75co8c"})}),"\n",(0,i.jsx)(n.p,{children:"The fastest way to loop in python is don't loop"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"While loop"}),"\n",(0,i.jsx)(n.li,{children:"For loop"}),"\n",(0,i.jsx)(n.li,{children:"in-built functions like sum(range(100))"}),"\n",(0,i.jsx)(n.li,{children:"numpy functions"}),"\n",(0,i.jsx)(n.li,{children:"Mathematics with single operation i.e. no loop"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Any and All are two built ins provided in python used for successive And/Or."}),"\n",(0,i.jsx)(n.h2,{id:"any",children:"ANY"}),"\n",(0,i.jsx)(n.p,{children:"Returns true if any of the items is True. It returns False if empty or all are false. Any can be thought of as a sequence of OR operations on the provided iterables."}),"\n",(0,i.jsx)(n.p,{children:"It short circuit the execution i.e. stop the execution as soon as the result is known."}),"\n",(0,i.jsx)(n.p,{children:"Syntax : any(list of iterables)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Since all are false, false is returned\nprint (any([False, False, False, False]))\n\n# Here the method will short-circuit at the\n# second item (True) and will return True.\nprint (any([False, True, False, False]))\n\n# Here the method will short-circuit at the\n# first (True) and will return True.\nprint (any([True, False, False, False]))\n\nOutput -\nFalse\nTrue\nTrue\n"})}),"\n",(0,i.jsx)(n.h2,{id:"all",children:"ALL"}),"\n",(0,i.jsx)(n.p,{children:"Returns true if all of the items are True (or if the iterable is empty). All can be thought of as a sequence of AND operations on the provided iterables. It also short circuit the execution i.e. stop the execution as soon as the result is known."}),"\n",(0,i.jsx)(n.p,{children:"Syntax : all(list of iterables)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Here all the iterables are True so all\n# will return True and the same will be printed\nprint (all([True, True, True, True]))\n\n# Here the method will short-circuit at the\n# first item (False) and will return False.\nprint (all([False, True, True, False]))\n\n# This statement will return False, as no\n# True is found in the iterables\nprint (all([False, False, False]))\n\nOutput -\nTrue\nFalse\nFalse\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image",src:t(351401).A+"",width:"459",height:"208"})}),"\n",(0,i.jsx)(n.h2,{id:"range",children:"Range"}),"\n",(0,i.jsx)(n.p,{children:"range() function starts at 0 aby default, and stops one number below the number passed to it. We can use list() function to efficiently generate a large list of numbers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for number in range(1, 1002):\n    print(number)\n\nnumbers = list(range(1,1000))\n"})}),"\n",(0,i.jsx)(n.h2,{id:"range--step-loop",children:"Range + Step Loop"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"N,M = map(int,raw_input().split())\nfor i in xrange(1, N, 2):\nprint ( str('.|.')*i ).center(M, '-')\nprint str('WELCOME').center(M, '-')\nfor i in xrange(N-2, -1, -2):\nprint ( str('.|.')*i ).center(M, '-')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"enumerate",children:"Enumerate"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"http://book.pythontips.com/en/latest/enumerate.html",children:"http://book.pythontips.com/en/latest/enumerate.html"})}),"\n",(0,i.jsx)(n.p,{children:"Enumerate is a built-in function of Python."}),"\n",(0,i.jsx)(n.p,{children:"It allows us to loop over something and have an automatic counter."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for counter, value in enumerate(some_list):\n    print(counter, value)\n\n enumerate also accepts an optional argument which makes it even more useful.\nThe optional argument allows us to tell enumerate from where to start the index.\nmy_list = ['apple', 'banana', 'grapes', 'pear']\nfor c, value in enumerate(my_list, 1):\n    print(c, value)\n\nYou can also create tuples containing the index and list item using a list.\nmy_list = ['apple', 'banana', 'grapes', 'pear']\ncounter_list = list(enumerate(my_list, 1))\nprint(counter_list)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-for-in-loop",children:"Basic for in loop"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'colors = ["red", "green", "blue", "purple"]\nfor color in colors:\n    print(color)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Unlike traditional C-styleforloops, Python'sforloops don't have index variables. There's no index initializing, bounds checking, or index incrementing. Python's for loops do ",(0,i.jsx)(n.em,{children:"all the work"})," of looping over our numbers list for us."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://treyhunner.com/2019/06/loop-better-a-deeper-look-at-iteration-in-python",children:"https://treyhunner.com/2019/06/loop-better-a-deeper-look-at-iteration-in-python"})}),"\n",(0,i.jsx)(n.h2,{id:"for-and-while-loop-can-have-else-branch",children:"for and while loop can have else branch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Python's `for` and `while` loops\n# support an `else` clause that executes\n# only if the loops terminates without\n# hitting a `break` statement.\ndef contains(haystack, needle):\n\"\"\"\nThrow a ValueError if `needle` not\nin `haystack`.\n\"\"\"\nfor item in haystack:\n    if item == needle:\n        break\nelse:\n    # The `else` here is a\n    # \"completion clause\" that runs\n    # only if the loop ran to completion\n    # without hitting a `break` statement.\n    raise ValueError('Needle not found')\ncontains([23, 'needle', 0xbadc0ffee], 'needle')\nNone\ncontains([23, 42, 0xbadc0ffee], 'needle')\nValueError: \"Needle not found\"\n\n# Personally, I'm not a fan of the `else`\n# \"completion clause\" in loops because\n# I find it confusing. I'd rather do\n# something like this:\ndef better_contains(haystack, needle):\n    for item in haystack:\n        if item == needle:\n            return\n    raise ValueError('Needle not found')\n # Note: Typically you'd write something\n# like this to do a membership test,\n# which is much more Pythonic:\nif needle not in haystack:\n    raise ValueError('Needle not found')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"while-loops",children:"While loops"}),"\n",(0,i.jsx)(n.h3,{id:"a-simple-while-loop",children:"A simple while loop"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"current_value = 1\nwhile current_value <= 5:\n    print(current_value)\ncurrent_value += 1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"letting-the-user-choose-when-to-quit",children:"Letting the user choose when to quit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"msg = ''\nwhile msg != 'quit':\n    msg = input('What's your message? ')\nprint(msg)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"do-while-loop-in-python",children:"do while loop in python"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"i = 1\n\nwhile True:\n    print(i)\n    i = i + 1\n    if(i > 5):\nbreak\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-zip-to-loop-over-multiple-lists-at-the-same-time",children:"Using Zip to loop over multiple lists at the same time"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'colors = ["red", "green", "blue", "purple"]\nratios = [0.2, 0.3, 0.1, 0.4]\nfor color, ratio in zip(colors, ratios):\nprint("{}% {}".format(ratio * 100, color))\n'})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},351401:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/Loops-image1-ebb4c5b7bec14c9b389cc0891de4f32c.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(296540);const i={},l=o.createContext(i);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);