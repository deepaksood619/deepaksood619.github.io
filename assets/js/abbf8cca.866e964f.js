"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[39912],{889003:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=s(785893),r=s(511151);const i={},o="api-resources",c={id:"devops/kubernetes/api-resources",title:"api-resources",description:"Namespaces",source:"@site/docs/devops/kubernetes/api-resources.md",sourceDirName:"devops/kubernetes",slug:"/devops/kubernetes/api-resources",permalink:"/devops/kubernetes/api-resources",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/kubernetes/api-resources.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/devops/kubernetes/"},next:{title:"Architecture",permalink:"/devops/kubernetes/architecture"}},d={},l=[{value:"Namespaces",id:"namespaces",level:3},{value:"Pods",id:"pods",level:3},{value:"StatefulSets",id:"statefulsets",level:3},{value:"ReplicaSet",id:"replicaset",level:3},{value:"Roles",id:"roles",level:3},{value:"Ingresses and Load Balancing",id:"ingresses-and-load-balancing",level:3},{value:"Deployments",id:"deployments",level:3},{value:"Services",id:"services",level:3},{value:"DaemonSet",id:"daemonset",level:3},{value:"Jobs and Cronjobs",id:"jobs-and-cronjobs",level:3},{value:"Extension Points",id:"extension-points",level:3},{value:"Custom Resource Definition (CRD)",id:"custom-resource-definition-crd",level:3},{value:"Container Runtime Interface (CRI)",id:"container-runtime-interface-cri",level:3},{value:"Container Network Interface (CNI)",id:"container-network-interface-cni",level:3},{value:"Container Storage Interface (CSI)",id:"container-storage-interface-csi",level:3},{value:"Resource Types",id:"resource-types",level:3},{value:"Outline",id:"outline",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"api-resources",children:"api-resources"}),"\n",(0,t.jsx)(n.h3,{id:"namespaces",children:"Namespaces"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes includes a means to segment a single physical cluster into separate logical clusters using namespacing."}),"\n",(0,t.jsx)(n.h3,{id:"pods",children:"Pods"}),"\n",(0,t.jsx)(n.p,{children:"Whatever the runtime, Kubernetes fundamentally manages a logical grouping of one or more containers called a pod."}),"\n",(0,t.jsx)(n.h3,{id:"statefulsets",children:"StatefulSets"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes controllers for managing workloads that require proper management of state."}),"\n",(0,t.jsx)(n.h3,{id:"replicaset",children:"ReplicaSet"}),"\n",(0,t.jsx)(n.p,{children:"One of the control loops available in Kubernetes that ensures that the desired number of pods are running."}),"\n",(0,t.jsx)(n.h3,{id:"roles",children:"Roles"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes has several access control schemes, and users should always default to role-based access controls to maximize security."}),"\n",(0,t.jsx)(n.h3,{id:"ingresses-and-load-balancing",children:"Ingresses and Load Balancing"}),"\n",(0,t.jsx)(n.p,{children:'In order to expose a service outside a cluster, a user should set up an ingress for layer 7 or define the configuration of a layer 4 load balancer using "type=loadbalancer" in the service definition.'}),"\n",(0,t.jsx)(n.h3,{id:"deployments",children:"Deployments"}),"\n",(0,t.jsx)(n.p,{children:"The declarative controller in Kubernetes that manages replicasets of pods."}),"\n",(0,t.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,t.jsx)(n.p,{children:"Defined by a label, a Kubernetes service is a logical layer that provides IP/DNS/etc. persistence to dynamic pods."}),"\n",(0,t.jsx)(n.h3,{id:"daemonset",children:"DaemonSet"}),"\n",(0,t.jsx)(n.p,{children:"A Kubernetes construct that enables users to run a pod on every node in the cluster."}),"\n",(0,t.jsx)(n.h3,{id:"jobs-and-cronjobs",children:"Jobs and Cronjobs"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes includes the logic to run jobs, processes that run to completion, and cronjobs - processes that run at specific intervals and run to completion."}),"\n",(0,t.jsx)(n.h3,{id:"extension-points",children:"Extension Points"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes has a number of points to extend its core functionality."}),"\n",(0,t.jsx)(n.h3,{id:"custom-resource-definition-crd",children:"Custom Resource Definition (CRD)"}),"\n",(0,t.jsx)(n.p,{children:"CRD allows users to extend Kubernetes with custom APIs for different objects beyond the standard ones supported by Kubernetes."}),"\n",(0,t.jsx)(n.h3,{id:"container-runtime-interface-cri",children:"Container Runtime Interface (CRI)"}),"\n",(0,t.jsx)(n.p,{children:"CRI is a plugin API that enables Kubernetes to support other container runtimes beyond Docker and Containerd."}),"\n",(0,t.jsx)(n.h3,{id:"container-network-interface-cni",children:"Container Network Interface (CNI)"}),"\n",(0,t.jsx)(n.p,{children:"CNI gives users a choice of network overlay that can be used with Kubernetes to add SDN features."}),"\n",(0,t.jsx)(n.h3,{id:"container-storage-interface-csi",children:"Container Storage Interface (CSI)"}),"\n",(0,t.jsx)(n.p,{children:"CSI empowers users to support different storage systems through a driver model."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/container-storage-interface/spec/blob/master/spec",children:"Container Storage Interface"}),"(CSI) defines a standard interface for container orchestration systems (like Kubernetes) to expose arbitrary storage systems to their container workloads."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/container-storage-interface/spec/blob/master/spec",children:"https://github.com/container-storage-interface/spec/blob/master/spec"})}),"\n",(0,t.jsx)(n.h3,{id:"resource-types",children:"Resource Types"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Resource type"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Abbreviated alias"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"apiservices"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"certificatesigningrequests"}),(0,t.jsx)(n.td,{children:"csr"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"clusters"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"clusterrolebindings"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"clusterroles"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"componentstatuses"}),(0,t.jsx)(n.td,{children:"cs"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"configmaps"}),(0,t.jsx)(n.td,{children:"cm"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"controllerrevisions"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"cronjobs"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"customresourcedefinition"}),(0,t.jsx)(n.td,{children:"crd"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"daemonsets"}),(0,t.jsx)(n.td,{children:"ds"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"deployments"}),(0,t.jsx)(n.td,{children:"deploy"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"endpoints"}),(0,t.jsx)(n.td,{children:"ep"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"events"}),(0,t.jsx)(n.td,{children:"ev"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ingresses"}),(0,t.jsx)(n.td,{children:"ing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"jobs"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"limitranges"}),(0,t.jsx)(n.td,{children:"limits"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"namespaces"}),(0,t.jsx)(n.td,{children:"ns"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"networkpolicies"}),(0,t.jsx)(n.td,{children:"netpol"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"nodes"}),(0,t.jsx)(n.td,{children:"no"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"persistentvolumeclaims"}),(0,t.jsx)(n.td,{children:"pvc"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"persistentvolumes"}),(0,t.jsx)(n.td,{children:"pv"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"poddisruptionbudget"}),(0,t.jsx)(n.td,{children:"pdb"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"podpreset"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"pods"}),(0,t.jsx)(n.td,{children:"po"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"podsecuritypolicies"}),(0,t.jsx)(n.td,{children:"psp"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"podtemplates"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"replicasets"}),(0,t.jsx)(n.td,{children:"rs"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"replicationcontrollers"}),(0,t.jsx)(n.td,{children:"rc"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"resourcequotas"}),(0,t.jsx)(n.td,{children:"quota"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"rolebindings"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"roles"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"secrets"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"serviceaccounts"}),(0,t.jsx)(n.td,{children:"sa"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"services"}),(0,t.jsx)(n.td,{children:"svc"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"statefulsets"}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"storageclasses"}),(0,t.jsx)(n.td,{})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"outline",children:"Outline"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- API Version: most resource type covered in the exam belongs to thecoregroup and are currently in the versionv1. Several special cases are listed below.\n  - v1: Pod, Service, ConfigMap, Secret, PersistentVolumeClaim, Namespace, ServiceAccount, Node\n  - apps/v1: Deployment\n  - batch/v1: Job\n  - batch/v1beta1: CronJob\n  - networking.k8s.io/v1: NetworkPolicy\n- Object Metadata\n  - name:namefield is required and must be unique within a namespace.\n  - labels\n  - annotations: not queryable\n  - namespace\n- Resource Type\n  - Pod\n    - affinity: nodeAffinity, podAffinity\n      - preferredDuringSchedulingIgnoredDuringExecution\n      - requiredDuringSchedulingIgnoredDuringExecution\n    - containers\n      - args: override Docker images's CMD\n      - command: override Docker images's Entrypoint\n      - env\n        - name/value\n        - name/valueFrom\n          - configMapKeyRef: pull env from ConfigMap\n            - name/key\n          - secretKeyRef: pull env from Secret\n      - envFrom\n        - configMapRef: convert all items from the specified ConfigMap to environment variables\n          - name\n        - secretRef: convert all items from the specified Secret to environment variables\n      - image\n      - imagePullPolicy\n        - Always (default)\n        - Never\n        - ifNotPresent\n      - probe: livenessProbe, readinessProbe\n        - initialDelaySeconds\n        - periodSeconds\n        - timeoutSeconds\n        - type:\n          - exec: run a command\n          - httpGet: check a http endpoint\n          - tcpSocket: check a tcp socket\n      - ports\n        - containerPort\n        - hostPort\n        - protocol\n      - resources: limits, requests\n        - cpu: e.g. 0.1, 1, 100m, etc.\n        - memory: e.g. 128974848, 129e6, 129M, 123Mi, etc.\n      - securityContext\n        - capabilities: add or drop capabilities. e.g. SYS_ADMIN, AUDIT_CONTROL, etc.\n        - runAsGroup\n        - runAsUser\n      - volumeMounts\n    - restartPolicy\n      - Always\n      - OnFailure\n      - Never\n    - securityContext\n      - runAsGroup: a valid GID\n      - runAsUser: a valid UID\n    - ServiceAccountName\n    - tolerations\n      - key\n      - operator\n        - Exists\n        - Equal\n      - value\n    - volumes\n      - configMap\n        - name\n        - items\n          - key/path\n      - emptyDir\n      - hostPath\n      - persistentVolumeClaim\n      - secret\n  - Deployment\n    - replicas\n    - selector\n      - matchExpressions\n      - matchLabels\n    - strategy: Recreate or RollingUpdate\n    - Pod Template\n  - Job\n    - activeDeadlineSeconds: job timeout seconds\n    - backoffLimit: number of retries\n    - completions: the desired number of successfully finished pods the job should be run with\n    - parallelism: the maximum desired number of pods the job should run at any given time\n    - selector: matchExpressions or matchLabels\n    - Job Pod Template: restartPolicy in the pod spec should beNever.\n  - CronJob\n    - Job Template\n    - schedule\n  - Service\n    - Types\n      - ClusterIP\n      - NodePort\n    - Service Port\n      - nodePort: set only when type=NodePort\n      - protocol: TCP or UDP\n      - port\n      - targetPort\n  - ConfigMap\n  - Secret: values in the Secret must be base64 encoded: `echo -n \"<value>\" | base64`\n  - Node\n    - taints\n      - key\n      - value\n      - effect\n        - NoSchedule\n        - PreferNoSchedule\n        - NoExecute\n  - PersistentVolumeClaim\n    - accessModes\n      - ReadWriteOnce\n      - ReadOnlyMany\n      - ReadWriteMany\n    - resources: limits, requests\n      - storage: e.g. 8Gi, 128M, etc.\n    - selector: matchExpressions or matchLabels\n    - storageClassName\n  - Namespace\n  - ServiceAccount\n  - NetworkPolicy\n    - policyTypes:\n      - Ingress\n      - Egress\n    - podSelector: matchExpressions or matchLabels\n    - ingress\n    - egress\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},511151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var t=s(667294);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);