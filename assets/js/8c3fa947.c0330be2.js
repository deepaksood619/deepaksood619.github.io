"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[91194],{42478:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"networking/protocols/openthread","title":"OpenThread","description":"Thread","source":"@site/docs/networking/protocols/openthread.md","sourceDirName":"networking/protocols","slug":"/networking/protocols/openthread","permalink":"/networking/protocols/openthread","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/networking/protocols/openthread.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1734460808000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OpenAPI","permalink":"/networking/protocols/openapi"},"next":{"title":"Others","permalink":"/networking/protocols/others"}}');var s=r(474848),t=r(28453);const d={},o="OpenThread",a={},l=[{value:"Thread",id:"thread",level:2},{value:"Features",id:"features",level:2},{value:"Node Roles and Types",id:"node-roles-and-types",level:2},{value:"Router",id:"router",level:2},{value:"End Device",id:"end-device",level:2},{value:"Device Types",id:"device-types",level:2},{value:"Full Thread Device",id:"full-thread-device",level:3},{value:"Minimal Thread Device",id:"minimal-thread-device",level:3},{value:"References",id:"references",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"openthread",children:"OpenThread"})}),"\n",(0,s.jsx)(n.h2,{id:"thread",children:"Thread"}),"\n",(0,s.jsx)(n.p,{children:"Thread is designed to address the unique interoperability, security, power, and architecture challenges of the IoT."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Thread is a low-power wireless mesh networking protocol, based on the universally-supported Internet Protocol (IP), and built using open and proven standards."}),"\n",(0,s.jsx)(n.li,{children:"Thread enables device-to-device and device-to-cloud communicationsand reliably connects hundreds (or thousands) of products and includes mandatory security features."}),"\n",(0,s.jsx)(n.li,{children:"Thread networks have no single point of failure, can self-heal and reconfigure when a device is added or removed, and are simple to setup and use."}),"\n",(0,s.jsx)(n.li,{children:"Thread is based on the broadly supported IEEE 802.15.4 radio standard, which is designed from the ground up for extremely low power consumption and low latency."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"http://threadgroup.org/",children:"Thread"})," is an IPv6-based networking protocol designed for low-power Internet of Things devices in an IEEE 802.15.4-2006 wireless mesh network, commonly called a Wireless Personal Area Network (WPAN). Thread is independent of other 802.15.4 mesh networking protocols, such a ZigBee, Z-Wave, and Bluetooth LE."]}),"\n",(0,s.jsx)(n.p,{children:"Thread's primary features include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simplicity - Simple installation, start up, and operation"}),"\n",(0,s.jsx)(n.li,{children:"Security - All devices in a Thread network are authenticated and all communications are encrypted"}),"\n",(0,s.jsx)(n.li,{children:"Reliability - Self-healing mesh networking, with no single point of failure, and spread-spectrum techniques to provide immunity to interference"}),"\n",(0,s.jsx)(n.li,{children:"Efficiency - Low-power Thread devices can sleep and operate on battery power for years"}),"\n",(0,s.jsx)(n.li,{children:"Scalability - Thread networks can scale up to hundreds of devices"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.p,{children:["OpenThread implements all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as Border Router support.\n",(0,s.jsx)(n.a,{href:"https://openthread.io/reference/",children:"APPLICATION SERVICES"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"IPv6 configuration and raw data interface"}),"\n",(0,s.jsx)(n.li,{children:"UDP sockets"}),"\n",(0,s.jsx)(n.li,{children:"CoAP client and server"}),"\n",(0,s.jsx)(n.li,{children:"DHCPv6 client and server"}),"\n",(0,s.jsx)(n.li,{children:"DNSv6 client"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://openthread.io/guides/build",children:"ENHANCED FEATURES"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Child Supervision"}),"\n",(0,s.jsx)(n.li,{children:"Inform Previous Parent on Reattach"}),"\n",(0,s.jsx)(n.li,{children:"Jam Detection"}),"\n",(0,s.jsx)(n.li,{children:"Periodic Parent Search"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://openthread.io/guides/ncp/",children:"NCP SUPPORT"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/openthread/openthread/tree/master/src/ncp",children:"Spinel"}),", a general purpose NCP protocol"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/openthread/wpantund",children:"wpantund"}),", a user-space NCP network interface driver/daemon"]}),"\n",(0,s.jsx)(n.li,{children:"Sniffer support via NCP Spinel nodes"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://openthread.io/guides/border-router",children:"BORDER ROUTER"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Web UI for configuration and management"}),"\n",(0,s.jsx)(n.li,{children:"Thread Border Agent to support an External Commissioner"}),"\n",(0,s.jsx)(n.li,{children:"NAT64 for connecting to IPv4 networks"}),"\n",(0,s.jsx)(n.li,{children:"Thread interface driver using wpantund"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"node-roles-and-types",children:"Node Roles and Types"}),"\n",(0,s.jsx)(n.p,{children:"In a Thread network, nodes are split into two forwarding roles:"}),"\n",(0,s.jsx)(n.h2,{id:"router",children:"Router"}),"\n",(0,s.jsx)(n.p,{children:"A Router is a node that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"forwards packets for network devices"}),"\n",(0,s.jsx)(n.li,{children:"provides secure commissioning services for devices trying to join the network"}),"\n",(0,s.jsx)(n.li,{children:"keeps its transceiver enabled at all times"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"end-device",children:"End Device"}),"\n",(0,s.jsx)(n.p,{children:"An End Device (ED) is a node that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"communicates primarily with a single Router"}),"\n",(0,s.jsx)(n.li,{children:"does not forward packets for other network devices"}),"\n",(0,s.jsx)(n.li,{children:"can disable its transceiver to reduce power"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:r(145394).A+"",width:"828",height:"854"})}),"\n",(0,s.jsx)(n.h2,{id:"device-types",children:"Device Types"}),"\n",(0,s.jsx)(n.h3,{id:"full-thread-device",children:"Full Thread Device"}),"\n",(0,s.jsx)(n.p,{children:"A Full Thread Device (FTD) always has its radio on, subscribes to the all-routers multicast address, and maintains IPv6 address mappings. There are three types of FTDs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Router"}),"\n",(0,s.jsx)(n.li,{children:"Router Eligible End Device (REED) - can be promoted to a Router"}),"\n",(0,s.jsx)(n.li,{children:"Full End Device (FED) - cannot be promoted to a Router"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"An FTD can operate as a Router (Parent) or an End Device (Child)."}),"\n",(0,s.jsx)(n.h3,{id:"minimal-thread-device",children:"Minimal Thread Device"}),"\n",(0,s.jsx)(n.p,{children:"A Minimal Thread Device does not subscribe to multicast traffic and forwards all messages to its Parent. There are two types of MTDs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Minimal End Device (MED) - transceiver always on, does not need to poll for messages from its parent"}),"\n",(0,s.jsx)(n.li,{children:"Sleepy End Device (SED) - normally disabled, wakes on occasion to poll for messages from its parent"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"An MTD can only operate as an End Device (Child)."}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://openthread.io",children:"https://openthread.io"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://openthread.io/guides/thread-primer",children:"https://openthread.io/guides/thread-primer"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://openthread.io/guides/thread-primer/node-roles-and-types",children:"https://openthread.io/guides/thread-primer/node-roles-and-types"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://openthread.io/guides/ncp",children:"https://openthread.io/guides/ncp"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},145394:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/OpenThread-image1-acb011a2b0f28abcc1913d01aedc2b3f.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var i=r(296540);const s={},t=i.createContext(s);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);