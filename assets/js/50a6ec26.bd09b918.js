"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[19521],{486693:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"computer-science/programming-paradigms/behavioral-strategy","title":"Behavioral - Strategy","description":"image","source":"@site/docs/computer-science/programming-paradigms/behavioral-strategy.md","sourceDirName":"computer-science/programming-paradigms","slug":"/computer-science/programming-paradigms/behavioral-strategy","permalink":"/computer-science/programming-paradigms/behavioral-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/programming-paradigms/behavioral-strategy.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Behavioral - State","permalink":"/computer-science/programming-paradigms/behavioral-state"},"next":{"title":"Concurrency - Reactor","permalink":"/computer-science/programming-paradigms/concurrency-reactor"}}');var s=t(474848),i=t(28453);const n={},c="Behavioral - Strategy",o={},g=[];function d(e){const a={a:"a",h1:"h1",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"behavioral---strategy",children:"Behavioral - Strategy"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{alt:"image",src:t(991337).A+"",width:"1000",height:"758"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{alt:"image",src:t(211742).A+"",width:"1000",height:"758"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{alt:"image",src:t(213051).A+"",width:"1000",height:"758"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{alt:"image",src:t(131464).A+"",width:"1000",height:"758"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{alt:"image",src:t(259077).A+"",width:"999",height:"757"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{alt:"image",src:t(71226).A+"",width:"1000",height:"758"})}),"\n",(0,s.jsx)(a.p,{children:"A strategy is a behavioral design pattern that defines a family of similar algorithms and places each of them in its own class, after which the algorithms can be interchanged right during the execution of the program.\nPros:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsx)(a.p,{children:'"hot" algorithm replacement on the fly;'}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsx)(a.p,{children:"the algorithms' code and data isolation from other classes."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"Cons:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["complicates the program due to the additional classes.",(0,s.jsx)(a.strong,{children:"References"})]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.a,{href:"https://py.checkio.org/blog/design-patterns-part-1",children:"https://py.checkio.org/blog/design-patterns-part-1"})})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},991337:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/Behavioral-Strategy-image1-95e807424da34dccf4a05001c0e70324.jpg"},211742:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/Behavioral-Strategy-image2-8119197017995019b34e55d8a1bd6605.jpg"},213051:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/Behavioral-Strategy-image3-6e91fbe4ecd343bcd84aeb621df0aff0.jpg"},131464:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/Behavioral-Strategy-image4-057b249af0ce071b103ffbfdec4b1d43.jpg"},259077:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/Behavioral-Strategy-image5-13e117f2acc1a130cf97361352844921.jpg"},71226:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/Behavioral-Strategy-image6-a7753e9f5da0321894577064aaec32a3.jpg"},28453:(e,a,t)=>{t.d(a,{R:()=>n,x:()=>c});var r=t(296540);const s={},i=r.createContext(s);function n(e){const a=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);