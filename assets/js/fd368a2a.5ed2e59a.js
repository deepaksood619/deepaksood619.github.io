"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[37904],{613407:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"data-structures/hashtable/probabilistic-data-structure","title":"Probabilistic Data Structure","description":"Probabilistic data structures are a group of data structures that are extremely useful for big data and streaming applications. Generally speaking, these data structures use hash functions to randomize and compactly represent a set of items. Collisions are ignored but errors can be well-controlled under certain threshold. Comparing with error-free approaches, these algorithms use much less memory and have constant query time. They usually support union and intersection operations and therefore can be easily parallelized.","source":"@site/docs/data-structures/hashtable/probabilistic-data-structure.md","sourceDirName":"data-structures/hashtable","slug":"/data-structures/hashtable/probabilistic-data-structure","permalink":"/data-structures/hashtable/probabilistic-data-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hashtable/probabilistic-data-structure.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Merkle Trees","permalink":"/data-structures/hashtable/merkle-trees"},"next":{"title":"Questions","permalink":"/data-structures/hashtable/questions"}}');var a=r(474848),n=r(28453);const i={},l="Probabilistic Data Structure",o={},c=[{value:"Ribbon Filter (practically smaller than Bloom and Xor)",id:"ribbon-filter-practically-smaller-than-bloom-and-xor",level:2},{value:"Others",id:"others",level:2},{value:"Frugal Streaming",id:"frugal-streaming",level:2},{value:"Use case: Find the nth percentile of the data stream",id:"use-case-find-the-nth-percentile-of-the-data-stream",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"probabilistic-data-structure",children:"Probabilistic Data Structure"})}),"\n",(0,a.jsx)(t.p,{children:"Probabilistic data structures are a group of data structures that are extremely useful for big data and streaming applications. Generally speaking, these data structures use hash functions to randomize and compactly represent a set of items. Collisions are ignored but errors can be well-controlled under certain threshold. Comparing with error-free approaches, these algorithms use much less memory and have constant query time. They usually support union and intersection operations and therefore can be easily parallelized."}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Membership Query - Bloom filter"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Cardinality - HyperLogLog"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Frequency - Count-Min Sketch"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Frequency Estimation: Count-Mean-Min Sketch"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Locality-sensitive hashing"}),"(",(0,a.jsx)(t.strong,{children:"LSH"}),")"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"image",src:r(572832).A+"",width:"561",height:"639"})}),"\n",(0,a.jsx)(t.h2,{id:"ribbon-filter-practically-smaller-than-bloom-and-xor",children:"Ribbon Filter (practically smaller than Bloom and Xor)"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://engineering.fb.com/2021/07/09/data-infrastructure/ribbon-filter",children:"https://engineering.fb.com/2021/07/09/data-infrastructure/ribbon-filter"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://arxiv.org/abs/2103.02515",children:"https://arxiv.org/abs/2103.02515"})}),"\n",(0,a.jsx)(t.h2,{id:"others",children:"Others"}),"\n",(0,a.jsx)(t.h2,{id:"frugal-streaming",children:"Frugal Streaming"}),"\n",(0,a.jsx)(t.p,{children:"It uses only one unit of memory per group to compute a quantile for each group."}),"\n",(0,a.jsx)(t.h2,{id:"use-case-find-the-nth-percentile-of-the-data-stream",children:"Use case: Find the nth percentile of the data stream"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://link.springer.com/chapter/10.1007/978-3-642-40273-9_7",children:"https://link.springer.com/chapter/10.1007/978-3-642-40273-9_7"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://agkn.wordpress.com/2013/09/16/sketch-of-the-day-frugal-streaming",children:"https://agkn.wordpress.com/2013/09/16/sketch-of-the-day-frugal-streaming"}),"\n\ud835\uddda\ud835\uddd8\ud835\udde2\ud835\udddb\ud835\uddd4\ud835\udde6\ud835\udddb/ \ud835\udde6\ud835\udfee \ud835\uddda\ud835\uddd8\ud835\udde2\ud835\udde0\ud835\uddd8\ud835\udde7\ud835\udde5\ud835\uddec"]}),"\n",(0,a.jsx)(t.p,{children:"A collection of efficient yet exact mathematical predicates for testing relationships among geometric primitives."}),"\n",(0,a.jsxs)(t.p,{children:["\ud835\ude50\ud835\ude68\ud835\ude5a \ud835\ude58\ud835\ude56\ud835\ude68\ud835\ude5a",":Location-based"," search results with DynamoDb and Geohash.",(0,a.jsx)(t.strong,{children:"References"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://dzone.com/articles/introduction-probabilistic-0",children:"https://dzone.com/articles/introduction-probabilistic-0"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining",children:"https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.kdnuggets.com/2019/08/count-big-data-probabilistic-data-structures-algorithms.html",children:"https://www.kdnuggets.com/2019/08/count-big-data-probabilistic-data-structures-algorithms.html"})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},572832:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/Probabilistic-Data-Structure-image1-b67619d6a3c6cccd53dbb88b9a662b03.jpg"},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var s=r(296540);const a={},n=s.createContext(a);function i(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);