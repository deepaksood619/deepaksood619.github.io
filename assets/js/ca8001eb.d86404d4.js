"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[11179],{618881:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"computer-science/general/uuid-guid","title":"UUID / GUID","description":"A Universally Unique IDentifier (UUID) is a 128-bit number used to identify information in computer systems. The term Globally Unique IDentifier(GUID) is also used, typically in software created by Microsoft.","source":"@site/docs/computer-science/general/uuid-guid.md","sourceDirName":"computer-science/general","slug":"/computer-science/general/uuid-guid","permalink":"/computer-science/general/uuid-guid","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/general/uuid-guid.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1756884021000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Standards","permalink":"/computer-science/general/standards"},"next":{"title":"Interview Question","permalink":"/computer-science/interview-question/"}}');var s=n(474848),r=n(28453);const a={},o="UUID / GUID",d={},h=[{value:"Format",id:"format",level:4},{value:"UUID V1 : Uniqueness",id:"uuid-v1--uniqueness",level:3},{value:"UUID V4 : Randomness",id:"uuid-v4--randomness",level:3},{value:"UUID V5: Non-Random UUIDs",id:"uuid-v5-non-random-uuids",level:3},{value:"UUID Future",id:"uuid-future",level:3},{value:"Which Version Should You Use?",id:"which-version-should-you-use",level:3},{value:"Universally Unique Lexicographically Sortable Identifier (ULID)",id:"universally-unique-lexicographically-sortable-identifier-ulid",level:3},{value:"FlakeIDs / Snowflake IDs",id:"flakeids--snowflake-ids",level:3},{value:"How Snowflake ID Works",id:"how-snowflake-id-works",level:4},{value:"Links",id:"links",level:2}];function l(e){const i={a:"a",code:"code",del:"del",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"uuid--guid",children:"UUID / GUID"})}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.strong,{children:"Universally Unique IDentifier (UUID)"})," is a ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/128-bit",children:"128-bit"})," number used to identify information in computer systems. The term ",(0,s.jsx)(i.strong,{children:"Globally Unique IDentifier(GUID)"})," is also used, typically in software created by Microsoft."]}),"\n",(0,s.jsxs)(i.p,{children:["When generated according to the standard methods, UUIDs are for practical purposes unique, without depending for their uniqueness on a central registration authority or coordination between the parties generating them, unlike most other ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Numbering_scheme",children:"numbering schemes"}),". While the probability that a UUID will be duplicated is not zero, it is close enough to zero to be negligible."]}),"\n",(0,s.jsx)(i.p,{children:"Thus, anyone can create a UUID and use it to identify something with near certainty that the identifier does not duplicate one that has already been, or will be, created to identify something else. Information labeled with UUIDs by independent parties can therefore be later combined into a single database or transmitted on the same channel, with a negligible probability of duplication."}),"\n",(0,s.jsx)(i.h4,{id:"format",children:"Format"}),"\n",(0,s.jsxs)(i.p,{children:["In its canonical textual representation, the 16 ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Octet_(computing)",children:"octets"})," of a UUID are represented as 32 ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Hexadecimal",children:"hexadecimal"}),"(base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and 4 hyphens). For example:"]}),"\n",(0,s.jsx)(i.p,{children:"123e4567-e89b-12d3-a456-426655440000"}),"\n",(0,s.jsx)(i.p,{children:"xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx"}),"\n",(0,s.jsxs)(i.p,{children:["The 4 bits of digit M indicate the UUID version, and the 1--3 most significant bits of digit N indicate the UUID variant. In the example, ",(0,s.jsx)(i.em,{children:"M"})," is 1, and ",(0,s.jsx)(i.em,{children:"N"})," isa(10xx",(0,s.jsx)(i.del,{children:"2"}),"), meaning that the UUID is a variant-1, version-1 UUID; that is, a time-based DCE/RFC 4122 UUID."]}),"\n",(0,s.jsx)(i.p,{children:'The canonical 8-4-4-4-12 format string is based on the "record layout" for the 16 bytes of the UUID:'}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:(0,s.jsx)(i.strong,{children:"Name"})}),(0,s.jsx)(i.th,{children:(0,s.jsx)(i.strong,{children:"Length (bytes)"})}),(0,s.jsx)(i.th,{children:(0,s.jsx)(i.strong,{children:"Length (hex digits)"})}),(0,s.jsx)(i.th,{children:(0,s.jsx)(i.strong,{children:"Contents"})})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"time_low"}),(0,s.jsx)(i.td,{children:"4"}),(0,s.jsx)(i.td,{children:"8"}),(0,s.jsx)(i.td,{children:"integer giving the low 32 bits of the time"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"time_mid"}),(0,s.jsx)(i.td,{children:"2"}),(0,s.jsx)(i.td,{children:"4"}),(0,s.jsx)(i.td,{children:"integer giving the middle 16 bits of the time"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"time_hi_and_version"}),(0,s.jsx)(i.td,{children:"2"}),(0,s.jsx)(i.td,{children:"4"}),(0,s.jsx)(i.td,{children:'4-bit "version" in the most significant bits, followed by the high 12 bits of the time'})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"clock_seq_hi_and_res clock_seq_low"}),(0,s.jsx)(i.td,{children:"2"}),(0,s.jsx)(i.td,{children:"4"}),(0,s.jsx)(i.td,{children:'1--3-bit "variant" in the most significant bits, followed by the 13--15-bit clock sequence'})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"node"}),(0,s.jsx)(i.td,{children:"6"}),(0,s.jsx)(i.td,{children:"12"}),(0,s.jsx)(i.td,{children:"the 48-bit node id"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.img,{alt:"image",src:n(575733).A+"",width:"999",height:"250"})}),(0,s.jsx)(i.td,{}),(0,s.jsx)(i.td,{}),(0,s.jsx)(i.td,{})]})]})]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://tools.ietf.org/html/rfc4122.html",children:"https://tools.ietf.org/html/rfc4122.html"})}),"\n",(0,s.jsx)(i.h3,{id:"uuid-v1--uniqueness",children:"UUID V1 : Uniqueness"}),"\n",(0,s.jsx)(i.p,{children:"UUID v1 is generated by using a combination the host computers MAC address and the current date and time. In addition to this, it also introduces another random component just to be sure of its uniqueness."}),"\n",(0,s.jsx)(i.p,{children:"This means you are guaranteed to get a completely unique ID, unless you generate it from the same computer, and at the exact same time. In that case, the chance of collision changes from impossible to very very small because of the random bits."}),"\n",(0,s.jsx)(i.p,{children:"This guaranteed uniqueness comes at the cost of anonymity. Because UUID v1 takes the time and your MAC address into consideration, this also means that someone could potentially identify the time and place(i.e. computer) of creation."}),"\n",(0,s.jsx)(i.h3,{id:"uuid-v4--randomness",children:"UUID V4 : Randomness"}),"\n",(0,s.jsx)(i.p,{children:"The generation of a v4 UUID is much simpler to comprehend. The bits that comprise a UUID v4 are generated randomly and with no inherent logic. Because of this, there is no way to identify information about the source by looking at the UUID."}),"\n",(0,s.jsx)(i.p,{children:"However, there is now a chance that a UUID could be duplicated. The question is, do you need to worry about it?"}),"\n",(0,s.jsx)(i.p,{children:"The short answer is no. With the sheer number of possible combinations (2^128), it would be almost impossible to generate a duplicate unless you are generating trillions of IDs every second, for many years."}),"\n",(0,s.jsx)(i.p,{children:"If your application is mission critical (for example, bank transactions or medical systems), you should still add a uniqueness constraint to avoid UUIDv4 collision"}),"\n",(0,s.jsx)(i.h3,{id:"uuid-v5-non-random-uuids",children:"UUID V5: Non-Random UUIDs"}),"\n",(0,s.jsx)(i.p,{children:"If you want a unique ID that's not random, UUID v5 could be the right choice.\nUnlike v1 or v4, UUID v5 is generated by providing two pieces of input information:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Input string: Any string that can change in your application."}),"\n",(0,s.jsxs)(i.li,{children:["Namespace: A fixed UUID used in combination with the input string to differentiate between UUIDs generated in different applications, and to prevent ",(0,s.jsx)(i.a,{href:"https://www.hackingloops.com/what-are-rainbow-tables/",children:"rainbow table hacks"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"These two pieces of information are converted to a UUID using the SHA1 hashing algorithm."}),"\n",(0,s.jsx)(i.p,{children:"An important point to note is UUID v5 is consistent. This means that any given combination of input and namespace will result in the same UUID, every time."}),"\n",(0,s.jsx)(i.p,{children:"This is great if you want to, for example, maintain a mapping of your users to their UUIDs without explicitly persisting that information to storage."}),"\n",(0,s.jsx)(i.p,{children:"However, remember that these IDs are not random, and their uniqueness is now your responsibility."}),"\n",(0,s.jsx)(i.h3,{id:"uuid-future",children:"UUID Future"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"UUID Version 6 (UUIDv6) - A simple reordering of the bits within a UUIDv1 to allow it to be sorted as an opaque sequence of bytes."}),"\n",(0,s.jsx)(i.li,{children:"UUID Version 7 (UUIDv7) - A new time-based UUID bit layout based on the Unix Epoch timestamp already widely used in the industry."}),"\n",(0,s.jsx)(i.li,{children:"UUID Version 8 (UUIDv8) - A free-form format whose only requirement is to keep backward compatibility."}),"\n",(0,s.jsxs)(i.li,{children:["Max UUID - A specialty UUID that acts as the inverse of the ",(0,s.jsx)(i.a,{href:"https://www.rfc-editor.org/rfc/rfc4122#section-4.1.7",children:"Nil UUID"})," put forth in RFC 4122"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"With random ID\u2019s, values that are near each other in the index are going to be inserted at totally different times, and be in totally different places in the table."}),"\n",(0,s.jsx)(i.p,{children:"timestamp-based UUID method (using the soon-to-be-standardized UUID v7 method)"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.cybertec-postgresql.com/en/unexpected-downsides-of-uuid-keys-in-postgresql/",children:"Unexpected downsides of UUID keys in PostgreSQL - CYBERTEC"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://blog.devgenius.io/analyzing-new-unique-identifier-formats-uuidv6-uuidv7-and-uuidv8-d6cc5cd7391a",children:"Analyzing New Unique Identifier Formats (UUIDv6, UUIDv7, and UUIDv8) | by Kyle Carter | Dev Genius"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.ietf.org/archive/id/draft-peabody-dispatch-new-uuid-format-01.html",children:"New UUID Formats"})}),"\n",(0,s.jsx)(i.h3,{id:"which-version-should-you-use",children:"Which Version Should You Use?"}),"\n",(0,s.jsx)(i.p,{children:"If you don't know what to go with, go with v4. It's good enough, and the chances of collision are practically none."}),"\n",(0,s.jsx)(i.p,{children:"If you actually want your UUID to give some indication of the date and computer in which it was created, then UUID v1 may be for you (although it is)."}),"\n",(0,s.jsx)(i.p,{children:"UUID v5 is normally used only for very specific use cases, when you want to derive a UUID from another piece of information on the fly."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.sohamkamani.com/uuid-versions-explained",children:"https://www.sohamkamani.com/uuid-versions-explained"})}),"\n",(0,s.jsx)(i.h3,{id:"universally-unique-lexicographically-sortable-identifier-ulid",children:"Universally Unique Lexicographically Sortable Identifier (ULID)"}),"\n",(0,s.jsx)(i.p,{children:"ULID, or Universally Unique Lexicographically Sortable Identifier, tries to strike a balance. The first part of a ULID is a timestamp, the second part is random. This makes them sortable like auto-increment IDs, but still unique like UUIDs. Yet, there's still the potential for collisions within the same millisecond."}),"\n",(0,s.jsx)(i.h3,{id:"flakeids--snowflake-ids",children:"FlakeIDs / Snowflake IDs"}),"\n",(0,s.jsx)(i.p,{children:"Many distributed systems have a requirement to generate time sorted, unique ids of some kind - for distinguishing incoming events, for resolving conflicts, for using as keys in key/value stores, for logging, and a whole bunch more."}),"\n",(0,s.jsx)(i.p,{children:'The basic idea behind flake ids is simple: instead of incrementing a counter each time you need an ID, use some of the top bits in an id to represent time, and then some others to represent a "node id", such that id generation across nodes is unique. The wonderful thing about the node id is that you can just coordinate once- very often just by writing to config files inside your orchestration tool (chef/puppet/ansible/etc).'}),"\n",(0,s.jsxs)(i.p,{children:["The format was created by ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Twitter",title:"Twitter",children:"Twitter"})," and is used for the IDs of tweets. The format has been adopted by other companies, including ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Discord_(software)",title:"Discord (software)",children:"Discord"})," and ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Instagram",title:"Instagram",children:"Instagram"}),". The ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Mastodon_(software)",title:"Mastodon (software)",children:"Mastodon"})," social network uses a modified version."]}),"\n",(0,s.jsxs)(i.p,{children:["Snowflake ID is a 64-bit unique identifier that consists of three parts: ",(0,s.jsx)(i.strong,{children:"timestamp, worker ID, and sequence number."})," The timestamp is a 41-bit integer that represents the number of milliseconds since a certain epoch time."]}),"\n",(0,s.jsx)(i.p,{children:"The worker ID is a 10-bit integer that identifies the worker generating the ID, and the sequence number is a 12-bit integer that ensures uniqueness in case multiple IDs are generated within the same millisecond by the same worker."}),"\n",(0,s.jsx)(i.p,{children:"The structure of a Snowflake ID can be represented in a binary format as follows:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"0                                       41     51         64\n+---------------------------------------+------+-----------+\n| timestamp (milliseconds since epoch)  |worker| sequence  |\n+---------------------------------------+------+-----------+\n"})}),"\n",(0,s.jsx)(i.h4,{id:"how-snowflake-id-works",children:"How Snowflake ID Works"}),"\n",(0,s.jsx)(i.p,{children:"Snowflake ID generator is a distributed system that consists of multiple workers, each responsible for generating unique IDs."}),"\n",(0,s.jsx)(i.p,{children:"When a worker requests a new ID, it first retrieves the current timestamp, then combines it with its worker ID and a sequence number."}),"\n",(0,s.jsx)(i.p,{children:"The sequence number ensures that if multiple IDs are generated within the same millisecond by the same worker, each ID will be unique."}),"\n",(0,s.jsx)(i.p,{children:"If the worker generates more than one ID in the same millisecond, the sequence number is incremented to ensure that each ID is unique."}),"\n",(0,s.jsx)(i.p,{children:"Finally if in the same millisecond, if the sequence number also reaches its max value, the generator waits for the next millisecond and then starts generating IDs again."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Snowflake_ID",children:"Snowflake ID - Wikipedia"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://akashrajpurohit.com/blog/snowflake-id-generating-unique-ids-for-distributed-systems/",children:"Snowflake ID: Generating Unique IDs for Distributed Systems | Akash Rajpurohit"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/erans/pysnowflake",children:"GitHub - erans/pysnowflake: Python implementation of Twitter's Snowflake Unique ID generation service"})}),"\n",(0,s.jsx)(i.h2,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.linkedin.com/pulse/choosing-right-id-strategy-auto-increment-uuid-ulid-valluru/",children:"Choosing The Right ID Strategy: Auto-Increment, UUID, ULID or Snowflake ID"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.youtube.com/watch?v=OAOQ7U0XAi0",children:"The effect of Random UUID on database performance - YouTube"})}),"\n"]})]})}function c(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},575733:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/ds-Others-image1-7245e056c544f76571187990ebf1bbde.jpg"},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var t=n(296540);const s={},r=t.createContext(s);function a(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);