"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[55941],{908247:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=t(785893),n=t(511151);const i={},r="Promises",o={id:"frontend/js-javascript/promises",title:"Promises",description:"1. Is single threaded",source:"@site/docs/frontend/js-javascript/promises.md",sourceDirName:"frontend/js-javascript",slug:"/frontend/js-javascript/promises",permalink:"/frontend/js-javascript/promises",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/frontend/js-javascript/promises.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Others",permalink:"/frontend/js-javascript/others"},next:{title:"Questions",permalink:"/frontend/js-javascript/questions"}},c={},l=[{value:"What are async and await?",id:"what-are-async-and-await",level:2},{value:"What is callback hell?",id:"what-is-callback-hell",level:2},{value:"What are JavaScript promises?",id:"what-are-javascript-promises",level:2},{value:"What is Node.js promise?",id:"what-is-nodejs-promise",level:2},{value:"What is a promise in JavaScript?",id:"what-is-a-promise-in-javascript",level:2},{value:"What is the use of callback function in JavaScript?",id:"what-is-the-use-of-callback-function-in-javascript",level:2},{value:"What is an async function?",id:"what-is-an-async-function",level:2}];function h(e){const s={a:"a",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",ul:"ul",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"promises",children:"Promises"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Is single threaded"}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Run on the same queue as painting, updating styles and handling user actions."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Terminology"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Fulfilled"}),"\n",(0,a.jsx)(s.li,{children:"Rejected"}),"\n",(0,a.jsx)(s.li,{children:"Pending"}),"\n",(0,a.jsx)(s.li,{children:"Settled"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Chaining (Promises can be chained together to execute one after other)"}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Parallelism and sequencing"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"https://developers.google.com/web/fundamentals/primers/promises#whats-all-the-fuss-about",children:"https://developers.google.com/web/fundamentals/primers/promises#whats-all-the-fuss-about"})}),"\n",(0,a.jsx)(s.h2,{id:"what-are-async-and-await",children:"What are async and await?"}),"\n",(0,a.jsx)(s.p,{children:"Async/await statements are syntactic sugar created on top of JavaScript Promises. They allow us to write Promise-based code as if it were synchronous, but without blocking the main thread."}),"\n",(0,a.jsx)(s.h2,{id:"what-is-callback-hell",children:"What is callback hell?"}),"\n",(0,a.jsx)(s.p,{children:"In JavaScript, callback hell is an anti-pattern in code that happens as a result of poor structuring of asynchronous code. It is usually seen when programmers try to force a visual top-down structure in their asynchronous callback-based JavaScript code."}),"\n",(0,a.jsx)(s.h2,{id:"what-are-javascript-promises",children:"What are JavaScript promises?"}),"\n",(0,a.jsx)(s.p,{children:"A promise in JavaScript is like a placeholder value that is expected to eventually resolve into the final successful result value or reason for failure."}),"\n",(0,a.jsx)(s.h2,{id:"what-is-nodejs-promise",children:"What is Node.js promise?"}),"\n",(0,a.jsxs)(s.p,{children:["A promise may at first glance look like syntactic sugar for a callback but actually, it isn't. A promise may serve the same purpose of a callback in a different way but underneath it is so much different. ",(0,a.jsx)(s.a,{href:"https://www.promisejs.org",children:"https://www.promisejs.org"})]}),"\n",(0,a.jsx)(s.h2,{id:"what-is-a-promise-in-javascript",children:"What is a promise in JavaScript?"}),"\n",(0,a.jsx)(s.p,{children:"It's the same exact thing as in Node.js. Actually, Node.js is just JavaScript running outside the browser in an environment using Google Chrome's very own JavaScript engine V8."}),"\n",(0,a.jsx)(s.h2,{id:"what-is-the-use-of-callback-function-in-javascript",children:"What is the use of callback function in JavaScript?"}),"\n",(0,a.jsx)(s.p,{children:"JavaScript is a single-threaded language. And since it can't spawn more threads, if an I/O operation is started, it will block the execution of the main (and only) thread. Therefore, it has what is called a callback. A callback is a function passed to an I/O operation that gets called when that operation has been completed."}),"\n",(0,a.jsx)(s.h2,{id:"what-is-an-async-function",children:"What is an async function?"}),"\n",(0,a.jsx)(s.p,{children:"An async function is a function that returns a promise. The special thing about this type of function is that you can use the word await which allows you to pause the execution of a function when a promise is called without having to use the then function to retrieve the value from the promise."}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"https://www.toptal.com/nodejs/benchmark-nodejs-promise",children:"https://www.toptal.com/nodejs/benchmark-nodejs-promise"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.a,{href:"https://www.youtube.com/watch?v=DHvZLI7Db8E",children:"JavaScript Promises In 10 Minutes"})})]})}function d(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},511151:(e,s,t)=>{t.d(s,{Z:()=>o,a:()=>r});var a=t(667294);const n={},i=a.createContext(n);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);