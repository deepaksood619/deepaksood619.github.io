"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[36078],{214726:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>o,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"data-structures/hierarchical-data-structure/interval-search-tree","title":"Interval Search Tree","description":"Operations","source":"@site/docs/data-structures/hierarchical-data-structure/interval-search-tree.md","sourceDirName":"data-structures/hierarchical-data-structure","slug":"/data-structures/hierarchical-data-structure/interval-search-tree","permalink":"/data-structures/hierarchical-data-structure/interval-search-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hierarchical-data-structure/interval-search-tree.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1681237065000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Fibonacci Heap","permalink":"/data-structures/hierarchical-data-structure/fibonacci-heap"},"next":{"title":"k-ary heap / d-ary heap / d-way heap","permalink":"/data-structures/hierarchical-data-structure/k-ary-heap-d-ary-heap-d-way-heap"}}');var n=r(474848),s=r(28453);const i={},c="Interval Search Tree",d={},l=[{value:"Implementation - Use a red-black BST to guarantee performance",id:"implementation---use-a-red-black-bst-to-guarantee-performance",level:2}];function h(e){const t={em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"interval-search-tree",children:"Interval Search Tree"})}),"\n",(0,n.jsx)(t.p,{children:"Operations"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Insert an interval"}),"\n",(0,n.jsx)(t.li,{children:"Search for an interval"}),"\n",(0,n.jsx)(t.li,{children:"Delete an interval"}),"\n",(0,n.jsx)(t.li,{children:"Interval intersection query: Given an interval (lo, hi), find all intervals (or one interval) in data structure that intersects (lo, hi)"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(822021).A+"",width:"728",height:"650"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(117818).A+"",width:"1000",height:"803"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(588983).A+"",width:"1000",height:"836"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:r(882668).A+"",width:"918",height:"358"})}),"\n",(0,n.jsx)(t.h2,{id:"implementation---use-a-red-black-bst-to-guarantee-performance",children:"Implementation - Use a red-black BST to guarantee performance"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"operation"}),(0,n.jsx)(t.th,{children:"brute"}),(0,n.jsx)(t.th,{children:"interval search tree"}),(0,n.jsx)(t.th,{children:"best in theory"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"insert interval"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"log N"}),(0,n.jsx)(t.td,{children:"log N"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"find interval"}),(0,n.jsx)(t.td,{children:"N"}),(0,n.jsx)(t.td,{children:"log N"}),(0,n.jsx)(t.td,{children:"log N"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"delete interval"}),(0,n.jsx)(t.td,{children:"N"}),(0,n.jsx)(t.td,{children:"log N"}),(0,n.jsx)(t.td,{children:"log N"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["find any one interval that intersects (",(0,n.jsx)(t.em,{children:"lo"}),", ",(0,n.jsx)(t.em,{children:"hi"}),")"]}),(0,n.jsx)(t.td,{children:"N"}),(0,n.jsx)(t.td,{children:"log N"}),(0,n.jsx)(t.td,{children:"log N"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["find all intervals that intersects (",(0,n.jsx)(t.em,{children:"lo"}),", ",(0,n.jsx)(t.em,{children:"hi"}),")"]}),(0,n.jsx)(t.td,{children:"N"}),(0,n.jsx)(t.td,{children:"R log N"}),(0,n.jsx)(t.td,{children:"R + log N"})]})]})]})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},822021:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/Interval-Search-Tree-image1-94b7edae5495e225858d08b8e93926ef.jpg"},117818:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/Interval-Search-Tree-image2-a3c8565419953a3f802d4a7cfddbf912.jpg"},588983:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/Interval-Search-Tree-image3-8c5c3e2611912b20c457287ed38aa159.jpg"},882668:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/Interval-Search-Tree-image4-3517a2406ea789060e5277749e4d0cf3.jpg"},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>c});var a=r(296540);const n={},s=a.createContext(n);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);