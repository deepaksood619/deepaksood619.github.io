"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[59939],{617168:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=t(785893),n=t(511151);const r={},o="Distributed Logging",l={id:"computer-science/distributed-system/distributed-logging",title:"Distributed Logging",description:"Logs",source:"@site/docs/computer-science/distributed-system/distributed-logging.md",sourceDirName:"computer-science/distributed-system",slug:"/computer-science/distributed-system/distributed-logging",permalink:"/computer-science/distributed-system/distributed-logging",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/distributed-system/distributed-logging.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Consistency",permalink:"/computer-science/distributed-system/consistency"},next:{title:"Fallacies and Problems",permalink:"/computer-science/distributed-system/fallacies-and-problems"}},a={},d=[{value:"Logs",id:"logs",level:2},{value:"Logs Type",id:"logs-type",level:2},{value:"Basics of logging",id:"basics-of-logging",level:2},{value:"Logging Best Practices",id:"logging-best-practices",level:2},{value:"Common Log Format",id:"common-log-format",level:2},{value:"Example",id:"example",level:2},{value:"Tools",id:"tools",level:2},{value:"References",id:"references",level:2}];function c(e){const i={a:"a",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"distributed-logging",children:"Distributed Logging"}),"\n",(0,s.jsx)(i.h2,{id:"logs",children:"Logs"}),"\n",(0,s.jsxs)(i.p,{children:["A log is perhaps the simplest possible storage abstraction. It is an append-only, totally-ordered sequence of records ordered by time. It looks like this:\n",(0,s.jsx)(i.img,{alt:"image",src:t(82165).Z+"",width:"622",height:"304"})]}),"\n",(0,s.jsxs)(i.p,{children:["Database people generally differentiate between ",(0,s.jsx)(i.em,{children:"physical"})," and ",(0,s.jsx)(i.em,{children:"logical"})," logging. ",(0,s.jsx)(i.strong,{children:"Physical logging"})," means logging the contents of each row that is changed. ",(0,s.jsx)(i.strong,{children:"Logical logging"})," means logging not the changed rows but the SQL commands that lead to the row changes (the insert, update, and delete statements)."]}),"\n",(0,s.jsxs)(i.p,{children:["Every programmer is familiar with another definition of logging - the unstructured error messages or trace info an application might write out to a local file using syslog or log4j. For clarity I will call this ",(0,s.jsx)(i.strong,{children:'"application logging".'})]}),"\n",(0,s.jsx)(i.p,{children:"Logging can be used for -"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Data Integration -"})," Making all of an organization's data easily available in all its storage and processing systems."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Real-time data processing -"})," Computing derived data streams."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Distributed system design -"})," How practical systems can by simplified with a log-centric design."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"logs-type",children:"Logs Type"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"Common log format"}),"\n",(0,s.jsx)(i.li,{children:"Combined log format - (Common log format + referrer + user-agent)"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"basics-of-logging",children:"Basics of logging"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"Aggregate your logs"}),"\n",(0,s.jsx)(i.li,{children:"Trace the flow"}),"\n",(0,s.jsx)(i.li,{children:"Explicitly log control flow events"}),"\n",(0,s.jsx)(i.li,{children:"Log metrics"}),"\n",(0,s.jsx)(i.li,{children:"Structured log format"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"logging-best-practices",children:"Logging Best Practices"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Who was using the system when it failed?"}),"\n",(0,s.jsx)(i.li,{children:"Where in the code did the application fail?"}),"\n",(0,s.jsx)(i.li,{children:"What was the system doing when it failed?"}),"\n",(0,s.jsx)(i.li,{children:"When did the failure occur?"}),"\n",(0,s.jsx)(i.li,{children:"Why did the application fail?"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"common-log-format",children:"Common Log Format"}),"\n",(0,s.jsxs)(i.p,{children:["The format is extended by the ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/w/index.php?title=Combined_Log_Format&action=edit&redlink=1",children:"Combined Log Format"})," with ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Referrer",children:"referrer"})," and ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/User-agent",children:"user-agent"})," fields."]}),"\n",(0,s.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(i.p,{children:'127.0.0.1 user-identifier frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326'}),"\n",(0,s.jsx)(i.p,{children:'A "-" in a field indicates missing data.- 127.0.0.1is the IP address of the client (remote host) which made the request to the server.'}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["user-identifieris the ",(0,s.jsx)(i.a,{href:"https://tools.ietf.org/html/rfc1413",children:"RFC 1413"}),(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Ident_Protocol",children:"identity"}),' of the client. Usually "-".']}),"\n",(0,s.jsx)(i.li,{children:'frankis the userid of the person requesting the document. Usually "-" unless .htaccess has requested authentication.'}),"\n",(0,s.jsxs)(i.li,{children:["10/Oct/2000:13:55:36 -0700 is the date, time, and time zone that the request was received, by default in ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Strftime",children:"strftime"})," format%d/%b/%Y:%H:%M:%S %z."]}),"\n",(0,s.jsxs)(i.li,{children:['"GET /apache_pb.gif HTTP/1.0" is the request line from the client. The methodGET,/apache_pb.gifthe resource requested, andHTTP/1.0the ',(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol",children:"HTTP protocol"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["200 is the ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/HTTP_status_code",children:"HTTP status code"})," returned to the client. 2xx is a successful response, 3xx a redirection, 4xx a client error, and 5xx a server error."]}),"\n",(0,s.jsxs)(i.li,{children:["2326 is the size of the object returned to the client, measured in ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Byte",children:"bytes"}),".",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Common_Log_Format",children:"https://en.wikipedia.org/wiki/Common_Log_Format"})]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"tools",children:"Tools"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"ELK"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying",children:"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/magnhaug/blogposts/blob/master/distributed-logging",children:"https://github.com/magnhaug/blogposts/blob/master/distributed-logging"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://blog.treasuredata.com/blog/2016/08/03/distributed-logging-architecture-in-the-container-era",children:"https://blog.treasuredata.com/blog/2016/08/03/distributed-logging-architecture-in-the-container-era"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://devops.stackexchange.com/questions/422/how-to-have-multiple-log-streams-in-docker",children:"https://devops.stackexchange.com/questions/422/how-to-have-multiple-log-streams-in-docker"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://zerodha.tech/blog/logging-at-zerodha/",children:"Logging at Zerodha - Zerodha Tech Blog"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Clickhouse"}),"\n",(0,s.jsx)(i.li,{children:"Metabase"}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},82165:(e,i,t)=>{t.d(i,{Z:()=>s});const s=t.p+"assets/images/Distributed-Logging-image1-5ed3c915d1155217979df71f463b39ed.jpg"},511151:(e,i,t)=>{t.d(i,{Z:()=>l,a:()=>o});var s=t(667294);const n={},r=s.createContext(n);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);