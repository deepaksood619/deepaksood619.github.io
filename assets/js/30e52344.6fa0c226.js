"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[3433],{353918:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"languages/php/codeigniter/http","title":"HTTP","description":"Working with Requests and Responses","source":"@site/docs/languages/php/codeigniter/http.md","sourceDirName":"languages/php/codeigniter","slug":"/languages/php/codeigniter/http","permalink":"/languages/php/codeigniter/http","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/php/codeigniter/http.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1718831232000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Helpers / Functions","permalink":"/languages/php/codeigniter/helpers-functions"},"next":{"title":"CodeIgniter","permalink":"/languages/php/codeigniter/intro"}}');var r=n(474848),i=n(28453);const o={},a="HTTP",l={},c=[{value:"Working with Requests and Responses",id:"working-with-requests-and-responses",level:2},{value:"Request Class",id:"request-class",level:2},{value:"Response Class",id:"response-class",level:2},{value:"PSR",id:"psr",level:2},{value:"Libraries",id:"libraries",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"http",children:"HTTP"})}),"\n",(0,r.jsx)(s.h2,{id:"working-with-requests-and-responses",children:"Working with Requests and Responses"}),"\n",(0,r.jsx)(s.p,{children:"While PHP provides ways to interact with the request and response headers, CodeIgniter, like most frameworks, abstracts them so that you have a consistent, simple interface to them."}),"\n",(0,r.jsx)(s.h2,{id:"request-class",children:"Request Class"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.a,{href:"https://codeigniter.com/user_guide/incoming/incomingrequest.html",children:"IncomingRequest class"})," is an object-oriented representation of the HTTP request. It provides everything you need:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use CodeIgniter HTTPIncomingRequest;\n\n$request = service('request');\n\n// the URI being requested (i.e. /about)\n$request->uri->getPath();\n\n// Retrieve $_GET and $_POST variables\n$request->getGet('foo');\n$request->getPost('foo');\n\n// Retrieve from $_REQUEST which should include\n// both $_GET and $_POST contents\n$request->getVar('foo');\n\n// Retrieve JSON from AJAX calls\n$request->getJSON();\n\n// Retrieve server variables\n$request->getServer('Host');\n\n// Retrieve an HTTP Request header, with case-insensitive names\n$request->getHeader('host');\n$request->getHeader('Content-Type');\n\n$request->getMethod(); // GET, POST, PUT, etc\n"})}),"\n",(0,r.jsx)(s.p,{children:"The request class does a lot of work in the background for you, that you never need to worry about. The isAJAX() and isSecure() methods check several different methods to determine the correct answer."}),"\n",(0,r.jsx)(s.h2,{id:"response-class",children:"Response Class"}),"\n",(0,r.jsxs)(s.p,{children:["CodeIgniter also provides a ",(0,r.jsx)(s.a,{href:"https://codeigniter.com/user_guide/outgoing/response.html",children:"Response class"})," that is an object-oriented representation of the HTTP response. This gives you an easy and powerful way to construct your response to the client:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"use CodeIgniterHTTPResponse;\n\n$response = service('response');\n\n$response->setStatusCode(Response::HTTP_OK);\n$response->setBody($output);\n$response->setHeader('Content-type', 'text/html');\n$response->noCache();\n\n// Sends the output to the browser\n// This is typically handled by the framework\n$response->send();\n"})}),"\n",(0,r.jsx)(s.p,{children:"In addition, the Response class allows you to work the HTTP cache layer for the best performance."}),"\n",(0,r.jsx)(s.h2,{id:"psr",children:"PSR"}),"\n",(0,r.jsx)(s.p,{children:"PSR-7 is a set of common interfaces defined by PHP Framework Interop Group. These interfaces are representing HTTP messages, and URIs for use when communicating trough HTTP."}),"\n",(0,r.jsx)(s.p,{children:"Any web application using this set of interfaces is a PSR-7 application."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://github.com/guzzle/psr7",children:"https://github.com/guzzle/psr7"})}),"\n",(0,r.jsx)(s.h2,{id:"libraries",children:"Libraries"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://github.com/chriskacerguis/codeigniter-restserver",children:"https://github.com/chriskacerguis/codeigniter-restserver"})}),"\n",(0,r.jsx)(s.p,{children:"A fully RESTful server implementation for CodeIgniter using one library, one config file and one controller."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://github.com/guzzle/guzzle",children:(0,r.jsx)(s.strong,{children:"https://github.com/guzzle/guzzle"})})}),"\n",(0,r.jsx)(s.p,{children:"Guzzle, an extensible PHP HTTP client"}),"\n",(0,r.jsx)(s.p,{children:"Guzzle is a PHP HTTP client that makes it easy to send HTTP requests and trivial to integrate with web services."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Simple interface for building query strings, POST requests, streaming large uploads, streaming large downloads, using HTTP cookies, uploading JSON data, etc..."}),"\n",(0,r.jsx)(s.li,{children:"Can send both synchronous and asynchronous requests using the same interface."}),"\n",(0,r.jsx)(s.li,{children:"Uses PSR-7 interfaces for requests, responses, and streams. This allows you to utilize other PSR-7 compatible libraries with Guzzle."}),"\n",(0,r.jsx)(s.li,{children:"Supports PSR-18 allowing interoperability between other PSR-18 HTTP Clients."}),"\n",(0,r.jsx)(s.li,{children:"Abstracts away the underlying HTTP transport, allowing you to write environment and transport agnostic code; i.e., no hard dependency on cURL, PHP streams, sockets, or non-blocking event loops."}),"\n",(0,r.jsx)(s.li,{children:"Middleware system allows you to augment and compose client behavior."}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(296540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);