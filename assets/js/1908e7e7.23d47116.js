"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[35877],{322059:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>E,frontMatter:()=>l,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"languages/sql/ddl-data-definition-language/readme","title":"DDL - Data Definition Language","description":"DDL (Data Definition Language)","source":"@site/docs/languages/sql/ddl-data-definition-language/readme.md","sourceDirName":"languages/sql/ddl-data-definition-language","slug":"/languages/sql/ddl-data-definition-language/","permalink":"/languages/sql/ddl-data-definition-language/","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/sql/ddl-data-definition-language/readme.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1732812944000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"DCL - Data Control Language","permalink":"/languages/sql/dcl-data-control-language"},"next":{"title":"Create Table","permalink":"/languages/sql/ddl-data-definition-language/create-table"}}');var s=a(474848),i=a(28453);const l={},d="DDL - Data Definition Language",o={},r=[{value:"DDL (Data Definition Language)",id:"ddl-data-definition-language",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ddl---data-definition-language",children:"DDL - Data Definition Language"})}),"\n",(0,s.jsx)(n.h2,{id:"ddl-data-definition-language",children:"DDL (Data Definition Language)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Create"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Alter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Drop"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Rename"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Truncate"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Comment"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- mysql read user for all schemas\nCREATE USER 'devops_read_user'@'%' IDENTIFIED BY 'abcd';\nGRANT SELECT on *.* TO 'devops_read_user'@'%';\n\nGRANT EXECUTE ON PROCEDURE `schema`.`procedure_name` TO `devops_read_user`@`%`;\n\n\nALTER USER\n ALTER USER 'lms_p2021020917'@'%' IDENTIFIED BY '00IN0hBGVZ7ABMFS';\n FLUSH PRIVILEGES;\n\nCREATE DATABASE\n CREATE DATABASE database_name\n\nCREATE INDEX\n CREATE INDEX index_name\n ON table_name (column_name)\n or\n CREATE UNIQUE INDEX index_name\n ON table_name (column_name)\n  CREATE UNIQUE INDEX index_name\n  ON table_name(index_column_1,index_column_2,...);\n\nCREATE INDEX test_idx ON table_name (column_name);\n\n ALTER TABLE `installment_fip` ADD INDEX `installment_fip_idx_inst_custom_is_del_inst_inst` (`inst_number`,`customer_facing`,`is_delete`,`inst_status`,`inst_date`);\n ALTER TABLE `installment_fip` ADD INDEX `installment_fip_idx_inst_custom_is_del_inst_emi_id` (`inst_number`,`customer_facing`,`is_delete`,`inst_status`,`emi_status_id`);\n ALTER TABLE `st_comment` ADD INDEX `st_comment_idx_status_status_loan_id_id` (`status_type_id`,`status_id`,`loan_id`,`id`);\n ALTER TABLE `st_loan` ADD INDEX `st_loan_idx_customer_id_product_code` (`customer_id`,`product_code`);\n ALTER TABLE `user_logins` ADD INDEX `user_logins_idx_publish_dept` (`publish`,`dept`);\n\n Show Unused indexes\n  select * from sys.schema_unused_indexes;\n\n  https://www.eversql.com/how-to-find-unused-indexes-in-a-mysql-database/\n\nCREATE VIEW\n CREATE VIEW view_name AS\n SELECT column_name(s)\n FROM table_name\n WHERE condition\n\nDROP DATABASE\n DROP DATABASE database_name\n\nDROP INDEX\n DROP INDEX table_name.index_name (SQL Server)\n DROP INDEX index_name ON table_name (MS Access)\n DROP INDEX index_name (DB2/Oracle)\n ALTER TABLE table_name\n DROP INDEX index_name on table_name (MySQL)\n\nDROP TABLE\n DROP TABLE table_name\n\nDROP COLUMN\n ALTER TABLE st_quickwallet_payment DROP COLUMN payment_notes;\n\nTRUNCATE TABLE\n TRUNCATE TABLE table_name\n\n The TRUNCATE TABLE statement removes all the rows from a table more quickly than a DELETE. Logically, TRUNCATE TABLE is similar to the DELETE statement with no WHERE clause.\n\n The TRUNCATE TABLE statement removes all the rows from a table, but the table structure and its columns, constraints, indexes, and so on remain intact.\n\nALTER SCHEMA\n ALTER SCHEMA NewSchema\nTRANSFER OldSchema.TableName;\n"})})]})}function E(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>d});var t=a(296540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);