"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[16943],{763281:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>n,default:()=>o,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var d=r(785893),t=r(511151);const i={},n="Cheatsheet",l={id:"databases/nosql-databases/druid/cheatsheet",title:"Cheatsheet",description:"| Common                                          |                                                                                                                        |",source:"@site/docs/databases/nosql-databases/druid/cheatsheet.md",sourceDirName:"databases/nosql-databases/druid",slug:"/databases/nosql-databases/druid/cheatsheet",permalink:"/databases/nosql-databases/druid/cheatsheet",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/nosql-databases/druid/cheatsheet.md",tags:[],version:"current",lastUpdatedAt:1707138374,formattedLastUpdatedAt:"Feb 5, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/databases/nosql-databases/druid/architecture"},next:{title:"Commands",permalink:"/databases/nosql-databases/druid/commands"}},c={},a=[{value:"SQL Cheat Sheet",id:"sql-cheat-sheet",level:2},{value:"Metadata Commands",id:"metadata-commands",level:3},{value:"INFORM\xadATI\xadON_\xadSCHEMA TABLES",id:"information_schema-tables",level:3},{value:"System Tables",id:"system-tables",level:3},{value:"JDBC CONNECTOR",id:"jdbc-connector",level:3},{value:"Aggreg\xadation",id:"aggregation",level:3},{value:"Approx\xadimate Aggreg\xadations",id:"approximate-aggregations",level:3},{value:"Approx\xadimate Aggreg\xadations",id:"approximate-aggregations-1",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Other Functions",id:"other-functions",level:3},{value:"Numeric Functions",id:"numeric-functions",level:3},{value:"String Functions",id:"string-functions",level:3},{value:"Time Functions",id:"time-functions",level:3}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(s.h1,{id:"cheatsheet",children:"Cheatsheet"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Common"}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"/status"}),(0,d.jsx)(s.td,{children:"Returns the Druid version, loaded extens\xadions, memory used, total memory and other useful inform\xadation about the process."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"/statu\xads/h\xadealth"}),(0,d.jsx)(s.td,{children:'Always returns a boolean "\xadtru\xade" value with a 200 OK response, useful for automated health checks.'})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"/statu\xads/p\xadrop\xaderties"}),(0,d.jsx)(s.td,{children:"Returns the current config\xaduration properties of the process."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"These endpoints are supported by all processes."}),(0,d.jsx)(s.td,{})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Coordi\xadnator - Leadership"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/leader"}),(0,d.jsx)(s.td,{children:"Returns the current leader Coordi\xadnator of the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/is\xadLeader"}),(0,d.jsx)(s.td,{children:'Returns a JSON object with field "\xadlea\xadder\xad", either true or false'})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Segment Loading"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/lo\xadads\xadtatus"}),(0,d.jsx)(s.td,{children:"Returns the percentage of segments actually loaded in the cluster"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/lo\xadads\xadtat\xadus?\xadsimple"}),(0,d.jsx)(s.td,{children:"Returns the number of segments left to load in each tier"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/lo\xadadqueue"}),(0,d.jsx)(s.td,{children:"Returns the ids of segments to load and drop for each Historical process."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/lo\xadadq\xadueu\xade?s\xadimple"}),(0,d.jsx)(s.td,{children:"Returns the number of segments to load and drop"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/lo\xadadq\xadueu\xade?full"}),(0,d.jsx)(s.td,{children:"Returns the serialized JSON of segments to load and drop for each Historical process."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Metadata info"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadources"}),(0,d.jsx)(s.td,{children:"Returns a list of the names of enabled dataso\xadurces in the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad?in\xadclu\xaddeD\xadisabled"}),(0,d.jsx)(s.td,{children:"Returns a list of the names of enabled and disabled dataso\xadurces in the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad?full"}),(0,d.jsx)(s.td,{children:"Returns a list of all enabled dataso\xadurces with all metadata about those dataso\xadurces as stored in the metadata store."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"Returns full metadata for a datasource as stored in the metadata store."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadseg\xadments"]}),(0,d.jsx)(s.td,{children:"Returns a list of all segments for a datasource as stored in the metadata store."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadseg\xadmen\xadts?full"]}),(0,d.jsx)(s.td,{children:"Returns a list of all segments for a datasource with the full segment metadata as stored in the metadata store."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadseg\xadmen\xadts/\xad{se\xadgme\xadntId}"})]}),(0,d.jsx)(s.td,{children:"Returns full segment metadata for a specific segment as stored in the metadata store."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadseg\xadments"]}),(0,d.jsx)(s.td,{children:"Returns a list of all segments, overla\xadpping with any of given intervals"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/me\xadtad\xadata\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadseg\xadmen\xadts?full"]}),(0,d.jsx)(s.td,{children:"Returns a list of all segments, overla\xadpping with any of given intervals, for a datasource with the full segment metadata"})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Dataso\xadurces"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadources"}),(0,d.jsx)(s.td,{children:"Returns a list of datasource names found in the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad?simple"}),(0,d.jsx)(s.td,{children:"Returns a list of JSON objects containing the name and properties of dataso\xadurces found in the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad?full"}),(0,d.jsx)(s.td,{children:"Returns a list of datasource names found in the cluster with all metadata about those dataso\xadurces."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"Returns a JSON object containing the name and properties of a datasource"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"?full"]}),(0,d.jsx)(s.td,{children:"Returns full metadata for a datasource ."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadint\xadervals"]}),(0,d.jsx)(s.td,{children:"Returns full metadata for a datasource ."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadint\xadervals"]}),(0,d.jsx)(s.td,{children:"Returns a set of segment intervals."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadint\xaderv\xadals\xad?simple"]}),(0,d.jsx)(s.td,{children:"Returns a map of an interval to a JSON object containing the total byte size of segments and number of segments for that interval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadint\xaderv\xadals\xad?full"]}),(0,d.jsx)(s.td,{children:"Returns a map of an interval to a map of segment metadata to a set of server names that contain the segment for that interval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadint\xaderv\xadals\xad/{i\xadnte\xadrval}"})]}),(0,d.jsx)(s.td,{children:"Returns a set of segment ids for an interval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadint\xaderv\xadals\xad/{i\xadnte\xadrva\xadl}"}),"?\xadsimple"]}),(0,d.jsx)(s.td,{children:"Returns a map of segment intervals contained within the specified interval to a JSON object"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadint\xaderv\xadals\xad/{i\xadnte\xadrva\xadl}"}),"?full"]}),(0,d.jsx)(s.td,{children:"Returns a map of segment intervals contained within the specified interval to a map of segment metadata to a set of server names that contain the segment for an interval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadint\xaderv\xadals\xad/{i\xadnte\xadrva\xadl}"}),"/\xadser\xadverview"]}),(0,d.jsx)(s.td,{children:"Returns a map of segment intervals contained within the specified interval to inform\xadation about the servers that contain the segment for an interval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadseg\xadments"]}),(0,d.jsx)(s.td,{children:"Returns a list of all segments for a datasource in the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadseg\xadmen\xadts?full"]}),(0,d.jsx)(s.td,{children:"Returns a list of all segments for a datasource in the cluster with the full segment metadata."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadseg\xadmen\xadts/\xad{se\xadgme\xadntId}"})]}),(0,d.jsx)(s.td,{children:"Returns full segment metadata for a specific segment in the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadtiers"]}),(0,d.jsx)(s.td,{children:"Return the tiers that a datasource exists in."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"Enables all segments of datasource which are not oversh\xadadowed by others."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadseg\xadmen\xadts/\xad{se\xadgme\xadntId}"})]}),(0,d.jsx)(s.td,{children:"Enables a segment of a dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DELETE"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"Disables a dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DELETE"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadint\xaderv\xadals\xad/{i\xadnte\xadrval}"})]}),(0,d.jsx)(s.td,{children:"Runs a Kill task for a given interval and dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DELETE"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadseg\xadmen\xadts/\xad{se\xadgme\xadntId}"})]}),(0,d.jsx)(s.td,{children:"Disables a segment."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Note that all interval URL parameters are ISO 8601 strings delimited by a _instead of a / (e.g., 2016-0\xad6-2\xad7_2\xad016\xad-06\xad-28)."}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Retention Rules"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"Retention Rules"}),(0,d.jsx)(s.td,{children:"Returns all rules as JSON objects for all dataso\xadurces in the cluster including the default dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"Returns all rules for a specified dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"?full"]}),(0,d.jsx)(s.td,{children:"Returns all rules for a specified datasource and includes default dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/hi\xadsto\xadry?\xadint\xaderv\xadal=\xad"}),(0,d.jsx)(s.td,{children:"Returns audit history of rules for all dataso\xadurces"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{children:"default value of interval can be specified by setting druid.a\xadud\xadit.m\xadan\xadage\xadr.a\xadudi\xadtHi\xadsto\xadryM\xadillis (1 week if not config\xadured) in Coordi\xadnator runtim\xade.p\xadrop\xaderties"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/hi\xadsto\xadry?\xadcou\xadnt=\xad"}),(0,d.jsx)(s.td,{children:"Returns last entries of audit history of rules for all dataso\xadurces."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadhis\xadtor\xady?i\xadnte\xadrva\xadl=[\xadint\xaderv\xadal]"]}),(0,d.jsx)(s.td,{children:"Returns audit history of rules for a specified datasource"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{children:"default value of interval can be specified by setting druid.a\xadud\xadit.m\xadan\xadage\xadr.a\xadudi\xadtHi\xadsto\xadryM\xadillis (1 week if not config\xadured) in Coordi\xadnator runtim\xade.p\xadrop\xaderties"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}"}),"/\xadhis\xadtor\xady?c\xadoun\xadt=[\xadn]"]}),(0,d.jsx)(s.td,{children:"Returns last entries of audit history of rules for a specified dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/ru\xadles\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"POST with a list of rules in JSON form to update rules."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Note that all interval URL parameters are ISO 8601 strings delimited by a _instead of a / (e.g., 2016-0\xad6-2\xad7_2\xad016\xad-06\xad-28)."}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Intervals"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/in\xadtervals"}),(0,d.jsx)(s.td,{children:"Returns all intervals for all dataso\xadurces with total size and count."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/in\xadter\xadval\xads/",(0,d.jsx)(s.code,{children:"{\xadint\xaderval}"})]}),(0,d.jsx)(s.td,{children:"Returns aggregated total size and count for all intervals that intersect given isoint\xaderval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/in\xadter\xadval\xads/",(0,d.jsx)(s.code,{children:"{\xadint\xaderv\xadal}"}),"\xad?simple"]}),(0,d.jsx)(s.td,{children:"Returns total size and count for each interval within given isoint\xaderval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/in\xadter\xadval\xads/",(0,d.jsx)(s.code,{children:"{\xadint\xaderv\xadal}"}),"\xad?full"]}),(0,d.jsx)(s.td,{children:"Returns total size and count for each datasource for each interval within given isoint\xaderval."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Note that all interval URL parameters are ISO 8601 strings delimited by a _instead of a / (e.g., 2016-0\xad6-2\xad7_2\xad016\xad-06\xad-28)."}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Compaction Config\xaduration"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/co\xadnfi\xadg/c\xadomp\xadaction"}),(0,d.jsx)(s.td,{children:"Returns all compaction configs."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/co\xadnfi\xadg/c\xadomp\xadact\xadion\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSource}"})]}),(0,d.jsx)(s.td,{children:"Returns a compaction config of a dataSo\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/co\xadnfi\xadg/c\xadomp\xadact\xadion\xad/ta\xadsks\xadlot\xads?r\xadati\xado=",(0,d.jsx)(s.code,{children:"{\xadsom\xadeRa\xadtio\xad}&\xadmax\xad={s\xadome\xadMax\xadSlots}"})]}),(0,d.jsx)(s.td,{children:"Update the capacity for compaction tasks. ratio and max are used to limit the max number of compaction tasks."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/co\xadnfi\xadg/c\xadomp\xadaction"}),(0,d.jsx)(s.td,{children:"Creates or updates the compaction config for a dataSo\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DELETE"}),(0,d.jsxs)(s.td,{children:["/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/co\xadnfi\xadg/c\xadomp\xadact\xadion\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSource}"})]}),(0,d.jsx)(s.td,{children:"Removes the compaction config for a dataSo\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"See Compaction Config\xaduration for config\xaduration details."}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Master Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Server Inform\xadation"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/se\xadrvers"}),(0,d.jsxs)(s.td,{children:["Returns a list of servers URLs using the format ",(0,d.jsx)(s.code,{children:"{hostn\xadame\xad}:{\xadport}"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/co\xadord\xadina\xadtor\xad/v1\xad/se\xadrve\xadrs?\xadsimple"}),(0,d.jsxs)(s.td,{children:["Returns a list of server data objects in which each object has the following keys: host: host URL include (",(0,d.jsx)(s.code,{children:"{host\xadnam\xade}:\xad{port}"}),") type: process type (index\xader-\xadexe\xadcutor, histor\xadical) currSize: storage size currently used maxSize: maximum storage size priority tier"]})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Overlord"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Leadership"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadleader"}),(0,d.jsx)(s.td,{children:"Returns the current leader Overlord of the cluster."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadisL\xadeader"}),(0,d.jsx)(s.td,{children:'This returns a JSON object with field "\xadlea\xadder\xad", either true or false'})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Overlord"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Tasks"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadtasks"}),(0,d.jsx)(s.td,{children:"Retrieve list of tasks. Accepts query string parameters state, dataso\xadurce, create\xaddTi\xadmeI\xadnte\xadrval, max, and type."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadcom\xadple\xadteTasks"}),(0,d.jsx)(s.td,{children:"Retrieve list of complete tasks. Equivalent to /druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadks?\xadsta\xadte=\xadcom\xadplete."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadrun\xadnin\xadgTasks"}),(0,d.jsx)(s.td,{children:"Retrieve list of running tasks. Equivalent to /druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadks?\xadsta\xadte=\xadrun\xadning."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadwai\xadtin\xadgTasks"}),(0,d.jsx)(s.td,{children:"Retrieve list of waiting tasks. Equivalent to /druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadks?\xadsta\xadte=\xadwai\xadting."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadpen\xaddin\xadgTasks"}),(0,d.jsx)(s.td,{children:"Retrieve list of pending tasks. Equivalent to /druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadks?\xadsta\xadte=\xadpen\xadding."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadk/",(0,d.jsx)(s.code,{children:"{\xadtaskId}"})]}),(0,d.jsx)(s.td,{children:"Retrieve the 'payload' of a task."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadk/",(0,d.jsx)(s.code,{children:"{\xadtas\xadkId\xad}"}),"/s\xadtatus"]}),(0,d.jsx)(s.td,{children:"Retrieve the status of a task."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadk/",(0,d.jsx)(s.code,{children:"{\xadtas\xadkId\xad}"}),"/s\xadegments"]}),(0,d.jsx)(s.td,{children:"Retrieve inform\xadation about the segments of a task."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{children:"This API is deprecated and will be removed in future releases."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadk/",(0,d.jsx)(s.code,{children:"{\xadtas\xadkId\xad}"}),"/r\xadeports"]}),(0,d.jsx)(s.td,{children:"Retrieve a task completion report for a task. Only works for completed tasks."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/task"}),(0,d.jsx)(s.td,{children:"Endpoint for submitting tasks and supervisor specs to the Overlord. Returns the taskId of the submitted task."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadk/",(0,d.jsx)(s.code,{children:"{\xadtas\xadkId\xad}"}),"/s\xadhutdown"]}),(0,d.jsx)(s.td,{children:"Shuts down a task."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xaddat\xadaso\xadurc\xades/\xad",(0,d.jsx)(s.code,{children:"{da\xadtaS\xadour\xadce}"}),"\xad/sh\xadutd\xadown\xadAll\xadTasks"]}),(0,d.jsx)(s.td,{children:"Shuts down all tasks for a dataSo\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadtas\xadkStatus"}),(0,d.jsx)(s.td,{children:"Retrieve list of task status objects for list of task id strings in request body."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DELETE"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadpen\xaddin\xadgSe\xadgme\xadnts\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSource}"})]}),(0,d.jsx)(s.td,{children:"Manually clean up pending segments table in metadata storage for dataso\xadurce. Returns a JSON object."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Overlord"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Superv\xadisors"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xadervisor"}),(0,d.jsx)(s.td,{children:"Returns a list of strings of the currently active supervisor ids."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr?full"}),(0,d.jsx)(s.td,{children:"Returns a list of objects of the currently active superv\xadisors."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]"}),(0,d.jsx)(s.td,{children:"Returns the current spec for the supervisor with the provided ID."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/s\xadtatus"}),(0,d.jsx)(s.td,{children:"Returns the current status of the supervisor with the provided ID."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/h\xadistory"}),(0,d.jsx)(s.td,{children:"Returns an audit history of specs for all superv\xadisors (current and past)."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/h\xadistory"}),(0,d.jsx)(s.td,{children:"Returns an audit history of specs for the supervisor with the provided ID."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xadervisor"}),(0,d.jsx)(s.td,{children:"Suspend the current running supervisor of the provided ID. Responds with updated Superv\xadiso\xadrSpec."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/s\xaduspend"}),(0,d.jsx)(s.td,{children:"Suspend the current running supervisor of the provided ID. Responds with updated Superv\xadiso\xadrSpec."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/s\xadusp\xadendAll"}),(0,d.jsx)(s.td,{children:"Suspend all superv\xadisors at once."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/r\xadesume"}),(0,d.jsx)(s.td,{children:"Resume indexing tasks for a superv\xadisor. Responds with updated Superv\xadiso\xadrSpec."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/r\xadesu\xadmeAll"}),(0,d.jsx)(s.td,{children:"Resume all superv\xadisors at once."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/reset"}),(0,d.jsx)(s.td,{children:"Reset the specified superv\xadisor."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/t\xaderm\xadinate"}),(0,d.jsx)(s.td,{children:"Terminate a supervisor of the provided ID."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/t\xaderm\xadina\xadteAll"}),(0,d.jsx)(s.td,{children:"Terminate all superv\xadisors at once."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/s\xadhutdown"}),(0,d.jsx)(s.td,{children:"Shutdown a superv\xadisor."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadsup\xaderv\xadiso\xadr/[\xadsup\xaderv\xadiso\xadrId]/s\xaduspend"}),(0,d.jsx)(s.td,{children:"Suspend the current running supervisor of the provided ID. Responds with updated Superv\xadiso\xadrSpec."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Overlord"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Dynamic Config\xaduration"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadworker"}),(0,d.jsx)(s.td,{children:"Retreives current overlord dynamic config\xadura\xadtion."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/in\xaddex\xader/\xadv1/\xadwor\xadker\xad/hi\xadsto\xadry?\xadint\xaderv\xadal=\xad",(0,d.jsx)(s.code,{children:"{in\xadter\xadval\xad}&\xadcou\xadnte\xadr={\xadcount}"})]}),(0,d.jsx)(s.td,{children:"Retrieves history of changes to overlord dynamic config\xadura\xadtion. Accepts interval and count query string parameters to filter by interval and limit the number of results respec\xadtively."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadscaling"}),(0,d.jsx)(s.td,{children:"Retrieves overlord scaling events if auto-s\xadcaling runners are in use."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/in\xaddex\xader/\xadv1/\xadworker"}),(0,d.jsx)(s.td,{children:"Update overlord dynamic worker config\xadura\xadtion."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Data Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Middle\xadManager"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/wo\xadrke\xadr/v\xad1/e\xadnabled"}),(0,d.jsx)(s.td,{children:"Check whether a Middle\xadManager is in an enabled or disabled state"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/wo\xadrke\xadr/v\xad1/tasks"}),(0,d.jsx)(s.td,{children:"Retrieve a list of active tasks being run on Middle\xadMan\xadager."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/wo\xadrke\xadr/v\xad1/t\xadask\xad/",(0,d.jsx)(s.code,{children:"{t\xadask\xadid}"}),"/log"]}),(0,d.jsx)(s.td,{children:"Retrieve task log output stream by task id"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/wo\xadrke\xadr/v\xad1/d\xadisable"}),(0,d.jsx)(s.td,{children:"'Disable' a Middle\xadMan\xadager, causing it to stop accepting new tasks but complete all existing tasks."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/wo\xadrke\xadr/v\xad1/e\xadnable"}),(0,d.jsx)(s.td,{children:"'Enable' a Middle\xadMan\xadager, allowing it to accept new tasks again if it was previously disabled."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsxs)(s.td,{children:["/druid\xad/wo\xadrke\xadr/v\xad1/t\xadask\xad/",(0,d.jsx)(s.code,{children:"{t\xadask\xadid}"}),"\xad/sh\xadutdown"]}),(0,d.jsx)(s.td,{children:"Shutdown a running task by taskid."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Overlord"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Peon"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/wo\xadrke\xadr/v\xad1/c\xadhat\xad/",(0,d.jsx)(s.code,{children:"{t\xadask\xadId}"}),"\xad/ro\xadwStats"]}),(0,d.jsx)(s.td,{children:"Retrieve a live row stats report from a Peon. See task reports for more details."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/wo\xadrke\xadr/v\xad1/c\xadhat\xad/",(0,d.jsx)(s.code,{children:"{t\xadask\xadId}"}),"\xad/un\xadpar\xadsea\xadble\xadEvents"]}),(0,d.jsx)(s.td,{children:"Retrieve an unpars\xadeable events report from a Peon. See task reports for more details."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Data Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Historical"}),(0,d.jsx)(s.td,{children:"Segment Loading"}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/hi\xadsto\xadric\xadal/\xadv1/\xadloa\xaddstatus"}),(0,d.jsxs)(s.td,{children:["Returns JSON of the form ",(0,d.jsx)(s.code,{children:'{"ca\xadche\xadIni\xadtia\xadliz\xaded":\xad}'}),", where value is either true or false indicating if all segments in the local cache have been loaded."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/hi\xadsto\xadric\xadal/\xadv1/\xadrea\xaddiness"}),(0,d.jsx)(s.td,{children:"Similar to /druid\xad/hi\xadsto\xadric\xadal/\xadv1/\xadloa\xaddst\xadatus, but instead of returning JSON with a flag, responses 200 OK if segments in the local cache have been loaded, and 503 SERVICE UNAVAI\xadLABLE, if they haven't."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Query Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Broker"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Datasource Inform\xadation"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/v2\xad/da\xadtas\xadources"}),(0,d.jsx)(s.td,{children:"Returns a list of queryable dataso\xadurces."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/v2\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadName}"})]}),(0,d.jsx)(s.td,{children:"Returns the dimensions and metrics of the dataso\xadurce."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{children:'Option\xadally, you can provide request parameter "\xadful\xadl" to get list of served intervals with dimensions and metrics being served for those intervals. You can also provide request param "\xadint\xaderv\xadal" explicitly to refer to a particular interval.'})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsxs)(s.td,{children:["/druid\xad/v2\xad/da\xadtas\xadour\xadces\xad/",(0,d.jsx)(s.code,{children:"{d\xadata\xadSou\xadrce\xadNam\xade}/\xadcan\xaddid\xadate\xads?i\xadnte\xadrva\xadls=\xad{co\xadmma\xad-se\xadpar\xadate\xadd-i\xadnte\xadrva\xadls}\xad&n\xadumC\xadand\xadida\xadtes\xad={n\xadumC\xadand\xadidates}"})]}),(0,d.jsx)(s.td,{children:'Returns segment inform\xadation lists including server locations for the given datasource and intervals. If "\xadnum\xadCan\xaddid\xadate\xads" is not specified, it will return all servers for each interval.'})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Query Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Load Status"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"GET"}),(0,d.jsx)(s.td,{children:"/druid\xad/br\xadoke\xadr/v\xad1/l\xadoad\xadstatus"}),(0,d.jsx)(s.td,{children:"Returns a flag indicating if the Broker knows about all segments in Zookeeper."})]})]})]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Query Server"}),(0,d.jsx)(s.th,{}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"Queries"}),(0,d.jsx)(s.td,{}),(0,d.jsx)(s.td,{})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid/v2/"}),(0,d.jsx)(s.td,{children:"The endpoint for submitting queries. Accepts an option ?pretty that pretty prints the results."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"POST"}),(0,d.jsx)(s.td,{children:"/druid\xad/v2\xad/ca\xadndi\xaddates/"}),(0,d.jsx)(s.td,{children:"Returns segment inform\xadation lists including server locations for the given query.."})]})]})]}),"\n",(0,d.jsx)(s.h2,{id:"sql-cheat-sheet",children:"SQL Cheat Sheet"}),"\n",(0,d.jsx)(s.h3,{id:"metadata-commands",children:"Metadata Commands"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"SELECT * FROM sys.se\xadgments"}),"\n",(0,d.jsx)(s.li,{children:"EXPLAIN PLAN FOR [\xadSQL]"}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"information_schema-tables",children:"INFORM\xadATI\xadON_\xadSCHEMA TABLES"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"SCHEMATA"}),"\n",(0,d.jsx)(s.li,{children:"TABLES"}),"\n",(0,d.jsx)(s.li,{children:"COLUMNS"}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"system-tables",children:"System Tables"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"sys.segments"}),"\n",(0,d.jsx)(s.li,{children:"sys.server_segments"}),"\n",(0,d.jsx)(s.li,{children:"sys.tasks"}),"\n",(0,d.jsx)(s.li,{children:'The "\xadsys\xad" schema provides visibility into Druid segments, servers and tasks'}),"\n"]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"SQL Types"}),(0,d.jsx)(s.th,{})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"SQL Type"}),(0,d.jsx)(s.td,{children:"DRUID RUNTIME TYPE"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"CHAR"}),(0,d.jsx)(s.td,{children:"STRING"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"VARCHAR"}),(0,d.jsx)(s.td,{children:"STRING"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DECIMAL"}),(0,d.jsx)(s.td,{children:"DOUBLE"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"FLOAT"}),(0,d.jsx)(s.td,{children:"FLOAT"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"REAL"}),(0,d.jsx)(s.td,{children:"DOUBLE"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DOUBLE"}),(0,d.jsx)(s.td,{children:"DOUBLE"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"BOOLEAN"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"TINYINT"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"SMALLINT"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"INTEGER"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"BIGINT"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"TIMESTAMP"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"DATE"}),(0,d.jsx)(s.td,{children:"LONG"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"OTHER"}),(0,d.jsx)(s.td,{children:"COMPLEX"})]})]})]}),"\n",(0,d.jsx)(s.h3,{id:"jdbc-connector",children:"JDBC CONNECTOR"}),"\n",(0,d.jsx)(s.p,{children:"You can make Druid SQL queries using the Avatica JDBC driver"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"jdbc:a\xadvat\xadica\xad:re\xadmot\xade:u\xadrl=\xadhtt\xadp:/\xad/BR\xadOKE\xadR:8\xad082\xad/dr\xaduid\xad/v2\xad/sq\xadl/a\xadvat\xadica"})}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"aggregation",children:"Aggreg\xadation"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"COUNT(*)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"COUNT(\xadDIS\xadTINCT expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"SUM(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"MIN(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"MAX(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"AVG(expr)"})}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"approximate-aggregations",children:"Approx\xadimate Aggreg\xadations"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"APPROX\xad_CO\xadUNT\xad_DI\xadSTI\xadNCT\xad(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"APPROX\xad_CO\xadUNT\xad_DI\xadSTI\xadNCT\xad_DS\xad_HL\xadL(expr, [lgK, tgtHll\xadType])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"APPROX\xad_CO\xadUNT\xad_DI\xadSTI\xadNCT\xad_DS\xad_TH\xadETA\xad(expr, [size])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"APPROX\xad_QU\xadANT\xadILE\xad(expr, probab\xadility, [resol\xadution])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"APPROX\xad_QU\xadANT\xadILE\xad_DS\xad(expr, probab\xadility, [k])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"APPROX\xad_QU\xadANT\xadILE\xad_FI\xadXED\xad_BU\xadCKE\xadTS(\xadexpr, probab\xadility, numBuc\xadkets, lowerL\xadimit, upperL\xadimit, [outli\xaderH\xadand\xadlin\xadgMode]"})}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"approximate-aggregations-1",children:"Approx\xadimate Aggreg\xadations"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"BLOOM_\xadFIL\xadTER\xad(expr, numEnt\xadries)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"BLOOM_\xadFIL\xadTER\xad_TE\xadST(\xad\xadex\xadpr, se\xadria\xadliz\xaded-\xadfil\xadter)"})}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-sql",children:"x = y\nx <> y\nx > y\nx >= y\nx < y\nx <= y\nx BETWEEN y AND z\nx NOT BETWEEN y AND z\nx LIKE pattern [ESCAPE esc]\nx NOT LIKE pattern [ESCAPE esc]\nx IS NULL\nx IS NOT NULL\nx IS TRUE\nx IS NOT TRUE\nx IS FALSE\nx IS NOT FALSE\nx IN (values)\nx NOT IN (values)\nx IN (subquery)\nx NOT IN (subquery)\nx AND y\nx OR y\nNOT x\n"})}),"\n",(0,d.jsx)(s.h3,{id:"other-functions",children:"Other Functions"}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-sql",children:"CAST(value AS TYPE)\nCASE expr WHEN value1 THEN result1 [ WHEN value2 THEN result2 ... ] [ ELSE resultN ] END\nCASE WHEN boolea\xadn_expr1 THEN result1 [ WHEN boolea\xadn_expr2 THEN result2 ... ] [ ELSE resultN ] END |\nNULLIF\xad(va\xadlue1, value2)\nCOALES\xadCE(\xadvalue1, value2, ...)\n"})}),"\n",(0,d.jsx)(s.h3,{id:"numeric-functions",children:"Numeric Functions"}),"\n",(0,d.jsx)(s.p,{children:"Numeric functions will return 64 bit integers or 64 bit floats, depending on their inputs."}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"ABS(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CEIL(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"EXP(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"FLOOR(\xadexpr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"LN(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"LOG10(\xadexpr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"POWER(\xadexpr, power)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"SQRT(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TRUNCA\xadTE(\xadexpr [, digits])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TRUNC(\xadexpr [, digits])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"x + y"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"x - y"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"x * y"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"x / y"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"MOD(x, y)"})}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"string-functions",children:"String Functions"}),"\n",(0,d.jsx)(s.p,{children:"String functions accept strings, and return a type approp\xadriate to the function."}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CONCAT\xad(expr, expr...)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TEXTCA\xadT(expr, expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"LENGTH\xad(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CHAR_L\xadENG\xadTH(\xadexpr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CHARAC\xadTER\xad_LE\xadNGT\xadH(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"STRLEN\xad(expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"LOOKUP\xad(expr, lookup\xadName)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"LOWER(\xadexpr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"POSITI\xadON(\xadneedle IN haystack [FROM fromIn\xaddex])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"REGEXP\xad_EX\xadTRA\xadCT(\xadexpr, pattern, [index])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"REPLAC\xadE(expr, pattern, replac\xadement)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"STRPOS\xad(ha\xadystack, needle)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"SUBSTR\xadING\xad(expr, index, [length])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"SUBSTR\xad(expr, index, [length])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TRIM([BOTH | LEADING | TRAILING] [< \xadc\xadhar\xads > FROM] expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"BTRIM(\xadexpr [, chars])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"LTRIM(\xadexpr [, chars])"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"UPPER(\xadexpr)"})}),"\n"]}),"\n",(0,d.jsx)(s.h3,{id:"time-functions",children:"Time Functions"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CURREN\xadT_T\xadIME\xadSTAMP"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CURREN\xadT_DATE"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"DATE_T\xadRUN\xadC"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TIME_S\xadHIF\xadT"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TIME_E\xadXTR\xadACT"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TIME_P\xadARS\xadE"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TIME_F\xadORM\xadAT"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"MILLIS\xad_TO\xad_TI\xadMES\xadTAM\xadP(m\xadill\xadis_\xadexpr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TIMEST\xadAMP\xad_TO\xad_MI\xadLLI\xadS(t\xadime\xadsta\xadmp_\xadexpr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"EXTRAC\xadT(unit FROM timest\xadamp\xad_expr)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"FLOOR(\xadtim\xadest\xadamp\xad_expr TO unit)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"CEIL(t\xadime\xadsta\xadmp_expr TO unit)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"TIMEST\xadAMP\xadADD\xad(unit, \xadco\xadunt\xad, ti\xadmes\xadtam\xadp)"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"timest\xadamp\xad_expr { + | - } in\xadter\xadval\xad_ex\xadpr"})}),"\n"]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.a,{href:"https://imply.io/druid/cheat-sheet",children:"https://imply.io/druid/cheat-sheet"})})]})}function o(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},511151:(e,s,r)=>{r.d(s,{Z:()=>l,a:()=>n});var d=r(667294);const t={},i=d.createContext(t);function n(e){const s=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),d.createElement(i.Provider,{value:s},e.children)}}}]);