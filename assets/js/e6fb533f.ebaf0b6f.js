"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[18235],{647388:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=a(785893),r=a(511151);const s={},o="Data Structures",d={id:"ai/pandas/data-structures",title:"Data Structures",description:"class pandas. DataFrame (data=None,index=None, columns=None, dtype=None, copy=False)",source:"@site/docs/ai/pandas/data-structures.md",sourceDirName:"ai/pandas",slug:"/ai/pandas/data-structures",permalink:"/ai/pandas/data-structures",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/ai/pandas/data-structures.md",tags:[],version:"current",lastUpdatedAt:1678191863,formattedLastUpdatedAt:"Mar 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/ai/pandas/commands"},next:{title:"Examples",permalink:"/ai/pandas/examples"}},i={},l=[{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"data-structures",children:"Data Structures"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"*class* pandas. **DataFrame** (*data=None*,*index=None*, *columns=None*, *dtype=None*, *copy=False*)"})}),"\n",(0,t.jsx)(n.p,{children:"Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure."}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"data :"})," numpy ndarray (structured or homogeneous), dict, or DataFrame"]}),"\n",(0,t.jsx)(n.p,{children:"Dict can contain Series, arrays, constants, or list-like objects"}),"\n",(0,t.jsx)(n.p,{children:"Changed in version 0.23.0: If data is a dict, argument order is maintained for Python 3.6 and later."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"index :"})," Index or array-like"]}),"\n",(0,t.jsx)(n.p,{children:"Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"columns :"})," Index or array-like"]}),"\n",(0,t.jsx)(n.p,{children:"Column labels to use for resulting frame. Will default to RangeIndex (0, 1, 2, \u2026, n) if no column labels are provided"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"dtype :"})," dtype, default None"]}),"\n",(0,t.jsx)(n.p,{children:"Data type to force. Only a single dtype is allowed. If None, infer"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"copy :"})," boolean, default False"]}),"\n",(0,t.jsx)(n.p,{children:"Copy data from inputs. Only affects DataFrame / 2d ndarray input"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note: All the manipulation operation creates a new dataframe and doesn't change the original dataframe, so either instantiate the dataframe back to the same variable, or explicitely pass inplace=True, if available."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'d = {\'col1\': [1, 2], \'col2\': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf\ncol1  col2\n0     1     3\n1     2     4\n\ndf = pandas.read_csv("http://pythonhow.com/supermarkets.csv")\ndf = pandas.read_json(\'supermarkets.json\')\ndf.set_index(\'ID\')\ndf.shape # returns a tuple with (num_of_rows, num_of_columns)\n\nloan_data_backup = df.copy()\ndf.columns.values\ndf.info()\ndf_columns[\'col_name\'].unique()\n\n# Extract row, column from the dataframe\ndf.loc[:,"Country"])\ndf.iloc[3,1:4]\ndf.ix[3,4]\n\n# Delete row, column from the dataframe\ndf.drop("332 Hill St", 0)\ndf.drop(df.columns[0:3],1)\ndf.columns # returns list of all the column of the dataframe\n\n# Add row column into the dataframe\ndf["Continent"] = df.shape[0]*[North America"] # creates a new column Continent and set all the values of the rows to "North America"\n\ndf["Continent"] = df["Country"] + "," + "North America"\ndf["Address"] = df["Address"] + ", " + df["City"] + ", " + df["State"] + ", " + df["Country"] #update the column Continent, with all addition of all the values specified in the Column.\n\ndf.T # Transpose of the dataframe\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},511151:(e,n,a)=>{a.d(n,{Z:()=>d,a:()=>o});var t=a(667294);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);