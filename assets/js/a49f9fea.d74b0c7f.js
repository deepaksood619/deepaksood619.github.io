"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[87943],{213344:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=e(785893),o=e(511151);const r={},s="Input Output Template",a={id:"python/python-intro/input-output-template",title:"Input Output Template",description:"I changed the Python print statement to understand how it works internally - YouTube",source:"@site/docs/python/python-intro/input-output-template.md",sourceDirName:"python/python-intro",slug:"/python/python-intro/input-output-template",permalink:"/python/python-intro/input-output-template",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/input-output-template.md",tags:[],version:"current",lastUpdatedAt:1686556956,formattedLastUpdatedAt:"Jun 12, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generators",permalink:"/python/python-intro/generators"},next:{title:"Iterators",permalink:"/python/python-intro/iterators"}},p={},u=[];function l(n){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"input-output-template",children:"Input Output Template"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"#Input Template\ndef func(lst, n):\n    res = 0\n\n    return res\n\n# t = int(input())\n\n# for _ in range(t):\n#     n = int(input())\n#     lst = list(map(int, input().split()))\n#     print(func(lst, n))\n\ndef test(st, n):\n    return func(list(map(int, st.split())), n)\n\nassert test('1 4 45 6 10 8', 4) == 0\n\n# Input multiple lines of integers in a single line -\n\n 1. input(\"\\nPress the enter key to exit\\n\")\n name = input('What's your name?')\n print('Hello', + name)\n\n 2. Using a list comprehension (for single line)\n a, b, c, d = [int(x) for x in input().split()]\n arr = [int(x) for x in input().split()]\n\n 3. For multiple lines of input\n a, b, c, d = [int(input()) for _ in range(4)]\n\n 3. Using the map funtion\n a, b, c, d = map(int, input().split())\n lst = list(map(int, input().split()))\n\n 4. Input string (hello 2 3)\n Test = input()\n Val = Test.split(' ')\n #['hello', '2', '3']\n\n 5. Split Line -\n Line = 'hello how are you'\n a, *b = line.split()\n # a = 'hello'\n # b = ['how', 'are', 'you']\n\n 6. For single assignment\n Line = 'hello how are you'\n *a, = Line.split()\n\n 7. Input and recurse\n for _ in range(int(input)):\n  print(input())\n\n 8. Read from a file\n fo = open('test.txt', 'r')\n print(fo.readline())\n\n# Fast Input\n import sys\n\n t = int(sys.stdin.readline().strip())\n\n for _ in range(t):\n     n, m = map(int, sys.stdin.readline().strip().split())\n     sys.stdout.write('0')\n     sys.stdout.write('\\n')\n\n FAST IO Example\n # import inbuilt standard input output\n from sys import stdin, stdout\n\n # suppose a function called main() and\n # all the operations are performed\n def main():\n\n     # input via readline method\n     n = stdin.readline()\n\n     # array input similar method\n     arr = [int(x) for x in stdin.readline().split()]\n\n     #initialize variable\n     summation = 0\n\n     # calculate sum\n     for x in arr:\n         summation += x\n\n     # could use inbuilt summation = sum(arr)\n\n     # print answer via write, write method writes only string operations so we need to convert any data into string for input\n     stdout.write(str(summation))\n\n # call the main method\n if __name__ == \"__main__\":\n     main()\n\n# Output\n end is used to define the end statement. default is \\n (newline)\n lst = [1, 2, 3]\n for x in lst:\n  print(x, end=' ')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=vuZO4qzjCdQ",children:"I changed the Python print statement to understand how it works internally - YouTube"})})]})}function d(n={}){const{wrapper:t}={...(0,o.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},511151:(n,t,e)=>{e.d(t,{Z:()=>a,a:()=>s});var i=e(667294);const o={},r=i.createContext(o);function s(n){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function a(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(r.Provider,{value:t},n.children)}}}]);