"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[21278],{429271:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ai/computer-vision-cv/examples","title":"Examples","description":"- Image Classifier","source":"@site/docs/ai/computer-vision-cv/examples.md","sourceDirName":"ai/computer-vision-cv","slug":"/ai/computer-vision-cv/examples","permalink":"/ai/computer-vision-cv/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/ai/computer-vision-cv/examples.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1726859634000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CV - Libraries / Tools","permalink":"/ai/computer-vision-cv/cv-libraries-tools"},"next":{"title":"Image / Data Labeling Tools","permalink":"/ai/computer-vision-cv/image-data-labeling-tools"}}');var s=a(474848),t=a(28453);const l={},o="Examples",r={},d=[{value:"Import Libraries",id:"import-libraries",level:2},{value:"Download Dataset",id:"download-dataset",level:2},{value:"Load Dataset",id:"load-dataset",level:2},{value:"Print Random Samples",id:"print-random-samples",level:2},{value:"Create model",id:"create-model",level:2},{value:"Compile model so that model can resume",id:"compile-model-so-that-model-can-resume",level:2},{value:"Train",id:"train",level:2},{value:"Evaluate",id:"evaluate",level:2},{value:"Inference / Making predictions",id:"inference--making-predictions",level:2},{value:"Cat vs Dog Classifier",id:"cat-vs-dog-classifier",level:2},{value:"Links",id:"links",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"examples",children:"Examples"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Image Classifier"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"import-libraries",children:"Import Libraries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import numpy as np\nimport random\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\n"})}),"\n",(0,s.jsx)(n.h2,{id:"download-dataset",children:"Download Dataset"}),"\n",(0,s.jsx)(n.p,{children:"1000 images of cat and 1000 images of dog"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install gdown\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import gdown\n\nfiles = {'labels.csv': 'https://drive.google.com/uc?id=1Zy3y6wBLZTI67BZhXzwQtgWJ8m50Oggl',\n        'labels_test.csv': 'https://drive.google.com/uc?id=1cGDczlanBC59TbpNIe8_s0-yUtIrmnwm',\n        'input.csv': 'https://drive.google.com/uc?id=1jQ16W4DJG1ZfJ_R7V_9cQIALwN3lruE5',\n        'input_test.csv': 'https://drive.google.com/uc?id=1JHblwM88w4g70lZwiLDf6qPz8t0wZnd6',}\n\n\nfor output, url in files.items():\n    print(url, output)\n    gdown.download(url, output, quiet=False)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"load-dataset",children:"Load Dataset"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"X_train = np.loadtxt('input.csv', delimiter = ',')\nY_train = np.loadtxt('labels.csv', delimiter = ',')\n\nX_test = np.loadtxt('input_test.csv', delimiter = ',')\nY_test = np.loadtxt('labels_test.csv', delimiter = ',')\n\n# reshape\nX_train = X_train.reshape(len(X_train), 100, 100, 3)\nY_train = Y_train.reshape(len(Y_train), 1)\n\nX_test = X_test.reshape(len(X_test), 100, 100, 3)\nY_test = Y_test.reshape(len(Y_test), 1)\n\n# normalize\nX_train = X_train/255.0\nX_test = X_test/255.0\n\nprint(\"Shape of X_train: \", X_train.shape)\nprint(\"Shape of Y_train: \", Y_train.shape)\nprint(\"Shape of X_test: \", X_test.shape)\nprint(\"Shape of Y_test: \", Y_test.shape)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"print-random-samples",children:"Print Random Samples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"idx = random.randint(0, len(X_test))\nplt.imshow(X_test[idx, :])\nplt.show()\n\nidx = random.randint(0, len(X_train))\nplt.imshow(X_train[idx, :])\nplt.show()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"create-model",children:"Create model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model = Sequential([\n    Conv2D(32, (3,3), activation = 'relu', input_shape = (100, 100, 3)),\n    MaxPooling2D((2,2)),\n\n    Conv2D(32, (3,3), activation = 'relu'),\n    MaxPooling2D((2,2)),\n\n    Flatten(),\n    Dense(64, activation = 'relu'),\n    Dense(1, activation = 'sigmoid')\n])\n"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (100, 100, 3)))\nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Conv2D(32, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"compile-model-so-that-model-can-resume",children:"Compile model so that model can resume"}),"\n",(0,s.jsx)(n.p,{children:"Adding cost function, and backpropogation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n"})}),"\n",(0,s.jsx)(n.p,{children:"if need to use stochastic gradient descent instead of adam, this is used if we want to change the learning rate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"opt = keras.optimizers.SGD(learning_rate = 0.001)\nmodel.compile(loss = 'binary_crossentropy', optimizer = opt, metrics = ['accuracy'])\n"})}),"\n",(0,s.jsx)(n.h2,{id:"train",children:"Train"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model.fit(X_train, Y_train, epochs = 5, batch_size = 64)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"evaluate",children:"Evaluate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model.evaluate(X_test, Y_test)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"inference--making-predictions",children:"Inference / Making predictions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"idx2 = random.randint(0, len(Y_test))\nplt.imshow(X_test[idx2, :])\nplt.show()\n\ny_pred = model.predict(X_test[idx2, :].reshape(1, 100, 100, 3))\ncat_dog_pred = y_pred > 0.5\n\nif(cat_dog_pred == 0):\n    pred = 'dog'\nelse:\n    pred = 'cat'\n\nprint(\"Our model says it is a :\", pred, y_pred)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["value ",(0,s.jsx)(n.code,{children:"y_pred"})," gives a probabilistic value, close to 0 means it's 1st class i.e. dog, and close to 1 means it's 2nd class i.e. cat."]}),"\n",(0,s.jsx)(n.h2,{id:"cat-vs-dog-classifier",children:"Cat vs Dog Classifier"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://medium.com/@draj0718/convolutional-neural-networks-cnn-architectures-explained-716fb197b243",children:"Convolutional Neural Networks (CNN) \u2014 Architecture Explained | by Dharmaraj | Medium"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/girishkuniyal/Cat-Dog-CNN-Classifier",children:"GitHub - girishkuniyal/Cat-Dog-CNN-Classifier: This classifier use Convolution Neural Network approch for kaggle problem to classify Cat vs Dog images."})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/mohamedamine99/Keras-CNN-cats-vs-dogs-image-classification",children:"GitHub - mohamedamine99/Keras-CNN-cats-vs-dogs-image-classification: This project is an image classification project using a deep-learning based on Convolutional Neural Networks (CNNs) with Keras. The Dogs vs. Cats is a classic problem for anyone who wants to dive deeper into deep-learning."})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://machinelearningmastery.com/how-to-develop-a-convolutional-neural-network-to-classify-photos-of-dogs-and-cats/",children:"How to Classify Photos of Dogs and Cats (with 97% accuracy) - MachineLearningMastery.com"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.kaggle.com/code/williamkempson/dog-cat-classification",children:"Dog Cat Classification | Kaggle"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.kaggle.com/code/deepaksood619/image-classification-using-cnn-keras",children:"Image Classification using CNN Keras | Kaggle"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=J1jhfAw5Uvo",children:"Image Classification using CNN Keras | Full implementation - YouTube"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.kaggle.com/code/sachinpatil1280/cats-vs-dogs-image-classification-using-cnn-95",children:"Cats vs Dogs : Image Classification using CNN(95%) | Kaggle"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=KCzgR7eQ3PY&ab_channel=AmazonWebServices",children:"AWS Innovate | Intro to Deep Learning: Building an Image Classifier on Amazon SageMaker - YouTube"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var i=a(296540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);