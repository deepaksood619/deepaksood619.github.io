"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[68181],{739716:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"databases-nosql/milvus/interview-questions","title":"Interview Questions","description":"Architecture & Core Concepts","source":"@site/docs/databases-nosql/milvus/interview-questions.md","sourceDirName":"databases-nosql/milvus","slug":"/databases-nosql/milvus/interview-questions","permalink":"/databases-nosql/milvus/interview-questions","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases-nosql/milvus/interview-questions.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1751484655000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Deployment","permalink":"/databases-nosql/milvus/deployment"},"next":{"title":"Intro","permalink":"/databases-nosql/milvus/intro"}}');var r=i(474848),l=i(28453);const t={},o="Interview Questions",a={},d=[{value:"Architecture &amp; Core Concepts",id:"architecture--core-concepts",level:3},{value:"Indexing &amp; Search Performance",id:"indexing--search-performance",level:3},{value:"Scaling &amp; Load Handling",id:"scaling--load-handling",level:3},{value:"Storage &amp; Retention",id:"storage--retention",level:3},{value:"Monitoring, Observability &amp; Optimization",id:"monitoring-observability--optimization",level:3},{value:"Incident Management",id:"incident-management",level:3},{value:"RAG/LLM Integration",id:"ragllm-integration",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"interview-questions",children:"Interview Questions"})}),"\n",(0,r.jsx)(n.h3,{id:"architecture--core-concepts",children:"Architecture & Core Concepts"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q1."})," Describe the architecture of Milvus. What are the key components and their roles?"]}),"\n",(0,r.jsx)(n.p,{children:"Milvus is a distributed vector database with the following core components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"QueryNode:"})," Handles vector searches"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DataNode:"})," Handles insert/update/delete operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IndexNode:"})," Builds vector indexes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proxy:"})," API gateway and query router"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RootCoord, QueryCoord, DataCoord, IndexCoord:"})," Manage coordination and metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Etcd:"})," Metadata store"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pulsar:"})," Messaging backbone for internal event streaming"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MinIO / S3:"})," Object storage for segments and indexes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"indexing--search-performance",children:"Indexing & Search Performance"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q2."})," What are the different indexing types Milvus supports, and when do you use each?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IVF_FLAT:"})," Balanced performance; suitable for medium-sized datasets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IVF_PQ:"})," Low memory footprint, high latency; useful for resource-constrained environments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HNSW:"})," High recall and low latency; best for low-latency applications"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DISKANN:"})," Disk-based index for massive datasets exceeding RAM capacity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FLAT:"})," Exact search; best for benchmarking"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q3."})," How do you choose the best search parameters (",(0,r.jsx)(n.code,{children:"ef"}),", ",(0,r.jsx)(n.code,{children:"nprobe"}),") for ANN search in Milvus?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ef"})," (for HNSW) and ",(0,r.jsx)(n.code,{children:"nprobe"})," (for IVF) to balance ",(0,r.jsx)(n.strong,{children:"recall vs. latency"})]}),"\n",(0,r.jsx)(n.li,{children:"Start low, measure recall, and increase incrementally"}),"\n",(0,r.jsx)(n.li,{children:"Run A/B tests for real query loads"}),"\n",(0,r.jsx)(n.li,{children:"Use metric logging to track recall and latency tradeoffs in production"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scaling--load-handling",children:"Scaling & Load Handling"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q4."})," How do you scale Milvus for large-scale ingestion (e.g., millions of embeddings/hour)?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Horizontal scaling of ",(0,r.jsx)(n.strong,{children:"DataNodes"})," to parallelize ingestion"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"sharding"})," across collections/partitions"]}),"\n",(0,r.jsx)(n.li,{children:"Tune batch size and flush intervals"}),"\n",(0,r.jsx)(n.li,{children:"Increase Pulsar partitions to avoid messaging bottlenecks"}),"\n",(0,r.jsxs)(n.li,{children:["Pre-warm memory using ",(0,r.jsx)(n.code,{children:"load_collection"})," calls"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q5."})," What is Milvus's mechanism for data sharding and partitioning?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Collections"})," are top-level namespaces"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Partitions"})," divide data logically within a collection"]}),"\n",(0,r.jsx)(n.li,{children:"Shards are internal constructs used for horizontal scaling"}),"\n",(0,r.jsx)(n.li,{children:"Partitioning can optimize queries if metadata filtering is used effectively"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q6."})," How does Milvus handle high availability and fault tolerance?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Coordination services (e.g., RootCoord) restartable via Kubernetes"}),"\n",(0,r.jsxs)(n.li,{children:["Etcd, Pulsar, and MinIO should be deployed in ",(0,r.jsx)(n.strong,{children:"HA mode"})]}),"\n",(0,r.jsx)(n.li,{children:"Use persistent volumes (PVCs) for stateful components"}),"\n",(0,r.jsx)(n.li,{children:"Monitor with readiness/liveness probes"}),"\n",(0,r.jsx)(n.li,{children:"Set up backup/restore via external MinIO/S3 tools"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"storage--retention",children:"Storage & Retention"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q7."})," How does Milvus manage vector and metadata storage under the hood?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Metadata (schemas, collection info) stored in ",(0,r.jsx)(n.strong,{children:"etcd"})]}),"\n",(0,r.jsxs)(n.li,{children:["Vector data written to ",(0,r.jsx)(n.strong,{children:"Pulsar"})," then flushed to ",(0,r.jsx)(n.strong,{children:"MinIO or S3"})]}),"\n",(0,r.jsx)(n.li,{children:"Indexes built and saved in object storage (MinIO/S3)"}),"\n",(0,r.jsx)(n.li,{children:"Write-ahead logs (WAL) are managed by Milvus internally"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q8."})," How do you manage data versioning or schema evolution in Milvus?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Milvus supports ",(0,r.jsx)(n.strong,{children:"collection and field-level schemas"})]}),"\n",(0,r.jsx)(n.li,{children:"For schema changes: Create new collections with new schemas"}),"\n",(0,r.jsxs)(n.li,{children:["Use naming/versioning conventions like ",(0,r.jsx)(n.code,{children:"collection_v2"})]}),"\n",(0,r.jsx)(n.li,{children:"Data migration via custom scripts or SDKs (Python/Go)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"monitoring-observability--optimization",children:"Monitoring, Observability & Optimization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q9."})," What metrics do you track to monitor Milvus health and performance?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Query latency, insert throughput, flush time"}),"\n",(0,r.jsx)(n.li,{children:"Node memory and CPU usage (QueryNode, DataNode)"}),"\n",(0,r.jsx)(n.li,{children:"Pulsar consumer lag"}),"\n",(0,r.jsx)(n.li,{children:"Index build time"}),"\n",(0,r.jsx)(n.li,{children:"Collection load/unload events"}),"\n",(0,r.jsx)(n.li,{children:"Disk I/O, especially for MinIO/S3 and DISKANN"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q10."})," Describe a real-world scenario where vector search degraded in Milvus. How would you debug it?"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Identify collection/query degrading (via logs or metrics)"}),"\n",(0,r.jsx)(n.li,{children:"Check index load status \u2014 was it preloaded?"}),"\n",(0,r.jsx)(n.li,{children:"Examine QueryNode logs for OOMs or slow response"}),"\n",(0,r.jsx)(n.li,{children:"Inspect Pulsar/etcd lag"}),"\n",(0,r.jsx)(n.li,{children:"Scale nodes if overloaded"}),"\n",(0,r.jsx)(n.li,{children:"Tune search parameters or consider reindexing with HNSW/IVF"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"incident-management",children:"Incident Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q11."})," You receive an alert that Milvus vector queries are timing out. What\u2019s your step-by-step triage?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check if QueryNode or Proxy crashed"}),"\n",(0,r.jsxs)(n.li,{children:["Validate collection is loaded (",(0,r.jsx)(n.code,{children:"show_loaded_collections"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Check CPU/memory saturation via Grafana/Prometheus"}),"\n",(0,r.jsx)(n.li,{children:"Inspect Pulsar topic health (lag)"}),"\n",(0,r.jsxs)(n.li,{children:["Restart failing components with proper ",(0,r.jsx)(n.code,{children:"gracePeriod"})]}),"\n",(0,r.jsx)(n.li,{children:"Rebalance load across nodes if needed"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ragllm-integration",children:"RAG/LLM Integration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q12."})," How do you optimize Milvus usage in a RAG (Retrieval Augmented Generation) setup?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use filtered vector search (",(0,r.jsx)(n.code,{children:"search with filter"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Maintain metadata (e.g., source, timestamp) for document chunks"}),"\n",(0,r.jsx)(n.li,{children:"Periodic embedding re-generation on source changes"}),"\n",(0,r.jsx)(n.li,{children:"Pre-load collections on app startup"}),"\n",(0,r.jsx)(n.li,{children:"Cache common queries via Redis or similar"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(296540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);