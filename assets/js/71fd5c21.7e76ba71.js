"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[68374],{237277:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"data-warehouses/bigquery/query-optimizations","title":"Query Optimizations","description":"1. Use SELECT Specific Columns","source":"@site/docs/data-warehouses/bigquery/query-optimizations.md","sourceDirName":"data-warehouses/bigquery","slug":"/data-warehouses/bigquery/query-optimizations","permalink":"/data-warehouses/bigquery/query-optimizations","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-warehouses/bigquery/query-optimizations.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1760213252000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Queries / Commands","permalink":"/data-warehouses/bigquery/queries-commands"},"next":{"title":"Query Working","permalink":"/data-warehouses/bigquery/query-working"}}');var r=i(474848),t=i(28453);const l={},a="Query Optimizations",d={},o=[{value:"1. Use SELECT Specific Columns",id:"1-use-select-specific-columns",level:3},{value:"2. Leverage Partitioning",id:"2-leverage-partitioning",level:3},{value:"3. Use Clustering",id:"3-use-clustering",level:3},{value:"4. Filter Early in Queries",id:"4-filter-early-in-queries",level:3},{value:"5. Use WITH Clauses (Common Table Expressions)",id:"5-use-with-clauses-common-table-expressions",level:3},{value:"6. Leverage Query Caching",id:"6-leverage-query-caching",level:3},{value:"7. Use APPROX Functions",id:"7-use-approx-functions",level:3},{value:"8. Optimize JOINs",id:"8-optimize-joins",level:3},{value:"9. Use ARRAY Aggregation and UNNEST Appropriately",id:"9-use-array-aggregation-and-unnest-appropriately",level:3},{value:"10. Limit Data with Pre-Aggregation",id:"10-limit-data-with-pre-aggregation",level:3},{value:"11. Use TEMP Tables for Large Intermediate Results",id:"11-use-temp-tables-for-large-intermediate-results",level:3},{value:"12. Optimize Window Functions",id:"12-optimize-window-functions",level:3},{value:"13. Materialized Views",id:"13-materialized-views",level:3},{value:"Comparison to other BigQuery techniques",id:"comparison-to-other-bigquery-techniques",level:4},{value:"Links",id:"links",level:4},{value:"14. Avoid Cross Joins",id:"14-avoid-cross-joins",level:3},{value:"15. Monitor Query Execution",id:"15-monitor-query-execution",level:3},{value:"Others",id:"others",level:2},{value:"Avoid Overuse of Nested Queries",id:"avoid-overuse-of-nested-queries",level:3},{value:"Leverage Table Sampling",id:"leverage-table-sampling",level:3},{value:"Use Query Parameters",id:"use-query-parameters",level:3},{value:"Use Native BigQuery Functions",id:"use-native-bigquery-functions",level:3},{value:"Streaming Inserts vs Batch Inserts",id:"streaming-inserts-vs-batch-inserts",level:3},{value:"Avoid Repeated Computations",id:"avoid-repeated-computations",level:3},{value:"Limit Result Sets",id:"limit-result-sets",level:3},{value:"Optimize Data Formats",id:"optimize-data-formats",level:3},{value:"Take Advantage of BI Engine",id:"take-advantage-of-bi-engine",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"query-optimizations",children:"Query Optimizations"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Unoptimized\nWHERE order_date >= DATE_TRUNC(CURRENT_DATE('Asia/Kolkata'), MONTH) - INTERVAL 1 MONTH\n\n-- Optimized\nWHERE order_date >= DATE_TRUNC(DATE_SUB(CURRENT_DATE('Asia/Kolkata'), INTERVAL 1 MONTH), MONTH)  AND order_date <= CURRENT_DATE('Asia/Kolkata')\n"})}),"\n",(0,r.jsx)(s.h3,{id:"1-use-select-specific-columns",children:"1. Use SELECT Specific Columns"}),"\n",(0,r.jsxs)(s.p,{children:["Avoid ",(0,r.jsx)(s.code,{children:"SELECT *"})," as it scans all columns, including unnecessary ones. Instead, select only the columns you need."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT customer_id, total_amount FROM orders;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"2-leverage-partitioning",children:"2. Leverage Partitioning"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Partition tables by ",(0,r.jsx)(s.code,{children:"DATE"})," or ",(0,r.jsx)(s.code,{children:"TIMESTAMP"})," columns to minimize the data scanned."]}),"\n",(0,r.jsxs)(s.li,{children:["Query specific partitions using the ",(0,r.jsx)(s.code,{children:"WHERE"})," clause."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31';\n"})}),"\n",(0,r.jsx)(s.h3,{id:"3-use-clustering",children:"3. Use Clustering"}),"\n",(0,r.jsxs)(s.p,{children:["Cluster data based on frequently filtered columns (e.g., ",(0,r.jsx)(s.code,{children:"region"}),", ",(0,r.jsx)(s.code,{children:"product_id"}),"). This optimizes how data is stored within partitions, speeding up queries."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE sales (\n  region STRING, product_id STRING, revenue FLOAT64\n) PARTITION BY DATE(sale_date) CLUSTER BY region,\nproduct_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"4-filter-early-in-queries",children:"4. Filter Early in Queries"}),"\n",(0,r.jsx)(s.p,{children:"Use filters as early as possible in your query to minimize the amount of data processed."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Less efficient SELECT * FROM orders WHERE total_amount > 100;\n-- More efficient\nSELECT order_id, total_amount FROM orders WHERE total_amount > 100;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"5-use-with-clauses-common-table-expressions",children:"5. Use WITH Clauses (Common Table Expressions)"}),"\n",(0,r.jsxs)(s.p,{children:["Break down complex queries into manageable, reusable blocks using ",(0,r.jsx)(s.code,{children:"WITH"}),"."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"WITH filtered_data AS (\n  SELECT\n    customer_id,\n    total_amount\n  FROM\n    orders\n  WHERE\n    order_date >= '2024-01-01'\n)\nSELECT\n  customer_id,\n  SUM(total_amount) AS total_spent\nFROM\n  filtered_data\nGROUP BY\n  customer_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"6-leverage-query-caching",children:"6. Leverage Query Caching"}),"\n",(0,r.jsx)(s.p,{children:"BigQuery automatically caches query results. If the same query (without changes) is run within 24 hours, cached results are used, avoiding redundant computation."}),"\n",(0,r.jsx)(s.h3,{id:"7-use-approx-functions",children:"7. Use APPROX Functions"}),"\n",(0,r.jsxs)(s.p,{children:["For large datasets where approximate results are sufficient, use ",(0,r.jsx)(s.code,{children:"APPROX"})," functions like ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT"})," to reduce processing."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT APPROX_COUNT_DISTINCT(customer_id) AS unique_customers FROM orders;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"8-optimize-joins",children:"8. Optimize JOINs"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Reduce JOIN data size by filtering and aggregating before performing the JOIN."}),"\n",(0,r.jsx)(s.li,{children:"Ensure the smaller table is on the right-hand side of the JOIN for performance."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Filter smaller dataset first\nWITH filtered_customers AS (\n  SELECT\n    customer_id,\n    region\n  FROM\n    customers\n  WHERE\n    region = 'North America'\n)\nSELECT\n  o.order_id,\n  c.customer_id\nFROM\n  orders o\n  JOIN filtered_customers c ON o.customer_id = c.customer_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"9-use-array-aggregation-and-unnest-appropriately",children:"9. Use ARRAY Aggregation and UNNEST Appropriately"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.code,{children:"ARRAY"})," types to combine multiple rows into a single row when applicable. When querying nested or repeated fields, use ",(0,r.jsx)(s.code,{children:"UNNEST"})," efficiently."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Efficiently flatten repeated fields\nSELECT customer_id, item FROM orders, UNNEST(items) AS item\n"})}),"\n",(0,r.jsx)(s.h3,{id:"10-limit-data-with-pre-aggregation",children:"10. Limit Data with Pre-Aggregation"}),"\n",(0,r.jsxs)(s.p,{children:["Pre-aggregate data using ",(0,r.jsx)(s.code,{children:"GROUP BY"})," or materialized views to reduce scanned rows in subsequent queries."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Pre-aggregate sales by region\nCREATE MATERIALIZED VIEW regional_sales AS\nSELECT\n  region,\n  SU (revenue) AS total_revenue\nFROM\n  sales\nGROUP BY\n  region;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"11-use-temp-tables-for-large-intermediate-results",children:"11. Use TEMP Tables for Large Intermediate Results"}),"\n",(0,r.jsx)(s.p,{children:"Store intermediate results in temporary tables for reuse in multiple queries."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"CREATE TEMP TABLE temp_results AS\nSELECT\n  customer_id,\n  COUNT(order_id) AS order_count\nFROM\n  orders\nGROUP BY\n  customer_id;\nSELECT\n  *\nFROM\n  temp_results\nWHERE\n  order_count > 10;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"12-optimize-window-functions",children:"12. Optimize Window Functions"}),"\n",(0,r.jsxs)(s.p,{children:["Minimize the use of window functions (",(0,r.jsx)(s.code,{children:"OVER"})," clause) when not necessary. Use aggregate functions with ",(0,r.jsx)(s.code,{children:"GROUP BY"})," instead."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Instead of this\nSELECT customer_id, SUM(total_amount) OVER(PARTITION BY customer_id) AS total_spent FROM orders;\n-- Use this\nSELECT customer_id, SUM(total_amount) AS total_spent FROM orders GROUP BY customer_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"13-materialized-views",children:"13. Materialized Views"}),"\n",(0,r.jsx)(s.p,{children:"Use materialized views for frequently run, repetitive queries. These precompute and store results, reducing query time."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"In BigQuery, materialized views are precomputed views that periodically cache the results of a query for increased performance and efficiency."}),"\n",(0,r.jsxs)(s.li,{children:["Use Cases:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pre-aggregate data -"})," Aggregation of streaming data."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pre-filter data -"})," Run queries that only read a particular subset of the table."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pre-join data -"})," Query joins, especially between large and small tables."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Recluster data -"})," Run queries that would benefit from a clustering scheme that differs from the base tables."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"comparison-to-other-bigquery-techniques",children:"Comparison to other BigQuery techniques"}),"\n",(0,r.jsx)(s.p,{children:"The following table summarizes the similarities and differences between BigQuery caching, scheduled queries, logical views, and materialized views."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Component"}),(0,r.jsx)(s.th,{children:"Caching"}),(0,r.jsx)(s.th,{children:"Scheduled queries"}),(0,r.jsx)(s.th,{children:"Logical views"}),(0,r.jsx)(s.th,{children:"Materialized views"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Optimize compute"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Query support"}),(0,r.jsx)(s.td,{children:"All"}),(0,r.jsx)(s.td,{children:"All"}),(0,r.jsx)(s.td,{children:"All"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.a,{href:"https://cloud.google.com/bigquery/docs/materialized-views-create#supported-mvs",children:"Limited"}),"1"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Partitioning and clustering"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"N/A"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Incremental refresh"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Additional storage"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Query rewrite"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Maintenance costs"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"N/A"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Data staleness"}),(0,r.jsx)(s.td,{children:"Never"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"Never"}),(0,r.jsx)(s.td,{children:"Optional\xa02"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://cloud.google.com/bigquery/docs/materialized-views-intro",children:"Introduction to materialized views \xa0|\xa0 BigQuery \xa0|\xa0 Google Cloud"})}),"\n",(0,r.jsx)(s.h4,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.youtube.com/watch?v=vlw9nlkdS0w&ab_channel=DataTech",children:"4. Introduction to the Standard & Materialized Views in Google BigQuery - YouTube"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://medium.com/google-cloud/hidden-gems-of-bigquery-news-materialized-views-april-2024-26b646ca416b",children:"Hidden Gems of BigQuery News \u2014 Materialized views changes(April 2024) | by Artem Nikulchenko | Google Cloud - Community | Medium"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://medium.com/google-cloud/the-power-of-materialized-views-in-bigquery-7d0ac917cc8c",children:"The Power of Materialized Views in BigQuery | by Dolly Aswin Harahap | Google Cloud - Community | Medium"})}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"14-avoid-cross-joins",children:"14. Avoid Cross Joins"}),"\n",(0,r.jsx)(s.p,{children:"Cross joins process the Cartesian product of two tables, scanning massive amounts of data. Avoid unless absolutely necessary."}),"\n",(0,r.jsx)(s.h3,{id:"15-monitor-query-execution",children:"15. Monitor Query Execution"}),"\n",(0,r.jsxs)(s.p,{children:["Use the ",(0,r.jsx)(s.strong,{children:"Query Execution Details"})," tab in the BigQuery console to identify bottlenecks like high bytes processed or skewed slot utilization."]}),"\n",(0,r.jsx)(s.h2,{id:"others",children:"Others"}),"\n",(0,r.jsx)(s.h3,{id:"avoid-overuse-of-nested-queries",children:"Avoid Overuse of Nested Queries"}),"\n",(0,r.jsx)(s.p,{children:"Flatten nested queries into simpler steps where possible. Complex subqueries can slow down execution."}),"\n",(0,r.jsx)(s.h3,{id:"leverage-table-sampling",children:"Leverage Table Sampling"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.code,{children:"TABLESAMPLE"})," for debugging or testing on large datasets instead of processing the full table."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM my_table TABLESAMPLE SYSTEM (10 PERCENT);\n"})}),"\n",(0,r.jsx)(s.h3,{id:"use-query-parameters",children:"Use Query Parameters"}),"\n",(0,r.jsx)(s.p,{children:"Use parameterized queries instead of hardcoding values. This improves performance and allows caching."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"DECLARE start_date DATE;\nDECLARE end_date DATE;\nSET\n  start_date = '2024-01-01';\nSET\n  end_date = '2024-01-31';\nSELECT\n  *\nFROM\n  orders\nWHERE\n  order_date BETWEEN start_date\n  AND end_date;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"use-native-bigquery-functions",children:"Use Native BigQuery Functions"}),"\n",(0,r.jsxs)(s.p,{children:["Use built-in BigQuery functions like ",(0,r.jsx)(s.code,{children:"STRING_AGG"}),", ",(0,r.jsx)(s.code,{children:"ARRAY_AGG"}),", etc., instead of writing custom logic. These are highly optimized."]}),"\n",(0,r.jsx)(s.h3,{id:"streaming-inserts-vs-batch-inserts",children:"Streaming Inserts vs Batch Inserts"}),"\n",(0,r.jsx)(s.p,{children:"If you use real-time inserts, ensure the streaming buffer is not overutilized. Batch inserts with larger data sizes can be more cost-effective."}),"\n",(0,r.jsx)(s.h3,{id:"avoid-repeated-computations",children:"Avoid Repeated Computations"}),"\n",(0,r.jsx)(s.p,{children:"Compute values once and reuse them. For example, store common calculations in temporary tables or variables."}),"\n",(0,r.jsx)(s.h3,{id:"limit-result-sets",children:"Limit Result Sets"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.code,{children:"LIMIT"})," when you don\u2019t need full datasets, especially for exploratory queries."]}),"\n",(0,r.jsx)(s.h3,{id:"optimize-data-formats",children:"Optimize Data Formats"}),"\n",(0,r.jsx)(s.p,{children:"Prefer efficient data formats like Avro or Parquet over CSV, as they are compressed and optimized for analytical workloads."}),"\n",(0,r.jsx)(s.h3,{id:"take-advantage-of-bi-engine",children:"Take Advantage of BI Engine"}),"\n",(0,r.jsxs)(s.p,{children:["If using BigQuery for dashboards, enable ",(0,r.jsx)(s.strong,{children:"BigQuery BI Engine"})," for faster response times."]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>l,x:()=>a});var n=i(296540);const r={},t=n.createContext(r);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);