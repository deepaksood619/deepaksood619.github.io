"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[85547],{188126:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"technologies/git/commands","title":"Commands","description":"Shortcuts","source":"@site/docs/technologies/git/commands.md","sourceDirName":"technologies/git","slug":"/technologies/git/commands","permalink":"/technologies/git/commands","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/technologies/git/commands.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1754721917000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Branching Strategies","permalink":"/technologies/git/branching-strategies"},"next":{"title":"Others","permalink":"/technologies/git/others"}}');var r=i(474848),s=i(28453);const a={},o="Commands",l={},c=[{value:"Shortcuts",id:"shortcuts",level:2},{value:"git clone without history",id:"git-clone-without-history",level:2},{value:"Clone all repo in an org",id:"clone-all-repo-in-an-org",level:3},{value:"Git add origin",id:"git-add-origin",level:2},{value:"Git Config",id:"git-config",level:2},{value:"Create alias for a command",id:"create-alias-for-a-command",level:2},{value:"Git reset osX credentials in keychain",id:"git-reset-osx-credentials-in-keychain",level:2},{value:"Allow unrelated histories",id:"allow-unrelated-histories",level:2},{value:"Branches",id:"branches",level:2},{value:"Delete untracked files",id:"delete-untracked-files",level:2},{value:"Delete all files expect <code>.git</code>",id:"delete-all-files-expect-git",level:2},{value:"Undo all unstaged local changes",id:"undo-all-unstaged-local-changes",level:2},{value:"Checkout specific file from specific commit",id:"checkout-specific-file-from-specific-commit",level:2},{value:"Stage all files",id:"stage-all-files",level:2},{value:"Git unstage a file",id:"git-unstage-a-file",level:2},{value:"This will tell git you want to start ignoring the changes to the file",id:"this-will-tell-git-you-want-to-start-ignoring-the-changes-to-the-file",level:3},{value:"When you want to start keeping track again",id:"when-you-want-to-start-keeping-track-again",level:3},{value:"Gitlab revert/reset",id:"gitlab-revertreset",level:2},{value:"Revert",id:"revert",level:2},{value:"Reset",id:"reset",level:2},{value:"Reset head",id:"reset-head",level:2},{value:"Git Merge",id:"git-merge",level:2},{value:"git Reflog",id:"git-reflog",level:2},{value:"Git request-pull",id:"git-request-pull",level:2},{value:"Git merge-base",id:"git-merge-base",level:2},{value:"Logs",id:"logs",level:2},{value:"Move the last commit to a new branch",id:"move-the-last-commit-to-a-new-branch",level:2},{value:"Rewrite or rename the last commit message (Change the last commit message)",id:"rewrite-or-rename-the-last-commit-message-change-the-last-commit-message",level:2},{value:"Add a forgotten file after a commit",id:"add-a-forgotten-file-after-a-commit",level:2},{value:"Squashing Commits",id:"squashing-commits",level:2},{value:"Reverting The Working Copy to an Older Commit",id:"reverting-the-working-copy-to-an-older-commit",level:2},{value:"Git stashing",id:"git-stashing",level:2},{value:"Git add a file forcefully (overriding the file in .gitignore)",id:"git-add-a-file-forcefully-overriding-the-file-in-gitignore",level:2},{value:"Submodules",id:"submodules",level:2},{value:"Find a string in git repo",id:"find-a-string-in-git-repo",level:2},{value:"Checkout",id:"checkout",level:2},{value:"Cleanup branches",id:"cleanup-branches",level:2},{value:"Prune origin (remove all branches that are merged)",id:"prune-origin-remove-all-branches-that-are-merged",level:3},{value:"Delete merged branches from remote",id:"delete-merged-branches-from-remote",level:3},{value:"Cleaning git history, commits, branches",id:"cleaning-git-history-commits-branches",level:2},{value:"Rewrite history of entire branch (git-filter-branch) (Old - Deprecated)",id:"rewrite-history-of-entire-branch-git-filter-branch-old---deprecated",level:3},{value:"git-filter-repo",id:"git-filter-repo",level:3},{value:"Important Notes",id:"important-notes",level:4},{value:"git cherry-pick",id:"git-cherry-pick",level:2},{value:"git commit case-sensitive filename changes",id:"git-commit-case-sensitive-filename-changes",level:2},{value:"Git ignore already tracked files",id:"git-ignore-already-tracked-files",level:2},{value:"Analytics",id:"analytics",level:2},{value:"loc",id:"loc",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"commands",children:"Commands"})}),"\n",(0,r.jsx)(t.h2,{id:"shortcuts",children:"Shortcuts"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"ggpull\nggpush\ngst\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh",children:"https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh"})}),"\n",(0,r.jsx)(t.h2,{id:"git-clone-without-history",children:"git clone without history"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git clone --depth 1 reponame.git\ngit clone --depth=1 --branch=master git://someserver/somerepo dirformynewrepo\n\nhttps://stackoverflow.com/questions/30001304/clone-git-repository-without-history/30001366\nClone all repo in organization - https://gist.github.com/potter0815/42dda83fa1709693be36\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://medium.com/pinterest-engineering/how-a-one-line-change-decreased-our-build-times-by-99-b98453265370",children:"How a one line change decreased our clone times by 99% | by Pinterest Engineering | Pinterest Engineering Blog | Medium"})}),"\n",(0,r.jsx)(t.h3,{id:"clone-all-repo-in-an-org",children:"Clone all repo in an org"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash\n\n# ==== CONFIG ====\nORG="your-org-name"                # Replace with your GitHub organization name\nTOKEN="ghp_xxxYourPersonalToken"   # GitHub personal access token\nDEST_DIR="$HOME/github/$ORG"       # Where to clone the repos\n\n# Create destination directory\nmkdir -p "$DEST_DIR"\ncd "$DEST_DIR" || exit\n\n# Fetch all repos and clone them\npage=1\nwhile true; do\n    repos=$(curl -s -H "Authorization: token $TOKEN" \\\n        "https://api.github.com/orgs/$ORG/repos?per_page=100&page=$page" | jq -r \'.[].ssh_url\')\n\n    # Stop if no more repos\n    if [[ -z "$repos" ]]; then\n        break\n    fi\n\n    echo "$repos" | while read -r repo; do\n        echo "Cloning $repo ..."\n        git clone "$repo"\n    done\n\n    ((page++))\ndone\n\necho "\u2705 All repositories cloned to $DEST_DIR"\n'})}),"\n",(0,r.jsx)(t.h2,{id:"git-add-origin",children:"Git add origin"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git remote add origin https://github.com/deepaksood619/DjangoDemoApplication.git\ngit push -u origin master\ngit remote set-url origin git@gitlab.com:example-datascience/decision-engine.git (change remote repository origin)\ngit remote rm destination\ngit push -u origin --all (for pushing old repo to new place)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"git-config",children:"Git Config"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git config --global user.name (seeing the current set username globally)\ngit config user.email (seeing the set username for current project)\ngit config --global user.name "deepaksood619" (set username globally)\ngit config --global core.editor "vim" (Change git editor)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"create-alias-for-a-command",children:"Create alias for a command"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git config --global alias.a "add ."\ngit config --global alias.c "f"\n'})}),"\n",(0,r.jsx)(t.h2,{id:"git-reset-osx-credentials-in-keychain",children:"Git reset osX credentials in keychain"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git config --local credential.helper ""\ngit config --local credential.helper osxkeychain\ngit credential-osxkeychain erase host=github.com protocol=https (press return)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"allow-unrelated-histories",children:"Allow unrelated histories"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git pull --allow-unrelated-histories\ngit pull origin master --allow-unrelated-histories\n"})}),"\n",(0,r.jsx)(t.h2,{id:"branches",children:"Branches"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git branch (Show all branches)\ngit branch -v (verify remote branch)\ngit branch -a (show all branches)\ngit branch --delete <branch>\ngit branch -d <branch> # Shorter version\ngit branch -D <branch> # Force delete un-merged branches\ngit branch --remote (check remote branches)\ngit branch | grep -v "master" | xargs git branch -D (Delete all branches except master locally)\ngit branch --merged origin/master | xargs git branch -d (Remove all local branches that are not in master (merged on master))\n\nCreate and checkout a branch\n    git checkout -b bugFix\n    git checkout [branch_name] (Checkout existing branch)\n\nCheckout remote branch in local\n    git checkout -b bugFix -t origin/bugFix\n    git checkout -t origin/bugFix (shorthand)\n    git checkout --track origin/issuefix\n\n    git branch -u origin/dev (track remote branch after checkout)\n\nDelete branch from remote\n    git push -d <remote-name> <branch-name>\n    Ex - git push -d origin master\n    git push origin --delete dev\n\nGit show all branches with author\n    git for-each-ref --format=\'%(committerdate) %09 %(authorname) %09 %(refname)\' | sort -k5n -k2M -k3n -k4n\n\nUpdate a branch with master\n    git checkout master\n    git pull\n    git checkout branch_name\n    git rebase master\n\nCreate and push new branch\n    git checkout -b my_branch\n    git commit -m "some work done"\n    git push -u origin my_branch\n\n    # error: src refspec remotes/origin/decision_engine_monika matches more than one\n    git push origin HEAD:remotes/origin/decision_engine_monika\n'})}),"\n",(0,r.jsx)(t.h2,{id:"delete-untracked-files",children:"Delete untracked files"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git clean [-f] (delete untracked files in current directory)\ngit clean -f -d (remove untracked directories)\ngit clean -f -i (clean the working directory interactively)\n-n (to dry-run the operation and display the results without actually deleting anything)\n"})}),"\n",(0,r.jsxs)(t.h2,{id:"delete-all-files-expect-git",children:["Delete all files expect ",(0,r.jsx)(t.code,{children:".git"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Resetting the index is cheap, so\ngit rm -rf .\ngit clean -fxd\n\n# Then you can reset the index (with git reset) or go straight on to checking out a new branch.\n"})}),"\n",(0,r.jsx)(t.h2,{id:"undo-all-unstaged-local-changes",children:"Undo all unstaged local changes"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git checkout .\ngit checkout origin/master filepath #revert a file to origin/master after commiting the file\n"})}),"\n",(0,r.jsx)(t.h2,{id:"checkout-specific-file-from-specific-commit",children:"Checkout specific file from specific commit"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git checkout c5f567 -- file1/to/restore file2/to/restore\n"})}),"\n",(0,r.jsx)(t.h2,{id:"stage-all-files",children:"Stage all files"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git add ."})}),"\n",(0,r.jsx)(t.h2,{id:"git-unstage-a-file",children:"Git unstage a file"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"git reset <filepath>"})," - will ",(0,r.jsx)(t.strong,{children:"unstage"})," any staged changes for the given file(s). ",(0,r.jsx)(t.strong,{children:"makes git stop tracking the file completely"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"git rm --cached <filepath>"})," - ",(0,r.jsx)(t.strong,{children:"does not unstage"})," a file, it actually ",(0,r.jsx)(t.strong,{children:"stages the removal of the file(s)"})," from the repo (assuming it was already committed before) but leaves the file in your working tree (leaving you with an untracked file). ",(0,r.jsx)(t.strong,{children:"unstages any modifications made to the file since the last commit"}),"(but doesn't revert them in the filesystem, contrary to what the command name might suggest**). The file remains under revision control."]}),"\n",(0,r.jsxs)(t.p,{children:["if you used ",(0,r.jsx)(t.code,{children:"git rm --cached"})," on a new file that is staged, it would basically look like you had just unstaged it since it had never been committed before."]}),"\n",(0,r.jsx)(t.h3,{id:"this-will-tell-git-you-want-to-start-ignoring-the-changes-to-the-file",children:"This will tell git you want to start ignoring the changes to the file"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git update-index --assume-unchanged path/to/file"})}),"\n",(0,r.jsx)(t.h3,{id:"when-you-want-to-start-keeping-track-again",children:"When you want to start keeping track again"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git update-index --no-assume-unchanged path/to/file"})}),"\n",(0,r.jsx)(t.h2,{id:"gitlab-revertreset",children:"Gitlab revert/reset"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"1. unprotect the branch\n2. git reset cba55c24dfe8fe96ae3abe6b38888bd12bb97980 (the commit you want to go to)\n3. git reset --hard\n4. git push -f origin master\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://dev.to/neshaz/when-to-use-git-reset-git-revert--git-checkout-18je",children:"https://dev.to/neshaz/when-to-use-git-reset-git-revert--git-checkout-18je"})}),"\n",(0,r.jsx)(t.h2,{id:"revert",children:"Revert"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Rollback changes you have committed."}),"\n",(0,r.jsx)(t.li,{children:"Creates a new commit from a specified commit by inverting it. Hence, adds a new commit history to the project, but it does not modify the existing one."}),"\n",(0,r.jsx)(t.li,{children:"Has the potential to overwrite files in the working directory."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git revert HEAD~1"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://git-scm.com/docs/git-revert",children:"https://git-scm.com/docs/git-revert"})}),"\n",(0,r.jsx)(t.h2,{id:"reset",children:"Reset"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Use this to return the entire working tree to the last committed state.This will discard commits in a private branch or throw away uncommitted changes!"}),"\n",(0,r.jsx)(t.li,{children:"Changes which commit a branch HEAD is currently pointing at. It alters the existing commit history."}),"\n",(0,r.jsx)(t.li,{children:"Can be used tounstagea file."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"reset-head",children:"Reset head"}),"\n",(0,r.jsx)(t.p,{children:"This will discard commits in a private branch or throw away uncommitted changes"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git reset --hard [HEAD]\ngit reset .\ngit reset HEAD~ (revert a last commit with changes shown)\ngit reset HEAD~ --hard (Revert a last commit with all changes removed)\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Tilde vs Caret"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Use ",(0,r.jsx)(t.code,{children:"~"})," most of the time - to go back a number of generations, usually what you want"]}),"\n",(0,r.jsxs)(t.li,{children:["Use ",(0,r.jsx)(t.code,{children:"^"})," on merge commits - because they have two or more (immediate) parents"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Mnemonics:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Tilde ",(0,r.jsx)(t.code,{children:"~"})," is almost linear in appearance and wants to go backward in a straight line"]}),"\n",(0,r.jsxs)(t.li,{children:["Caret ",(0,r.jsx)(t.code,{children:"^"})," suggests an interesting segment of a tree or a fork in the road"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"image",src:i(786274).A+"",width:"1000",height:"637"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git",children:"https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde",children:"http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Move to forward commit"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git reset 'HEAD@{1}'"})}),"\n",(0,r.jsx)(t.h2,{id:"git-merge",children:"Git Merge"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git checkout --theirs path/to/file # accept their changes in conflict state\ngit checkout --theirs .\ngit merge --abort\ngit reset --hard HEAD\ngit reset HEAD~1\n"})}),"\n",(0,r.jsx)(t.h2,{id:"git-reflog",children:"git Reflog"}),"\n",(0,r.jsx)(t.p,{children:'reflog is a local record of all commits referenced in your repository, and can be seen as a "safety net", useful for recovering lost commits.'}),"\n",(0,r.jsx)(t.p,{children:"Show histories of references"}),"\n",(0,r.jsx)(t.h2,{id:"git-request-pull",children:"Git request-pull"}),"\n",(0,r.jsx)(t.p,{children:"Prints in the standard output a report asking the upstream project to pull changes into their tree."}),"\n",(0,r.jsx)(t.h2,{id:"git-merge-base",children:"Git merge-base"}),"\n",(0,r.jsx)(t.p,{children:"Finds best common ancestor(s) between two commits to use in a three-way merge."}),"\n",(0,r.jsx)(t.h2,{id:"logs",children:"Logs"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git log --abbrev-commit -- preety=oneline (get abbreviated commit hash)\ngit log --pretty=format:"%h %s" --graph (show commit history as a graph)\ngit log --graph\ngit log --oneline\ngit log --oneline --graph\n[A DOG] git log --all --decorate --oneline --graph\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"image",src:i(899181).A+"",width:"407",height:"405"})}),"\n",(0,r.jsx)(t.h2,{id:"move-the-last-commit-to-a-new-branch",children:"Move the last commit to a new branch"}),"\n",(0,r.jsx)(t.p,{children:"If you commit to the current branch when instead you wanted to commit to a new branch, you can easily correct your mistake."}),"\n",(0,r.jsx)(t.p,{children:"For example if you made your commit to master instead of test:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# create new branch from current HEAD but stays on master\n$ git branch test\n\n# reset master to before last commit\n$ git reset --hard HEAD~\n\n# continue on new branch\n$ git checkout test\n\n"})}),"\n",(0,r.jsx)(t.h2,{id:"rewrite-or-rename-the-last-commit-message-change-the-last-commit-message",children:"Rewrite or rename the last commit message (Change the last commit message)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git commit --amend\ngit commit --amend --signoff # Add DCO (contributing)\ngit commit --amend --reuse-message HEAD\n"})}),"\n",(0,r.jsx)(t.h2,{id:"add-a-forgotten-file-after-a-commit",children:"Add a forgotten file after a commit"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git add forgotten_file\ngit commit --amend\n"})}),"\n",(0,r.jsx)(t.h2,{id:"squashing-commits",children:"Squashing Commits"}),"\n",(0,r.jsx)(t.p,{children:"If you contribute to an open source project, e.g. by submitting a pull request with a bug fix, it should be presented as one unit of code."}),"\n",(0,r.jsxs)(t.p,{children:["You should ",(0,r.jsx)(t.strong,{children:"squash"})," your commits together. For example, if you have three commits:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git reset HEAD~3\ngit add .\ngit commit -am "Fix bug #14"\ngit push --force\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The --force option is needed if the commits have already been pushed, in order for them to be replaced. ",(0,r.jsx)(t.strong,{children:"Beware"})," that this overwrites previous history so always avoid when possible"]}),"\n",(0,r.jsx)(t.h2,{id:"reverting-the-working-copy-to-an-older-commit",children:"Reverting The Working Copy to an Older Commit"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Resets index to former commit; replace '56e05fced' with your commit code\ngit reset 56e05fced\n# Moves pointer back to previous HEAD\ngit reset --soft HEAD@{1}\ngit commit -m \"Revert to 56e05fced\"\n# Updates working copy to reflect the new commit\ngit reset --hard\n"})}),"\n",(0,r.jsx)(t.h2,{id:"git-stashing",children:"Git stashing"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git-stash - Stash the changes in a dirty working directory away\n\ngit stash --all #stashes all files, including untracked and ignored files.\n\ngit stash list [<options>]\ngit stash show [<stash>]\ngit stash drop [-q|--quiet] [<stash>]\ngit stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]\ngit stash branch <branchname> [<stash>]\ngit stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n        [-u|--include-untracked] [-a|--all] [-m|--message <message>]]\n        [--] [<pathspec>\u2026\u200b]]\ngit stash clear\ngit stash create [<message>]\ngit stash store [-m|--message <message>] [-q|--quiet] <commit>\n\nGit stash apply stash@{1}\nGit stash drop stash@{1}\n\n# push specific file to stash\ngit stash push -m test alert_driver/alertdriver.py\n\n"})}),"\n",(0,r.jsx)(t.h2,{id:"git-add-a-file-forcefully-overriding-the-file-in-gitignore",children:"Git add a file forcefully (overriding the file in .gitignore)"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git add -f assets/debug.apk"})}),"\n",(0,r.jsx)(t.h2,{id:"submodules",children:"Submodules"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git submodule update --recursive --remote (1.8.2)\ngit submodule update --recursive (1.7.3)\ngit pull --recurse-submodules\n\n# Submodules init and update recursively\n    git submodule update --init -recursive\n    git submodule update --recursive\n\n# Adding submodule to a repository\n    git submodule add http://github.com/submodule\n\n# git submodule reset\ngit submodule update -f --recursive\n"})}),"\n",(0,r.jsx)(t.h2,{id:"find-a-string-in-git-repo",children:"Find a string in git repo"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git grep "the magic string"\ngit show-ref --heads\'\n'})}),"\n",(0,r.jsx)(t.h2,{id:"checkout",children:"Checkout"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Use this to move the ",(0,r.jsx)(t.a,{href:"https://kolosek.com/git-branches/",children:"HEAD pointer"})," to a specific commit orswitchbetween branches."]}),"\n",(0,r.jsx)(t.li,{children:"Itrollbacksany content changes to those of the specific commit."}),"\n",(0,r.jsx)(t.li,{children:"This willnotmake changes to the commit history."}),"\n",(0,r.jsx)(t.li,{children:"Has potential tooverwritefiles in the working directory."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# git command to switch between two branches w\\ passing the branch name:\ngit switch -\n"})}),"\n",(0,r.jsx)(t.h2,{id:"cleanup-branches",children:"Cleanup branches"}),"\n",(0,r.jsx)(t.h3,{id:"prune-origin-remove-all-branches-that-are-merged",children:"Prune origin (remove all branches that are merged)"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git remote prune origin"})}),"\n",(0,r.jsx)(t.h3,{id:"delete-merged-branches-from-remote",children:"Delete merged branches from remote"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git branch -r --merged | egrep -v \"(^*|master|dev)\" | sed 's/origin///' | xargs -n 1 git push origin --delete"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://nickymeuleman.netlify.app/blog/delete-git-branches",children:"https://nickymeuleman.netlify.app/blog/delete-git-branches"})}),"\n",(0,r.jsx)(t.h2,{id:"cleaning-git-history-commits-branches",children:"Cleaning git history, commits, branches"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"java -jar ~/Downloads/office/bfg-1.13.0.jar --strip-blobs-bigger-than 1M .\njava -jar ~/Downloads/office/bfg-1.13.0.jar --strip-blobs-bigger-than 128K .\n\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\ngit gc --aggressive --prune=all\n\n# unprotect the branch in gitlab first\ngit push --force origin master\n\n# brew install coreutils\n# This shell script displays all blob objects in the repository, sorted from smallest to largest.\ngit rev-list --objects --all \\\n| git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \\\n| sed -n 's/^blob //p' \\\n| sort --numeric-sort --key=2 \\\n| cut -c 1-12,41- \\\n| $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://passingcuriosity.com/2017/truncating-git-history",children:"https://passingcuriosity.com/2017/truncating-git-history"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/newren/git-filter-repo",children:(0,r.jsx)(t.strong,{children:"https://github.com/newren/git-filter-repo"})})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"brew install git-filter-repo"})}),"\n",(0,r.jsx)(t.h3,{id:"rewrite-history-of-entire-branch-git-filter-branch-old---deprecated",children:"Rewrite history of entire branch (git-filter-branch) (Old - Deprecated)"}),"\n",(0,r.jsxs)(t.p,{children:["IMP - ",(0,r.jsx)(t.em,{children:"git filter-branch"})," has a plethora of pitfalls that can produce non-obvious manglings of the intended history rewrite (and can leave you with little time to investigate such problems since it has such abysmal performance). These safety and performance issues cannot be backward compatibly fixed and as such, its use is not recommended. Please use an alternative history filtering tool such as ",(0,r.jsx)(t.a,{href:"https://github.com/newren/git-filter-repo/",children:"git filter-repo"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"One common use case for this is removing sensitive data (e.g. login credentials for production systems) that were committed to a public repository."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Manual\nman git-filter-branch\n\ngit filter-branch --force --index-filter\n'git rm --cached --ignore-unmatch k8s/secrets.txt'\n--prune-empty --tag-name-filter cat -- --all\n\ngit push --force\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This will remove the file ",(0,r.jsx)(t.code,{children:"secrets.txt"})," from every branch and tag. It will also remove any commits that would be empty as a result of the above operation. Keep in mind that this will rewrite your project's entire history, which can be very disruptive in a distributed workflow. Also while the file in question has now been removed, the credentials it contained should still be considered compromised!"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://github.com/newren/git-filter-repo",children:"https://github.com/newren/git-filter-repo"})," (filter-branch replacement)"]}),"\n",(0,r.jsx)(t.h3,{id:"git-filter-repo",children:"git-filter-repo"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Installation\nbrew install git-filter-repo\n\n# Backup your repository\ngit clone --mirror <repository_url> backup-repo\n\n# Remove the file from the entire Git history\ngit filter-repo --path <file_path> --invert-paths\n\n# Replace `<file_path>` with the path of the file you want to remove (relative to the repository root\n# The `--invert-paths` option tells Git to remove the specified file from the history while preserving everything else.\n\n# Force-push the changes to the remote repository\ngit push origin --force --all\n\n# Also, push the rewritten tags\ngit push origin --force --tags\n\n# Clean up any leftover references (optional but recommended)\nrm -rf .git/refs/original/ && git reflog expire --expire=now --all && git gc --prune=now --aggressive\n"})}),"\n",(0,r.jsx)(t.h4,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Rewriting history"}),": This method rewrites the Git history, which means any collaborators who have already cloned the repository will need to re-clone or force-reset their local copies."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Impact on branches"}),": All branches will have the file removed from their history."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["Consider using ",(0,r.jsx)(t.code,{children:"gitignore"})]}),": After removing the file from history, ensure it\u2019s added to ",(0,r.jsx)(t.code,{children:".gitignore"})," if it should no longer be tracked."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/newren/git-filter-repo/",children:"GitHub - newren/git-filter-repo: Quickly rewrite git repository history (filter-branch replacement)"})}),"\n",(0,r.jsx)(t.h2,{id:"git-cherry-pick",children:"git cherry-pick"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git cherry-pick <hash>\ngit cherry-pick --skip\ngit cherry-pick --abort\n"})}),"\n",(0,r.jsx)(t.h2,{id:"git-commit-case-sensitive-filename-changes",children:"git commit case-sensitive filename changes"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git mv -f OldFileNameCase newfilenamecase"})}),"\n",(0,r.jsx)(t.h2,{id:"git-ignore-already-tracked-files",children:"Git ignore already tracked files"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git update-index --skip-worktree"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"--skip-worktree"})," is the flag which means the files should change locally"]}),"\n",(0,r.jsx)(t.p,{children:"That is, Use the command when you want to modify files managed by Git locally (or updated automatically) but you do not want Git to manage that change."}),"\n",(0,r.jsx)(t.p,{children:"Because the command is to prevent local changes from being managed by Git,we will use the command in most cases."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ git update-index --skip-worktree path/to/file # Exclude from the management of Git\n\n$ git ls-files -v | grep ^S # Confirming\n    git ls-files shows all files managed by git.\n    -v check the file being ignored.\n    --skip-worktree is displayed withS.\n\n$ git update-index --no-skip-worktree path/to/file # Restore to the management of Git\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"git update-index --assume-unchanged"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"--assume-unchanged"})," is the flag which means the files should not change locally"]}),"\n",(0,r.jsx)(t.p,{children:"In other words, it is used whenignore files that you do not need to change locally (or should not change)."}),"\n",(0,r.jsx)(t.p,{children:"--assume-unchanged is used when you want to speed up Git's behavior by ignoring unnecessary files."}),"\n",(0,r.jsx)(t.p,{children:"Also, since it is an idea to ignore local changes,git reset - hardcommand will delete local changes."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ git update-index --assume-unchanged path/to/file # Exclude from the management of Git\n$ git ls-files -v | grep ^h # Confirming\n    assume-unchanged is displayed with h\n\n$ git update-index --no-assume-unchanged path/to/file # Restore to the management of Git\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"analytics",children:"Analytics"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git shortlog -sn\ngit shortlog -sn --no-merges\nhttps://github.com/IonicaBizau/git-stats\n\ngit ls-files | xargs wc -l #git count number of lines\n\nhttps://www.gitclear.com/measuring_developer_productivity_a_comprehensive_guide_for_the_data_driven\n\nbrew install cloc (count lines of code)\n    cloc --vcs=git\n"})}),"\n",(0,r.jsx)(t.h3,{id:"loc",children:"loc"}),"\n",(0,r.jsx)(t.p,{children:"loc is a tool for counting lines of code. It's a rust implementation of cloc, but it's more than 100x faster. There's another rust code counting tool called tokei, loc is ~2-10x faster than tokei, depending on how many files are being counted."}),"\n",(0,r.jsx)(t.p,{children:"Counting just the dragonflybsd codebase (~9 million lines):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"brew install loc\n\nloc\n\nloc: 1.09 seconds\ntokei: 5.3 seconds\ncloc: 1 minute, 50 seconds\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/cgag/loc",children:"GitHub - cgag/loc: Count lines of code quickly."})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},786274:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/Technologies-Git-Commands-image1-54cd6adf7b5714d8283c9910e38eaac2.jpg"},899181:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/Technologies-Git-Commands-image2-0ad4771373228a33555e33d170ea15a5.jpg"},28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>o});var n=i(296540);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);