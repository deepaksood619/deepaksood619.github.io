"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[61874],{629839:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>t,default:()=>a,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var s=e(785893),l=e(511151);const r={},t="Algo + DS",o={id:"algorithms/general/algo-ds",title:"Algo + DS",description:"Algorithms",source:"@site/docs/algorithms/general/algo-ds.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/algo-ds",permalink:"/algorithms/general/algo-ds",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/algo-ds.md",tags:[],version:"current",lastUpdatedAt:1732901510,formattedLastUpdatedAt:"Nov 29, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2d orthogonal range search",permalink:"/algorithms/general/2d-orthogonal-range-search"},next:{title:"Algorithms Questions",permalink:"/algorithms/general/algorithms-questions"}},c={},h=[{value:"Algorithms",id:"algorithms",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"Strategies for algorithms",id:"strategies-for-algorithms",level:2},{value:"Resources",id:"resources",level:2},{value:"Most Important Algos / DS / Programming Concepts",id:"most-important-algos--ds--programming-concepts",level:2},{value:"BUD Optimization Strategy",id:"bud-optimization-strategy",level:2},{value:"Questions to asking when solving a coding interview questions",id:"questions-to-asking-when-solving-a-coding-interview-questions",level:2}];function d(n){const i={a:"a",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"algo--ds",children:"Algo + DS"}),"\n",(0,s.jsx)(i.h2,{id:"algorithms",children:"Algorithms"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["Union-Find Algorithm","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Dynamic Connectivity"}),"\n",(0,s.jsx)(i.li,{children:"Quick Find"}),"\n",(0,s.jsx)(i.li,{children:"Quick Union"}),"\n",(0,s.jsxs)(i.li,{children:["Improvements","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Weighted Quick Union"}),"\n",(0,s.jsx)(i.li,{children:"Weighted Quick Union with Path Compression"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Analysis of algorithms","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Scientific Method of Analysis"}),"\n",(0,s.jsx)(i.li,{children:"Empirical Method of Analysis"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Stacks and Queues","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Stacks"}),"\n",(0,s.jsx)(i.li,{children:"Resizing Arrays"}),"\n",(0,s.jsx)(i.li,{children:"Queues"}),"\n",(0,s.jsx)(i.li,{children:"Deque"}),"\n",(0,s.jsx)(i.li,{children:"Randomized Queues"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Elementary Sort","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Selection Sort"}),"\n",(0,s.jsx)(i.li,{children:"Insertion Sort"}),"\n",(0,s.jsx)(i.li,{children:"Shell Sort"}),"\n",(0,s.jsxs)(i.li,{children:["Shuffling","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Shuffle Sort"}),"\n",(0,s.jsx)(i.li,{children:"Knuth Shuffle"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Convex Hull"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Merge Sort","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Bottom up mergesort"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Quick Sort","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Quick Select (Selection)"}),"\n",(0,s.jsx)(i.li,{children:"3- way partition quicksort (Duplicate Keys)"}),"\n",(0,s.jsx)(i.li,{children:"System sorts"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Priority Queues","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Binary heaps"}),"\n",(0,s.jsx)(i.li,{children:"Heap sort"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Elementary Symbol Tables","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Elementary Implementations","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Sorted array (Binary Search)"}),"\n",(0,s.jsx)(i.li,{children:"Unordered List (Sequential Search)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Ordered Operations"}),"\n",(0,s.jsx)(i.li,{children:"Binary Search Trees"}),"\n",(0,s.jsx)(i.li,{children:"Ordered Operations in BSTs"}),"\n",(0,s.jsx)(i.li,{children:"Deletion in BSTs"}),"\n",(0,s.jsxs)(i.li,{children:["Balanced Search Trees","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"2-3 Search Trees"}),"\n",(0,s.jsx)(i.li,{children:"Red-Black Trees"}),"\n",(0,s.jsx)(i.li,{children:"B-Trees"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Geometric applications of BST","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"1d Range Search"}),"\n",(0,s.jsx)(i.li,{children:"Line Segment Intersection"}),"\n",(0,s.jsx)(i.li,{children:"Kd-Trees"}),"\n",(0,s.jsx)(i.li,{children:"Interval Search Trees"}),"\n",(0,s.jsx)(i.li,{children:"Rectangle Intersection"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Hash Tables","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Uniform Hashing Assumption"}),"\n",(0,s.jsx)(i.li,{children:"Separate Chaining"}),"\n",(0,s.jsx)(i.li,{children:"Linear Probing"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Symbol Table Applications","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Sets"}),"\n",(0,s.jsx)(i.li,{children:"Dictionary Clients"}),"\n",(0,s.jsx)(i.li,{children:"Indexing Clients"}),"\n",(0,s.jsx)(i.li,{children:"Sparse Vectors"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["Undirected Graphs","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Implementation","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Adjacency Matrix"}),"\n",(0,s.jsx)(i.li,{children:"Adjacency List"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"DFS"}),"\n",(0,s.jsx)(i.li,{children:"BFS"}),"\n",(0,s.jsx)(i.li,{children:"Connected Components"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Directed Graphs","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Topological Sort","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Topological order of an acyclic digraph"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Strongly Connected Components","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Kosaraju-Sharir algorithm for computing strong components of a digraph"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Minimum Spanning Trees","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Kruskal's Algorithm"}),"\n",(0,s.jsx)(i.li,{children:"Prim's Algorithm"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Shortest Path","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Dijkstra's Algorithm"}),"\n",(0,s.jsx)(i.li,{children:"Bellman Ford Algorithm (Negative Weights)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Maximum Flow and Minimum Cut","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Ford-Fulkerson Algorithm"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Radix Sorts","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Key-Indexed Counting"}),"\n",(0,s.jsx)(i.li,{children:"LSD Radix Sort"}),"\n",(0,s.jsx)(i.li,{children:"MSD Radix Sort"}),"\n",(0,s.jsx)(i.li,{children:"3-way Radix Quicksort"}),"\n",(0,s.jsx)(i.li,{children:"Suffix Arrays"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Tries","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"R-way Tries"}),"\n",(0,s.jsx)(i.li,{children:"Ternary Search Tries"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Substring Search","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"KMP (Knuth-Morris-Pratt)"}),"\n",(0,s.jsx)(i.li,{children:"Boyer-Moore"}),"\n",(0,s.jsx)(i.li,{children:"Rabin-Karp"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Regular Expressions","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"DFA"}),"\n",(0,s.jsx)(i.li,{children:"NFA"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Data Compression","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Run Length Encoding"}),"\n",(0,s.jsx)(i.li,{children:"Huffman Compression"}),"\n",(0,s.jsx)(i.li,{children:"LZW Compression"}),"\n",(0,s.jsx)(i.li,{children:"Burrows-Wheeler"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Reductions"}),"\n",(0,s.jsxs)(i.li,{children:["Linear Programming","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Brewer's Problem"}),"\n",(0,s.jsx)(i.li,{children:"Simplex Algorithm"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["Intractability","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"P"}),"\n",(0,s.jsx)(i.li,{children:"NP"}),"\n",(0,s.jsx)(i.li,{children:"NP-Complete"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"strategies-for-algorithms",children:"Strategies for algorithms"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"B.U.D. (Bottleneck, Unnecessary work, Duplicated work)"}),"\n",(0,s.jsx)(i.li,{children:"Space / Time Tradeoffs"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"Coursera - Algorithms Part 1"}),"\n",(0,s.jsx)(i.li,{children:"Coursera - Algorithms Part 2"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.toptal.com/algorithms/interview-questions",children:"https://www.toptal.com/algorithms/interview-questions"})}),"\n",(0,s.jsx)(i.h2,{id:"most-important-algos--ds--programming-concepts",children:"Most Important Algos / DS / Programming Concepts"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"Depth first search"}),"\n",(0,s.jsx)(i.li,{children:"Breadth first search"}),"\n",(0,s.jsx)(i.li,{children:"Matching parenthesis"}),"\n",(0,s.jsx)(i.li,{children:"Hash Tables"}),"\n",(0,s.jsx)(i.li,{children:"Variables / Pointer manipulations"}),"\n",(0,s.jsx)(i.li,{children:"Reversing a linked list"}),"\n",(0,s.jsx)(i.li,{children:"Sorting fundamentals"}),"\n",(0,s.jsx)(i.li,{children:"Recursion"}),"\n",(0,s.jsx)(i.li,{children:"Custom data structures (suffix tree)"}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Binary search"})}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"bud-optimization-strategy",children:"BUD Optimization Strategy"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Bottlenecks"}),"\n",(0,s.jsx)(i.li,{children:"Unnecessary work"}),"\n",(0,s.jsx)(i.li,{children:"Duplicated work"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://4tee-learn.blogspot.com/2017/12/optimisation-technique-15-bud.html",children:"https://4tee-learn.blogspot.com/2017/12/optimisation-technique-15-bud.html"})}),"\n",(0,s.jsx)(i.h2,{id:"questions-to-asking-when-solving-a-coding-interview-questions",children:"Questions to asking when solving a coding interview questions"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["What is the data types of the inputs?","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Can we assume the string is ASCII or Unicode?"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Do we have to worry about load factors?"}),"\n",(0,s.jsx)(i.li,{children:"Do we have to validate inputs?"}),"\n",(0,s.jsx)(i.li,{children:"Can we assume this fits in memory?"}),"\n",(0,s.jsx)(i.li,{children:"Can we use additional data structures?"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.freecodecamp.org/news/learn-algorithms-and-data-structures-in-python",children:"https://www.freecodecamp.org/news/learn-algorithms-and-data-structures-in-python"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://www.youtube.com/playlist?list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb",children:"MIT 6.006 Introduction to Algorithms, Fall 2011"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/MisterBooo/LeetCodeAnimation",children:"https://github.com/MisterBooo/LeetCodeAnimation"})})]})}function a(n={}){const{wrapper:i}={...(0,l.a)(),...n.components};return i?(0,s.jsx)(i,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},511151:(n,i,e)=>{e.d(i,{Z:()=>o,a:()=>t});var s=e(667294);const l={},r=s.createContext(l);function t(n){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function o(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:t(n.components),s.createElement(r.Provider,{value:i},n.children)}}}]);