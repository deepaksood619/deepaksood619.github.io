"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[72885],{962991:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>n,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"data-structures/hashtable/chord","title":"Chord","description":"In computing, Chordis a protocol and algorithm for a peer-to-peerdistributed hash table. A distributed hash table stores key-value pairs by assigning keys to different computers (known as \\"nodes\\"); a node will store the values for all the keys for which it is responsible. Chord specifies how keys are assigned to nodes, and how a node can discover the value for a given key by first locating the node responsible for that key.","source":"@site/docs/data-structures/hashtable/chord.md","sourceDirName":"data-structures/hashtable","slug":"/data-structures/hashtable/chord","permalink":"/data-structures/hashtable/chord","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hashtable/chord.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bloom Filters","permalink":"/data-structures/hashtable/bloom-filters"},"next":{"title":"Count-min Sketch","permalink":"/data-structures/hashtable/count-min-sketch"}}');var s=r(474848),a=r(28453);const o={},n="Chord",h={},d=[{value:"References",id:"references",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"chord",children:"Chord"})}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Computing",children:"computing"}),", Chordis a protocol and ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Algorithm",children:"algorithm"})," for a ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Peer-to-peer",children:"peer-to-peer"}),(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Distributed_hash_table",children:"distributed hash table"}),". A distributed hash table stores ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Associative_array",children:"key-value pairs"}),' by assigning keys to different computers (known as "nodes"); a node will store the values for all the keys for which it is responsible. Chord specifies how keys are assigned to nodes, and how a node can discover the value for a given key by first locating the node responsible for that key.\nChord is one of the four original ',(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Distributed_hash_table",children:"distributed hash table"})," protocols, along with ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Content_addressable_network",children:"CAN"}),", ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Tapestry_(DHT)",children:"Tapestry"}),", and ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Pastry_(DHT)",children:"Pastry"}),". It was introduced in 2001 by ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Ion_Stoica",children:"Ion Stoica"}),", ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Robert_Tappan_Morris",children:"Robert Morris"}),", ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/David_Karger",children:"David Karger"}),", ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Frans_Kaashoek",children:"Frans Kaashoek"}),", and ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Hari_Balakrishnan",children:"Hari Balakrishnan"}),", and was developed at ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/MIT",children:"MIT"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)",children:"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>n});var i=r(296540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);