"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[31745],{371947:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>h});var a=t(785893),n=t(511151);const s={},o="MiniMax Algorithm",r={id:"algorithms/complex-systems/minimax-algorithm",title:"MiniMax Algorithm",description:"https://en.wikipedia.org/wiki/Minimax",source:"@site/docs/algorithms/complex-systems/minimax-algorithm.md",sourceDirName:"algorithms/complex-systems",slug:"/algorithms/complex-systems/minimax-algorithm",permalink:"/algorithms/complex-systems/minimax-algorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/complex-systems/minimax-algorithm.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Complex Systems",permalink:"/algorithms/complex-systems/intro"},next:{title:"Move by nature",permalink:"/algorithms/complex-systems/move-by-nature"}},m={},h=[];function l(e){const i={a:"a",h1:"h1",p:"p",strong:"strong",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h1,{id:"minimax-algorithm",children:"MiniMax Algorithm"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Minimax",children:"https://en.wikipedia.org/wiki/Minimax"})}),"\n",(0,a.jsx)(i.p,{children:"Minimax algorithm is a decision rule used in decision theory, game theory, statistics and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario."}),"\n",(0,a.jsxs)(i.p,{children:['When dealing with gains, it is referred to as "maximin" - to maximize the minimum gain. Originally formulated for two-player ',(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Zero-sum",children:"zero-sum"}),(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Game_theory",children:"game theory"}),", covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been extended to more complex games and to general decision-making in the presence of uncertainty."]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction",children:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction"})}),"\n",(0,a.jsxs)(i.p,{children:["Minimax is a kind of ",(0,a.jsx)(i.a,{href:"http://www.geeksforgeeks.org/tag/backtracking/",children:"backtracking"})," algorithm that is used in decision making and game theory to find the optimal move for a player, assuming that your opponent also plays optimally. It is widely used in two player turn based games such as Tic-Tac-Toe, Backgamon, Mancala, Chess, etc."]}),"\n",(0,a.jsxs)(i.p,{children:["In Minimax the two players are called maximizer and minimizer. The ",(0,a.jsx)(i.strong,{children:"maximizer"})," tries to get the highest score possible while the ",(0,a.jsx)(i.strong,{children:"minimizer"})," tries to get the lowest score possible while minimizer tries to do opposite."]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-2-evaluation-function",children:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-2-evaluation-function"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move",children:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move"})}),"\n",(0,a.jsxs)(i.p,{children:["Create a ",(0,a.jsx)(i.strong,{children:"Game-Tree"})," which shows all the possible moves that an AI can take."]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-4-alpha-beta-pruning",children:"http://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-4-alpha-beta-pruning"})}),"\n",(0,a.jsx)(i.p,{children:"Alpha-Beta pruning is not actually a new algorithm, rather an optimization technique for minimax algorithm. It cuts off branches in the game tree which need not be searched because there already exists a better move available. It is called Alpha-Beta pruning because it passes 2 extra parameters in the minimax function, namely alpha and beta. (It is used in AI Game algorithms like minimax algorithm to pick a faster winning move)"})]})}function c(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},511151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>o});var a=t(667294);const n={},s=a.createContext(n);function o(e){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(s.Provider,{value:i},e.children)}}}]);