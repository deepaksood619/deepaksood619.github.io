"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[26035],{649801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>T,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"languages/sql/ddl-data-definition-language/create-table","title":"Create Table","description":"CREATE TABLE","source":"@site/docs/languages/sql/ddl-data-definition-language/create-table.md","sourceDirName":"languages/sql/ddl-data-definition-language","slug":"/languages/sql/ddl-data-definition-language/create-table","permalink":"/languages/sql/ddl-data-definition-language/create-table","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/sql/ddl-data-definition-language/create-table.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1734020743000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"DDL - Data Definition Language","permalink":"/languages/sql/ddl-data-definition-language/"},"next":{"title":"Truncate vs Delete","permalink":"/languages/sql/ddl-data-definition-language/truncate-delete"}}');var i=t(474848),s=t(28453);const r={},l="Create Table",o={},d=[{value:"CREATE TABLE",id:"create-table-1",level:2},{value:"How MySQL Does ALTER TABLE",id:"how-mysql-does-alter-table",level:3},{value:"Postgres ON UPDATE",id:"postgres-on-update",level:3},{value:"Redshift",id:"redshift",level:3},{value:"Constraints",id:"constraints",level:2},{value:"Reference",id:"reference",level:2},{value:"Examples",id:"examples",level:2},{value:"Data Types",id:"data-types",level:2},{value:"DATETIME",id:"datetime",level:3},{value:"TIMESTAMP",id:"timestamp",level:3},{value:"Similarities between DATETIME &amp; TIMESTAMP",id:"similarities-between-datetime--timestamp",level:3},{value:"Difference between DATETIME &amp; TIMESTAMP",id:"difference-between-datetime--timestamp",level:3}];function E(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"create-table",children:"Create Table"})}),"\n",(0,i.jsx)(n.h2,{id:"create-table-1",children:"CREATE TABLE"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE new_table_name LIKE old_table_name;\n\nINT UNSIGNED\nINT(11) ZEROFILL\n\nCREATE TABLE table_name (column_1 datatype, column_2 datatype, column_3 datatype);\n\nCREATE TABLE celebs ( id INTEGER, name TEXT, age INTEGER );\n\nCREATE TABLE cron_migrate_data (id int NOT NULL auto_increment,\ntable_name varchar(100) NOT NULL,\nstart_date datetime NOT NULL,\nend_date datetime NOT NULL,\ns3_file_path varchar(200) NOT NULL,\nPRIMARY KEY (id));\n\nCREATE TABLE load_test (id int NOT NULL auto_increment,\n                        data_dump varchar(1000),\n                        dt_created datetime DEFAULT CURRENT_TIMESTAMP,\n                        PRIMARY KEY (id));\n\nCREATE TABLE load_test (id int NOT NULL auto_increment,\ndata_dump varchar(1000),\ncreate_date     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\nupdate_date    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\nPRIMARY KEY (id));\n\nALTER TABLE communication_exceptions MODIFY create_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;\nALTER TABLE communication_exceptions MODIFY update_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n\nALTER TABLE table_name ADD column datatype;\nALTER TABLE table_name ADD COLUMN column_name BOOLEAN;\n\nALTER TABLE table_name ADD COLUMN createdAt DATETIME DEFAULT CURRENT_TIMESTAMP;\n\nALTER TABLE st_quickwallet_payment DROP COLUMN payment_notes;\n\nALTER TABLE table_name MODIFY column_name datatype;\nALTER TABLE `cs_not_eligible` modify\n`update_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n\nALTER TABLE communication_exceptions MODIFY create_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;\nALTER TABLE communication_exceptions MODIFY update_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-mysql-does-alter-table",children:"How MySQL Does ALTER TABLE"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Lock the table"}),"\n",(0,i.jsx)(n.li,{children:"Make a new, empty the table like the original"}),"\n",(0,i.jsx)(n.li,{children:"Modify the columns of the new empty table"}),"\n",(0,i.jsx)(n.li,{children:"Copy all rows of data from original to new table.. no matter how long it takes"}),"\n",(0,i.jsx)(n.li,{children:"Swap the old and new tables"}),"\n",(0,i.jsx)(n.li,{children:"Unlock the tables & drop the original"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"postgres-on-update",children:"Postgres ON UPDATE"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ON UPDATE"})," clause is not supported in PostgreSQL. To achieve similar functionality, you can use a ",(0,i.jsx)(n.code,{children:"BEFORE UPDATE"})," trigger to automatically update the ",(0,i.jsx)(n.code,{children:"update_date"})," column whenever a row is modified. Here\u2019s how you can create the table and the trigger:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Create the table\nCREATE TABLE test (\n    id SERIAL PRIMARY KEY,\n    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    update_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    value INT\n);\n\n-- Create the trigger function to update the update_date column\nCREATE OR REPLACE FUNCTION update_timestamp()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.update_date = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create the trigger that calls the function before each update\nCREATE TRIGGER update_test_timestamp\nBEFORE UPDATE ON test\nFOR EACH ROW\nEXECUTE FUNCTION update_timestamp();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://aviyadav231.medium.com/automatically-updating-a-timestamp-column-in-postgresql-using-triggers-98766e3b47a0",children:"Automatically updating a timestamp column in PostgreSQL using Triggers | by Avinash | Medium"})}),"\n",(0,i.jsx)(n.h3,{id:"redshift",children:"Redshift"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE public.test (id bigint identity(1, 1),\ncreated_at datetime default sysdate,\ncolumn_1 varchar,\n                            PRIMARY KEY (id));\n\nselect * from public.test limit 10;\n\ndrop table public.test;\n\nINSERT INTO public.test (column_1) Values ('Hello');\n\nf\"INSERT INTO public.test (column_1, created_at) Values ('Hello', {datetime.datetime.now()});\"\nINSERT INTO public.test (column_1, created_at) Values ('Hello', '2020-04-13 16:30:10.016741');\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's break down the components of a statement:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters. Clauses can also be referred to as commands."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"table_name refers to the name of the table that the command is applied to."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"(column_1 data_type, column_2 data_type, column_3 data_type)is aparameter. A parameter is a list of columns, data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column names and the associated data type."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"constraints",children:"Constraints"}),"\n",(0,i.jsx)(n.p,{children:"Constraints that add information about how a column can be used are invoked after specifying the data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a certain restriction. The statement below sets constraints on the celebs table."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE celebs (\n id INTEGER PRIMARY KEY,\n name TEXT UNIQUE,\n date_of_birth TEXT NOT NULL,\n date_of_death TEXT DEFAULT 'Not Applicable'\n);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PRIMARY KEY columns can be used to uniquely identify the row. Attempts to insert a row with an identical value to a row already in the table will result in a constraint violation which will not allow you to insert the new row."}),"\n",(0,i.jsx)(n.li,{children:"UNIQUE columns have a different value for every row. This is similar toPRIMARY KEY except a table can have many different UNIQUE columns."}),"\n",(0,i.jsx)(n.li,{children:"NOT NULL columns must have a value. Attempts to insert a row without a value for aNOT NULL column will result in a constraint violation and the new row will not be inserted."}),"\n",(0,i.jsx)(n.li,{children:"DEFAULT columns take an additional argument that will be the assumed value for an inserted row if the new row does not specify a value for that column."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    (create_definition,...)\n    [table_options]\n    [partition_options]\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    [(create_definition,...)]\n    [table_options]\n    [partition_options]\n    [IGNORE | REPLACE]\n    [AS] query_expression\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    { LIKE old_tbl_name | (LIKE old_tbl_name) }\n\ncreate_definition:\n    col_name column_definition\n  | {INDEX|KEY} [index_name] [index_type] (key_part,...)\n      [index_option] ...\n  | {FULLTEXT|SPATIAL} [INDEX|KEY] [index_name] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] PRIMARY KEY\n      [index_type] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY]\n      [index_name] [index_type] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] FOREIGN KEY\n      [index_name] (col_name,...)\n      reference_definition\n  | check_constraint_definition\n\ncolumn_definition:\n    data_type [NOT NULL | NULL] [DEFAULT {literal | (expr)} ]\n      [AUTO_INCREMENT] [UNIQUE [KEY]] [[PRIMARY] KEY]\n      [COMMENT 'string']\n      [COLLATE collation_name]\n      [COLUMN_FORMAT {FIXED|DYNAMIC|DEFAULT}]\n      [STORAGE {DISK|MEMORY}]\n      [reference_definition]\n      [check_constraint_definition]\n  | data_type\n      [COLLATE collation_name]\n      [GENERATED ALWAYS] AS (expr)\n      [VIRTUAL | STORED] [NOT NULL | NULL]\n      [UNIQUE [KEY]] [[PRIMARY] KEY]\n      [COMMENT 'string']\n      [reference_definition]\n      [check_constraint_definition]\n\ndata_type:\n    (see Chapter 11, Data Types)\n\nkey_part: {col_name [(length)] | (expr)} [ASC | DESC]\n\nindex_type:\n    USING {BTREE | HASH}\n\nindex_option:\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | {VISIBLE | INVISIBLE}\n\ncheck_constraint_definition:\n    [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]\n\nreference_definition:\n    REFERENCES tbl_name (key_part,...)\n      [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n      [ON DELETE reference_option]\n      [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n\ntable_options:\n    table_option [[,] table_option] ...\n\ntable_option:\n    AUTO_INCREMENT [=] value\n  | AVG_ROW_LENGTH [=] value\n  | [DEFAULT] CHARACTER SET [=] charset_name\n  | CHECKSUM [=] {0 | 1}\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] 'string'\n  | COMPRESSION [=] {'ZLIB'|'LZ4'|'NONE'}\n  | CONNECTION [=] 'connect_string'\n  | {DATA|INDEX} DIRECTORY [=] 'absolute path to directory'\n  | DELAY_KEY_WRITE [=] {0 | 1}\n  | ENCRYPTION [=] {'Y' | 'N'}\n  | ENGINE [=] engine_name\n  | INSERT_METHOD [=] { NO | FIRST | LAST }\n  | KEY_BLOCK_SIZE [=] value\n  | MAX_ROWS [=] value\n  | MIN_ROWS [=] value\n  | PACK_KEYS [=] {0 | 1 | DEFAULT}\n  | PASSWORD [=] 'string'\n  | ROW_FORMAT [=] {DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT}\n  | STATS_AUTO_RECALC [=] {DEFAULT|0|1}\n  | STATS_PERSISTENT [=] {DEFAULT|0|1}\n  | STATS_SAMPLE_PAGES [=] value\n  | TABLESPACE tablespace_name [STORAGE {DISK|MEMORY}]\n  | UNION [=] (tbl_name[,tbl_name]...)\n\npartition_options:\n    PARTITION BY\n        { [LINEAR] HASH(expr)\n        | [LINEAR] KEY [ALGORITHM={1|2}] (column_list)\n        | RANGE{(expr) | COLUMNS(column_list)}\n        | LIST{(expr) | COLUMNS(column_list)} }\n    [PARTITIONS num]\n    [SUBPARTITION BY\n        { [LINEAR] HASH(expr)\n        | [LINEAR] KEY [ALGORITHM={1|2}] (column_list) }\n      [SUBPARTITIONS num]\n    ]\n    [(partition_definition [, partition_definition] ...)]\n\npartition_definition:\n    PARTITION partition_name\n        [VALUES\n            {LESS THAN {(expr | value_list) | MAXVALUE}\n            |\n            IN (value_list)}]\n        [[STORAGE] ENGINE [=] engine_name]\n        [COMMENT [=] 'string' ]\n        [DATA DIRECTORY [=] 'data_dir']\n        [INDEX DIRECTORY [=] 'index_dir']\n        [MAX_ROWS [=] max_number_of_rows]\n        [MIN_ROWS [=] min_number_of_rows]\n        [TABLESPACE [=] tablespace_name]\n        [(subpartition_definition [, subpartition_definition] ...)]\n\nsubpartition_definition:\n    SUBPARTITION logical_name\n        [[STORAGE] ENGINE [=] engine_name]\n        [COMMENT [=] 'string' ]\n        [DATA DIRECTORY [=] 'data_dir']\n        [INDEX DIRECTORY [=] 'index_dir']\n        [MAX_ROWS [=] max_number_of_rows]\n        [MIN_ROWS [=] min_number_of_rows]\n        [TABLESPACE [=] tablespace_name]\n\nquery_expression:\n    SELECT ...   (Some valid select or union statement)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/create-table.html",children:"https://dev.mysql.com/doc/refman/8.0/en/create-table.html"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE `userDeviceSms` (\n    `id` int NOT NULL AUTO_INCREMENT,\n    `customer_id` int UNSIGNED DEFAULT NULL,\n    `sender` varchar(225) DEFAULT NULL,\n    `message` longtext,\n    `message_type` varchar(15) DEFAULT NULL,\n    `sms_time` datetime DEFAULT NULL,\n    `create_date` datetime DEFAULT NULL,\n    `device_id` varchar(80) DEFAULT NULL,\n    `hash_key` varchar(200) DEFAULT NULL,\n    `isMoved` tinyint(2) DEFAULT '0',\n    `sub_sender` varchar(100) DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `hash_key_UNIQUE` (`hash_key`),\n    KEY `create_date` (`create_date`),\n    KEY `sub_sender` (`sub_sender`),\n    KEY `customer_id` (`customer_id`),\n    KEY `userDeviceSms_sender_IDX` (`sender`) USING BTREE,\n    KEY `isMoved` (`isMoved`),\n    FULLTEXT KEY `message` (`message`)\n) ENGINE=InnoDB AUTO_INCREMENT=449506629 DEFAULT CHARSET=latin1\n\nCREATE TABLE `perfios_raw_data` (\n    `id` int NOT NULL AUTO_INCREMENT,\n    `customer_id` int(20) DEFAULT NULL,\n    `loan_id` int DEFAULT NULL,\n    `raw_data` mediumblob,\ncreate_date     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\nupdate_date    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    `status` tinyint(1) DEFAULT NULL,\n    `perfios_count` int DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    KEY `cust_id` (`customer_id`),\n    KEY `loan_id` (`loan_id`),\n    KEY `create_date` (`create_date`),\n    KEY `status` (`status`)\n);\n\nCREATE TABLE `loc_imps_bank` (\n    `id` int NOT NULL AUTO_INCREMENT,\n    `customer_id` int NOT NULL,\n    `loan_id` int NOT NULL,\n    `final_disbursal_status` varchar(45) DEFAULT NULL,\n    `bank_reference_number` varchar(45) DEFAULT NULL,\n    `disbursal_error_status` varchar(255) DEFAULT NULL,\n    `RESPONSE` varchar(45) DEFAULT NULL,\n    `create_date` datetime DEFAULT CURRENT_TIMESTAMP,\n    `update_date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (`id`),\n    KEY `loan_id` (`loan_id`),\n    KEY `bank_reference_number` (`bank_reference_number`),\n    KEY `customer_id` (`customer_id`)\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,i.jsx)(n.h3,{id:"datetime",children:"DATETIME"}),"\n",(0,i.jsxs)(n.p,{children:["The DATETIME type is used for values that contain both date and time parts. MySQL retrieves and displays DATETIME values in 'YYYY-MM-DD HH:MM",":SS","' format. The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.\""]}),"\n",(0,i.jsx)(n.h3,{id:"timestamp",children:"TIMESTAMP"}),"\n",(0,i.jsx)(n.p,{children:"The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC.\""}),"\n",(0,i.jsx)(n.p,{children:'MySQL converts TIMESTAMP values from the current time zone to UTC for storage, and back from UTC to the current time zone for retrieval. (This does not occur for other types such as DATETIME.)".'}),"\n",(0,i.jsx)(n.h3,{id:"similarities-between-datetime--timestamp",children:"Similarities between DATETIME & TIMESTAMP"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'Both store the data in the "YYYY-MM-DD HH:MM: SS" format.'}),"\n",(0,i.jsx)(n.li,{children:"Both include a date as well as a time part."}),"\n",(0,i.jsx)(n.li,{children:"Automatic initialization can happen for both."}),"\n",(0,i.jsx)(n.li,{children:"Both change the data while updating the record with current data time as per the constraint."}),"\n",(0,i.jsx)(n.li,{children:"Both can have fractional seconds part up to 6 digit microsecond precision."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"difference-between-datetime--timestamp",children:"Difference between DATETIME & TIMESTAMP"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Supported range for DATETIMEis '1000-01-01 00:00:00' to '9999-12-31 23:59:59' while for TIMESTAMP, it is '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC."}),"\n",(0,i.jsx)(n.li,{children:"Prior to MySQL 5.6.4, TIMESTAMP requires 4 bytes (+3 bytes for fractional seconds) to store the data while DATETIME requires 8 bytes (+3 bytes for fractional seconds)."}),"\n",(0,i.jsx)(n.li,{children:"As of MySQL 5.6.4, DATETIME requires 5 bytes + 3 additional bytes for fractional seconds data storing."}),"\n",(0,i.jsx)(n.li,{children:"In MySQL5+, TIMESTAMP value converts from the current time to UTC and vice-versa while DATETIME does not do any conversion."}),"\n",(0,i.jsx)(n.li,{children:"TIMESTAMP differs with current time zone settings while DATETIME remains constant."}),"\n",(0,i.jsx)(n.li,{children:"TIMESTAMP data can be indexed while the DATETIME data cannot."}),"\n",(0,i.jsx)(n.li,{children:"Queries with DATETIME will not be cached but queries with TIMESTAMP will be cached."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=zrl_odkY5tI",children:"Datetime vs Timestamp datatype in databases - Which one is better and when? - YouTube"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.eversql.com/mysql-datetime-vs-timestamp-column-types-which-one-i-should-use",children:"https://www.eversql.com/mysql-datetime-vs-timestamp-column-types-which-one-i-should-use"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/409286/should-i-use-the-datetime-or-timestamp-data-type-in-mysql",children:"https://stackoverflow.com/questions/409286/should-i-use-the-datetime-or-timestamp-data-type-in-mysql"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.c-sharpcorner.com/article/difference-between-mysql-datetime-and-timestamp-datatypes",children:"https://www.c-sharpcorner.com/article/difference-between-mysql-datetime-and-timestamp-datatypes"})})]})}function T(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(E,{...e})}):E(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(296540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);