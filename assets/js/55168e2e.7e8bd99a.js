"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[78806],{276563:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"algorithms/searching-sorting/system-sort","title":"System Sort","description":"Java System Sort - Arrays.sort()","source":"@site/docs/algorithms/searching-sorting/system-sort.md","sourceDirName":"algorithms/searching-sorting","slug":"/algorithms/searching-sorting/system-sort","permalink":"/algorithms/searching-sorting/system-sort","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/searching-sorting/system-sort.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707138374000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Shuffle Sort","permalink":"/algorithms/searching-sorting/shuffle-sort"},"next":{"title":"TimSort","permalink":"/algorithms/searching-sorting/timsort"}}');var n=s(474848),i=s(28453);const o={},a="System Sort",l={},c=[];function d(e){const t={h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"system-sort",children:"System Sort"})}),"\n",(0,n.jsx)(t.p,{children:"Java System Sort - Arrays.sort()"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Has different method for each primitive type"}),"\n",(0,n.jsx)(t.li,{children:"Has a method for data types that implement Comparable"}),"\n",(0,n.jsx)(t.li,{children:"Has a method that uses a Comparator"}),"\n",(0,n.jsx)(t.li,{children:"Uses tuned quicksort for primitive types; tuned mergesort for objects"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Quicksort"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Cutoff to insertion sort for small subarrays"}),"\n",(0,n.jsx)(t.li,{children:"Partitioning scheme: Bentley-Mcllroy 3-way partitioning"}),"\n",(0,n.jsxs)(t.li,{children:["Partitioning item","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Small arrays: middle entry"}),"\n",(0,n.jsx)(t.li,{children:"Medium arrays: median of 3"}),"\n",(0,n.jsxs)(t.li,{children:["Large arrays: Tukey's ninther (median of the median of 3 samples, each of 3 entries)","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Approximate the median of 9"}),"\n",(0,n.jsx)(t.li,{children:"Uses at most 12 compares"}),"\n",(0,n.jsx)(t.li,{children:"Better partitioning than random shuffle and less costly"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var r=s(296540);const n={},i=r.createContext(n);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);