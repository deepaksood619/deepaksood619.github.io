"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[56807],{719739:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"algorithms/general/competitive-programming","title":"Competitive Programming Questions","description":"Two Pointers","source":"@site/docs/algorithms/general/competitive-programming.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/competitive-programming","permalink":"/algorithms/general/competitive-programming","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/competitive-programming.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707138374000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Appel\'s Algorithm","permalink":"/algorithms/general/appel-algorithm"},"next":{"title":"Euclidean Algorithm - Gcd","permalink":"/algorithms/general/euclidean-algorithm-gcd"}}');var t=i(474848),l=i(28453);const s={},o="Competitive Programming Questions",a={},d=[{value:"Two Pointers",id:"two-pointers",level:3},{value:"Binary Search",id:"binary-search",level:3},{value:"Hashmap",id:"hashmap",level:3},{value:"Stack",id:"stack",level:3},{value:"String",id:"string",level:3},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Tree",id:"tree",level:3},{value:"Competitive programming coding patterns",id:"competitive-programming-coding-patterns",level:2},{value:"10 golden rules for solving a coding question in an interview",id:"10-golden-rules-for-solving-a-coding-question-in-an-interview",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"competitive-programming-questions",children:"Competitive Programming Questions"})}),"\n",(0,t.jsx)(n.h3,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#75 Sort Colors"}),"\n",(0,t.jsx)(n.li,{children:"#80 Remove Duplicates from Sorted Array II"}),"\n",(0,t.jsx)(n.li,{children:"#88 Merge Sorted Array"}),"\n",(0,t.jsx)(n.li,{children:"#457 Circular Array Loop"}),"\n",(0,t.jsx)(n.li,{children:"#713 Subarray Product Less Than K"}),"\n",(0,t.jsx)(n.li,{children:"#845 Longest Mountain in Array"}),"\n",(0,t.jsx)(n.li,{children:"#904 Fruit into baskets"}),"\n",(0,t.jsx)(n.li,{children:"#925 Long Pressed name"}),"\n",(0,t.jsx)(n.li,{children:"#986 Interval list intersections"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"binary-search",children:"Binary Search"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#33 Search in rotated sorted array"}),"\n",(0,t.jsx)(n.li,{children:"#69 Sqrt(x)"}),"\n",(0,t.jsx)(n.li,{children:"#153 Find min in rotated sorted array"}),"\n",(0,t.jsx)(n.li,{children:"#349 Intersection of two arrays"}),"\n",(0,t.jsx)(n.li,{children:"#441 Arranging coins"}),"\n",(0,t.jsx)(n.li,{children:"#475 Heaters"}),"\n",(0,t.jsx)(n.li,{children:"#658 Find K closest elements"}),"\n",(0,t.jsx)(n.li,{children:"#911 Online Election"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"hashmap",children:"Hashmap"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#463 Island Perimeter"}),"\n",(0,t.jsx)(n.li,{children:"#535 Encode and decode TinyURL"}),"\n",(0,t.jsx)(n.li,{children:"#575 Distribute Candies"}),"\n",(0,t.jsx)(n.li,{children:"#739 Daily Temperatures"}),"\n",(0,t.jsx)(n.li,{children:"#748 Shortest Completing Word"}),"\n",(0,t.jsx)(n.li,{children:"#811 Subdomain visit count"}),"\n",(0,t.jsx)(n.li,{children:"#884 Uncommon words from Twos sentences"}),"\n",(0,t.jsx)(n.li,{children:"#953 Verifying an Alien Dictionary"}),"\n",(0,t.jsx)(n.li,{children:"#961 N-Repeated Element in Size 2N Array"}),"\n",(0,t.jsx)(n.li,{children:"#1160 Find words that can be formed by characters"}),"\n",(0,t.jsx)(n.li,{children:"#1078 Occurences after bigram"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"stack",children:"Stack"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#496 Next Greater Element I"}),"\n",(0,t.jsx)(n.li,{children:"#682 Baseball Game"}),"\n",(0,t.jsx)(n.li,{children:"#856 Score of Parentheses"}),"\n",(0,t.jsx)(n.li,{children:"#946 Validate Stack Sequences"}),"\n",(0,t.jsx)(n.li,{children:"#1190 Reverse Substrings Between Each Pair of Parentheses"}),"\n",(0,t.jsx)(n.li,{children:"#1209 Remove All Adjacent Duplicates in String II"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#468 Validate IP Address"}),"\n",(0,t.jsx)(n.li,{children:"#522 Longest Uncommon Subsequence II"}),"\n",(0,t.jsx)(n.li,{children:"#539 Minimum Time Difference"}),"\n",(0,t.jsx)(n.li,{children:"#553 Optimal Division"}),"\n",(0,t.jsx)(n.li,{children:"#791 Custom Sort String"}),"\n",(0,t.jsx)(n.li,{children:"#833 Find and replace in String"}),"\n",(0,t.jsx)(n.li,{children:"#835 Image Overlap"}),"\n",(0,t.jsx)(n.li,{children:"#893 Groups of Special-Equivalent Strings"}),"\n",(0,t.jsx)(n.li,{children:"#1156 Swap For Longest Repeated Character Substring"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sliding-window",children:"Sliding Window"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#424 Longest Repeating Character Replacement"}),"\n",(0,t.jsx)(n.li,{children:"#1040 Moving Stones Until Consecutive II"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tree",children:"Tree"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"#101 Symmetric Tree"}),"\n",(0,t.jsx)(n.li,{children:"#108 Convert Sorted Array to Binary Search Tree"}),"\n",(0,t.jsx)(n.li,{children:"#226 Invert Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#538 Convert BST to Greater Tree"}),"\n",(0,t.jsx)(n.li,{children:"#543 Diameter of a Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#637 Average of Levels in Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#654 Maximum Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#669 Trim a Binary Search Tree"}),"\n",(0,t.jsx)(n.li,{children:"#589 N-ary Tree Preorder Traversal"}),"\n",(0,t.jsx)(n.li,{children:"#894 All Possible Full Binary Trees"}),"\n",(0,t.jsx)(n.li,{children:"#979 Distribute Coins in Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#993 Cousins in a Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#1022 Sum of Root To Leaf Binary Numbers"}),"\n",(0,t.jsx)(n.li,{children:"#1104 Path In Zigzag Labelled Binary Tree"}),"\n",(0,t.jsx)(n.li,{children:"#1110 Delete Nodes And Return Forest"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"competitive-programming-coding-patterns",children:"Competitive programming coding patterns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://levelup.gitconnected.com/dont-just-leetcode-follow-the-coding-patterns-instead-4beb6a197fdb",children:"https://levelup.gitconnected.com/dont-just-leetcode-follow-the-coding-patterns-instead-4beb6a197fdb"})}),"\n",(0,t.jsx)(n.h2,{id:"10-golden-rules-for-solving-a-coding-question-in-an-interview",children:"10 golden rules for solving a coding question in an interview"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"if we are dealing with top/maximum/minimum/closest k' elements among 'n' elements, we will be using a heap."}),"\n",(0,t.jsx)(n.li,{children:"If the given input is a sorted array or a list, we will either be using binray search or the two pointers."}),"\n",(0,t.jsx)(n.li,{children:"If we need to try all combinations (or permutations) of the input, we can either use backtracking or breadth first search."}),"\n",(0,t.jsx)(n.li,{children:"Most of the questions related to trees or graphs can be solved either through breadth first search or depth first search."}),"\n",(0,t.jsx)(n.li,{children:"Every recursive solution can be converted to an iterative solution using a stack."}),"\n",(0,t.jsxs)(n.li,{children:["For a problem involving arrays, if there exists a solution in o(n^2)time and o(1) space, there must exist two other solutions:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"using a hashmap or a set for o(n) time and o(n) space"}),"\n",(0,t.jsx)(n.li,{children:"using sorting for o(n log n) time and o(1) space."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"If a problem is asking for optimization (e. G. , maximization or minimization), we will be using dynamic programming."}),"\n",(0,t.jsx)(n.li,{children:"If we need to find some common substring among a set of strings, we will be using a hashmap or a trie."}),"\n",(0,t.jsx)(n.li,{children:"If we need to search/manipulate a bunch of strings, trie will be the best data structure."}),"\n",(0,t.jsx)(n.li,{children:"If the problem is related to a linkedlist and we can't use extra space, then use the fast & slow pointer approach."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var r=i(296540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);