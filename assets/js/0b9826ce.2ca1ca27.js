"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[81746],{762673:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"python/advanced/idiomatic-python","title":"Idiomatic Python","description":"Idiomatic Python","source":"@site/docs/python/advanced/idiomatic-python.md","sourceDirName":"python/advanced","slug":"/python/advanced/idiomatic-python","permalink":"/python/advanced/idiomatic-python","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/advanced/idiomatic-python.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Faster Python","permalink":"/python/advanced/faster-python"},"next":{"title":"Memory Management","permalink":"/python/advanced/memory-management"}}');var a=t(474848),r=t(28453);const o={},s="Idiomatic Python",l={},d=[{value:"Idiomatic Python",id:"idiomatic-python-1",level:2},{value:"Chained Comparison Operator",id:"chained-comparison-operator",level:3},{value:"Use the falsy and truthy concept",id:"use-the-falsy-and-truthy-concept",level:3},{value:"Ternary Operator replacement",id:"ternary-operator-replacement",level:3},{value:"Use the in keyword",id:"use-the-in-keyword",level:3},{value:"Formatting Strings",id:"formatting-strings",level:3},{value:"Use List Comprehensions",id:"use-list-comprehensions",level:3},{value:"Dictionary Comprehension",id:"dictionary-comprehension",level:3},{value:"Sets",id:"sets",level:3},{value:"Set Comprehension",id:"set-comprehension",level:3},{value:"Use the default parameter of &#39;dict.get&#39; to provide default values",id:"use-the-default-parameter-of-dictget-to-provide-default-values",level:3},{value:"Don&#39;t Repeat Yourself",id:"dont-repeat-yourself",level:3},{value:"Find if all the items in a list are equal (pythonic to normal, less efficient to more efficient)",id:"find-if-all-the-items-in-a-list-are-equal-pythonic-to-normal-less-efficient-to-more-efficient",level:3},{value:"Example",id:"example",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"idiomatic-python",children:"Idiomatic Python"})}),"\n",(0,a.jsx)(n.h2,{id:"idiomatic-python-1",children:"Idiomatic Python"}),"\n",(0,a.jsx)(n.h3,{id:"chained-comparison-operator",children:"Chained Comparison Operator"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Bad\nif x <= y and y <= z:\n  # do something\n\n# Good\nif x <= y <= z:\n  # do something\n"})}),"\n",(0,a.jsx)(n.h3,{id:"use-the-falsy-and-truthy-concept",children:"Use the falsy and truthy concept"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python",children:"https://www.freecodecamp.org/news/truthy-and-falsy-values-in-python"})}),"\n",(0,a.jsx)(n.h3,{id:"ternary-operator-replacement",children:"Ternary Operator replacement"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = True\nvalue = 1 if a else 0\nprint(value)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"use-the-in-keyword",children:"Use the in keyword"}),"\n",(0,a.jsx)(n.h3,{id:"formatting-strings",children:"Formatting Strings"}),"\n",(0,a.jsx)(n.p,{children:"The worst approach to formatting strings is to use the + operator to concatenate a mix of static strings and variables. However, the clearest and most idiomatic way to format strings is to use the format function. It takes a format string and replaces placeholders with values."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Bad\ndef user_info(user):\n  return 'Name: ' + user.name + ' Age: '+ user.age\n\n# Good\ndef user_info(user):\n  return 'Name: {user.name} Age: {user.age}'.format(user=user)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"use-list-comprehensions",children:"Use List Comprehensions"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Ex - ls = [element for element in range(10) if not(element % 2)]"})}),"\n",(0,a.jsx)(n.h3,{id:"dictionary-comprehension",children:"Dictionary Comprehension"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"emails = {user.name: user.email for user in users if user.email}"})}),"\n",(0,a.jsx)(n.h3,{id:"sets",children:"Sets"}),"\n",(0,a.jsx)(n.p,{children:"Operations on set -"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Union: The set of elements in A, B or both (written as A | B)"}),"\n",(0,a.jsx)(n.li,{children:"Intersection: The set of elements in both A and B (written as A & B)"}),"\n",(0,a.jsx)(n.li,{children:"Difference: The set of elements in A but not in B (written as A - B)"}),"\n",(0,a.jsx)(n.li,{children:"Symmetric Difference: The set of elements in either A or B but not both A and B (written as A ^ B)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Ex"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"ls1 = [1, 2, 3, 4, 5]\nls2 = [4, 5, 6, 7, 8]\nelements_in_both = list( set(ls1) & set(ls2) )\nprint(elements_in_both)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"set-comprehension",children:"Set Comprehension"}),"\n",(0,a.jsx)(n.h3,{id:"use-the-default-parameter-of-dictget-to-provide-default-values",children:"Use the default parameter of 'dict.get' to provide default values"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Ex- auth = payload.get('auth_token', 'Unauthorized')"})}),"\n",(0,a.jsx)(n.h3,{id:"dont-repeat-yourself",children:"Don't Repeat Yourself"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Bad\nif user:\n    print('------------------------------')\n    print(user)\n    print('------------------------------')\n\n# In the example above, we have repeated-over 30 times which is really not good.\n\n# Good\nif user:\n    print('{0}\\n{1}\\n{0}'.format('-'*30, user))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"find-if-all-the-items-in-a-list-are-equal-pythonic-to-normal-less-efficient-to-more-efficient",children:"Find if all the items in a list are equal (pythonic to normal, less efficient to more efficient)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = ['a', 'a', 'a']\nprint(len(set(a)) == 1)\nprint(all(x == a[0] for x in a))\nprint(a.count(a[0]) == len(a))\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"Input -\n5\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39\n\nOutput -\nBerry\nHarry\n\n# students = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41], ['Harsh', 39]]\n\nif __name__ == '__main__':\n    marksheet = []\n    for _ in range(int(input())):\n        marksheet.append([input(), float(input())])\n\n    second_highest = sorted(list(set([marks for name, marks in marksheet])))[1]\n\nprint('\\n'.join([a for a,b in sorted(marksheet) if b == second_highest]))\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.codementor.io/johnpaulseremba/idiomatic-python-coding-the-smart-way-fmc4fmtm5?utm_swu=3470",children:"https://www.codementor.io/johnpaulseremba/idiomatic-python-coding-the-smart-way-fmc4fmtm5?utm_swu=3470"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(296540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);