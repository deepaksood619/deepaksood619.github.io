"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[90160],{211310:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"languages/c++/stl-iterators-algorithms","title":"STL Iterators Algorithms","description":"C++ Iterators","source":"@site/docs/languages/c++/stl-iterators-algorithms.md","sourceDirName":"languages/c++","slug":"/languages/c++/stl-iterators-algorithms","permalink":"/languages/c++/stl-iterators-algorithms","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/c++/stl-iterators-algorithms.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"STL Containers","permalink":"/languages/c++/stl-containers"},"next":{"title":"Storage classes","permalink":"/languages/c++/storage-classes"}}');var s=r(474848),i=r(28453);const a={},l="STL Iterators Algorithms",o={},c=[{value:"C++ Iterators",id:"c-iterators",level:2},{value:"C++ Algorithms",id:"c-algorithms",level:2},{value:"References",id:"references",level:2}];function h(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"stl-iterators-algorithms",children:"STL Iterators Algorithms"})}),"\n",(0,s.jsx)(n.h2,{id:"c-iterators",children:"C++ Iterators"}),"\n",(0,s.jsx)(n.p,{children:"Iterators are used to access members of the container classes, and can be used in a similar manner to pointers. For example, one might use an iterator to step through the elements of a vector. There are several different types of iterators:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Iterator"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"input_iterator"})}),(0,s.jsx)(n.td,{children:"Read values with forward movement. These can be incremented, compared, and dereferenced."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"output_iterator"})}),(0,s.jsx)(n.td,{children:"Write values with forward movement. These can be incremented and dereferenced."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"forward_iterator"})}),(0,s.jsx)(n.td,{children:"Read or write values with forward movement. These combine the functionality of input and output iterators with the ability to store the iterators value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"bidirectional_ite rator"})}),(0,s.jsx)(n.td,{children:"Read and write values with forward and backward movement. These are like the forward iterators, but you can increment and decrement them."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"random_iterator"})}),(0,s.jsx)(n.td,{children:"Read and write values with random access. These are the most powerful iterators, combining the functionality of bidirectional iterators with the ability to do pointer arithmetic and pointer comparisons."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"reverse_iterator"})}),(0,s.jsx)(n.td,{children:"Either a random iterator or a bidirectional iterator that moves in reverse direction."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"c-algorithms",children:"C++ Algorithms"}),"\n",(0,s.jsx)(n.p,{children:"accumulate"}),"\n",(0,s.jsx)(n.p,{children:"sum up a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"adjacent_difference"}),"\n",(0,s.jsx)(n.p,{children:"compute the differences between adjacent elements in a range"}),"\n",(0,s.jsx)(n.p,{children:"adjacent_find"}),"\n",(0,s.jsx)(n.p,{children:"finds two items that are adjacent to each other"}),"\n",(0,s.jsx)(n.p,{children:"binary_search"}),"\n",(0,s.jsx)(n.p,{children:"determine if an element exists in a certain range"}),"\n",(0,s.jsx)(n.p,{children:"copy"}),"\n",(0,s.jsx)(n.p,{children:"copy some range of elements to a new location"}),"\n",(0,s.jsx)(n.p,{children:"copy_backward"}),"\n",(0,s.jsx)(n.p,{children:"copy a range of elements in backwards order"}),"\n",(0,s.jsx)(n.p,{children:"copy_n"}),"\n",(0,s.jsx)(n.p,{children:"copy N elements"}),"\n",(0,s.jsx)(n.p,{children:"count"}),"\n",(0,s.jsx)(n.p,{children:"return the number of elements matching a given value"}),"\n",(0,s.jsx)(n.p,{children:"count_if"}),"\n",(0,s.jsx)(n.p,{children:"return the number of elements for which a predicate is true"}),"\n",(0,s.jsx)(n.p,{children:"equal"}),"\n",(0,s.jsx)(n.p,{children:"determine if two sets of elements are the same"}),"\n",(0,s.jsx)(n.p,{children:"equal_range"}),"\n",(0,s.jsx)(n.p,{children:"search for a range of elements that are all equal to a certain element"}),"\n",(0,s.jsx)(n.p,{children:"fill"}),"\n",(0,s.jsx)(n.p,{children:"assign a range of elements a certain value"}),"\n",(0,s.jsx)(n.p,{children:"fill_n"}),"\n",(0,s.jsx)(n.p,{children:"assign a value to some number of elements"}),"\n",(0,s.jsx)(n.p,{children:"find"}),"\n",(0,s.jsx)(n.p,{children:"find a value in a given range"}),"\n",(0,s.jsx)(n.p,{children:"find_end"}),"\n",(0,s.jsx)(n.p,{children:"find the last sequence of elements in a certain range"}),"\n",(0,s.jsx)(n.p,{children:"find_first_of"}),"\n",(0,s.jsx)(n.p,{children:"search for any one of a set of elements"}),"\n",(0,s.jsx)(n.p,{children:"find_if"}),"\n",(0,s.jsx)(n.p,{children:"find the first element for which a certain predicate is true"}),"\n",(0,s.jsx)(n.p,{children:"for_each"}),"\n",(0,s.jsx)(n.p,{children:"apply a function to a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"generate"}),"\n",(0,s.jsx)(n.p,{children:"saves the result of a function in a range"}),"\n",(0,s.jsx)(n.p,{children:"generate_n"}),"\n",(0,s.jsx)(n.p,{children:"saves the result of N applications of a function"}),"\n",(0,s.jsx)(n.p,{children:"includes"}),"\n",(0,s.jsx)(n.p,{children:"returns true if one set is a subset of another"}),"\n",(0,s.jsx)(n.p,{children:"inner_product"}),"\n",(0,s.jsx)(n.p,{children:"compute the inner product of two ranges of elements"}),"\n",(0,s.jsx)(n.p,{children:"inplace_merge"}),"\n",(0,s.jsx)(n.p,{children:"merge two ordered ranges in-place"}),"\n",(0,s.jsx)(n.p,{children:"is_heap"}),"\n",(0,s.jsx)(n.p,{children:"returns true if a given range is a heap"}),"\n",(0,s.jsx)(n.p,{children:"is_sorted"}),"\n",(0,s.jsx)(n.p,{children:"returns true if a range is sorted in ascending order"}),"\n",(0,s.jsx)(n.p,{children:"iter_swap"}),"\n",(0,s.jsx)(n.p,{children:"swaps the elements pointed to by two iterators"}),"\n",(0,s.jsx)(n.p,{children:"lexicographical_compare"}),"\n",(0,s.jsx)(n.p,{children:"returns true if one range is lexicographically less than another"}),"\n",(0,s.jsx)(n.p,{children:"lexicographical_compare_3way"}),"\n",(0,s.jsx)(n.p,{children:"determines if one range is lexicographically less than or greater than another"}),"\n",(0,s.jsx)(n.p,{children:"lower_bound"}),"\n",(0,s.jsx)(n.p,{children:"search for the first place that a value can be inserted while preserving order"}),"\n",(0,s.jsx)(n.p,{children:"make_heap"}),"\n",(0,s.jsx)(n.p,{children:"creates a heap out of a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"max"}),"\n",(0,s.jsx)(n.p,{children:"returns the larger of two elements"}),"\n",(0,s.jsx)(n.p,{children:"max_element"}),"\n",(0,s.jsx)(n.p,{children:"returns the largest element in a range"}),"\n",(0,s.jsx)(n.p,{children:"merge"}),"\n",(0,s.jsx)(n.p,{children:"merge two sorted ranges"}),"\n",(0,s.jsx)(n.p,{children:"min"}),"\n",(0,s.jsx)(n.p,{children:"returns the smaller of two elements"}),"\n",(0,s.jsx)(n.p,{children:"min_element"}),"\n",(0,s.jsx)(n.p,{children:"returns the smallest element in a range"}),"\n",(0,s.jsx)(n.p,{children:"mismatch"}),"\n",(0,s.jsx)(n.p,{children:"finds the first position where two ranges differ"}),"\n",(0,s.jsx)(n.p,{children:"next_permutation"}),"\n",(0,s.jsx)(n.p,{children:"generates the next greater lexicographic permutation of a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"nth_element"}),"\n",(0,s.jsx)(n.p,{children:"put one element in its sorted location and make sure that no elements to its left are greater than any elements to its right"}),"\n",(0,s.jsx)(n.p,{children:"put"}),"\n",(0,s.jsx)(n.p,{children:"one element in its sorted location and make sure that no elements to its left are greater than any elements to its right"}),"\n",(0,s.jsx)(n.p,{children:"partial_sort"}),"\n",(0,s.jsx)(n.p,{children:"sort the first N elements of a range"}),"\n",(0,s.jsx)(n.p,{children:"partial_sort_copy"}),"\n",(0,s.jsx)(n.p,{children:"copy and partially sort a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"partial_sum"}),"\n",(0,s.jsx)(n.p,{children:"compute the partial sum of a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"partition"}),"\n",(0,s.jsx)(n.p,{children:"divide a range of elements into two groups"}),"\n",(0,s.jsx)(n.p,{children:"pop_heap"}),"\n",(0,s.jsx)(n.p,{children:"remove the largest element from a heap"}),"\n",(0,s.jsx)(n.p,{children:"prev_permutation"}),"\n",(0,s.jsx)(n.p,{children:"generates the next smaller lexicographic permutation of a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"push_heap"}),"\n",(0,s.jsx)(n.p,{children:"add an element to a heap"}),"\n",(0,s.jsx)(n.p,{children:"random_sample"}),"\n",(0,s.jsx)(n.p,{children:"randomly copy elements from one range to another"}),"\n",(0,s.jsx)(n.p,{children:"random_sample_n"}),"\n",(0,s.jsx)(n.p,{children:"sample N random elements from a range"}),"\n",(0,s.jsx)(n.p,{children:"random_shuffle"}),"\n",(0,s.jsx)(n.p,{children:"randomly re-order elements in some range"}),"\n",(0,s.jsx)(n.p,{children:"remove"}),"\n",(0,s.jsx)(n.p,{children:"remove elements equal to certain value"}),"\n",(0,s.jsx)(n.p,{children:"remove_copy"}),"\n",(0,s.jsx)(n.p,{children:"copy a range of elements omitting those that match a certian value"}),"\n",(0,s.jsx)(n.p,{children:"remove_copy_if"}),"\n",(0,s.jsx)(n.p,{children:"create a copy of a range of elements, omitting any for which a predicate is true"}),"\n",(0,s.jsx)(n.p,{children:"remove_if"}),"\n",(0,s.jsx)(n.p,{children:"remove all elements for which a predicate is true"}),"\n",(0,s.jsx)(n.p,{children:"replace"}),"\n",(0,s.jsx)(n.p,{children:"replace every occurrence of some value in a range with another value"}),"\n",(0,s.jsx)(n.p,{children:"replace_copy"}),"\n",(0,s.jsx)(n.p,{children:"copy a range, replacing certain elements with new ones"}),"\n",(0,s.jsx)(n.p,{children:"replace_copy_if"}),"\n",(0,s.jsx)(n.p,{children:"copy a range of elements, replacing those for which a predicate is true"}),"\n",(0,s.jsx)(n.p,{children:"replace_if"}),"\n",(0,s.jsx)(n.p,{children:"change the values of elements for which a predicate is true"}),"\n",(0,s.jsx)(n.p,{children:"reverse"}),"\n",(0,s.jsx)(n.p,{children:"reverse elements in some range"}),"\n",(0,s.jsx)(n.p,{children:"reverse_copy"}),"\n",(0,s.jsx)(n.p,{children:"create a copy of a range that is reversed"}),"\n",(0,s.jsx)(n.p,{children:"rotate"}),"\n",(0,s.jsx)(n.p,{children:"move the elements in some range to the left by some amount"}),"\n",(0,s.jsx)(n.p,{children:"rotate_copy"}),"\n",(0,s.jsx)(n.p,{children:"copy and rotate a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"search"}),"\n",(0,s.jsx)(n.p,{children:"search for a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"search_n"}),"\n",(0,s.jsx)(n.p,{children:"search for N consecutive copies of an element in some range"}),"\n",(0,s.jsx)(n.p,{children:"set_difference"}),"\n",(0,s.jsx)(n.p,{children:"computes the difference between two sets"}),"\n",(0,s.jsx)(n.p,{children:"set_intersection"}),"\n",(0,s.jsx)(n.p,{children:"computes the intersection of two sets"}),"\n",(0,s.jsx)(n.p,{children:"set_symmetric_difference"}),"\n",(0,s.jsx)(n.p,{children:"computes the symmetric difference between two sets"}),"\n",(0,s.jsx)(n.p,{children:"set_union"}),"\n",(0,s.jsx)(n.p,{children:"computes the union of two sets"}),"\n",(0,s.jsx)(n.p,{children:"sort"}),"\n",(0,s.jsx)(n.p,{children:"sort a range into ascending order"}),"\n",(0,s.jsx)(n.p,{children:"sort_heap"}),"\n",(0,s.jsx)(n.p,{children:"turns a heap into a sorted range of elements"}),"\n",(0,s.jsx)(n.p,{children:"stable_partition"}),"\n",(0,s.jsx)(n.p,{children:"divide elements into two groups while preserving their relative order"}),"\n",(0,s.jsx)(n.p,{children:"stable_sort"}),"\n",(0,s.jsx)(n.p,{children:"sort a range of elements while preserving order between equal elements"}),"\n",(0,s.jsx)(n.p,{children:"swap"}),"\n",(0,s.jsx)(n.p,{children:"swap the values of two objects"}),"\n",(0,s.jsx)(n.p,{children:"swap_ranges"}),"\n",(0,s.jsx)(n.p,{children:"swaps two ranges of elements"}),"\n",(0,s.jsx)(n.p,{children:"transform"}),"\n",(0,s.jsx)(n.p,{children:"applies a function to a range of elements"}),"\n",(0,s.jsx)(n.p,{children:"unique"}),"\n",(0,s.jsx)(n.p,{children:"remove consecutive duplicate elements in a range"}),"\n",(0,s.jsx)(n.p,{children:"unique_copy"}),"\n",(0,s.jsx)(n.p,{children:"create a copy of some range of elements that contains no consecutive duplicates"}),"\n",(0,s.jsx)(n.p,{children:"upper_bound"}),"\n",(0,s.jsx)(n.p,{children:"searches for the last possible location to insert an element into an ordered range"}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cppreference.com/Cpp_STL_ReferenceManual.pdf",children:"https://www.cppreference.com/Cpp_STL_ReferenceManual.pdf"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=bFSnXNIsK4A",children:"https://www.youtube.com/watch?v=bFSnXNIsK4A"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(296540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);