"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[79611],{784486:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>r});var t=a(785893),s=a(511151);const o={},l="CheatSheet",i={id:"ai/pandas/cheatsheet",title:"CheatSheet",description:"https://www.kaggle.com/grroverpr/pandas-cheatsheet",source:"@site/docs/ai/pandas/cheatsheet.md",sourceDirName:"ai/pandas",slug:"/ai/pandas/cheatsheet",permalink:"/ai/pandas/cheatsheet",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/ai/pandas/cheatsheet.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pandas",permalink:"/ai/pandas/"},next:{title:"Commands",permalink:"/ai/pandas/commands"}},d={},r=[{value:"Importing data",id:"importing-data",level:2},{value:"Exporting data",id:"exporting-data",level:2},{value:"Create test objects",id:"create-test-objects",level:2},{value:"Useful for testing",id:"useful-for-testing",level:3},{value:"Viewing/inspecting data",id:"viewinginspecting-data",level:2},{value:"Selection",id:"selection",level:2},{value:"Data cleaning",id:"data-cleaning",level:2},{value:"Conversions",id:"conversions",level:2},{value:"Filter, sort &amp; groupby",id:"filter-sort--groupby",level:2},{value:"Join/Combine",id:"joincombine",level:2},{value:"Statistics",id:"statistics",level:2},{value:"Series",id:"series",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"cheatsheet",children:"CheatSheet"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.kaggle.com/grroverpr/pandas-cheatsheet",children:"https://www.kaggle.com/grroverpr/pandas-cheatsheet"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df # A pandas DataFrame object\n\ns # A pandas Series object\n\npd.options.display.max_columns = None\npd.options.display.max_rows = None\npd.options.display.max_rows = 100\n"})}),"\n",(0,t.jsx)(n.h2,{id:"importing-data",children:"Importing data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"pd.read_csv(filename) # From a CSV file\npd.read_table(filename) # From a delimited text file (like TSV)\npd.read_excel(filename) # From an Excel file\npd.read_sql(query, connection_object) # Reads from a SQL table/database\npd.read_json(json_string) # Reads from a JSON formatted string, URL or file\npd.read_html(url) # Parses an html URL, string or file and extracts tables to a list of dataframes\npd.read_clipboard() # Takes the contents of your clipboard and passes it to read_table()\npd.DataFrame(dict) # From a dict, keys for columns names, values for data as lists\n"})}),"\n",(0,t.jsx)(n.h2,{id:"exporting-data",children:"Exporting data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.to_csv(filename) # Writes to a CSV file\ndf.to_excel(filename) # Writes to an Excel file\ndf.to_sql(table_name, connection_object) # Writes to a SQL table\ndf.to_json(filename) # Writes to a file in JSON format\ndf.to_html(filename) # Saves as an HTML table\ndf.to_clipboard() # Writes to the clipboard\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-test-objects",children:"Create test objects"}),"\n",(0,t.jsx)(n.h3,{id:"useful-for-testing",children:"Useful for testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"pd.DataFrame(np.random.rand(20,5)) # 5 columns and 20 rows of random floats\npd.Series(my_list) # Creates a series from an iterable my_list\ndf.index = pd.date_range('1900/1/30', periods=df.shape[0]) # Adds a date index\n"})}),"\n",(0,t.jsx)(n.h2,{id:"viewinginspecting-data",children:"Viewing/inspecting data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.head(n) # First n rows of the DataFrame\ndf.tail(n) # Last n rows of the DataFrame\ndf.shape() # Number of rows and columns\ndf.info(verbose=True) # Index, Datatype and Memory information\ndf.describe() # Summary statistics for numerical columns\n    df.describe().apply(lambda x: format(x, 'f')) # remove scientific notation\ndf.columns.values\ndf['loan_staus].unique()\ns.value_counts(dropna=False) # Views unique values and columns\ndf.apply(pd.Series.value_counts) # Unique values and counts for all columns\n"})}),"\n",(0,t.jsx)(n.h2,{id:"selection",children:"Selection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df[col] # Returns column with label col as Series\ndf[col1, col2] # Returns Columns as a new DataFrame\ns.iloc[0] # Selection by position\ns.loc[0] # Selection by index\n    df.loc[:, ['earliest_cr_line', 'earliest_cr_line_date', 'mnths_since_earliest_cr_line']][df['mnths_since_earliest_cr_line'] < 100]\ndf.iloc[0,:] # First row\ndf.iloc[0,0] # First element of first column\ndf.isin(['a','b','c'])\nnp.where(condition, value if true, value if false)\n    Checks if a condition is true, returns a specifed value if the condition is true or another specified value if the condition is false\n    df['good_bad'] = np.where(df['loan_status'].isin(['Charged Off',\n                                                        'Late (31-120 days)',\n                                                        'Does not meet the credit policy. Status:Charged Off',\n                                            'Default']), 0, 1)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-cleaning",children:"Data cleaning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.columns = ['a','b','c'] # Renames columns\npd.isnull() # Checks for null values, Returns Boolean Array\npd.notnull() # Opposite of s.isnull()\ndf.dropna() # Drops all rows that contain null values\ndf.dropna(axis=1) # Drops all columns that contain null values\ndf.dropna(axis=1,thresh=n) # Drops all rows have less than n non null values\ndf.fillna(s.mean()) # Replaces all null values with the mean (mean can be replaced with almost any function from the statistics section)\ns.astype(float) # Converts the datatype of the series to float\ns.replace(1, 'one') # Replaces all values equal to 1 with 'one'\ns.replace([1,3],['one','three']) # Replaces all 1 with 'one' and 3 with 'three'\ndf.rename(columns=lambda x: x+1) # Mass renaming of columns\ndf.rename(columns={'old_name': 'new_name'}) # Selective renaming\ndf.set_index('column_one') # Changes the index\ndf.rename(index=lambda x: x+1) # Mass renaming of index\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conversions",children:"Conversions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"pd.to_numeric(df['col_name']\npd.to_datetime(df['col_name'])\npd.get_dummies(df['grade'], prefix='grade', prefix_sep = ':')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"filter-sort--groupby",children:"Filter, sort & groupby"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df[df[col] > 0.5] # Rows where the col column is greater than 0.5\ndf[(df[col] > 0.5) & (df[col] < 0.7)] # Rows where 0.7 > col > 0.5\ndf.sort_values(col1) # Sorts values by col1 in ascending order\ndf.sort_values(col2, ascending=False) # Sorts values by col2 in descending order\ndf.sort_values([col1, col2], ascending=[True,False]) # Sorts values by col1 in ascending order then col2 in descending order\ndf.groupby(col) # Returns a groupby object for values from one column\ndf.groupby([col1, col2]) # Returns a groupby object values from multiple columns\ndf.groupby(col1)[col2].mean() # Returns the mean of the values in col2, grouped by the values in col1 (mean can be replaced with almost any function from the statistics section)\ndf.pivot_table(index=col1, values=[col2,col3],aggfunc=mean) # Creates a pivot table that groups by col1 and calculates the mean of col2 and col3\ndf.groupby(col1).agg(np.mean) # Finds the average across all columns for every unique column 1 group\ndf.apply(np.mean) # Applies a function across each column\ndf.apply(np.max,  axis=1) # Applies a function across each row\n"})}),"\n",(0,t.jsx)(n.h2,{id:"joincombine",children:"Join/Combine"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df1.append(df2) # Adds the rows in df1 to the end of df2 (columns should be identical)\npd.concat([df1, df2], axis=1) # Adds the columns in df1 to the end of df2 (rows should be identical)\ndf1.join(df2, on=col1, how='inner') # SQL-style join the columns in df1 with the columns on df2 where the rows for col have identical values. how can be one of 'left', 'right', 'outer', 'inner'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"statistics",children:"Statistics"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"These can all be applied to a series as well"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"df.mean() # Returns the mean of all columns\ndf.corr() # Returns the correlation between columns in a DataFrame\ndf.count() # Returns the number of non-null values in each DataFrame column\ndf.max() # Returns the highest value in each column\ndf.min() # Returns the lowest value in each column\ndf.median() # Returns the median of each column\ndf.std() # Returns the standard deviation of each column\n"})}),"\n",(0,t.jsx)(n.p,{children:"The pandas library is built on NumPy and provides easy-to-use data structures and data analysis tools for the Python programming language."}),"\n",(0,t.jsx)(n.h2,{id:"series",children:"Series"}),"\n",(0,t.jsx)(n.p,{children:"A one-dimensional labeled array capable of holding any data type"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"s = pd.Series([3,-5,7,4], index=['a','b','c','d'])"})}),"\n",(0,t.jsx)(n.p,{children:"DataFrame"}),"\n",(0,t.jsx)(n.p,{children:"A two-dimensional labeled data structure with columns of potentially different types"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"image",src:a(676593).Z+"",width:"1683",height:"1190"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"image",src:a(886845).Z+"",width:"1683",height:"1190"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},676593:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/CheatSheet-image1-1f2748487727068c06555f0188d213c1.jpg"},886845:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/CheatSheet-image2-a5b7308e6921bd5b75dd657b686d9aaa.jpg"},511151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>l});var t=a(667294);const s={},o=t.createContext(s);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);