"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[24222],{547781:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=r(785893),s=r(511151);const o={},i="Others",a={id:"algorithms/searching-sorting/others",title:"Others",description:"Beating sorting lower bounds",source:"@site/docs/algorithms/searching-sorting/others.md",sourceDirName:"algorithms/searching-sorting",slug:"/algorithms/searching-sorting/others",permalink:"/algorithms/searching-sorting/others",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/searching-sorting/others.md",tags:[],version:"current",lastUpdatedAt:1678191863,formattedLastUpdatedAt:"Mar 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MSD Radix Sort",permalink:"/algorithms/searching-sorting/msd-radix-sort"},next:{title:"Quick Sort",permalink:"/algorithms/searching-sorting/quick-sort"}},d={},l=[{value:"Beating sorting lower bounds",id:"beating-sorting-lower-bounds",level:2}];function c(e){const t={em:"em",h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"others",children:"Others"}),"\n",(0,n.jsx)(t.h2,{id:"beating-sorting-lower-bounds",children:"Beating sorting lower bounds"}),"\n",(0,n.jsxs)(t.p,{children:["There is an O(n",(0,n.jsx)(t.em,{children:"log(n)) sorting lower bound for comparison based sorts, however, in this talk we'll see a new model for computation, the word RAM model, and data structures based on this model, which solve the Predecessor Problem efficiently leading to O(n"}),"sqrt(log(n))) and usage of bit tricks in manipulating numbers. The data structures that we'll primarily see include the van Embde Boas Trees (FOCS '75) and an introduction to Y-Fast Tries."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},511151:(e,t,r)=>{r.d(t,{Z:()=>a,a:()=>i});var n=r(667294);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);