"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[61462],{747341:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"databases/nosql-databases/mongodb/read-write-concern","title":"Read / Write Concern","description":"Read Concern","source":"@site/docs/databases/nosql-databases/mongodb/read-write-concern.md","sourceDirName":"databases/nosql-databases/mongodb","slug":"/databases/nosql-databases/mongodb/read-write-concern","permalink":"/databases/nosql-databases/mongodb/read-write-concern","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/nosql-databases/mongodb/read-write-concern.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1739572825000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Questions","permalink":"/databases/nosql-databases/mongodb/questions"},"next":{"title":"Sharding / Replication","permalink":"/databases/nosql-databases/mongodb/sharding-replication"}}');var a=r(474848),c=r(28453);const t={},s="Read / Write Concern",i={},d=[{value:"Read Concern",id:"read-concern",level:2},{value:"Read Concern Levels",id:"read-concern-levels",level:3},{value:"local",id:"local",level:4},{value:"available",id:"available",level:4},{value:"majority",id:"majority",level:4},{value:"linearizable",id:"linearizable",level:4},{value:"snapshot",id:"snapshot",level:4},{value:"Write Concern",id:"write-concern",level:2},{value:"Write Concern Levels",id:"write-concern-levels",level:3},{value:"majority",id:"majority-1",level:4},{value:"<code>&lt;number&gt;</code>",id:"number",level:4},{value:"<code>&lt;custom write concern name&gt;</code>",id:"custom-write-concern-name",level:4}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"read--write-concern",children:"Read / Write Concern"})}),"\n",(0,a.jsx)(n.h2,{id:"read-concern",children:"Read Concern"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"readConcern"})," option allows you to control the consistency and isolation properties of the data read from replica sets and replica set shards."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern/",children:"Read Concern - MongoDB Manual"})}),"\n",(0,a.jsx)(n.h3,{id:"read-concern-levels",children:"Read Concern Levels"}),"\n",(0,a.jsx)(n.h4,{id:"local",children:"local"}),"\n",(0,a.jsx)(n.p,{children:"The query returns data from the instance with no guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back)."}),"\n",(0,a.jsx)(n.p,{children:"Default for reads against the primary and secondaries."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Availability:"})," Read concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-local/#mongodb-readconcern-readconcern.-local-",children:(0,a.jsx)(n.code,{children:'"local"'})})," is available for use with or without causally consistent sessions and transactions."]}),"\n",(0,a.jsx)(n.h4,{id:"available",children:"available"}),"\n",(0,a.jsx)(n.p,{children:"The query returns data from the instance with no guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back)."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Availability:"})," Read concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-available/#mongodb-readconcern-readconcern.-available-",children:(0,a.jsx)(n.code,{children:'"available"'})})," is ",(0,a.jsx)(n.strong,{children:"unavailable for use"})," with causally consistent sessions and transactions."]}),"\n",(0,a.jsxs)(n.p,{children:["For sharded clusters, ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-available/#mongodb-readconcern-readconcern.-available-",children:(0,a.jsx)(n.code,{children:'"available"'})})," read concern provides the lowest latency reads possible among the various read concerns. However, this comes at the expense of consistency as ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-available/#mongodb-readconcern-readconcern.-available-",children:(0,a.jsx)(n.code,{children:'"available"'})})," read concern can return ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/glossary/#std-term-orphaned-document",children:"orphaned documents"})," when reading from a sharded collection. To avoid the risk of returning orphaned documents when reading from sharded collections, use a different read concern such as read concern ",(0,a.jsxs)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-local/#mongodb-readconcern-readconcern.-local-",children:[(0,a.jsx)(n.code,{children:'"local"'}),"."]})]}),"\n",(0,a.jsx)(n.h4,{id:"majority",children:"majority"}),"\n",(0,a.jsx)(n.p,{children:"The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure."}),"\n",(0,a.jsxs)(n.p,{children:['To fulfill read concern "majority", the replica set member returns data from its in-memory view of the data at the majority-commit point. As such, read concern ',(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-majority/#mongodb-readconcern-readconcern.-majority-",children:(0,a.jsx)(n.code,{children:'"majority"'})})," is comparable in performance cost to other read concerns."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Availability:"})}),"\n",(0,a.jsxs)(n.p,{children:["Read concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-majority/#mongodb-readconcern-readconcern.-majority-",children:(0,a.jsx)(n.code,{children:'"majority"'})})," is available for use with or without causally consistent sessions and transactions."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements:"})," To use ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/glossary/#std-term-read-concern",children:"read concern"})," level of ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-majority/#mongodb-readconcern-readconcern.-majority-",children:(0,a.jsx)(n.code,{children:'"majority"'})}),", replica sets must use ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/wiredtiger/#std-label-storage-wiredtiger",children:"WiredTiger storage engine."})]}),"\n",(0,a.jsx)(n.h4,{id:"linearizable",children:"linearizable"}),"\n",(0,a.jsx)(n.p,{children:"The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results."}),"\n",(0,a.jsxs)(n.p,{children:["If a majority of your replica set members crash and restart after the read operation, documents returned by the read operation are durable if ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/replica-configuration/#mongodb-rsconf-rsconf.writeConcernMajorityJournalDefault",children:(0,a.jsx)(n.code,{children:"writeConcernMajorityJournalDefault"})})," is set to the default state of ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["With ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/replica-configuration/#mongodb-rsconf-rsconf.writeConcernMajorityJournalDefault",children:(0,a.jsx)(n.code,{children:"writeConcernMajorityJournalDefault"})})," set to ",(0,a.jsx)(n.code,{children:"false"}),", MongoDB does not wait for ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#mongodb-writeconcern-writeconcern.-majority-",children:(0,a.jsx)(n.code,{children:'w: "majority"'})})," writes to be written to the on-disk journal before acknowledging the writes. As such, ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#mongodb-writeconcern-writeconcern.-majority-",children:(0,a.jsx)(n.code,{children:'"majority"'})})," write operations could possibly roll back in the event of a transient loss (e.g. crash and restart) of a majority of nodes in a given replica set."]}),"\n",(0,a.jsx)(n.p,{children:"Availability:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Read concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-linearizable/#mongodb-readconcern-readconcern.-linearizable-",children:(0,a.jsx)(n.code,{children:'"linearizable"'})})," is ",(0,a.jsx)(n.strong,{children:"unavailable for use"})," with causally consistent sessions and transactions."]}),"\n",(0,a.jsxs)(n.li,{children:["You can specify linearizable read concern for read operations on the ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/replica-states/#mongodb-replstate-replstate.PRIMARY",children:(0,a.jsx)(n.code,{children:"primary"})})," only."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You cannot use the ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/#mongodb-pipeline-pipe.-out",children:(0,a.jsx)(n.code,{children:"$out"})})," or the ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/#mongodb-pipeline-pipe.-merge",children:(0,a.jsx)(n.code,{children:"$merge"})})," stage in conjunction with read concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-linearizable/#mongodb-readconcern-readconcern.-linearizable-",children:(0,a.jsx)(n.code,{children:'"linearizable"'})}),". That is, if you specify ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-linearizable/#mongodb-readconcern-readconcern.-linearizable-",children:(0,a.jsx)(n.code,{children:'"linearizable"'})})," read concern for ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/method/db.collection.aggregate/#mongodb-method-db.collection.aggregate",children:(0,a.jsx)(n.code,{children:"db.collection.aggregate()"})}),", you cannot include either stages in the pipeline."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Requirements:"})," Linearizable read concern guarantees only apply if read operations specify a query filter that uniquely identifies a single document."]}),"\n",(0,a.jsx)(n.h4,{id:"snapshot",children:"snapshot"}),"\n",(0,a.jsxs)(n.p,{children:["A query with read concern ",(0,a.jsx)(n.code,{children:'"snapshot"'})," returns majority-committed data as it appears across shards from a specific single point in time in the recent past. Read concern ",(0,a.jsx)(n.code,{children:'"snapshot"'})," provides its guarantees only if the transaction commits with write concern ",(0,a.jsxs)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#mongodb-writeconcern-writeconcern.-majority-",children:[(0,a.jsx)(n.code,{children:'"majority"'}),"."]})]}),"\n",(0,a.jsxs)(n.p,{children:["If a transaction is not part of a ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/#std-label-sessions",children:"causally consistent session"}),", upon transaction commit with write concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#mongodb-writeconcern-writeconcern.-majority-",children:(0,a.jsx)(n.code,{children:'"majority"'})}),", the transaction operations are guaranteed to have read from a snapshot of majority-committed data."]}),"\n",(0,a.jsxs)(n.p,{children:["If a transaction is part of a ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/#std-label-sessions",children:"causally consistent session"}),", upon transaction commit with write concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#mongodb-writeconcern-writeconcern.-majority-",children:(0,a.jsx)(n.code,{children:'"majority"'})}),", the transaction operations are guaranteed to have read from a snapshot of majority-committed data that provides causal consistency with the operation immediately preceding the transaction start."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Availability:"})}),"\n",(0,a.jsxs)(n.p,{children:["Read concern ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-snapshot/#mongodb-readconcern-readconcern.-snapshot-",children:(0,a.jsx)(n.code,{children:'"snapshot"'})})," is available for"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"All read operations inside multi-document transactions with the read concern set at the transaction level."}),"\n",(0,a.jsxs)(n.li,{children:["The following methods outside of multi-document transactions:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/command/find/#mongodb-dbcommand-dbcmd.find",children:(0,a.jsx)(n.code,{children:"find"})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/command/aggregate/#mongodb-dbcommand-dbcmd.aggregate",children:(0,a.jsx)(n.code,{children:"aggregate"})})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/command/distinct/#mongodb-dbcommand-dbcmd.distinct",children:(0,a.jsx)(n.code,{children:"distinct"})})," (on unsharded collections)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["All other read operations prohibit ",(0,a.jsxs)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/read-concern-snapshot/#mongodb-readconcern-readconcern.-snapshot-",children:[(0,a.jsx)(n.code,{children:'"snapshot"'}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"write-concern",children:"Write Concern"}),"\n",(0,a.jsxs)(n.p,{children:["Write concern describes the level of acknowledgment requested from MongoDB for write operations to a standalone ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/program/mongod/#mongodb-binary-bin.mongod",children:(0,a.jsx)(n.code,{children:"mongod"})})," or to ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/replication/#std-label-replication",children:"Replica sets"})," or to ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/sharding/#std-label-sharding-background",children:"sharded clusters"}),". In sharded clusters, ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/program/mongos/#mongodb-binary-bin.mongos",children:(0,a.jsx)(n.code,{children:"mongos"})})," instances will pass the write concern on to the shards."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/",children:"Write Concern - MongoDB Manual"})}),"\n",(0,a.jsx)(n.h3,{id:"write-concern-levels",children:"Write Concern Levels"}),"\n",(0,a.jsx)(n.h4,{id:"majority-1",children:"majority"}),"\n",(0,a.jsxs)(n.p,{children:["Requests acknowledgment that write operations have been durably committed to the ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#std-label-calculating-majority-count",children:"calculated majority"})," of the data-bearing voting members (i.e. primary and secondaries with ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.votes",children:(0,a.jsx)(n.code,{children:"members[n].votes"})})," greater than ",(0,a.jsx)(n.code,{children:"0"}),"). ",(0,a.jsx)(n.code,{children:'{ w: "majority" }'})," is the default write concern for ",(0,a.jsx)(n.em,{children:"most"})," MongoDB deployments. See ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#std-label-wc-default-behavior",children:"Implicit Default Write Concern."})]}),"\n",(0,a.jsxs)(n.p,{children:["For example, consider a replica set with 3 voting members, Primary-Secondary-Secondary (P-S-S). For this replica set, ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/write-concern/#std-label-calculating-majority-count",children:"calculated majority"})," is two, and the write must propagate to the primary and one secondary to acknowledge the write concern to the client."]}),"\n",(0,a.jsx)(n.h4,{id:"number",children:(0,a.jsx)(n.code,{children:"<number>"})}),"\n",(0,a.jsxs)(n.p,{children:["Requests acknowledgment that the write operation has propagated to the specified number of ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/program/mongod/#mongodb-binary-bin.mongod",children:(0,a.jsx)(n.code,{children:"mongod"})})," instances."]}),"\n",(0,a.jsx)(n.h4,{id:"custom-write-concern-name",children:(0,a.jsx)(n.code,{children:"<custom write concern name>"})}),"\n",(0,a.jsxs)(n.p,{children:["Requests acknowledgment that the write operations have propagated to ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.tags",children:(0,a.jsx)(n.code,{children:"tagged"})})," members that satisfy the custom write concern defined in ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/replica-configuration/#mongodb-rsconf-rsconf.settings.getLastErrorModes",children:(0,a.jsx)(n.code,{children:"settings.getLastErrorModes"})}),". For an example, see ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/tutorial/configure-replica-set-tag-sets/#std-label-configure-custom-write-concern",children:"Custom Multi-Datacenter Write Concerns."})]}),"\n",(0,a.jsxs)(n.p,{children:["Data can be ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/replica-set-rollbacks/#std-label-rollback-avoid",children:"rolled back"})," if the custom write concern only requires acknowledgment from the primary and the primary steps down before the write operations have replicated to any of the secondaries."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var o=r(296540);const a={},c=o.createContext(a);function t(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);