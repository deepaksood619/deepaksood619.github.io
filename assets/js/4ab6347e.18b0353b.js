"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[46311],{169458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"python/python-intro/data-structure/tuples","title":"Tuples","description":"Properties","source":"@site/docs/python/python-intro/data-structure/tuples.md","sourceDirName":"python/python-intro/data-structure","slug":"/python/python-intro/data-structure/tuples","permalink":"/python/python-intro/data-structure/tuples","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/data-structure/tuples.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Set","permalink":"/python/python-intro/data-structure/set"},"next":{"title":"DateTime","permalink":"/python/python-intro/datetime"}}');var r=n(474848),s=n(28453);const i={},l="Tuples",o={},c=[{value:"Properties",id:"properties",level:2},{value:"Making a tuple",id:"making-a-tuple",level:2},{value:"Looping through a tuple",id:"looping-through-a-tuple",level:2},{value:"Sort a list of tuples using key",id:"sort-a-list-of-tuples-using-key",level:2},{value:"Converting list to tuples",id:"converting-list-to-tuples",level:2},{value:"Alternative to classes is Named Tuples",id:"alternative-to-classes-is-named-tuples",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"tuples",children:"Tuples"})}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Tuples are similar to lists, but the items in a tuple can't be modified"}),"\n",(0,r.jsx)(t.li,{children:"Tuples are hashable"}),"\n",(0,r.jsx)(t.li,{children:"Tuples are compound data type i.e. they can contain multiple data types like booleans, string, integers, etc."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"making-a-tuple",children:"Making a tuple"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"dimensions = (1920, 1080)"})}),"\n",(0,r.jsx)(t.h2,{id:"looping-through-a-tuple",children:"Looping through a tuple"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"for dimension in dimensions:\n    print(dimensions)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"sort-a-list-of-tuples-using-key",children:"Sort a list of tuples using key"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"sorted_list = sorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)], key=lambda x: x[1])\n\nfrom operator import itemgetter\ndata = [('abc', 121),('abc', 231),('abc', 148), ('abc',221)]\nsorted(data,key=itemgetter(1))\n[('abc', 121), ('abc', 148), ('abc', 221), ('abc', 231)]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Using itemgetter is more faster since the computation will be done on c side rather than through the use of lambda"}),"\n",(0,r.jsx)(t.h2,{id:"converting-list-to-tuples",children:"Converting list to tuples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"A = [1, 2, 3, 4]\nB = tuple(A)\nprint(B)\n# (1, 2, 3, 4)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"alternative-to-classes-is-named-tuples",children:"Alternative to classes is Named Tuples"}),"\n",(0,r.jsxs)(t.p,{children:["Any tuple-like class whose indexable elements are also accessible using named attributes (for example, ",(0,r.jsx)(t.a,{href:"http://library/time.html",children:"time.localtime()"})," returns a tuple-like object where theyearis accessible either with an index such ast[0]or with a named attribute liket.tm_year)."]}),"\n",(0,r.jsxs)(t.p,{children:["A named tuple can be a built-in type such as",(0,r.jsx)(t.a,{href:"http://library/time.html",children:"time.struct_time"}),", or it can be created with a regular class definition. A full featured named tuple can also be created with the factory function",(0,r.jsx)(t.a,{href:"http://library/collections.html",children:"collections.namedtuple()"}),". The latter approach automatically provides extra features such as a self-documenting representation likeEmployee(name='jones',title='programmer')."]}),"\n",(0,r.jsx)(t.p,{children:"Using NamedTuple is way shorter than defining a class manually"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from collections import namedtuple\n\nCar = namedtuple('Car', 'color mileage')\n\n# Our new \"Car\" class works as expected:\nmy_car = Car('red', 3812.4)\nmy_car.color\n'red'\n\nmy_car.mileage\n3812.4\n\n# We get a nice string repr for free:\nmy_car\nCar(color='red' , mileage=3812.4)\n\n# Like tuples, namedtuples are immutable:\nmy_car.color = 'blue'\n\n# AttributeError: \"can't set attribute\"\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(296540);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);