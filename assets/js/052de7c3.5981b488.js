"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[72962],{791374:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"databases/data-warehouses/bigquery/query-optimizations","title":"Query Optimizations","description":"1. Use SELECT Specific Columns","source":"@site/docs/databases/data-warehouses/bigquery/query-optimizations.md","sourceDirName":"databases/data-warehouses/bigquery","slug":"/databases/data-warehouses/bigquery/query-optimizations","permalink":"/databases/data-warehouses/bigquery/query-optimizations","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/data-warehouses/bigquery/query-optimizations.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1738071431000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Queries","permalink":"/databases/data-warehouses/bigquery/queries"},"next":{"title":"Slots","permalink":"/databases/data-warehouses/bigquery/slots"}}');var r=i(474848),t=i(28453);const a={},l="Query Optimizations",d={},o=[{value:"1. Use SELECT Specific Columns",id:"1-use-select-specific-columns",level:3},{value:"2. Leverage Partitioning",id:"2-leverage-partitioning",level:3},{value:"3. Use Clustering",id:"3-use-clustering",level:3},{value:"4. Filter Early in Queries",id:"4-filter-early-in-queries",level:3},{value:"5. Use WITH Clauses (Common Table Expressions)",id:"5-use-with-clauses-common-table-expressions",level:3},{value:"6. Leverage Query Caching",id:"6-leverage-query-caching",level:3},{value:"7. Use APPROX Functions",id:"7-use-approx-functions",level:3},{value:"8. Optimize JOINs",id:"8-optimize-joins",level:3},{value:"9. Use ARRAY Aggregation and UNNEST Appropriately",id:"9-use-array-aggregation-and-unnest-appropriately",level:3},{value:"10. Limit Data with Pre-Aggregation",id:"10-limit-data-with-pre-aggregation",level:3},{value:"11. Use TEMP Tables for Large Intermediate Results",id:"11-use-temp-tables-for-large-intermediate-results",level:3},{value:"12. Optimize Window Functions",id:"12-optimize-window-functions",level:3},{value:"13. Materialized Views",id:"13-materialized-views",level:3},{value:"14. Avoid Cross Joins",id:"14-avoid-cross-joins",level:3},{value:"15. Monitor Query Execution",id:"15-monitor-query-execution",level:3},{value:"Others",id:"others",level:2},{value:"Avoid Overuse of Nested Queries",id:"avoid-overuse-of-nested-queries",level:3},{value:"Leverage Table Sampling",id:"leverage-table-sampling",level:3},{value:"Use Query Parameters",id:"use-query-parameters",level:3},{value:"Use Native BigQuery Functions",id:"use-native-bigquery-functions",level:3},{value:"Streaming Inserts vs Batch Inserts",id:"streaming-inserts-vs-batch-inserts",level:3},{value:"Avoid Repeated Computations",id:"avoid-repeated-computations",level:3},{value:"Limit Result Sets",id:"limit-result-sets",level:3},{value:"Optimize Data Formats",id:"optimize-data-formats",level:3},{value:"Take Advantage of BI Engine",id:"take-advantage-of-bi-engine",level:3},{value:"Query Caching in Materialized Views",id:"query-caching-in-materialized-views",level:3}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"query-optimizations",children:"Query Optimizations"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Unoptimized\nWHERE order_date >= DATE_TRUNC(CURRENT_DATE('Asia/Kolkata'), MONTH) - INTERVAL 1 MONTH\n\n-- Optimized\nWHERE order_date >= DATE_TRUNC(DATE_SUB(CURRENT_DATE('Asia/Kolkata'), INTERVAL 1 MONTH), MONTH)  AND order_date <= CURRENT_DATE('Asia/Kolkata')\n"})}),"\n",(0,r.jsx)(s.h3,{id:"1-use-select-specific-columns",children:"1. Use SELECT Specific Columns"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Avoid ",(0,r.jsx)(s.code,{children:"SELECT *"})," as it scans all columns, including unnecessary ones. Instead, select only the columns you need."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT customer_id, total_amount FROM orders;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"2-leverage-partitioning",children:"2. Leverage Partitioning"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Partition tables by ",(0,r.jsx)(s.code,{children:"DATE"})," or ",(0,r.jsx)(s.code,{children:"TIMESTAMP"})," columns to minimize the data scanned."]}),"\n",(0,r.jsxs)(s.li,{children:["Query specific partitions using the ",(0,r.jsx)(s.code,{children:"WHERE"})," clause."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31';\n"})}),"\n",(0,r.jsx)(s.h3,{id:"3-use-clustering",children:"3. Use Clustering"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Cluster data based on frequently filtered columns (e.g., ",(0,r.jsx)(s.code,{children:"region"}),", ",(0,r.jsx)(s.code,{children:"product_id"}),"). This optimizes how data is stored within partitions, speeding up queries."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE sales (     region STRING,     product_id STRING,     revenue FLOAT64 ) PARTITION BY\nDATE(sale_date) CLUSTER BY region, product_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"4-filter-early-in-queries",children:"4. Filter Early in Queries"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Use filters as early as possible in your query to minimize the amount of data processed."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Less efficient SELECT * FROM orders WHERE total_amount > 100;  -- More efficient SELECT\norder_id, total_amount FROM orders WHERE total_amount > 100;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"5-use-with-clauses-common-table-expressions",children:"5. Use WITH Clauses (Common Table Expressions)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Break down complex queries into manageable, reusable blocks using ",(0,r.jsx)(s.code,{children:"WITH"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"WITH filtered_data AS (     SELECT customer_id, total_amount     FROM orders     WHERE order_date\n>= '2024-01-01' ) SELECT customer_id, SUM(total_amount) AS total_spent FROM filtered_data GROUP BY customer_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"6-leverage-query-caching",children:"6. Leverage Query Caching"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"BigQuery automatically caches query results. If the same query (without changes) is run within 24 hours, cached results are used, avoiding redundant computation."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"7-use-approx-functions",children:"7. Use APPROX Functions"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["For large datasets where approximate results are sufficient, use ",(0,r.jsx)(s.code,{children:"APPROX"})," functions like ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT"})," to reduce processing."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT APPROX_COUNT_DISTINCT(customer_id) AS unique_customers FROM orders;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"8-optimize-joins",children:"8. Optimize JOINs"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Reduce JOIN data size by filtering and aggregating before performing the JOIN."}),"\n",(0,r.jsx)(s.li,{children:"Ensure the smaller table is on the right-hand side of the JOIN for performance."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Filter smaller dataset first WITH filtered_customers AS (     SELECT customer_id, region    \nFROM customers     WHERE region = 'North America' ) SELECT o.order_id, c.customer_id FROM orders o JOIN filtered_customers c ON o.customer_id = c.customer_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"9-use-array-aggregation-and-unnest-appropriately",children:"9. Use ARRAY Aggregation and UNNEST Appropriately"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"ARRAY"})," types to combine multiple rows into a single row when applicable. When querying nested or repeated fields, use ",(0,r.jsx)(s.code,{children:"UNNEST"})," efficiently."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Efficiently flatten repeated fields SELECT customer_id, item FROM orders, UNNEST(items) AS item\n"})}),"\n",(0,r.jsx)(s.h3,{id:"10-limit-data-with-pre-aggregation",children:"10. Limit Data with Pre-Aggregation"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Pre-aggregate data using ",(0,r.jsx)(s.code,{children:"GROUP BY"})," or materialized views to reduce scanned rows in subsequent queries."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Pre-aggregate sales by region CREATE MATERIALIZED VIEW regional_sales AS SELECT region, SU\n(revenue) AS total_revenue FROM sales GROUP BY region;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"11-use-temp-tables-for-large-intermediate-results",children:"11. Use TEMP Tables for Large Intermediate Results"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Store intermediate results in temporary tables for reuse in multiple queries."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"CREATE TEMP TABLE temp_results AS SELECT customer_id, COUNT(order_id) AS order_count FROM orders\nGROUP BY customer_id;  SELECT * FROM temp_results WHERE order_count > 10;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"12-optimize-window-functions",children:"12. Optimize Window Functions"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Minimize the use of window functions (",(0,r.jsx)(s.code,{children:"OVER"})," clause) when not necessary. Use aggregate functions with ",(0,r.jsx)(s.code,{children:"GROUP BY"})," instead."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- Instead of this SELECT customer_id, SUM(total_amount) OVER(PARTITION BY customer_id) AS\ntotal_spent FROM orders;  -- Use this SELECT customer_id, SUM(total_amount) AS total_spent FROM orders GROUP BY customer_id;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"13-materialized-views",children:"13. Materialized Views"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Use materialized views for frequently run, repetitive queries. These precompute and store results, reducing query time."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"14-avoid-cross-joins",children:"14. Avoid Cross Joins"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Cross joins process the Cartesian product of two tables, scanning massive amounts of data. Avoid unless absolutely necessary."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"15-monitor-query-execution",children:"15. Monitor Query Execution"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Use the ",(0,r.jsx)(s.strong,{children:"Query Execution Details"})," tab in the BigQuery console to identify bottlenecks like high bytes processed or skewed slot utilization."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"others",children:"Others"}),"\n",(0,r.jsx)(s.h3,{id:"avoid-overuse-of-nested-queries",children:"Avoid Overuse of Nested Queries"}),"\n",(0,r.jsx)(s.p,{children:"Flatten nested queries into simpler steps where possible. Complex subqueries can slow down execution."}),"\n",(0,r.jsx)(s.h3,{id:"leverage-table-sampling",children:"Leverage Table Sampling"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.code,{children:"TABLESAMPLE"})," for debugging or testing on large datasets instead of processing the full table."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"SELECT * FROM my_table TABLESAMPLE SYSTEM (10 PERCENT);\n"})}),"\n",(0,r.jsx)(s.h3,{id:"use-query-parameters",children:"Use Query Parameters"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Use parameterized queries instead of hardcoding values. This improves performance and allows caching."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"DECLARE start_date DATE; DECLARE end_date DATE;  SET start_date = '2024-01-01'; SET end_date = '2024-01-31';  SELECT * FROM orders WHERE order_date BETWEEN start_date AND end_date;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"use-native-bigquery-functions",children:"Use Native BigQuery Functions"}),"\n",(0,r.jsxs)(s.p,{children:["Use built-in BigQuery functions like ",(0,r.jsx)(s.code,{children:"STRING_AGG"}),", ",(0,r.jsx)(s.code,{children:"ARRAY_AGG"}),", etc., instead of writing custom logic. These are highly optimized."]}),"\n",(0,r.jsx)(s.h3,{id:"streaming-inserts-vs-batch-inserts",children:"Streaming Inserts vs Batch Inserts"}),"\n",(0,r.jsx)(s.p,{children:"If you use real-time inserts, ensure the streaming buffer is not overutilized. Batch inserts with larger data sizes can be more cost-effective."}),"\n",(0,r.jsx)(s.h3,{id:"avoid-repeated-computations",children:"Avoid Repeated Computations"}),"\n",(0,r.jsx)(s.p,{children:"Compute values once and reuse them. For example, store common calculations in temporary tables or variables."}),"\n",(0,r.jsx)(s.h3,{id:"limit-result-sets",children:"Limit Result Sets"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.code,{children:"LIMIT"})," when you don\u2019t need full datasets, especially for exploratory queries."]}),"\n",(0,r.jsx)(s.h3,{id:"optimize-data-formats",children:"Optimize Data Formats"}),"\n",(0,r.jsx)(s.p,{children:"Prefer efficient data formats like Avro or Parquet over CSV, as they are compressed and optimized for analytical workloads."}),"\n",(0,r.jsx)(s.h3,{id:"take-advantage-of-bi-engine",children:"Take Advantage of BI Engine"}),"\n",(0,r.jsxs)(s.p,{children:["If using BigQuery for dashboards, enable ",(0,r.jsx)(s.strong,{children:"BigQuery BI Engine"})," for faster response times."]}),"\n",(0,r.jsx)(s.h3,{id:"query-caching-in-materialized-views",children:"Query Caching in Materialized Views"}),"\n",(0,r.jsx)(s.p,{children:"Beyond caching, materialized views ensure precomputed results for large or repetitive queries."})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>l});var n=i(296540);const r={},t=n.createContext(r);function a(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);