"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[17646],{676161:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"technologies/brokers/rabbitmq","title":"RabbitMQ","description":"The Polyglot Broker (Distributed Message Broker)","source":"@site/docs/technologies/brokers/rabbitmq.md","sourceDirName":"technologies/brokers","slug":"/technologies/brokers/rabbitmq","permalink":"/technologies/brokers/rabbitmq","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/technologies/brokers/rabbitmq.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1717497759000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Others","permalink":"/technologies/brokers/others"},"next":{"title":"sMAP","permalink":"/technologies/brokers/smap"}}');var r=i(474848),t=i(28453);const o={},a="RabbitMQ",l={},d=[{value:"HA",id:"ha",level:2},{value:"Cluster Formation and Communication",id:"cluster-formation-and-communication",level:3},{value:"1. Node Initialization",id:"1-node-initialization",level:4},{value:"2. Joining the Cluster",id:"2-joining-the-cluster",level:4},{value:"Mirroring Queues",id:"mirroring-queues",level:3},{value:"1. HA Policy",id:"1-ha-policy",level:4},{value:"2. Queue Mirroring",id:"2-queue-mirroring",level:4},{value:"Message Handling",id:"message-handling",level:3},{value:"1. Publishing Messages",id:"1-publishing-messages",level:4},{value:"2. Consuming Messages",id:"2-consuming-messages",level:4},{value:"Failover Mechanism",id:"failover-mechanism",level:3},{value:"1. Node Failure",id:"1-node-failure",level:4},{value:"2. Recovery",id:"2-recovery",level:4},{value:"Load Balancing",id:"load-balancing",level:3},{value:"1. HAProxy Configuration",id:"1-haproxy-configuration",level:4},{value:"Monitoring and Management",id:"monitoring-and-management",level:3},{value:"1. RabbitMQ Management Plugin",id:"1-rabbitmq-management-plugin",level:4},{value:"2. Alerts and Monitoring Tools",id:"2-alerts-and-monitoring-tools",level:4},{value:"Diagram Overview",id:"diagram-overview",level:3},{value:"Links",id:"links",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rabbitmq",children:"RabbitMQ"})}),"\n",(0,r.jsx)(n.p,{children:"The Polyglot Broker (Distributed Message Broker)"}),"\n",(0,r.jsx)(n.p,{children:"All three protocols are supported by RabbitMQ broker, making it an ideal choice for interoperability between applications."}),"\n",(0,r.jsx)(n.h2,{id:"ha",children:"HA"}),"\n",(0,r.jsx)(n.p,{children:"RabbitMQ with high availability (HA) works behind the scenes by mirroring queues across multiple nodes, ensuring that messages are always available even if some nodes fail. Here\u2019s an in-depth look at how this setup operates:"}),"\n",(0,r.jsx)(n.h3,{id:"cluster-formation-and-communication",children:"Cluster Formation and Communication"}),"\n",(0,r.jsx)(n.h4,{id:"1-node-initialization",children:"1. Node Initialization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When RabbitMQ starts, each node in the cluster initializes and starts communicating with other nodes to form the cluster."}),"\n",(0,r.jsxs)(n.li,{children:["Nodes use the ",(0,r.jsx)(n.code,{children:"Erlang"})," distributed system to communicate. They exchange information about the cluster state, such as which nodes are available and which queues are hosted on which nodes."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-joining-the-cluster",children:"2. Joining the Cluster"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Secondary nodes (",(0,r.jsx)(n.code,{children:"rabbit@node2"}),", ",(0,r.jsx)(n.code,{children:"rabbit@node3"}),", etc.) join the cluster by stopping their application, resetting their state, and then joining the cluster initiated by the master node (",(0,r.jsx)(n.code,{children:"rabbit@node1"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"After joining, they start their application again and begin participating in the cluster."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mirroring-queues",children:"Mirroring Queues"}),"\n",(0,r.jsx)(n.h4,{id:"1-ha-policy",children:"1. HA Policy"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The HA policy set on the master node dictates how queues are mirrored. For example, ",(0,r.jsx)(n.code,{children:'rabbitmqctl set_policy ha-all ".*" \'{"ha-mode":"all"}\''})," ensures all queues are mirrored across all nodes in the cluster."]}),"\n",(0,r.jsx)(n.li,{children:"When a queue is created, it\u2019s automatically mirrored to all nodes based on this policy."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-queue-mirroring",children:"2. Queue Mirroring"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each queue has one primary node where it was first declared. This node is responsible for managing the queue."}),"\n",(0,r.jsx)(n.li,{children:"Mirrored nodes maintain copies of the queue\u2019s state. They replicate all operations (such as publishing, consuming, acknowledging messages) performed on the primary queue."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"message-handling",children:"Message Handling"}),"\n",(0,r.jsx)(n.h4,{id:"1-publishing-messages",children:"1. Publishing Messages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When a message is published to a queue, the primary node handles the message and replicates it to all mirrored nodes."}),"\n",(0,r.jsx)(n.li,{children:"This replication ensures that all nodes have the same state of the queue."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-consuming-messages",children:"2. Consuming Messages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consumers can connect to any node in the cluster. If they connect to a mirrored node, the mirrored node forwards the request to the primary node."}),"\n",(0,r.jsx)(n.li,{children:"The primary node then delivers the message to the consumer and informs all mirrored nodes to delete the message once it\u2019s acknowledged by the consumer."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"failover-mechanism",children:"Failover Mechanism"}),"\n",(0,r.jsx)(n.h4,{id:"1-node-failure",children:"1. Node Failure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If a primary node fails, one of the mirrored nodes is automatically promoted to be the new primary."}),"\n",(0,r.jsx)(n.li,{children:"This new primary continues handling messages and replicating the state to other nodes, ensuring no interruption in service."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-recovery",children:"2. Recovery"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When the failed node comes back online, it rejoins the cluster and resynchronizes its state with the current primary."}),"\n",(0,r.jsx)(n.li,{children:"This synchronization process ensures that the recovered node is up-to-date and can take over if needed in the future."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"load-balancing",children:"Load Balancing"}),"\n",(0,r.jsx)(n.h4,{id:"1-haproxy-configuration",children:"1. HAProxy Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HAProxy (or another load balancer) is used to distribute client connections across all available RabbitMQ nodes."}),"\n",(0,r.jsx)(n.li,{children:"This configuration ensures that even if one node becomes heavily loaded or fails, other nodes can handle the incoming traffic, providing both load balancing and fault tolerance."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"monitoring-and-management",children:"Monitoring and Management"}),"\n",(0,r.jsx)(n.h4,{id:"1-rabbitmq-management-plugin",children:"1. RabbitMQ Management Plugin"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The management plugin provides a web-based UI (",(0,r.jsx)(n.code,{children:"http://<node_ip>:15672"}),") where administrators can monitor the cluster\u2019s health, queues, exchanges, connections, and node status."]}),"\n",(0,r.jsx)(n.li,{children:"It also provides tools for managing RabbitMQ configurations, such as adding or removing nodes, setting policies, and viewing logs."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-alerts-and-monitoring-tools",children:"2. Alerts and Monitoring Tools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tools like Prometheus and Grafana can be integrated with RabbitMQ to provide real-time metrics and alerts."}),"\n",(0,r.jsx)(n.li,{children:"These tools help in proactively identifying issues and ensuring the cluster operates smoothly."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"diagram-overview",children:"Diagram Overview"}),"\n",(0,r.jsx)(n.p,{children:"Here\u2019s a simplified overview of how RabbitMQ HA works:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Client ----\x3e HAProxy ----\x3e Node1 ----\x3e | Queue1 Primary\n       |         |      ----\x3e Node2 ----\x3e | Queue1 Mirror\n       |         |      ----\x3e Node3 ----\x3e | Queue1 Mirror\n       |         |\n       |         ----\x3e Node1 ----\x3e | Queue2 Primary\n       |                    ----\x3e Node2 ----\x3e | Queue2 Mirror\n       |                    ----\x3e Node3 ----\x3e | Queue2 Mirror\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clients"})," connect to RabbitMQ through HAProxy."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HAProxy"})," distributes connections to different RabbitMQ nodes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Nodes"})," host queues, with one node being the primary and others mirroring the queue."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Messages"})," are replicated from primary to mirrored nodes to ensure high availability."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This setup ensures that RabbitMQ remains available and continues to function correctly even if some nodes fail, providing a robust and fault-tolerant messaging system."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://medium.com/bina-nusantara-it-division/setting-up-multicluster-rabbitmq-instances-on-linux-714e90f61770",children:"Setting Up A Multinode RabbitMQ Cluster On Linux | by Agustinus Theodorus | Bina Nusantara IT Division | Medium"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.rabbitmq.com/docs/quorum-queues",children:"Quorum Queues | RabbitMQ"})}),"\n",(0,r.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=Cie5v59mrTg&ab_channel=HusseinNasser",children:"RabbitMQ Crash Course - YouTube"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=FzqjtU2x6YA&ab_channel=ThatDevOpsGuy",children:"RabbitMQ : How to setup a RabbitMQ cluster - for beginners - YouTube"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=nxQrpLfX3rs",children:"Learnings from Running 1000s of Production RabbitMQ Clusters \u2022 Lovisa Johansson \u2022 RabbitMQ Summit - YouTube"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=fNbdgWe5Tbs&ab_channel=GOTOConferences",children:"Idiomatic RabbitMQ \u2022 Gavin M. Roy \u2022 RabbitMQ Summit - YouTube"})}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(296540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);