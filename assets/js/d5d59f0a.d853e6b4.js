"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[40580],{731961:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=t(785893),o=t(511151);const r={},l="Sweep Line Algorithm",s={id:"algorithms/general/sweep-line-algorithm",title:"Sweep Line Algorithm",description:"Orthogonal Line Segment Intersection",source:"@site/docs/algorithms/general/sweep-line-algorithm.md",sourceDirName:"algorithms/general",slug:"/algorithms/general/sweep-line-algorithm",permalink:"/algorithms/general/sweep-line-algorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/sweep-line-algorithm.md",tags:[],version:"current",lastUpdatedAt:1678191863,formattedLastUpdatedAt:"Mar 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reverse Polish Notation / Postfix Notation",permalink:"/algorithms/general/reverse-polish-notation-postfix-notation"},next:{title:"Two-Stack Algorithm",permalink:"/algorithms/general/two-stack-algorithm"}},a={},c=[{value:"Orthogonal Line Segment Intersection",id:"orthogonal-line-segment-intersection",level:2},{value:"Sweep-line algorithm (Sweep vertical line from left to right)",id:"sweep-line-algorithm-sweep-vertical-line-from-left-to-right",level:2},{value:"Sweep-line analysis",id:"sweep-line-analysis",level:2}];function h(e){const n={h1:"h1",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"sweep-line-algorithm",children:"Sweep Line Algorithm"}),"\n",(0,i.jsx)(n.h2,{id:"orthogonal-line-segment-intersection",children:"Orthogonal Line Segment Intersection"}),"\n",(0,i.jsx)(n.p,{children:"Given N horizontal and vertical line segments, find all intersections"}),"\n",(0,i.jsx)(n.p,{children:"Na\xefve and brute-force algorithm - Check all pairs of line segments for intersection."}),"\n",(0,i.jsx)(n.p,{children:"Non degeneracy Assumption - All x- and y- coordinates are distinct"}),"\n",(0,i.jsx)(n.h2,{id:"sweep-line-algorithm-sweep-vertical-line-from-left-to-right",children:"Sweep-line algorithm (Sweep vertical line from left to right)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"x - coordinates define events."}),"\n",(0,i.jsx)(n.li,{children:"h-segment (left endpoint): insert y-coordinate into BST"}),"\n",(0,i.jsx)(n.li,{children:"h-segment (right endpoint): remove y-coordinate from BST"}),"\n",(0,i.jsx)(n.li,{children:"v-segment: 1 d range search for interval of y-endpoints"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image",src:t(47736).Z+"",width:"1100",height:"491"})}),"\n",(0,i.jsx)(n.h2,{id:"sweep-line-analysis",children:"Sweep-line analysis"}),"\n",(0,i.jsx)(n.p,{children:"Proposition: The sweep-line algorithm takes time proportional to N log N + R to find all R intersections among N orthogonal line segments"}),"\n",(0,i.jsx)(n.p,{children:"Bottom line: Sweep line reduces 2d orthogonal line segment intersection search to 1d range search"})]})}function g(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},47736:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Sweep-Line-Algorithm-image1-ad1631e3a65a7ab90a4e435aae5c8cc7.jpg"},511151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>l});var i=t(667294);const o={},r=i.createContext(o);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);