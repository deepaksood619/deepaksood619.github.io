"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[91957],{276583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"algorithms/general/n-queens-problem","title":"N Queens Problem","description":"The N Queen is the problem of placing N chess queens on an N\xd7N chessboard so that no two queens attack each other. For example, following is a solution for 4 Queen problem.","source":"@site/docs/algorithms/general/n-queens-problem.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/n-queens-problem","permalink":"/algorithms/general/n-queens-problem","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/n-queens-problem.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707138374000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"List of Algorithms","permalink":"/algorithms/general/list-of-algorithms"},"next":{"title":"Orthogonal rectangle intersection search","permalink":"/algorithms/general/orthogonal-rectangle-intersection-search"}}');var r=t(474848),s=t(28453);const o={},l="N Queens Problem",a={},c=[{value:"Question Types",id:"question-types",level:2},{value:"Naive Algorithm",id:"naive-algorithm",level:2},{value:"Backtracking Algorithm",id:"backtracking-algorithm",level:2},{value:"Recursion tree",id:"recursion-tree",level:3},{value:"Time Complexity - Exponential O(n^n / n!)",id:"time-complexity---exponential-onn--n",level:2},{value:"References",id:"references",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"n-queens-problem",children:"N Queens Problem"})}),"\n",(0,r.jsx)(n.p,{children:"The N Queen is the problem of placing N chess queens on an N\xd7N chessboard so that no two queens attack each other. For example, following is a solution for 4 Queen problem."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:t(289866).A+"",width:"960",height:"720"})}),"\n",(0,r.jsx)(n.h2,{id:"question-types",children:"Question Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Find any placement of queens that do not attack each other"}),"\n",(0,r.jsx)(n.li,{children:"Find all placement of queens on the board"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:t(365589).A+"",width:"530",height:"267"})}),"\n",(0,r.jsx)(n.h2,{id:"naive-algorithm",children:"Naive Algorithm"}),"\n",(0,r.jsx)(n.p,{children:"Generate all possible configurations of queens on board and print a configuration that satisfies the given constraints."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"while there are untried conflagrations\n{\n    generate the next configuration\n    if queens don't attack in this configuration then\n    {\n        print this configuration;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"backtracking-algorithm",children:"Backtracking Algorithm"}),"\n",(0,r.jsx)(n.p,{children:"The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes then we backtrack and return false."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start in the leftmost column"}),"\n",(0,r.jsx)(n.li,{children:"If all queens are placed return true"}),"\n",(0,r.jsxs)(n.li,{children:["Try all rows in the current column. Do following for every tried row.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the queen can be placed safely in this row then mark this [row, column] as part of the solution and recursively check if placing queen here leads to a solution."}),"\n",(0,r.jsx)(n.li,{children:"If placing queen in [row, column] leads to a solution then return true."}),"\n",(0,r.jsx)(n.li,{children:"If placing queen doesn't lead to a solution then umark this [row, column] (Backtrack) and go to step (a) to try other rows."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"If all rows have been tried and nothing worked, return false to trigger backtracking."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recursion-tree",children:"Recursion tree"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For a board of 4x4, recursion will be 4 level deep"}),"\n",(0,r.jsx)(n.li,{children:"At 0th level of recursion, we will place 0th queen on 0th row"}),"\n",(0,r.jsx)(n.li,{children:"At 1st level of recursion, we will place 1st queen on 1st row such that she does not attack the 0th queen"}),"\n",(0,r.jsx)(n.li,{children:"At 2nd level of recursion, we will place 2nd queen on 2nd row such that she does not attack the 0th queen and 1st queen."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:t(461272).A+"",width:"730",height:"400"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:t(8011).A+"",width:"712",height:"403"})}),"\n",(0,r.jsx)(n.h2,{id:"time-complexity---exponential-onn--n",children:"Time Complexity - Exponential O(n^n / n!)"}),"\n",(0,r.jsx)(n.p,{children:"Space Complexity - n*n"}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Eight_queens_puzzle",children:"https://en.wikipedia.org/wiki/Eight_queens_puzzle"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=xouin83ebxE",children:"N Queen Problem Using Backtracking Algorithm"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},289866:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/N-Queens-Problem-image1-dba59fd1c19ed413c46d21947ab01867.jpg"},365589:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/N-Queens-Problem-image2-2affe8b67a325daae82ea48da311bc70.jpg"},461272:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/N-Queens-Problem-image3-b3ac52fe4662d9ddb9a9788f54fcd6da.jpg"},8011:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/N-Queens-Problem-image4-080fd764ef1c9a55bf79a69cc9e7179c.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(296540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);