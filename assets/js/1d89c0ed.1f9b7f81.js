"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[47502],{747443:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=t(785893),s=t(511151);const o={},d="Stored Procedure",a={id:"languages/sql/stored-procedure",title:"Stored Procedure",description:"A stored procedure (also termed proc, storp, sproc, StoPro, StoredProc, StoreProc, sp, or SP) is a subroutine available to applications that access a relational database management system(RDBMS). Such procedures are stored in the database data dictionary.",source:"@site/docs/languages/sql/stored-procedure.md",sourceDirName:"languages/sql",slug:"/languages/sql/stored-procedure",permalink:"/languages/sql/stored-procedure",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/sql/stored-procedure.md",tags:[],version:"current",lastUpdatedAt:1733071902,formattedLastUpdatedAt:"Dec 1, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Views",permalink:"/languages/sql/sql-views"},next:{title:"Types",permalink:"/languages/sql/types"}},i={},l=[{value:"Advantages of using stored procedures",id:"advantages-of-using-stored-procedures",level:2},{value:"Types of stored procedures",id:"types-of-stored-procedures",level:2},{value:"Differences",id:"differences",level:2},{value:"Stored Procedures",id:"stored-procedures",level:3},{value:"Functions",id:"functions",level:3},{value:"Access",id:"access",level:2},{value:"Queries",id:"queries",level:2},{value:"Stored Procedure - CopyUsersLogInBatches",id:"stored-procedure---copyusersloginbatches",level:3},{value:"Stored Procedure - DeleteUsersLogInBatches",id:"stored-procedure---deleteusersloginbatches",level:3},{value:"Stored Procedure with Progress and Total Rows Deleted - DeleteOldSessionsInBatches",id:"stored-procedure-with-progress-and-total-rows-deleted---deleteoldsessionsinbatches",level:3},{value:"Stored Procedure - DeleteContentRevisionsEfficiently",id:"stored-procedure---deletecontentrevisionsefficiently",level:3},{value:"Calling a Stored Procedure",id:"calling-a-stored-procedure",level:3},{value:"Stored Procedure with Progress Output",id:"stored-procedure-with-progress-output",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"stored-procedure",children:"Stored Procedure"}),"\n",(0,n.jsxs)(r.p,{children:["A ",(0,n.jsx)(r.strong,{children:"stored procedure"})," (also termed ",(0,n.jsx)(r.strong,{children:"proc, storp, sproc, StoPro, StoredProc, StoreProc, sp, or SP"}),") is a ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Subroutine",children:"subroutine"})," available to applications that access a ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Relational_database_management_system",children:"relational database management system"}),"(RDBMS). Such procedures are stored in the database ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Data_dictionary",children:"data dictionary"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Uses for stored procedures include ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Data_validation",children:"data-validation"}),"(integrated into the database) or ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Access_control",children:"access-control"})," mechanisms. Furthermore, stored procedures can consolidate and centralize logic that was originally implemented in applications. To save time and memory, extensive or complex processing that requires execution of several ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/SQL",children:"SQL"})," statements can be saved into stored procedures, and all applications call the procedures. One can use nested stored procedures by executing one stored procedure from within another."]}),"\n",(0,n.jsxs)(r.p,{children:["Stored procedures may return ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Result_set",children:"result sets"}),", i.e., the results of aSELECTstatement. Such result sets can be processed using ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Cursor_(databases)",children:"cursors"}),", by other stored procedures, by associating a result-set locator, or by applications. Stored procedures may also contain declared variables for processing data and cursors that allow it to loop through multiple rows in a table. Stored-procedure flow-control statements typically includeIF,WHILE,LOOP,REPEAT, andCASEstatements, and more. Stored procedures can receive variables, return results or modify variables and return them, depending on how and where the variable is declared."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"CREATE PROCEDURE procedure_name\nAS\nsql_statement\nGO;\n\nEXEC procedure_name;\n"})}),"\n",(0,n.jsx)(r.h2,{id:"advantages-of-using-stored-procedures",children:"Advantages of using stored procedures"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"A stored procedure allows modular programming -"})," You can create the procedure once, store it in the database, and call it any number of times in your program."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"A stored procedure allows faster execution -"})," If the operation requires a large amount of SQL code that is performed repetitively, stored procedures can be faster. They are parsed and optimized when they are first executed, and a compiled version of the stored procedure remains in a memory cache for later use. This means the stored procedure does not need to be reparsed and reoptimized with each use, resulting in much faster execution times."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"A stored procedure can reduce network traffic -"})," An operation requiring hundreds of lines of Transact-SQL code can be performed through a single statement that executes the code in a procedure, rather than by sending hundreds of lines of code over the network."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Stored procedures provide better security to your data -"})," Users can be granted permission to execute a stored procedure even if they do not have permission to execute the procedure's statements directly."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"types-of-stored-procedures",children:"Types of stored procedures"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"System-stored procedures"})," are stored in the master database and these start with asp_prefix. These procedures can be used to perform a variety of tasks to support SQL Server functions for external application calls in the system tables","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Example: sp_helptext [StoredProcedure_Name]"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"User-defined stored procedures"})," are usually stored in a user database and are typically designed to complete the tasks in the user database. While coding these procedures don't use the ",(0,n.jsx)(r.code,{children:"sp_prefix"})," because if we use the ",(0,n.jsx)(r.code,{children:"sp_prefix"})," first, it will check the master database, and then it comes to user defined database."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Extended stored procedures"})," are the procedures that call functions from DLL files. Nowadays, extended stored procedures are deprecated for the reason it would be better to avoid using extended stored procedures."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Stored_procedure",children:"https://en.wikipedia.org/wiki/Stored_procedure"})}),"\n",(0,n.jsx)(r.h2,{id:"differences",children:"Differences"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.strong,{children:"stored routine"})," is either a procedure or a function."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.strong,{children:"procedure"})," is invoked using a CALL statement and can only pass back values using output variables."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.strong,{children:"function"})," can be called from inside a statement just like any other function and can return a scalar value."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"stored-procedures",children:"Stored Procedures"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Procedure can return zero or n values"}),"\n",(0,n.jsx)(r.li,{children:"Procedures can have input/output parameters for it"}),"\n",(0,n.jsx)(r.li,{children:"Procedure allows select as well as DML statement in it"}),"\n",(0,n.jsx)(r.li,{children:"A stored procedure may have arguments that areIN,OUT, orINOUT."}),"\n",(0,n.jsx)(r.li,{children:"A procedure can't be called from DML statements."}),"\n",(0,n.jsx)(r.li,{children:"Procedures are parsed and compiled."}),"\n",(0,n.jsx)(r.li,{children:"Procedures are mainly used to process the tasks."}),"\n",(0,n.jsx)(r.li,{children:"Procedure doesn't return value.procedure can return more than one values using OUT parameter"}),"\n",(0,n.jsx)(r.li,{children:"They are stored in compiled format in the database where as Functions are compiled and executed run time."}),"\n",(0,n.jsx)(r.li,{children:"A procedure is used to execute business logic."}),"\n",(0,n.jsx)(r.li,{children:"Stored procedure returns always integer value by default zero."}),"\n",(0,n.jsx)(r.li,{children:"Stored procedure has the security and reduces the network traffic."}),"\n",(0,n.jsx)(r.li,{children:"It create variable table and but can't return variable table."}),"\n",(0,n.jsx)(r.li,{children:"Print command used."}),"\n",(0,n.jsx)(r.li,{children:"It execute Dynamic SQL."}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"functions",children:"Functions"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"function can return one value which is mandatory"}),"\n",(0,n.jsx)(r.li,{children:"functions can have only input parameters"}),"\n",(0,n.jsx)(r.li,{children:"function allows only select statement in it"}),"\n",(0,n.jsx)(r.li,{children:"Functions may only haveINarguments."}),"\n",(0,n.jsx)(r.li,{children:"DML operations performs in functions."}),"\n",(0,n.jsx)(r.li,{children:"functions always return a single value to the caller."}),"\n",(0,n.jsx)(r.li,{children:"Functions are mainly used to compute values."}),"\n",(0,n.jsx)(r.li,{children:"A function is used to compute a value."}),"\n",(0,n.jsx)(r.li,{children:"It returns type could be scalar or table or table values."}),"\n",(0,n.jsx)(r.li,{children:"It create variable table and can return variable table."}),"\n",(0,n.jsx)(r.li,{children:"Print command cant't use."}),"\n",(0,n.jsx)(r.li,{children:"It can't execute dynamic sql."}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://www.mysqltutorial.org/mysql-error-handling-in-stored-procedures",children:"https://www.mysqltutorial.org/mysql-error-handling-in-stored-procedures"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://stackoverflow.com/questions/2680745/whats-the-differences-between-stored-procedures-functions-and-routines",children:"mysql - What's the differences between stored procedures, functions and routines? - Stack Overflow"})}),"\n",(0,n.jsx)(r.h2,{id:"access",children:"Access"}),"\n",(0,n.jsx)(r.p,{children:'ForMySQL 8, connect your database viaWorkbench, go toAdministration -> User and Privileges, and select the user account you want to modify, then switch to "Administrative Roles", tick "SELECT" on right panel (Global Privileges), Click \'Apply\' and done.'}),"\n",(0,n.jsx)(r.h2,{id:"queries",children:"Queries"}),"\n",(0,n.jsx)(r.h3,{id:"stored-procedure---copyusersloginbatches",children:"Stored Procedure - CopyUsersLogInBatches"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"DELIMITER $$\n\nCREATE PROCEDURE CopyUsersLogInBatches()\nBEGIN\n    DECLARE batch_size INT DEFAULT 1000000;\n    DECLARE start_id INT;\n    DECLARE max_id INT;\n\n    -- Initialize start_id and max_id\n    SELECT MIN(id) INTO start_id FROM users_log;\n    SELECT MAX(id) INTO max_id FROM users_log;\n\n    -- Loop to copy data in batches\n    WHILE start_id <= max_id DO\n        INSERT INTO users_log_backup_27_nov_2024\n        SELECT *\n        FROM users_log\n        WHERE id BETWEEN start_id AND start_id + batch_size - 1;\n\n        -- Update the start_id for the next batch\n        SET start_id = start_id + batch_size;\n    END WHILE;\nEND$$\n\nDELIMITER ;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"stored-procedure---deleteusersloginbatches",children:"Stored Procedure - DeleteUsersLogInBatches"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"DELIMITER $$\n\nCREATE PROCEDURE DeleteUsersLogInBatches()\nBEGIN\n    DECLARE batch_size INT DEFAULT 100000; -- Number of rows to delete in each batch\n    DECLARE start_id INT DEFAULT 0; -- Starting ID for the first batch\n    DECLARE end_id INT DEFAULT 14900000; -- Target maximum ID for deletion\n\n    -- Loop to delete data in batches\n    WHILE start_id < end_id DO\n        -- Delete rows in the current batch\n        DELETE FROM users_log\n        WHERE id BETWEEN start_id AND start_id + batch_size - 1;\n\n        -- Update the start_id for the next batch\n        SET start_id = start_id + batch_size;\n    END WHILE;\nEND$$\n\nDELIMITER ;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"stored-procedure-with-progress-and-total-rows-deleted---deleteoldsessionsinbatches",children:"Stored Procedure with Progress and Total Rows Deleted - DeleteOldSessionsInBatches"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"DELIMITER $$\n\nCREATE PROCEDURE DeleteOldSessionsInBatches()\nBEGIN\n    DECLARE batch_size INT DEFAULT 10000; -- Number of rows to delete in each batch\n    DECLARE rows_deleted INT DEFAULT 0; -- Counter for rows deleted in each iteration\n    DECLARE total_deleted INT DEFAULT 0; -- Total rows deleted across all batches\n\n    -- Loop to delete data in batches\n    REPEAT\n        -- Delete a batch of rows\n        DELETE FROM entrancecorner.django_session\n        WHERE expire_date BETWEEN NOW() - INTERVAL 180 DAY AND NOW() - INTERVAL 165 DAY\n        LIMIT batch_size;\n\n        -- Get the number of rows deleted in this batch\n        SET rows_deleted = ROW_COUNT();\n\n        -- Update the total count of rows deleted\n        SET total_deleted = total_deleted + rows_deleted;\n\n        -- Output progress message\n        SELECT CONCAT('Deleted ', rows_deleted, ' rows in this batch. Total so far: ', total_deleted) AS Progress;\n\n    UNTIL rows_deleted = 0 -- Exit when no more rows match the criteria\n    END REPEAT;\n\n    -- Final message with total rows deleted\n    SELECT CONCAT('Deletion process completed. Total rows deleted: ', total_deleted) AS FinalMessage;\nEND$$\n\nDELIMITER ;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"stored-procedure---deletecontentrevisionsefficiently",children:"Stored Procedure - DeleteContentRevisionsEfficiently"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"DELIMITER $$\n\nCREATE PROCEDURE DeleteContentRevisionsEfficiently()\nBEGIN\n    DECLARE current_model_name VARCHAR(255); -- Placeholder for the current model_name\n    DECLARE finished INT DEFAULT 0;         -- Loop termination flag\n    DECLARE rows_deleted INT DEFAULT 0;     -- Counter for rows deleted\n    DECLARE total_deleted INT DEFAULT 0;    -- Total rows deleted\n\n    -- Cursor to iterate over distinct model_name values\n    DECLARE model_cursor CURSOR FOR\n    SELECT DISTINCT model_name FROM content_revisions;\n\n    -- Handler for the end of the cursor\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;\n\n    -- Open the cursor\n    OPEN model_cursor;\n\n    -- Loop through each model_name\n    fetch_loop: LOOP\n        FETCH model_cursor INTO current_model_name;\n\n        -- Exit loop if no more data\n        IF finished = 1 THEN\n            LEAVE fetch_loop;\n        END IF;\n\n        -- Print progress: start processing current model_name\n        SELECT CONCAT('Processing model_name: ', current_model_name) AS ProgressMessage;\n\n        -- Delete rows for the current model_name with ranking logic\n        DELETE cr\n        FROM content_revisions cr\n        JOIN (\n            SELECT id\n            FROM (\n                SELECT id,\n                       ROW_NUMBER() OVER (PARTITION BY model_id ORDER BY created DESC, revision_no DESC) AS rn\n                FROM content_revisions\n                WHERE model_name = current_model_name\n            ) ranked_revisions\n            WHERE rn > 5\n        ) to_delete\n        ON cr.id = to_delete.id;\n\n        -- Get the number of rows deleted for the current group\n        SET rows_deleted = ROW_COUNT();\n\n        -- Update the total count\n        SET total_deleted = total_deleted + rows_deleted;\n\n        -- Print progress: rows deleted for the current model_name\n        SELECT CONCAT('Deleted ', rows_deleted, ' rows for model_name: ', current_model_name, '. Total deleted so far: ', total_deleted) AS ProgressMessage;\n    END LOOP;\n\n    -- Close the cursor\n    CLOSE model_cursor;\n\n    -- Final message\n    SELECT CONCAT('Deletion process completed. Total rows deleted: ', total_deleted) AS FinalMessage;\nEND$$\n\nDELIMITER ;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"calling-a-stored-procedure",children:"Calling a Stored Procedure"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"call DeleteUsersLogInBatches();\n\n-- drop stored procedure\ndrop procedure DeleteUsersLogInBatches;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"stored-procedure-with-progress-output",children:"Stored Procedure with Progress Output"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"DELIMITER $$\n\nCREATE PROCEDURE DeleteUsersLogInBatches()\nBEGIN\n    DECLARE batch_size INT DEFAULT 1000000; -- Number of rows to delete in each batch\n    DECLARE start_id INT DEFAULT 0; -- Starting ID for the first batch\n    DECLARE end_id INT DEFAULT 14900000; -- Target maximum ID for deletion\n\n    -- Loop to delete data in batches\n    WHILE start_id < end_id DO\n        -- Delete rows in the current batch\n        DELETE FROM users_log\n        WHERE id BETWEEN start_id AND start_id + batch_size - 1;\n\n        -- Output progress message\n        SELECT CONCAT('Deleted rows with IDs from ', start_id, ' to ', start_id + batch_size - 1) AS Progress;\n\n        -- Update the start_id for the next batch\n        SET start_id = start_id + batch_size;\n    END WHILE;\n\n    -- Final message\n    SELECT 'Deletion process completed.' AS FinalMessage;\nEND$$\n\nDELIMITER ;\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},511151:(e,r,t)=>{t.d(r,{Z:()=>a,a:()=>d});var n=t(667294);const s={},o=n.createContext(s);function d(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);