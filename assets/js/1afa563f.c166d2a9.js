"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[55579],{278692:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=a(785893),i=a(511151);const o={},r="Mixin",s={id:"python/advanced/mixin",title:"Mixin",description:"A mixin is a special kind of multiple inheritance. There are two main situations where mixins are used:",source:"@site/docs/python/advanced/mixin.md",sourceDirName:"python/advanced",slug:"/python/advanced/mixin",permalink:"/python/advanced/mixin",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/advanced/mixin.md",tags:[],version:"current",lastUpdatedAt:1678191863,formattedLastUpdatedAt:"Mar 7, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Memory Management",permalink:"/python/advanced/memory-management"},next:{title:"Others",permalink:"/python/advanced/others"}},d={},l=[{value:"Example",id:"example",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mixin",children:"Mixin"}),"\n",(0,t.jsx)(n.p,{children:"A mixin is a special kind of multiple inheritance. There are two main situations where mixins are used:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"You want to provide a lot of optional features for a class."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"You want to use one particular feature in a lot of different classes."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"In this example the function clean_name will be added to the AggregatedWidgetCreationForm automatically and parent will be overridden if any"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class CleanNameMixin:\n\"\"\"\nMixin to add clean_name function to every Widget and Screen\n\"\"\"\n def clean_name(self):\n \"\"\"\n Only lowercase and underscore allowed\n \"\"\"\n name=self.cleaned_data['name']\n\n allowed_chars=frozenset(string.lowercase+'_')\n\n if not all(c in allowed_chars for c in name):\n  raise forms.ValidationError('Only lowercase and underscore allowed')\n\n return name\n\nclass AggregatedWidgetCreationForm(forms.ModelForm, CleanNameMixin):\n class Meta:\n model=AggregatedWidget\n fields=('name','display_name','customer')\n\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},511151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>r});var t=a(667294);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);