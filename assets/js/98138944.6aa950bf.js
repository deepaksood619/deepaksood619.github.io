"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[34460],{607839:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>d});var r=i(785893),s=i(511151);const a={},o="Chord",n={id:"data-structures/hashtable/chord",title:"Chord",description:'In computing, Chordis a protocol and algorithm for a peer-to-peerdistributed hash table. A distributed hash table stores key-value pairs by assigning keys to different computers (known as "nodes"); a node will store the values for all the keys for which it is responsible. Chord specifies how keys are assigned to nodes, and how a node can discover the value for a given key by first locating the node responsible for that key.',source:"@site/docs/data-structures/hashtable/chord.md",sourceDirName:"data-structures/hashtable",slug:"/data-structures/hashtable/chord",permalink:"/data-structures/hashtable/chord",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hashtable/chord.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bloom Filters",permalink:"/data-structures/hashtable/bloom-filters"},next:{title:"Count-min Sketch",permalink:"/data-structures/hashtable/count-min-sketch"}},h={},d=[{value:"References",id:"references",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"chord",children:"Chord"}),"\n",(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Computing",children:"computing"}),", Chordis a protocol and ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Algorithm",children:"algorithm"})," for a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Peer-to-peer",children:"peer-to-peer"}),(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Distributed_hash_table",children:"distributed hash table"}),". A distributed hash table stores ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Associative_array",children:"key-value pairs"}),' by assigning keys to different computers (known as "nodes"); a node will store the values for all the keys for which it is responsible. Chord specifies how keys are assigned to nodes, and how a node can discover the value for a given key by first locating the node responsible for that key.\nChord is one of the four original ',(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Distributed_hash_table",children:"distributed hash table"})," protocols, along with ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Content_addressable_network",children:"CAN"}),", ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Tapestry_(DHT)",children:"Tapestry"}),", and ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Pastry_(DHT)",children:"Pastry"}),". It was introduced in 2001 by ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Ion_Stoica",children:"Ion Stoica"}),", ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Robert_Tappan_Morris",children:"Robert Morris"}),", ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/David_Karger",children:"David Karger"}),", ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Frans_Kaashoek",children:"Frans Kaashoek"}),", and ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Hari_Balakrishnan",children:"Hari Balakrishnan"}),", and was developed at ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/MIT",children:"MIT"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)",children:"https://en.wikipedia.org/wiki/Chord_(peer-to-peer)"})})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},511151:(e,t,i)=>{i.d(t,{Z:()=>n,a:()=>o});var r=i(667294);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);