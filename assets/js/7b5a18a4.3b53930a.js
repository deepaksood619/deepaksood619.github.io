"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[4206],{535650:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"databases/data-warehouses/clickhouse/queries","title":"Queries","description":"Commands","source":"@site/docs/databases/data-warehouses/clickhouse/queries.md","sourceDirName":"databases/data-warehouses/clickhouse","slug":"/databases/data-warehouses/clickhouse/queries","permalink":"/databases/data-warehouses/clickhouse/queries","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/data-warehouses/clickhouse/queries.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1747376238000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MergeTree Engine Family","permalink":"/databases/data-warehouses/clickhouse/mergetree-engine-family"},"next":{"title":"Table Engines","permalink":"/databases/data-warehouses/clickhouse/table-engines"}}');var n=t(474848),r=t(28453);const o={},c="Queries",i={},d=[{value:"Commands",id:"commands",level:2}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"queries",children:"Queries"})}),"\n",(0,n.jsx)(s.h2,{id:"commands",children:"Commands"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"docker pull clickhouse/clickhouse-server\n\ndocker run -d -p 8123:8123 -p 9000:9000 --network=test-net --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server\n\ndocker run -d --name some-clickhouse-server -p 8123:8123 -p 9000:9000 --network=test-net -e CLICKHOUSE_DB=my_database -e CLICKHOUSE_USER=username -e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 -e CLICKHOUSE_PASSWORD=password --ulimit nofile=262144:262144 clickhouse/clickhouse-server\n\n# https://hub.docker.com/r/clickhouse/clickhouse-server/\n\necho 'SELECT version()' | curl 'http://localhost:8123/' --data-binary @-\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://clickhouse.com/docs/en/interfaces/third-party/gui",children:"Visual Interfaces from Third-party Developers | ClickHouse Docs"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/ClickHouse/metabase-clickhouse-driver",children:"GitHub - ClickHouse/metabase-clickhouse-driver: ClickHouse database driver for the Metabase business intelligence front-end"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"-- https://clickhouse.com/docs/en/getting-started/quick-start\n\nclickhouse client\n\nCREATE TABLE my_first_table\n(\n    user_id UInt32,\n    message String,\n    timestamp DateTime,\n    metric Float32\n)\nENGINE = MergeTree\nPRIMARY KEY (user_id, timestamp)\n\nINSERT INTO my_first_table (user_id, message, timestamp, metric) VALUES\n    (101, 'Hello, ClickHouse!',                                 now(),       -1.0    ),\n    (102, 'Insert a lot of rows per batch',                     yesterday(), 1.41421 ),\n    (102, 'Sort your data based on your commonly-used queries', today(),     2.718   ),\n    (101, 'Granules are the smallest chunks of data read',      now() + 5,   3.14159 )\n\n SELECT *\n FROM my_first_table\n ORDER BY timestamp\n\nSELECT\n   passenger_count,\n   avg(toFloat32(total_amount))\nFROM s3(\n    'https://datasets-documentation.s3.eu-west-3.amazonaws.com/nyc-taxi/trips_0.gz',\n    'TabSeparatedWithNames'\n)\nGROUP BY passenger_count\nORDER BY passenger_count;\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://clickhouse.com/docs/en/getting-started/example-datasets/nyc-taxi",children:"New York Taxi Data | ClickHouse Docs"})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>c});var a=t(296540);const n={},r=a.createContext(n);function o(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);