"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[148],{285140:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"algorithms/searching-sorting/binary-search","title":"Binary Search","description":"Finding the index of first element in A which is not less than x is called lowerbound query in C++ STL. The answer of our first query isn-lowerbound(x)","source":"@site/docs/algorithms/searching-sorting/binary-search.md","sourceDirName":"algorithms/searching-sorting","slug":"/algorithms/searching-sorting/binary-search","permalink":"/algorithms/searching-sorting/binary-search","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/searching-sorting/binary-search.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"3-way string radix quicksort","permalink":"/algorithms/searching-sorting/3-way-string-radix-quicksort"},"next":{"title":"Convex Hull","permalink":"/algorithms/searching-sorting/convex-hull"}}');var i=r(474848),a=r(28453);const s={},o="Binary Search",l={},d=[{value:"get count of all elements that are smaller or equal to given key",id:"get-count-of-all-elements-that-are-smaller-or-equal-to-given-key",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"binary-search",children:"Binary Search"})}),"\n",(0,i.jsxs)(n.p,{children:["Finding the index of first element in ",(0,i.jsx)(n.em,{children:"A"})," which is not less than ",(0,i.jsx)(n.em,{children:"x"})," is called lower_bound query in C++ STL. The answer of our first query isn-lower_bound(x)"]}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, finding the index of first element in ",(0,i.jsx)(n.em,{children:"A"})," which is greater than ",(0,i.jsx)(n.em,{children:"x"})," is called upper_bound query in C++ STL. The answer of our second query isn-upper_bound(x)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"int lower_bound(int start,int end,int item)\n{\n    while(start<end)\n    {\n        int mid=(start+end)>>1;\n        if(arr[mid]>=item)\n            end=mid;\n        else start=mid+1;\n    }\n    return start;\n}\nint upper_bound(int start,int end,int item)\n{\n    while(start<end)\n    {\n        int mid=(start+end)>>1;\n        if(arr[mid]<=item)\n            start=mid+1;\n        else end=mid;\n    }\n    return start;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/monk-and-search-2/editorial",children:"https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/monk-and-search-2/editorial"})}),"\n",(0,i.jsx)(n.h2,{id:"get-count-of-all-elements-that-are-smaller-or-equal-to-given-key",children:"get count of all elements that are smaller or equal to given key"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def binarySearchCount(arr, left, n, key):\n    right = n\n    mid = 0\n    while (left < right):\n        mid = (right + left)//2\n\n        # Check if key is present in array\n        if (arr[mid] == key):\n            # If duplicates are present it returns the position of last element\n            while (mid + 1<n and arr[mid + 1] == key):\n                 mid+= 1\n            break\n\n        # If key is smaller, ignore right half\n        elif (arr[mid] > key):\n            right = mid\n\n        # If key is greater, ignore left half\n        else:\n            left = mid + 1\n\n    # If key is not found in array then it will be before mid\n    while (mid > -1 and  arr[mid] > key):\n        mid-= 1\n\n    # Return mid + 1 because of 0-based indexing of array\n    return mid + 1\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.geeksforgeeks.org/count-smaller-equal-elements-sorted-array",children:"https://www.geeksforgeeks.org/count-smaller-equal-elements-sorted-array"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(296540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);