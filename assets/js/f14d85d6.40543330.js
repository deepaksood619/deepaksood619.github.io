"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[53178],{116610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(785893),s=t(511151);const r={},a="Super",i={id:"python/advanced/super",title:"Super",description:"Super considered super - pycon 2015",source:"@site/docs/python/advanced/super.md",sourceDirName:"python/advanced",slug:"/python/advanced/super",permalink:"/python/advanced/super",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/advanced/super.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Versions",permalink:"/python/advanced/python-versions"},next:{title:"Web Scraping",permalink:"/python/advanced/web-scraping"}},d={},l=[{value:"Method Resolution Order (MRO)",id:"method-resolution-order-mro",level:2},{value:"DoughFactory Analogy",id:"doughfactory-analogy",level:2},{value:"Linearization Algorithm",id:"linearization-algorithm",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"super",children:"Super"}),"\n",(0,o.jsx)(n.p,{children:"Super considered super - pycon 2015"}),"\n",(0,o.jsx)(n.p,{children:"In python - Inheritance is a tool for code reuse."}),"\n",(0,o.jsx)(n.p,{children:"We can use dependency injection to say to the restaurant that I want this food but you have to get it from somewhere else. (Because they used genetically modified seeds)"}),"\n",(0,o.jsx)(n.p,{children:"When there is multiple inheritance and a diamond diagram and same methods are repeated at either side of the chain, it gets harder"}),"\n",(0,o.jsx)(n.p,{children:"Solution - C3 linearization algorithm (C Cubed Linearization Algorithm)"}),"\n",(0,o.jsx)(n.h2,{id:"method-resolution-order-mro",children:"Method Resolution Order (MRO)"}),"\n",(0,o.jsx)(n.p,{children:"It is an Algorithm used primarily to obtain the order in which methods should be inherited in the presence of multiple Inheritance, and is termed Method Resolution Order (MRO)"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://makina-corpus.com/blog/metier/2014/python-tutorial-understanding-python-mro-class-search-path",children:"https://makina-corpus.com/blog/metier/2014/python-tutorial-understanding-python-mro-class-search-path"})}),"\n",(0,o.jsx)(n.p,{children:"The name c3 refers to the three important properties of the resulting linearization-"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A consistent extended precedence graph"}),"\n",(0,o.jsx)(n.li,{children:"Preservation of local precedence order"}),"\n",(0,o.jsx)(n.li,{children:"Fitting the monotonicity criterion"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This algorithm takes an amorphous blob and put it in a straight line"}),"\n",(0,o.jsx)(n.p,{children:"Linearization"}),"\n",(0,o.jsx)(n.p,{children:"Super must be called next one in the line in MRO (Method Resolution Operator)"}),"\n",(0,o.jsx)(n.h2,{id:"doughfactory-analogy",children:"DoughFactory Analogy"}),"\n",(0,o.jsx)(n.p,{children:"Robot Analogy - for not wearing down the robot we use a MockRobot and use DependencyInjection to inject it into the code while running Tests."}),"\n",(0,o.jsx)(n.p,{children:"When we call super in python, it's the children's ancestors that's get called and not it's own parent."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"help(<class>)"})," shows MRO"]}),"\n",(0,o.jsx)(n.p,{children:"Counter can be used to make an ordered counter, because Counter cannot be used on OrderedDict, so we can use the power of super with MRO to make an OrderedCounter"}),"\n",(0,o.jsx)(n.h2,{id:"linearization-algorithm",children:"Linearization Algorithm"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Children come before parents,"}),"\n",(0,o.jsx)(n.li,{children:"Parents stay in order"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Co-operative multiple Inheritance"}),"\n",(0,o.jsx)(n.p,{children:"Problems with super"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The last person cannot pass using super because there is no one next in line (use stopper class)"}),"\n",(0,o.jsx)(n.li,{children:"Super doesn't work with classes that are not designed to work cooperatively (solution - put a class infront of non-cooperative class that is cooperative)"}),"\n",(0,o.jsx)(n.li,{children:"Using positional arguments can mess up with the argument passing (solution- use keyword argument to pass along the attributes)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Adam(object): pass\n\nclass Eve(object): pass\n\nclass Ramon(Adam, Eve): pass\n\nclass Gayle(Adam, Eve): pass\n\nclass Raymond(Ramon, Gayle): pass\n\nclass Dennis(Adam, Eve): pass\n\nclass Sharon(Adam, Eve): pass\n\nclass Rachel(Dennis, Sharon): pass\n\nclass Matthew(Raymond, Rachel): pass\n\nhelp(Matthew)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=EiOglTERPEo",children:"Raymond Hettinger - Super considered super! - PyCon 2015"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},511151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var o=t(667294);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);