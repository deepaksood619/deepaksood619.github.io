"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[70710],{900338:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"algorithms/dynamic-programming/levenshtein-distance-or-edit-distance","title":"Levenshtein distance or Edit Distance","description":"The Levenshtein Distance, or Edit Distance, is the amount by which two strings differ.","source":"@site/docs/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance.md","sourceDirName":"algorithms/dynamic-programming","slug":"/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance","permalink":"/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/dynamic-programming/levenshtein-distance-or-edit-distance.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Knapsack Problem","permalink":"/algorithms/dynamic-programming/knapsack-problem"},"next":{"title":"General","permalink":"/algorithms/general/"}}');var r=t(474848),i=t(28453);const a={},o="Levenshtein distance or Edit Distance",c={},d=[{value:"References",id:"references",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"levenshtein-distance-or-edit-distance",children:"Levenshtein distance or Edit Distance"})}),"\n",(0,r.jsx)(n.p,{children:"The Levenshtein Distance, or Edit Distance, is the amount by which two strings differ."}),"\n",(0,r.jsx)(n.p,{children:"There are 3 possible actions that can be applied on a character:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Addition (Insert)"}),"\n",(0,r.jsx)(n.li,{children:"Deletion (Remove)"}),"\n",(0,r.jsx)(n.li,{children:"Modification (Replace)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# A Naive recursive Python program to find minimum number\n# operations to convert str1 to str2\n\ndef editDistance(str1, str2, m, n):\n\n    # If first string is empty, the only option is to\n    # insert all characters of second string into first\n    if m == 0:\n        return n\n\n    # If second string is empty, the only option is to\n    # remove all characters of first string\n    if n == 0:\n        return m\n\n    # If last characters of two strings are same, nothing\n    # much to do. Ignore last characters and get count for\n    # remaining strings.\n    if str1[m-1] == str2[n-1]:\n        return editDistance(str1, str2, m-1, n-1)\n\n    # If last characters are not same, consider all three\n    # operations on last character of first string, recursively\n    # compute minimum cost for all three operations and take\n    # minimum of three values.\n    return 1 + min(editDistance(str1, str2, m, n-1),    # Insert\n                   editDistance(str1, str2, m-1, n),    # Remove\n                   editDistance(str1, str2, m-1, n-1)    # Replace\n                   )\n\n# Driver code\nstr1 = "sunday"\nstr2 = "saturday"\nprint (editDistance(str1, str2, len(str1), len(str2)))\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity"})," of above solution is exponential. In worst case, we may end up doing O(3^m) operations. The worst case happens when none of characters of two strings match."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Auxiliary Space:"})," O(1), because no extra space is utilized."]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.geeksforgeeks.org/edit-distance-dp-5/",children:"https://www.geeksforgeeks.org/edit-distance-dp-5/"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(296540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);