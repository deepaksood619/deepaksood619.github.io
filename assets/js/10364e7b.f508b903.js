"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[34217],{272405:(i,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ai/ml-algorithms/linear-discriminant-analysis-lda","title":"Linear Discriminant Analysis (LDA)","description":"Hi, Logistic Regression is a classification algorithm traditionally limited to only two-class classification problems.","source":"@site/docs/ai/ml-algorithms/linear-discriminant-analysis-lda.md","sourceDirName":"ai/ml-algorithms","slug":"/ai/ml-algorithms/linear-discriminant-analysis-lda","permalink":"/ai/ml-algorithms/linear-discriminant-analysis-lda","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/ai/ml-algorithms/linear-discriminant-analysis-lda.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Learning Vector Quantization (LVQ)","permalink":"/ai/ml-algorithms/learning-vector-quantization-lvq"},"next":{"title":"Linear regression","permalink":"/ai/ml-algorithms/linear-regression"}}');var n=a(474848),t=a(28453);const r={},l="Linear Discriminant Analysis (LDA)",o={},c=[];function d(i){const e={h1:"h1",header:"header",li:"li",ol:"ol",p:"p",...(0,t.R)(),...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"linear-discriminant-analysis-lda",children:"Linear Discriminant Analysis (LDA)"})}),"\n",(0,n.jsx)(e.p,{children:"Hi, Logistic Regression is a classification algorithm traditionally limited to only two-class classification problems."}),"\n",(0,n.jsx)(e.p,{children:"If you have more than two classes then the Linear Discriminant Analysis algorithm is the preferred linear classification technique."}),"\n",(0,n.jsx)(e.p,{children:"The representation of LDA is pretty straight forward. It consists of statistical properties of your data, calculated for each class. For a single input variable this includes:"}),"\n",(0,n.jsxs)(e.ol,{children:["\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsx)(e.p,{children:"The mean value for each class."}),"\n"]}),"\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsx)(e.p,{children:"The variance calculated across all classes."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(e.p,{children:"Predictions are made by calculating a discriminate value for each class and making a prediction for the class with the largest value."}),"\n",(0,n.jsx)(e.p,{children:"The technique assumes that the data has a Gaussian distribution (bell curve), so it is a good idea to remove outliers from your data before hand."}),"\n",(0,n.jsx)(e.p,{children:"It's a simple and powerful method for classification predictive modeling problems."})]})}function h(i={}){const{wrapper:e}={...(0,t.R)(),...i.components};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(d,{...i})}):d(i)}},28453:(i,e,a)=>{a.d(e,{R:()=>r,x:()=>l});var s=a(296540);const n={},t=s.createContext(n);function r(i){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof i?i(e):{...e,...i}}),[e,i])}function l(i){let e;return e=i.disableParentContext?"function"==typeof i.components?i.components(n):i.components||n:r(i.components),s.createElement(t.Provider,{value:e},i.children)}}}]);