"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[69004],{713494:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>m,toc:()=>c});var r=o(785893),i=o(511151);const t={},a="Basic Gold Mines",m={id:"algorithms/dynamic-programming/basic-gold-mines",title:"Basic Gold Mines",description:"https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/gold-mines-10",source:"@site/docs/algorithms/dynamic-programming/basic-gold-mines.md",sourceDirName:"algorithms/dynamic-programming",slug:"/algorithms/dynamic-programming/basic-gold-mines",permalink:"/algorithms/dynamic-programming/basic-gold-mines",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/dynamic-programming/basic-gold-mines.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dynamic Programming",permalink:"/algorithms/dynamic-programming/"},next:{title:"General",permalink:"/algorithms/dynamic-programming/greedy-algorithms"}},s={},c=[];function l(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"basic-gold-mines",children:"Basic Gold Mines"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/gold-mines-10",children:"https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/gold-mines-10"})}),"\n",(0,r.jsx)(n.p,{children:"Used Dynamic Programming"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# initialization\nm, n = 2, 2\nmatrix = [[1, 2],[3, 4]]\nmemo = [[0 for x in range(n+1)] for y in range(m+1)]\n\n# creating a bottom up table for memoization\nfor row in range(1, m+1):\n    for col in range(1, n+1):\n        memo[row][col] = memo[row-1][col] + memo[row][col-1] - memo[row-1][col-1] + matrix[row-1][col-1]\n\n# for every query find the solution\nx1, y1, x2, y2 = 1, 2, 2, 2\nprint(memo[x2][y2] - memo[x1-1][y2] - memo[x2][y1-1] + memo[x1-1][y1-1])\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},511151:(e,n,o)=>{o.d(n,{Z:()=>m,a:()=>a});var r=o(667294);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function m(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);