"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[16570],{929244:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>x,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"databases/nosql-databases/mongodb/indexes","title":"Indexes","description":"Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.","source":"@site/docs/databases/nosql-databases/mongodb/indexes.md","sourceDirName":"databases/nosql-databases/mongodb","slug":"/databases/nosql-databases/mongodb/indexes","permalink":"/databases/nosql-databases/mongodb/indexes","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/nosql-databases/mongodb/indexes.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707413368000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Types","permalink":"/databases/nosql-databases/mongodb/data-types"},"next":{"title":"MongoDB","permalink":"/databases/nosql-databases/mongodb/intro"}}');var t=d(474848),s=d(28453);const o={},a="Indexes",r={},l=[{value:"Single Field Index",id:"single-field-index",level:3},{value:"Compound Index",id:"compound-index",level:3},{value:"Unique Index",id:"unique-index",level:3},{value:"Sparse Index",id:"sparse-index",level:3},{value:"Text Index",id:"text-index",level:3},{value:"Hashed Index",id:"hashed-index",level:3},{value:"Wildcard Index (for Array)",id:"wildcard-index-for-array",level:3},{value:"Wildcard Index (for Document)",id:"wildcard-index-for-document",level:3},{value:"Geospatial Index",id:"geospatial-index",level:3},{value:"TTL (Time-To-Live) Index",id:"ttl-time-to-live-index",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"indexes",children:"Indexes"})}),"\n",(0,t.jsx)(n.p,{children:"Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect."}),"\n",(0,t.jsx)(n.p,{children:"Indexes are special data structures that store a small portion of the collection's data set in an easy to traverse form. The index stores the value of a specific field or set of fields, ordered by the value of the field. The ordering of the index entries supports efficient equality matches and range-based query operations. In addition, MongoDB can return sorted results by using the ordering in the index."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/indexes",children:"Indexes - MongoDB Manual"})}),"\n",(0,t.jsx)(n.h3,{id:"single-field-index",children:"Single Field Index"}),"\n",(0,t.jsx)(n.p,{children:"This is the most basic type of index, where an index is created on a single field of a document. It speeds up queries that filter on the indexed field."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"db.collection.createIndex({ fieldName: 1 });"})}),"\n",(0,t.jsx)(n.h3,{id:"compound-index",children:"Compound Index"}),"\n",(0,t.jsx)(n.p,{children:"A compound index involves creating an index on multiple fields. It is useful for queries that filter on multiple fields or involve sorting."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"db.collection.createIndex({ field1: 1, field2: -1 });"})}),"\n",(0,t.jsx)(n.h3,{id:"unique-index",children:"Unique Index"}),"\n",(0,t.jsx)(n.p,{children:"A unique index enforces the uniqueness of values in the indexed field(s). It is commonly used for fields that should have unique values, such as usernames or email addresses."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"db.collection.createIndex({ fieldName: 1 }, { unique: true });"})}),"\n",(0,t.jsx)(n.h3,{id:"sparse-index",children:"Sparse Index"}),"\n",(0,t.jsx)(n.p,{children:"A sparse index only indexes documents that contain the indexed field. It is useful when the indexed field is not present in all documents."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"db.collection.createIndex({ fieldName: 1 }, { sparse: true });"})}),"\n",(0,t.jsx)(n.h3,{id:"text-index",children:"Text Index"}),"\n",(0,t.jsx)(n.p,{children:"Text indexes are designed for text search queries. They tokenize and index the text content of string fields."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'db.collection.createIndex({ textField: "text" });'})}),"\n",(0,t.jsx)(n.h3,{id:"hashed-index",children:"Hashed Index"}),"\n",(0,t.jsx)(n.p,{children:"Hashed indexes store a hash value of the indexed field. They are suitable for equality queries but not range queries."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'db.collection.createIndex({ fieldName: "hashed" });'})}),"\n",(0,t.jsx)(n.h3,{id:"wildcard-index-for-array",children:"Wildcard Index (for Array)"}),"\n",(0,t.jsx)(n.p,{children:"This index is useful for queries on arrays. It indexes each element of the array separately, enabling efficient queries on array elements."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'db.collection.createIndex({ "arrayField.$**": 1 });'})}),"\n",(0,t.jsx)(n.h3,{id:"wildcard-index-for-document",children:"Wildcard Index (for Document)"}),"\n",(0,t.jsx)(n.p,{children:"This index is used to create an index on all fields of a document."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'db.collection.createIndex({ "$**": 1 });'})}),"\n",(0,t.jsx)(n.h3,{id:"geospatial-index",children:"Geospatial Index"}),"\n",(0,t.jsx)(n.p,{children:"Geospatial indexes are used for queries involving geographic coordinates. MongoDB supports 2D and 3D geospatial indexes."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:'db.collection.createIndex({ locationField: "2dsphere" });'})}),"\n",(0,t.jsx)(n.h3,{id:"ttl-time-to-live-index",children:"TTL (Time-To-Live) Index"}),"\n",(0,t.jsx)(n.p,{children:"A TTL index is used to automatically remove documents from a collection after a specified amount of time, providing a way to expire data. Data expiration is useful for certain types of information like machine generated event data, logs, and session information that only need to persist in a database for a finite amount of time."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 });"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.mongodb.com/manual/core/index-ttl",children:"TTL Indexes - MongoDB Manual"})})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,d)=>{d.d(n,{R:()=>o,x:()=>a});var i=d(296540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);