"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[84818],{729260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"python/documentation/08-data-types","title":"8. Data Types","description":"8.1. datetime - Basic date and time types","source":"@site/docs/python/documentation/08-data-types.md","sourceDirName":"python/documentation","slug":"/python/documentation/08-data-types","permalink":"/python/documentation/08-data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/documentation/08-data-types.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1706035064000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"7. Binary Data Services","permalink":"/python/documentation/07-binary-data-services"},"next":{"title":"9. Numeric and Mathematical Modules","permalink":"/python/documentation/09-numeric-and-mathematical-modules"}}');var a=n(474848),s=n(28453);const i={},o="8. Data Types",l={},c=[{value:"8.1. datetime - Basic date and time types",id:"81-datetime---basic-date-and-time-types",level:2},{value:"8.3. collections - Container datatypes",id:"83-collections---container-datatypes",level:2},{value:"8.5. heapq - Heap queue algorithm",id:"85-heapq---heap-queue-algorithm",level:2},{value:"8.8. weakref - Weak references",id:"88-weakref---weak-references",level:2},{value:"8.11. pprint - Data pretty printer",id:"811-pprint---data-pretty-printer",level:2},{value:"8.2. calendar - General calendar-related functions",id:"82-calendar---general-calendar-related-functions",level:2},{value:"8.3 collections",id:"83-collections",level:2},{value:"collections.Counter()",id:"collectionscounter",level:2},{value:"collections.OrderedDict()",id:"collectionsordereddict",level:2},{value:"OrderedDict() preserve the order in which keys and values are added",id:"ordereddict-preserve-the-order-in-which-keys-and-values-are-added",level:3},{value:"8.8 Weak References",id:"88-weak-references",level:2},{value:"8.13 Enumerations",id:"813-enumerations",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"8-data-types",children:"8. Data Types"})}),"\n",(0,a.jsx)(t.h2,{id:"81-datetime---basic-date-and-time-types",children:"8.1. datetime - Basic date and time types"}),"\n",(0,a.jsx)(t.p,{children:"8.2. calendar - General calendar-related functions"}),"\n",(0,a.jsx)(t.h2,{id:"83-collections---container-datatypes",children:"8.3. collections - Container datatypes"}),"\n",(0,a.jsx)(t.p,{children:"8.4. collections.abc - Abstract Base Classes for Containers"}),"\n",(0,a.jsx)(t.h2,{id:"85-heapq---heap-queue-algorithm",children:"8.5. heapq - Heap queue algorithm"}),"\n",(0,a.jsx)(t.p,{children:"8.6. bisect - Array bisection algorithm"}),"\n",(0,a.jsx)(t.p,{children:"8.7. array - Efficient arrays of numeric values"}),"\n",(0,a.jsx)(t.h2,{id:"88-weakref---weak-references",children:"8.8. weakref - Weak references"}),"\n",(0,a.jsx)(t.p,{children:"8.9. types - Dynamic type creation and names for built-in types"}),"\n",(0,a.jsx)(t.p,{children:"8.10. copy - Shallow and deep copy operations"}),"\n",(0,a.jsx)(t.h2,{id:"811-pprint---data-pretty-printer",children:"8.11. pprint - Data pretty printer"}),"\n",(0,a.jsx)(t.p,{children:"8.12. reprlib - Alternate repr() implementation"}),"\n",(0,a.jsx)(t.p,{children:"8.13. enum - Support for enumerations"}),"\n",(0,a.jsx)(t.h2,{id:"82-calendar---general-calendar-related-functions",children:"8.2. calendar - General calendar-related functions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import calendar\n>>>\nprint calendar.TextCalendar(firstweekday=6).formatyear(2015)\n\nWeekday gives the day number for the given date (0-Monday, 1- Tuesday... and so on)\n\nprint(calendar.weekday(year, month, day))\n\nCalendar.day_name - Array storing the name to item mapping for the day name\n\nprint(calendar.day_name[calendar.weekday(year, month, day)].upper())\n"})}),"\n",(0,a.jsx)(t.h2,{id:"83-collections",children:"8.3 collections"}),"\n",(0,a.jsxs)(t.p,{children:["This module implements specialized container datatypes providing alternatives to Python's general purpose built-in containers, ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/stdtypes.html#dict",children:"dict"}),", ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/stdtypes.html#list",children:"list"}),", ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/stdtypes.html#set",children:"set"}),", and",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/stdtypes.html#tuple",children:"tuple"}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.namedtuple",children:"namedtuple()"})}),(0,a.jsx)(t.th,{children:"factory function for creating tuple subclasses with named fields"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.deque",children:"deque"})}),(0,a.jsx)(t.td,{children:"list-like container with fast appends and pops on either end"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.ChainMap",children:"ChainMap"})}),(0,a.jsx)(t.td,{children:"dict-like class for creating a single view of multiple mappings"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.Counter",children:"Counter"})}),(0,a.jsx)(t.td,{children:"dict subclass for counting hashable objects"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.OrderedDict",children:"OrderedDict"})}),(0,a.jsx)(t.td,{children:"dict subclass that remembers the order entries were added"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.defaultdict",children:"defaultdict"})}),(0,a.jsx)(t.td,{children:"dict subclass that calls a factory function to supply missing values"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.UserDict",children:"UserDict"})}),(0,a.jsx)(t.td,{children:"wrapper around dictionary objects for easier dict subclassing"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.UserList",children:"UserList"})}),(0,a.jsx)(t.td,{children:"wrapper around list objects for easier list subclassing"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.UserString",children:"UserString"})}),(0,a.jsx)(t.td,{children:"wrapper around string objects for easier string subclassing"})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"collectionscounter",children:"collections.Counter()"}),"\n",(0,a.jsx)(t.p,{children:"A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from collections import Counter\n>>>\nmyList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]\nprint Counter(myList)\nCounter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})\n>>>\nprint Counter(myList).items()\n[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]\n>>>\nprint Counter(myList).keys()\n[1, 2, 3, 4, 5]\n>>>\nprint Counter(myList).values()\n[3, 4, 4, 2, 1]\n\nIf we want to know the 10 most common numbers, theCounter()instance also has amost_commonmethod that is very handy.\n\nCount unique values in a list can be done more efficiently usingCounter() from [collections](https://docs.python.org/3.8/library/collections.html)\n\nnum_counts2 = Counter(a_long_list).\n"})}),"\n",(0,a.jsx)(t.p,{children:"It is about 10 times faster than the dict version with incrementing counts"}),"\n",(0,a.jsx)(t.h2,{id:"collectionsordereddict",children:"collections.OrderedDict()"}),"\n",(0,a.jsx)(t.p,{children:"Standard Python dictionaries don't keep track of the order in which keys and values are added; they only preserve the association between each key and its value."}),"\n",(0,a.jsx)(t.h3,{id:"ordereddict-preserve-the-order-in-which-keys-and-values-are-added",children:"OrderedDict() preserve the order in which keys and values are added"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from collections import OrderedDict\n\nfav_languages = OrderedDict()\nfav_languages['jen'] = ['python', 'ruby']\nfav_languages['deepak'] = ['python']\n\n# display the results, in the same order they were entered\n\nfor name, langs in fav_languages.items():\n print(name + \":\")\n for lang in langs:\n  print(\"- \" + lang)\n\n## collections.defaultdict()\n"})}),"\n",(0,a.jsx)(t.p,{children:'Usually, a Python dictionary throws a KeyError if you try to get an item with a key that is not currently in the dictionary. The defaultdict in contrast will simply create any items that you try to access (provided of course they do not exist yet). To create such a "default" item, it calls the function object that you pass in the constructor (more precisely, it\'s an arbitrary "callable" object, which includes function and type objects). For the first example, default items are created using int(), which will return the integer object0. For the second example, default items are created using list(), which returns a new empty list object.'}),"\n",(0,a.jsxs)(t.p,{children:["A ",(0,a.jsx)(t.strong,{children:"defaultdict"}),' works exactly like a normal dict, but it is initialized with a function ("default factory") that takes no arguments and provides the default value for a nonexistent key.']}),"\n",(0,a.jsxs)(t.p,{children:["A ",(0,a.jsx)(t.strong,{children:"defaultdict"})," will never raise a ",(0,a.jsx)(t.strong,{children:"KeyError"}),". Any key that does not exist gets the value returned by the default factory."]}),"\n",(0,a.jsxs)(t.p,{children:["Returns a new dictionary-like object. ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/collections.html#collections.defaultdict",children:"defaultdict"})," is a subclass of the built-in ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/stdtypes.html#dict",children:"dict"})," class. It overrides one method and adds one writable instance variable. The remaining functionality is the same as for the ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/stdtypes.html#dict",children:"dict"})," class"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"dic = {}\n\n>>>If item in dic:\n\ndic['found'] += 1\n\n>>>Else:\n\ndic['found'] = 1\n\nThe above statements can be replaced by below statement if defaultdict is used\n\nfrom collections import defaultdict\n\ndic = defaultdict(int)\n\n>>>dic['found'] += 1\n\n## 8.5 Heap Queue\n\nThe heapq implements a min-heap sort algorithm suitable for use with Python's lists.\n\nimport heapq\n\nheap = []\n\nheapq.heappush(heap, (1, 'one'))\n\nheapq.heappush(heap, (10, 'ten'))\n\nheapq.heappush(heap, (5,'five'))\n\nfor x in heap:\n\nprint(x)\n\nprint()\n\nheapq.heappop(heap)\n\nfor x in heap:\n\nprint(x)\n\nprint()\n\n# the smallest\n\nprint(heap[0])\n\nheapq.heapreplace(heap, item)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Pop and return the smallest item from theheap, and also push the newitem. The heap size doesn't change. If the heap is empty, ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3.0/library/exceptions.html#exceptions.IndexError",children:"IndexError"})," is raised. This is more efficient than",(0,a.jsx)(t.a,{href:"https://docs.python.org/3.0/library/heapq.html#heapq.heappop",children:"heappop()"})," followed by",(0,a.jsx)(t.a,{href:"https://docs.python.org/3.0/library/heapq.html#heapq.heappush",children:"heappush()"}),", and can be more appropriate when using a fixed-size heap. Note that the value returned may be larger thanitem! That constrains reasonable uses of this routine unless written as part of a conditional replacement:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"if item > heap[0]:\nitem = heapreplace(heap, item)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.techbeamers.com/python-heapq",children:"https://www.techbeamers.com/python-heapq"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/heapq.html",children:"https://docs.python.org/3/library/heapq.html"})}),"\n",(0,a.jsx)(t.h2,{id:"88-weak-references",children:"8.8 Weak References"}),"\n",(0,a.jsxs)(t.p,{children:["The",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/weakref.html#module-weakref",children:"weakref"})," module allows the Python programmer to createweak referencesto objects."]}),"\n",(0,a.jsxs)(t.p,{children:["A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, ",(0,a.jsx)(t.a,{href:"https://docs.python.org/3/glossary.html#term-garbage-collection",children:"garbage collection"})," is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it."]}),"\n",(0,a.jsx)(t.p,{children:"A primary use for weak references is to implement caches or mappings holding large objects, where it's desired that a large object not be kept alive solely because it appears in a cache or mapping."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://docs.python.org/3/library/weakref.html",children:"https://docs.python.org/3/library/weakref.html"})}),"\n",(0,a.jsx)(t.h2,{id:"813-enumerations",children:"8.13 Enumerations"}),"\n",(0,a.jsx)(t.p,{children:"An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from enum import Enum, auto\n\nclass Monster(Enum):\n ZOMBIE = auto()\n WARRIOR = auto()\n BEAR = auto()\n print(Monster.ZOMBIE)\n\n for monster in Monster:\n  print(monster)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(296540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);