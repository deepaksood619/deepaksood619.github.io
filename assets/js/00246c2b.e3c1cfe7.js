"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[96664],{431526:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"algorithms/general/types-of-algorithms","title":"Types of algorithms","description":"1. Simple recursive algorithms","source":"@site/docs/algorithms/general/types-of-algorithms.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/types-of-algorithms","permalink":"/algorithms/general/types-of-algorithms","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/types-of-algorithms.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Two-Stack Algorithm","permalink":"/algorithms/general/two-stack-algorithm"},"next":{"title":"Union-Find Algorithm","permalink":"/algorithms/general/union-find-algorithm"}}');var t=n(474848),r=n(28453);const l={},o="Types of algorithms",a={},h=[];function d(e){const s={a:"a",h1:"h1",header:"header",img:"img",li:"li",ol:"ol",p:"p",table:"table",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"types-of-algorithms",children:"Types of algorithms"})}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Simple recursive algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"solves the base care directly"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"recurs with a simpler subproblem"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Backtracking algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Based on a depth-first recursive search"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"ex- graph colouring (To color a map with no more than four colors)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://www.freecodecamp.org/news/solve-coding-interview-backtracking-problem",children:"https://www.freecodecamp.org/news/solve-coding-interview-backtracking-problem"})}),"\n",(0,t.jsxs)(s.ol,{start:"3",children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Divide and conquer algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"divide the problems into smaller subproblems of the same type, and solve these subproblems recursively"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"combine the solutions to the subproblems into a solution to the original problem"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"ex- quicksort, mergesort"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Dynamic programming algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"remembers past results and use it to find new results"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Optimal substructure"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Overlapping subproblems"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Greedy algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"optimization problem is one in which you want to find, not just a solution, but the best solution. (take the best you can get right now, without regard for future consequences)"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"ex- counting money"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Branch and bound algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"generally used for optimization problems"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"as the algorithm progresses, a tree of subproblems is formed"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:'The original problem is considered the "root problem"'}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"A method is used to construct an upper and lower bound for a given problem"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"At each node, apply the bounding methods"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"If the bounds match, it is deemed a feasible solution to that particular subproblem"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"If bounds do not match, partition the problem represented by that node, and make the two subproblems into children nodes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Continue, using the best known feasible solution to trim sections of the tree, until all nodes have been solved or trimmed."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"ex - Travelling salesman problem"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Brute force algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"simply tries all possibilities until a satisfactory solution is found"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"To improve brute force algorithms following can be used -"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:'Heuristic - A "rule of thumb" that helps you decide which possibilities to look at first.'}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Optimization - A way to eliminate certain possibilities without fully exploring them"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Randomized algorithms"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"ex - Quicksort, uses a random number to choose a pivot"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.table,{children:(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.img,{alt:"image",src:n(69052).A+"",width:"1000",height:"1414"})})]})})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(453707).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(775662).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(811285).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(906968).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(186951).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(219210).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(590321).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(618516).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(56398).A+"",width:"1000",height:"1414"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"image",src:n(682859).A+"",width:"999",height:"879"})})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},69052:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image1-b24ca4cdaa8ca9a17a1109e6d84bcafe.jpg"},56398:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image10-4fe02c2a889b28748eebe5d43338f209.jpg"},682859:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image11-8a8acca2966ae4345ec60393823a8d92.jpg"},453707:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image2-87ad0ee9f825ba8eff6118763fd1c20e.jpg"},775662:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image3-e09b92372505dd78df7fe0538052d585.jpg"},811285:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image4-9b17760c04db1cbcb09e26dc49e44c31.jpg"},906968:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image5-4a291cd07234f4e41b98caf59e6bbead.jpg"},186951:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image6-6f5ddbcdc79b41ea82c1865fb7aa1d4e.jpg"},219210:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image7-42d346a1732f85ef3d3f94603eab78f1.jpg"},590321:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image8-a399608abc9817b98355463a1802fe95.jpg"},618516:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/Types-of-algorithms-image9-d3bfa4a6b3a0710331dfd15b2af34421.jpg"},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var i=n(296540);const t={},r=i.createContext(t);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);