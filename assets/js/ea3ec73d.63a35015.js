"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[95578],{457436:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"python/django/queryset-and-query-expressions","title":"QuerySet & Query Expressions","description":"A QuerySet is, in essence, a list of objects of a given Model. QuerySets allow you to read the data from the database, filter it and order it. Internally, a QuerySet can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset.","source":"@site/docs/python/django/queryset-and-query-expressions.md","sourceDirName":"python/django","slug":"/python/django/queryset-and-query-expressions","permalink":"/python/django/queryset-and-query-expressions","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/django/queryset-and-query-expressions.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1732180496000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/python/django/overview"},"next":{"title":"Unicode","permalink":"/python/django/unicode"}}');var r=s(474848),i=s(28453);const o={},l="QuerySet & Query Expressions",a={},d=[{value:"When QuerySets are Evaluated",id:"when-querysets-are-evaluated",level:2},{value:"QuerySet Modifications that return querysets",id:"queryset-modifications-that-return-querysets",level:2},{value:"QuerySet Modifications that do not return QuerySets",id:"queryset-modifications-that-do-not-return-querysets",level:2},{value:"Field lookups",id:"field-lookups",level:2},{value:"Aggregation Functions",id:"aggregation-functions",level:2},{value:"F() Expressions",id:"f-expressions",level:2},{value:"The pk lookup shortcut",id:"the-pk-lookup-shortcut",level:3},{value:"Escaping percent signs and underscores in LIKE statements",id:"escaping-percent-signs-and-underscores-in-like-statements",level:3},{value:"Q Objects",id:"q-objects",level:3},{value:"References",id:"references",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"queryset--query-expressions",children:"QuerySet & Query Expressions"})}),"\n",(0,r.jsxs)(n.p,{children:["A QuerySet is, in essence, a list of objects of a given Model. QuerySets allow you to read the data from the database, filter it and order it. Internally, a ",(0,r.jsx)(n.strong,{children:"QuerySet"})," can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset."]}),"\n",(0,r.jsx)(n.h2,{id:"when-querysets-are-evaluated",children:"When QuerySets are Evaluated"}),"\n",(0,r.jsxs)(n.p,{children:["Internally, a ",(0,r.jsx)(n.strong,{children:"QuerySet"})," can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Iteration"}),"\n",(0,r.jsx)(n.li,{children:"Slicing"}),"\n",(0,r.jsx)(n.li,{children:"Pickling/Caching"}),"\n",(0,r.jsx)(n.li,{children:"repr()"}),"\n",(0,r.jsx)(n.li,{children:"len()"}),"\n",(0,r.jsx)(n.li,{children:"list()"}),"\n",(0,r.jsx)(n.li,{children:"bool()"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"queryset-modifications-that-return-querysets",children:"QuerySet Modifications that return querysets"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"filter()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"exclude()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"annotate()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"order_by()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"reverse()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"distinct()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"values()"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns a ",(0,r.jsx)(n.strong,{children:"QuerySet"})," that returns dictionaries, rather than model instances, when used as an iterable."]}),"\n",(0,r.jsx)(n.p,{children:"Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"values()"})," method takes optional positional arguments, *",(0,r.jsx)(n.strong,{children:"fields"}),", which specify field names to which the ",(0,r.jsx)(n.strong,{children:"SELECT"})," should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don't specify the fields, each dictionary will contain a key and value for every field in the database table."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"values_list()"})}),"\n",(0,r.jsxs)(n.p,{children:["This is similar to ",(0,r.jsx)(n.strong,{children:"values()"})," except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field or expression passed into the ",(0,r.jsx)(n.strong,{children:"values_list()"})," call - so the first item is the first field, etc"]}),"\n",(0,r.jsxs)(n.p,{children:["If you only pass in a single field, you can also pass in the ",(0,r.jsx)(n.strong,{children:"flat"})," parameter. If ",(0,r.jsx)(n.strong,{children:"True"}),", this will mean the returned results are single values, rather than one-tuples."]}),"\n",(0,r.jsxs)(n.p,{children:["Example\n",(0,r.jsx)(n.code,{children:"Client.objects.filter(customer__name=customer_name).values_list('metrics_metadata', flat=True).exclude(metrics_metadata={}).distinct()"})]}),"\n",(0,r.jsxs)(n.p,{children:["values() ",(0,r.jsx)(n.strong,{children:"and"}),' values_list() are both intended as optimizations for a specific use case: retrieving a subset of data without the overhead of creating a model instance. This metaphor falls apart when dealing with many-to-many and other multivalued relations (such as the one-to-many relation of a reverse foreign key) because the "one row, one object" assumption doesn\'t hold']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"dates()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"datetimes()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"none()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"all()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"union()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"intersection()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"difference()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"select_related()"})}),"\n",(0,r.jsx)(n.p,{children:'Returns a QuerySet that will "follow" foreign-key relationships, selecting additional related-object data when it executes its query. This is a performance booster which results in a single more complex query but means later use of foreign-key relationships won\'t require database queries.'}),"\n",(0,r.jsx)(n.p,{children:"Product.objects.select_related('category').all()"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select related does one query to JOIN the tables"}),"\n",(0,r.jsx)(n.li,{children:"Select related could be used with ForeignKey and OneToOneField"}),"\n",(0,r.jsx)(n.li,{children:"Select related doesn't work with ManyToMany fields"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"prefetch_related()"})}),"\n",(0,r.jsx)(n.p,{children:"When we are using many to many relationshipswe could use prefetch_related method to booster our queries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Category.objects.prefetch_related('subcategories')\n\nCategory.objects.prefetch_related(\n    Prefetch(\n        'subcategories',\n        queryset=Category.objects.filter(is_active=True),\n        to_attr='active_subcategories'\n    )\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:")"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prefetch related makes two queries and do the JOIN using Python"}),"\n",(0,r.jsx)(n.li,{children:"Prefetch related loses it effect when you change the base query"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"extra()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"defer()"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"only()"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"using()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"select_for_update()"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"raw()"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"queryset-modifications-that-do-not-return-querysets",children:"QuerySet Modifications that do not return QuerySets"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"get()"}),"\n",(0,r.jsx)(n.li,{children:"create()"}),"\n",(0,r.jsx)(n.li,{children:"get_or_create()"}),"\n",(0,r.jsx)(n.li,{children:"update_or_create()"}),"\n",(0,r.jsx)(n.li,{children:"bulk_create()"}),"\n",(0,r.jsx)(n.li,{children:"count()"}),"\n",(0,r.jsx)(n.li,{children:"in_bulk()"}),"\n",(0,r.jsx)(n.li,{children:"iterator()"}),"\n",(0,r.jsx)(n.li,{children:"latest()"}),"\n",(0,r.jsx)(n.li,{children:"earliest()"}),"\n",(0,r.jsx)(n.li,{children:"first()"}),"\n",(0,r.jsx)(n.li,{children:"last()"}),"\n",(0,r.jsx)(n.li,{children:"aggregate()"}),"\n",(0,r.jsx)(n.li,{children:"exists()"}),"\n",(0,r.jsx)(n.li,{children:"update()"}),"\n",(0,r.jsx)(n.li,{children:"delete()"}),"\n",(0,r.jsx)(n.li,{children:"as_manager()"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"field-lookups",children:"Field lookups"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Field lookups are how you specify the meat of an SQL WHERE clause. They're specified as keyword arguments to the QuerySet methods filter(), exclude() and get()."}),"\n",(0,r.jsx)(n.li,{children:"Can also create custom lookups for model fields"}),"\n",(0,r.jsxs)(n.li,{children:["Where no lookup type is provided, the lookup type is assumed to be ",(0,r.jsx)(n.strong,{children:"exact."})]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"exact"}),"\n",(0,r.jsx)(n.li,{children:"iexact"}),"\n",(0,r.jsx)(n.li,{children:"contains"}),"\n",(0,r.jsx)(n.li,{children:"icontains"}),"\n",(0,r.jsx)(n.li,{children:"in"}),"\n",(0,r.jsx)(n.li,{children:"gt"}),"\n",(0,r.jsx)(n.li,{children:"gte"}),"\n",(0,r.jsx)(n.li,{children:"lt"}),"\n",(0,r.jsx)(n.li,{children:"lte"}),"\n",(0,r.jsx)(n.li,{children:"startswith"}),"\n",(0,r.jsx)(n.li,{children:"istartswith"}),"\n",(0,r.jsx)(n.li,{children:"endswith"}),"\n",(0,r.jsx)(n.li,{children:"iendswith"}),"\n",(0,r.jsx)(n.li,{children:"range"}),"\n",(0,r.jsx)(n.li,{children:"date"}),"\n",(0,r.jsx)(n.li,{children:"year"}),"\n",(0,r.jsx)(n.li,{children:"month"}),"\n",(0,r.jsx)(n.li,{children:"day"}),"\n",(0,r.jsx)(n.li,{children:"week"}),"\n",(0,r.jsx)(n.li,{children:"week_day"}),"\n",(0,r.jsx)(n.li,{children:"quarter"}),"\n",(0,r.jsx)(n.li,{children:"time"}),"\n",(0,r.jsx)(n.li,{children:"hour"}),"\n",(0,r.jsx)(n.li,{children:"minute"}),"\n",(0,r.jsx)(n.li,{children:"second"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"isnull"})}),"\n",(0,r.jsx)(n.li,{children:"regex"}),"\n",(0,r.jsx)(n.li,{children:"iregex"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aggregation-functions",children:"Aggregation Functions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Avg"}),"\n",(0,r.jsx)(n.li,{children:"Count"}),"\n",(0,r.jsx)(n.li,{children:"Max"}),"\n",(0,r.jsx)(n.li,{children:"Min"}),"\n",(0,r.jsx)(n.li,{children:"StdDev"}),"\n",(0,r.jsx)(n.li,{children:"Sum"}),"\n",(0,r.jsx)(n.li,{children:"Variance"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Defined in django.db.models.expressions and django.db.models.aggregates"}),"\n",(0,r.jsx)(n.h2,{id:"f-expressions",children:"F() Expressions"}),"\n",(0,r.jsxs)(n.p,{children:["An F() object represents the value of a model field or annotated column. It makes it possible to refer to model field values and ",(0,r.jsx)(n.strong,{children:"perform database operations using them without actually having to pull them out of the database into Python memory."})]}),"\n",(0,r.jsx)(n.p,{children:"This is easiest to understand through an example. Normally, one might do something like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Tintin filed a news story!\nreporter = Reporters.objects.get(name='Tintin')\nreporter.stories_filed += 1\nreporter.save()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, we have pulled the value of",(0,r.jsx)(n.strong,{children:"reporter.stories_filed"}),"from the database into memory and manipulated it using familiar Python operators, and then saved the object back to the database. But instead we could also have done:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from django.db.models import F\nreporter = Reporters.objects.get(name='Tintin')\nreporter.stories_filed = F('stories_filed') + 1\nreporter.save()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Although ",(0,r.jsx)(n.strong,{children:"reporter.stories_filed=F('stories_filed')+1"})," looks like a normal Python assignment of value to an instance attribute, in fact it's an SQL construct describing an operation on the database."]}),"\n",(0,r.jsxs)(n.p,{children:["When Django encounters an instance of ",(0,r.jsx)(n.strong,{children:"F()"}),", it overrides the standard Python operators to create an encapsulated SQL expression; in this case, one which instructs the database to increment the database field represented by ",(0,r.jsx)(n.strong,{children:"reporter.stories_filed"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"F expressions also can be used to compare the value of a model field with another field on the same model. Instances of F() act as a reference to a model field within a query. These references can then be used in query_filters to compare the values of two different fields on the same model instance"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Entry.objects.filter(rating__lt=F('n_comments') + F('n_pingbacks'))"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Django supports the use of addition, subtraction, multiplication, division, modulo, and power arithmetic with**F()**objects, both with constants and with other ",(0,r.jsx)(n.strong,{children:"F()"})," objects."]}),"\n",(0,r.jsxs)(n.li,{children:["You can also use the double underscore notation to span relationships in an ",(0,r.jsx)(n.strong,{children:"F()"})," object. An ",(0,r.jsx)(n.strong,{children:"F()"})," object with a double underscore will introduce any joins needed to access the related object."]}),"\n",(0,r.jsxs)(n.li,{children:["The**F()**objects support bitwise operations by ",(0,r.jsx)(n.strong,{children:".bitand()"}),", ",(0,r.jsx)(n.strong,{children:".bitor()"}),", ",(0,r.jsx)(n.strong,{children:".bitrightshift()"}),", and ",(0,r.jsx)(n.strong,{children:".bitleftshift()"}),". For example:"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"the-pk-lookup-shortcut",children:"The pk lookup shortcut"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Blog.objects.get(id__exact=14) # Explicit form\nBlog.objects.get(id=14) # __exact is implied\nBlog.objects.get(pk=14) # pk implies id__exact\n"})}),"\n",(0,r.jsx)(n.h3,{id:"escaping-percent-signs-and-underscores-in-like-statements",children:"Escaping percent signs and underscores in LIKE statements"}),"\n",(0,r.jsxs)(n.p,{children:["The field lookups that equate to ",(0,r.jsx)(n.strong,{children:"LIKE"})," SQL statements (",(0,r.jsx)(n.strong,{children:"iexact"}),", ",(0,r.jsx)(n.strong,{children:"contains"}),", ",(0,r.jsx)(n.strong,{children:"icontains"}),", ",(0,r.jsx)(n.strong,{children:"startswith"}),", ",(0,r.jsx)(n.strong,{children:"istartswith"}),", ",(0,r.jsx)(n.strong,{children:"endswith"})," and ",(0,r.jsx)(n.strong,{children:"iendswith"}),") will automatically escape the two special characters used in ",(0,r.jsx)(n.strong,{children:"LIKE"})," statements -- the percent sign and the underscore. ",(0,r.jsx)(n.strong,{children:"(In a LIKE statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)"})]}),"\n",(0,r.jsx)(n.p,{children:"This means things should work intuitively, so the abstraction doesn't leak. For example, to retrieve all the entries that contain a percent sign, just use the percent sign as any other character:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Entry.objects.filter(headline__contains='%')"})}),"\n",(0,r.jsx)(n.p,{children:"Django takes care of the quoting for you; the resulting SQL will look something like this:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"SELECT ... WHERE headline LIKE '%\\%%'"})}),"\n",(0,r.jsx)(n.p,{children:"Same goes for underscores. Both percentage signs and underscores are handled for you transparently."}),"\n",(0,r.jsx)(n.h3,{id:"q-objects",children:"Q Objects"}),"\n",(0,r.jsxs)(n.p,{children:["Keyword argument queries - in ",(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.filter",children:"filter()"}),', etc. - are "AND"ed together. If you need to execute more complex queries (for example, queries with OR statements), you can use ',(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.Q",children:"Q objects"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.Q",children:"Q object"}),"(django.db.models.Q) is an object used to encapsulate a collection of keyword arguments"]}),"\n",(0,r.jsxs)(n.p,{children:["Q objects can be combined using the ",(0,r.jsx)(n.strong,{children:"&"})," and ",(0,r.jsx)(n.strong,{children:"|"})," operators. When an operator is used on two ",(0,r.jsx)(n.strong,{children:"Q"})," objects, it yields a new Q object"]}),"\n",(0,r.jsxs)(n.p,{children:["For example, this statement yields a single ",(0,r.jsx)(n.strong,{children:"Q"}),' object that represents the "OR" of two ',(0,r.jsx)(n.strong,{children:'"question__startswith"'})," queries:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Q(question__startswith='Who') | Q(question__startswith='What')"})}),"\n",(0,r.jsxs)(n.p,{children:["This is equivalent to the following SQL ",(0,r.jsx)(n.strong,{children:"WHERE"})," clause:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"WHERE question LIKE 'Who%' OR question LIKE 'What%'"})}),"\n",(0,r.jsxs)(n.p,{children:["You can compose statements of arbitrary complexity by combining ",(0,r.jsx)(n.strong,{children:"Q"})," objects with the ",(0,r.jsx)(n.strong,{children:"&"})," and ",(0,r.jsx)(n.strong,{children:"|"})," operators and use parenthetical grouping. Also, ",(0,r.jsx)(n.strong,{children:"Q"})," objects can be negated using the ",(0,r.jsx)(n.strong,{children:"~"})," operator, allowing for combined lookups that combine both a normal query and a negated (",(0,r.jsx)(n.strong,{children:"NOT"}),") query:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Q(question__startswith='Who') | ~Q(pub_date__year=2005)"})}),"\n",(0,r.jsxs)(n.p,{children:["Each lookup function that takes keyword-arguments (e.g.",(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.filter",children:(0,r.jsx)(n.strong,{children:"filter()"})}),", ",(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.exclude",children:(0,r.jsx)(n.strong,{children:"exclude()"})}),", ",(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.get",children:(0,r.jsx)(n.strong,{children:"get()"})}),") can also be passed one or more ",(0,r.jsx)(n.strong,{children:"Q"})," objects as positional (not-named) arguments. If you provide multiple ",(0,r.jsx)(n.strong,{children:"Q"}),' object arguments to a lookup function, the arguments will be "AND"ed together. For example:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Poll.objects.get(\n    Q(question__startswith='Who'),\n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"... roughly translates into the SQL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * **from polls** WHERE question LIKE 'Who%'\nAND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Lookup functions can mix the use of ",(0,r.jsx)(n.strong,{children:"Q"})," objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or ",(0,r.jsx)(n.strong,{children:"Q"}),' objects) are "AND"ed together. However, ',(0,r.jsx)(n.strong,{children:"if a Q object is provided, it must precede the definition of any keyword arguments"}),". For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Poll.objects.get(\n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),\n    question__startswith='Who',\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/ref/models/querysets",children:"https://docs.djangoproject.com/en/2.0/ref/models/querysets"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.0/topics/db/queries",children:"https://docs.djangoproject.com/en/2.0/topics/db/queries"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(296540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);