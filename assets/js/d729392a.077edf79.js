"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[32516],{517264:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"data-structures/hierarchical-data-structure/readme","title":"Hierarchical Data Structure","description":"- Binary Heap","source":"@site/docs/data-structures/hierarchical-data-structure/readme.md","sourceDirName":"data-structures/hierarchical-data-structure","slug":"/data-structures/hierarchical-data-structure/","permalink":"/data-structures/hierarchical-data-structure/","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/hierarchical-data-structure/readme.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Verkle Trees","permalink":"/data-structures/hashtable/verkle-trees"},"next":{"title":"2-3 Search Trees","permalink":"/data-structures/hierarchical-data-structure/2-3-search-trees"}}');var n=a(474848),i=a(28453);const s={},c="Hierarchical Data Structure",l={},h=[];function d(e){const r={a:"a",h1:"h1",header:"header",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"hierarchical-data-structure",children:"Hierarchical Data Structure"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"binary-heap",children:"Binary Heap"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"k-ary-heap-d-ary-heap-d-way-heap",children:"k-ary heap / d-ary heap / d-way heap"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"binomial-heap",children:"Binomial Heap"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"fibonacci-heap",children:"Fibonacci Heap"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"segment-tree",children:"Segment Tree"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"tree-ds",children:"Tree DS"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"binary-tree",children:"Binary Tree"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"binary-search-tree",children:"Binary Search Tree"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"beap-bi-parental-heap",children:"Beap (Bi-Parental Heap)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"2-3-search-trees",children:"2-3 Search Trees"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"avl-tree",children:"AVL Tree"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"left-leaning-red-black-bsts-llrb-tree",children:"Left Leaning Red-Black BSTs (LLRB tree)"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"b-tree",children:"B-Tree"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"space-partitioning-trees",children:"Space-partitioning trees"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"kd-trees",children:"Kd-trees"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"interval-search-tree",children:"Interval Search Tree"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"problems",children:"Problems"})}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,r,a)=>{a.d(r,{R:()=>s,x:()=>c});var t=a(296540);const n={},i=t.createContext(n);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);