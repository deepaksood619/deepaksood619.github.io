"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[13174],{883935:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=t(785893),r=t(511151);const s={},a="Suffix Tree",o={id:"data-structures/trie/suffix-tree",title:"Suffix Tree",description:"In computer science, a suffix tree (also called PAT tree or, in an earlier form, position tree) is a compressed trie containing all the suffixes) of the given text as their keys and positions in the text as their values. Suffix trees allow particularly fast implementations of many important string operations.",source:"@site/docs/data-structures/trie/suffix-tree.md",sourceDirName:"data-structures/trie",slug:"/data-structures/trie/suffix-tree",permalink:"/data-structures/trie/suffix-tree",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/data-structures/trie/suffix-tree.md",tags:[],version:"current",lastUpdatedAt:1707138374,formattedLastUpdatedAt:"Feb 5, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Suffix Array",permalink:"/data-structures/trie/suffix-array"},next:{title:"Ternary Search Tries (TST)",permalink:"/data-structures/trie/ternary-search-tries-tst"}},l={},d=[{value:"Generalized Suffix Tree",id:"generalized-suffix-tree",level:2},{value:"How to build a Suffix Tree for a given text?",id:"how-to-build-a-suffix-tree-for-a-given-text",level:2},{value:"Suffix Tree and Its Construction",id:"suffix-tree-and-its-construction",level:2},{value:"Advanced",id:"advanced",level:2}];function c(e){const i={a:"a",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"suffix-tree",children:"Suffix Tree"}),"\n",(0,n.jsxs)(i.p,{children:["In ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Computer_science",children:"computer science"}),", a suffix tree (also called PAT tree or, in an earlier form, position tree) is a compressed ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Trie",children:"trie"})," containing all the ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Suffix_(computer_science)",children:"suffixes"})," of the given text as their keys and positions in the text as their values. Suffix trees allow particularly fast implementations of many important string operations."]}),"\n",(0,n.jsxs)(i.p,{children:["The construction of such a tree for the string S takes time and space linear in the length of S. Once constructed, several operations can be performed quickly, for instance locating a ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Substring",children:"substring"})," in S, locating a substring if a certain number of mistakes are allowed, locating matches for a ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Regular_expression",children:"regular expression"})," pattern etc. Suffix trees also provide one of the first linear-time solutions for the ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Longest_common_substring_problem",children:"longest common substring problem"}),". These speedups come at a cost: storing a string's suffix tree typically requires significantly more space than storing the string itself."]}),"\n",(0,n.jsx)(i.p,{children:"The suffix tree for the string S of length n is defined as a tree such that:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"The tree has exactly n leaves numbered from 1 to n."}),"\n",(0,n.jsxs)(i.li,{children:["Except for the root, every ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Tree_(data_structure)#Terminology",children:"internal node"})," has at least two children."]}),"\n",(0,n.jsx)(i.li,{children:"Each edge is labelled with a non-empty substring of S."}),"\n",(0,n.jsx)(i.li,{children:"No two edges starting out of a node can have string-labels beginning with the same character."}),"\n",(0,n.jsx)(i.li,{children:"The string obtained by concatenating all the string-labels found on the path from the root to leaf i spells out suffix S [i..n], for i from 1 to n."}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Since such a tree does not exist for all strings, S is padded with a terminal symbol not seen in the string (usually denoted $). This ensures that no suffix is a prefix of another, and that there will be n leaf nodes, one for each of the n suffixes of S. Since all internal non-root nodes are branching, there can be at most ",(0,n.jsx)(i.em,{children:"n"}),"\u2212 1 such nodes, and ",(0,n.jsx)(i.em,{children:"n"}),"+(",(0,n.jsx)(i.em,{children:"n"}),"\u22121)+1=2",(0,n.jsx)(i.em,{children:"n"})," nodes in total (",(0,n.jsx)(i.em,{children:"n"})," leaves, ",(0,n.jsx)(i.em,{children:"n"}),"\u22121 internal non-root nodes, 1 root)."]}),"\n",(0,n.jsx)(i.h2,{id:"generalized-suffix-tree",children:"Generalized Suffix Tree"}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Generalized_suffix_tree",children:"generalized suffix tree"})," is a suffix tree made for a set of words instead of a single word. It represents all suffixes from this set of words. Each word must be terminated by a different termination symbol or word."]}),"\n",(0,n.jsx)(i.h2,{id:"how-to-build-a-suffix-tree-for-a-given-text",children:"How to build a Suffix Tree for a given text?"}),"\n",(0,n.jsxs)(i.p,{children:["As discussed above, ",(0,n.jsx)(i.strong,{children:"Suffix Tree is compressed trie of all suffixes"}),", so following are very abstract steps to build a suffix tree from given text."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Generate all suffixes of given text."}),"\n",(0,n.jsx)(i.li,{children:"Consider all suffixes as individual words and build a compressed trie."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:'Let us consider an example text "banana0" where \'0\' is string termination character. Following are all suffixes of "banana0"'}),"\n",(0,n.jsx)(i.p,{children:"banana0\nanana0\nnana0\nana0\nna0\na0\n0"}),"\n",(0,n.jsx)(i.p,{children:"If we consider all of the above suffixes as individual words and build a trie, we get following."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"image",src:t(248351).Z+"",width:"664",height:"603"})}),"\n",(0,n.jsx)(i.p,{children:'If we join chains of single nodes, we get the following compressed trie, which is the Suffix Tree for given text "banana0"'}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"image",src:t(177425).Z+"",width:"663",height:"363"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"image",src:t(938075).Z+"",width:"1315",height:"1016"})}),"\n",(0,n.jsx)(i.h2,{id:"suffix-tree-and-its-construction",children:"Suffix Tree and Its Construction"}),"\n",(0,n.jsx)(i.p,{children:"Suffix Tree were first introduced to solve SubString Problem -"}),"\n",(0,n.jsx)(i.p,{children:"The substring problem: Pre-process text T so that the computation string matching problem is solved in time proportional to m, the length of pattern P."}),"\n",(0,n.jsx)(i.p,{children:"Use Case - Performing intensive queries on a big database, which is represented by T. Once the su\ufb03x tree for T is built each query is proportional to O(m) time."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Problems"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"SME - String Matching Existence problem - Given a pattern P and a text T, determine whether there is an occurance of P in T."}),"\n",(0,n.jsx)(i.li,{children:"SMC - String Matching Computation problem - Given a pattern P and a text T, determine all the occurance of P in T"}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"advanced",children:"Advanced"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Ukkonen's Linear Time Algorithm","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Implicit's Suffix Tree"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"An implicit su\ufb03x tree for a string S is a tree obtained from T(S$) by performing the following operations:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:"Remove all the terminal symbols $."}),"\n",(0,n.jsx)(i.li,{children:"From the resulting tree, remove all edges without label."}),"\n",(0,n.jsx)(i.li,{children:"Finally, from the resulting tree, remove all nodes that do not have at least two children."}),"\n"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Suffix Links"}),"\n",(0,n.jsx)(i.li,{children:"Extension Algorithm"}),"\n",(0,n.jsx)(i.li,{children:"Edge Label Compression"}),"\n",(0,n.jsx)(i.li,{children:"Phase Algorithm"}),"\n"]})]})}function f(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},248351:(e,i,t)=>{t.d(i,{Z:()=>n});const n=t.p+"assets/images/Suffix-Tree-image1-9376cff99223b6eb0665639cbe99f51d.jpg"},177425:(e,i,t)=>{t.d(i,{Z:()=>n});const n=t.p+"assets/images/Suffix-Tree-image2-5235062143012efa7fcf6075343bc607.jpg"},938075:(e,i,t)=>{t.d(i,{Z:()=>n});const n=t.p+"assets/images/Suffix-Tree-image3-2d87f15e922a9959df2894348d9980fa.jpg"},511151:(e,i,t)=>{t.d(i,{Z:()=>o,a:()=>a});var n=t(667294);const r={},s=n.createContext(r);function a(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);