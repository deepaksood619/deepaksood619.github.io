"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[99460],{117225:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"devops/terraform/examples","title":"Examples","description":"","source":"@site/docs/devops/terraform/examples.md","sourceDirName":"devops/terraform","slug":"/devops/terraform/examples","permalink":"/devops/terraform/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/terraform/examples.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1704952979000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Documentation","permalink":"/devops/terraform/documentation"},"next":{"title":"Variables","permalink":"/devops/terraform/variables"}}');var r=s(474848),t=s(28453);const o={},i="Examples",c={},l=[];function p(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"examples",children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#Variables\nvariable "region" {\n default = "us-east-1"\n}\n\nprovider "aws" {\n profile = "default"\n region = var.region\n}\n\nresource "aws_instance" "example" {\n ami = "ami-2757f631"\n instance_type = "t2.micro"\n\n provisioner "local-exec" {\n  command = "echo ${aws_instance.example.public_ip} > ip_address.txt"\n }\n}\n\nresource "aws_eip" "ip" {\n vpc = true\n instance = aws_instance.example.id\n}\n\n## Explicit Dependency Example\n# New resource for the S3 bucket our application will use.\nresource "aws_s3_bucket" "example" {\n # NOTE: S3 bucket names must be unique across _all_ AWS accounts, so\n # this name must be changed before applying this example to avoid naming\n # conflicts.\n bucket = "terraform-getting-started-guide"\n acl = "private"\n}\n\n# Change the aws_instance we declared earlier to now include "depends_on"\nresource "aws_instance" "example" {\n ami = "ami-2757f631" instance_type = "t2.micro"\n\n # Tells Terraform that this EC2 instance must be created only after the\n # S3 bucket has been created.\n depends_on = [aws_s3_bucket.example]\n}\n\n# remote-exec provisioner example\nresource "aws_key_pair" "example" {\n  key_name = "examplekey"\n  public_key = file("~/.ssh/id_rsa.pub")\n}\n\nresource "aws_instance" "web" {\n  key_name = aws_key_pair.example.key_name\n  # ...\n\n connection {\n    type     = "ssh"\n    user     = "root"\n    private_key = file("~/.ssh/id_rsa")\n    host     = self.public_ip\n  }\n\n  provisioner "remote-exec" {\n    inline = [\n      "sudo amazon-linux-extras enable nginx1.12",\n      "sudo yum -y install nginx",\n      "sudo systemctl start nginx"\n    ]\n  }\n}\n\n#Terraform consul module\n terraform {\n   required_version = "0.11.11"\n }\n\n provider "aws" {\n   access_key = "AWS ACCESS KEY"\n   secret_key = "AWS SECRET KEY"\n   region     = "us-east-1"\n }\n\n module "consul" {\n   source      = "hashicorp/consul/aws"\n   num_servers = "3"\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var a=s(296540);const r={},t=a.createContext(r);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);