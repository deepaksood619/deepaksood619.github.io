"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[45547],{59086:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>a,toc:()=>l});var o=t(785893),r=t(511151);const n={},i="ZeroMQ: Distributed Messaging",a={id:"networking/protocols/zeromq-distributed-messaging",title:"ZeroMQ: Distributed Messaging",description:"ZeroMQ (also known as \xd8MQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It's fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks. It has a score of language APIs and runs on most operating systems.- Carries messages across inproc, IPC, TCP, TIPC, multicast.",source:"@site/docs/networking/protocols/zeromq-distributed-messaging.md",sourceDirName:"networking/protocols",slug:"/networking/protocols/zeromq-distributed-messaging",permalink:"/networking/protocols/zeromq-distributed-messaging",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/networking/protocols/zeromq-distributed-messaging.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WebSockets",permalink:"/networking/protocols/websockets"},next:{title:"Psychology",permalink:"/psychology/"}},c={},l=[{value:"References",id:"references",level:2}];function u(e){const s={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h1,{id:"zeromq-distributed-messaging",children:"ZeroMQ: Distributed Messaging"}),"\n",(0,o.jsx)(s.p,{children:"ZeroMQ (also known as \xd8MQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It's fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks. It has a score of language APIs and runs on most operating systems.- Carries messages across inproc, IPC, TCP, TIPC, multicast."}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Smart patterns like pub-sub, push-pull, and router-dealer."}),"\n",(0,o.jsx)(s.li,{children:"High-speed asynchronous I/O engines, in a tiny library."}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"references",children:"References"}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.a,{href:"http://zguide.zeromq.org/page:all",children:"http://zguide.zeromq.org/page:all"})}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.a,{href:"https://www.pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-1",children:"https://www.pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-1"})})]})}function d(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},511151:(e,s,t)=>{t.d(s,{Z:()=>a,a:()=>i});var o=t(667294);const r={},n=o.createContext(r);function i(e){const s=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(n.Provider,{value:s},e.children)}}}]);