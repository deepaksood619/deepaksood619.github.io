"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[36984],{243048:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"python/documentation/06-text-processing-services","title":"6. Text Processing Services","description":"6.1. string - Common string operations","source":"@site/docs/python/documentation/06-text-processing-services.md","sourceDirName":"python/documentation","slug":"/python/documentation/06-text-processing-services","permalink":"/python/documentation/06-text-processing-services","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/documentation/06-text-processing-services.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4. Built-in Types","permalink":"/python/documentation/04-built-in-types"},"next":{"title":"7. Binary Data Services","permalink":"/python/documentation/07-binary-data-services"}}');var s=t(474848),r=t(28453);const o={},a="6. Text Processing Services",c={},d=[{value:"6.3 difflib",id:"63-difflib",level:2},{value:"6.5. unicodedata",id:"65-unicodedata",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"6-text-processing-services",children:"6. Text Processing Services"})}),"\n",(0,s.jsx)(n.p,{children:"6.1. string - Common string operations"}),"\n",(0,s.jsx)(n.p,{children:"6.2. re - Regular expression operations"}),"\n",(0,s.jsx)(n.p,{children:"6.3. difflib - Helpers for computing deltas"}),"\n",(0,s.jsx)(n.p,{children:"6.4. textwrap - Text wrapping and filling"}),"\n",(0,s.jsx)(n.p,{children:"6.5. unicodedata - Unicode Database"}),"\n",(0,s.jsx)(n.p,{children:"6.6. stringprep - Internet String Preparation"}),"\n",(0,s.jsx)(n.p,{children:"6.7. readline - GNU readline interface"}),"\n",(0,s.jsx)(n.p,{children:"6.8. rlcompleter - Completion function for GNU readline"}),"\n",(0,s.jsx)(n.h2,{id:"63-difflib",children:"6.3 difflib"}),"\n",(0,s.jsx)(n.p,{children:"Helper for computing deltas"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"class.difflib.SequenceMatcher"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"SequenceMatcher(isjunk=None,a='',b='',autojunk=True)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"class.difflib.Differ"}),"\n",(0,s.jsx)(n.li,{children:"class.difflib.HtmlDiff"}),"\n",(0,s.jsx)(n.li,{children:"difflib.get_close_matches(word, possibilities, n=3. cutoff=0.6)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"65-unicodedata",children:"6.5. unicodedata"}),"\n",(0,s.jsx)(n.p,{children:"Using theunicodedataPython module it's easy to normalize anyunicodedata strings (remove accents etc):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import unicodedata\n\ndata = u'\xefnv\xe9nt\xecv\xe9'\nnormal = unicodedata.normalize\n('NFKD', data).\nencode('ASCII', 'ignore')\nprint(normal)\n\nThe output will be:\n\nb'inventive'\n"})}),"\n",(0,s.jsx)(n.p,{children:"The NFKD stands for Normalization Form Compatibility Decomposition, and this is where characters are decomposed by compatibility, also multiple combining characters are arranged in a specific order."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(296540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);