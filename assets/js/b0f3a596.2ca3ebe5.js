"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[72887],{756507:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"computer-science/programming-paradigms/behavioral-state","title":"Behavioral - State","description":"Thestate pattern is a behavioralsoftware design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods) defined by the pattern\'s superclass.","source":"@site/docs/computer-science/programming-paradigms/behavioral-state.md","sourceDirName":"computer-science/programming-paradigms","slug":"/computer-science/programming-paradigms/behavioral-state","permalink":"/computer-science/programming-paradigms/behavioral-state","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/programming-paradigms/behavioral-state.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Behavioral - Publisher Subscriber","permalink":"/computer-science/programming-paradigms/behavioral-publisher-subscriber"},"next":{"title":"Behavioral - Strategy","permalink":"/computer-science/programming-paradigms/behavioral-strategy"}}');var r=a(474848),n=a(28453);const s={},o="Behavioral - State",c={},p=[];function h(e){const t={a:"a",h1:"h1",header:"header",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"behavioral---state",children:"Behavioral - State"})}),"\n",(0,r.jsxs)(t.p,{children:["The",(0,r.jsx)(t.strong,{children:"state pattern"})," is a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Behavioral_pattern",children:"behavioral"}),(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Software_design_pattern",children:"software design pattern"})," that implements a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/State_machine",children:"state machine"})," in an ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Object-oriented",children:"object-oriented"})," way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Method_(computer_programming)",children:"methods"})," defined by the pattern's superclass.\nThe state pattern can be interpreted as a ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Strategy_pattern",children:"strategy pattern"})," which is able to switch the current strategy through invocations of methods defined in the pattern's interface.\nThis pattern is used in ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Computer_programming",children:"computer programming"})," to encapsulate varying behavior for the same ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Object_(computer_science)",children:"object"})," based on its internal state. This can be a cleaner way for an object to change its behavior at runtime without resorting to large monolithic conditional statementsand thus improve maintainability."]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>o});var i=a(296540);const r={},n=i.createContext(r);function s(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);