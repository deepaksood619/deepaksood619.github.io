"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[11445],{896854:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"python/python-intro/oops","title":"OOPS","description":"In Python, everything is an object, and can be handled as such. This is what is meant when we say, for example, that functions are first-class objects. Functions, classes, strings, and even types are objects in Python: like any object, they have a type, they can be passed as function arguments, and they may have methods and properties. In this understanding, Python is an object-oriented language.","source":"@site/docs/python/python-intro/oops.md","sourceDirName":"python/python-intro","slug":"/python/python-intro/oops","permalink":"/python/python-intro/oops","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/oops.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Modules","permalink":"/python/python-intro/modules"},"next":{"title":"Operators","permalink":"/python/python-intro/operators"}}');var a=s(474848),o=s(28453);const i={},c="OOPS",r={},l=[{value:"The four major principles of object orientation are",id:"the-four-major-principles-of-object-orientation-are",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Create a static method",id:"create-a-static-method",level:2},{value:"Python 3 Classes",id:"python-3-classes",level:2},{value:"Three types of methods",id:"three-types-of-methods",level:2},{value:"Instance Method",id:"instance-method",level:3},{value:"Class Method",id:"class-method",level:3},{value:"Static Method",id:"static-method",level:3},{value:"Using Factory Method to create different types of classes using constructor",id:"using-factory-method-to-create-different-types-of-classes-using-constructor",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"oops",children:"OOPS"})}),"\n",(0,a.jsx)(t.p,{children:"In Python, everything is an object, and can be handled as such. This is what is meant when we say, for example, that functions are first-class objects. Functions, classes, strings, and even types are objects in Python: like any object, they have a type, they can be passed as function arguments, and they may have methods and properties. In this understanding, Python is an object-oriented language."}),"\n",(0,a.jsx)(t.h2,{id:"the-four-major-principles-of-object-orientation-are",children:"The four major principles of object orientation are"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Encapsulation"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Data Abstraction"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Polymorphism"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Inheritance"})}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Analogies - House and Houses, recipe and cake"})}),"\n",(0,a.jsx)(t.h2,{id:"concepts",children:"Concepts"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Instance methods need a class instance and can access the instance through self ."}),"\n",(0,a.jsx)(t.li,{children:"Class methods don't need a class instance. They can't access the instance ( self ) but they have access to the class itself via cls ."}),"\n",(0,a.jsx)(t.li,{children:"Static methods don't have access to cls or self . They work like regular functions but belong to the class's namespace."}),"\n",(0,a.jsx)(t.li,{children:"Static and class methods communicate and (to a certain degree) enforce developer intent about class design. This can have maintenance benefits."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"create-a-static-method",children:"Create a static method"}),"\n",(0,a.jsx)(t.p,{children:"If self is not used in a method, than that method can be made static using the decorator @staticmethod"}),"\n",(0,a.jsx)(t.p,{children:"Ex -"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@staticmethod\ndef site(obj)\n    return obj.device.owner\n"})}),"\n",(0,a.jsx)(t.h2,{id:"python-3-classes",children:"Python 3 Classes"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class MyClass:\n    def method(self):\n        return 'instance method called', self\n\n    @classmethod\n    def classmethod(cls):\n        return 'class method called', cls\n\n    @staticmethod\n    def staticmethod():\n    return 'static method called'\n"})}),"\n",(0,a.jsx)(t.h2,{id:"three-types-of-methods",children:"Three types of methods"}),"\n",(0,a.jsx)(t.h3,{id:"instance-method",children:"Instance Method"}),"\n",(0,a.jsx)(t.p,{children:"Normal methods that are associated with each class instance and an object is needed to access this methods (denoted by self)"}),"\n",(0,a.jsx)(t.p,{children:"Through the self parameter, instance methods can freely access attributes and other methods on the same object."}),"\n",(0,a.jsx)(t.p,{children:"This gives them a lot of power when it comes to modifying an object's state."}),"\n",(0,a.jsxs)(t.p,{children:["Not only can they modify object state, instance methods can also access the class itself through the ",(0,a.jsx)(t.code,{children:"self.__class__"})," attribute. This means instance methods can also modify class state."]}),"\n",(0,a.jsx)(t.h3,{id:"class-method",children:"Class Method"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"@classmethod"})," decorator used to create a classmethod"]}),"\n",(0,a.jsx)(t.p,{children:"This takes cls as a parameter"}),"\n",(0,a.jsx)(t.h3,{id:"static-method",children:"Static Method"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"@staticmethod"})," decorator used to create a staticmethod"]}),"\n",(0,a.jsx)(t.p,{children:"This takes neither a self nor a cls parameter"}),"\n",(0,a.jsx)(t.p,{children:"Therefore a static method can neither modify object state nor class state. Static methods are restricted in what data they can access - and they're primarily a way to namespace your methods."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"obj = MyClass()\nobj.staticmethod()\nMyClass.staticmethod()\n"})}),"\n",(0,a.jsx)(t.p,{children:"In Python its possible to call staticmethod() on object"}),"\n",(0,a.jsx)(t.h2,{id:"using-factory-method-to-create-different-types-of-classes-using-constructor",children:"Using Factory Method to create different types of classes using constructor"}),"\n",(0,a.jsx)(t.p,{children:"We can use class methods as factory functions for different types of classes"}),"\n",(0,a.jsx)(t.p,{children:"Ex:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class Pizza:\ndef __init__(self, ingredients):\n        self.ingredients = ingredients\n\n    def __repr__(self):\n        return f'Pizza({self.ingredients!r})'\n    @classmethod\n    def margherita(cls):\n    return cls(['mozzarella', 'tomatoes'])\n    @classmethod\n    def prosciutto(cls):\n    return cls(['mozzarella', 'tomatoes', 'ham'])\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Note how I'm using the ",(0,a.jsx)(t.code,{children:"cls"})," argument in the ",(0,a.jsx)(t.code,{children:"margherita"})," and ",(0,a.jsx)(t.code,{children:"prosciutto"})," factory methods instead of calling the ",(0,a.jsx)(t.code,{children:"Pizza"})," constructor directly."]}),"\n",(0,a.jsx)(t.p,{children:"OOPS Concepts"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Always define your data attributes in ",(0,a.jsx)(t.code,{children:"__init__"}),"."]}),"\n",(0,a.jsx)(t.li,{children:"Class attributes are shared across all instances"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class Platypus(Mammal)\n    latin_name = \"deep\"\n    lst = ['sood']\n"})}),"\n",(0,a.jsx)(t.p,{children:"Global List is shared and act as a static variable"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"super is used to call a method from a superclass"}),"\n",(0,a.jsx)(t.li,{children:"Python relies on convention and documentation instead of enforcement"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"No enforced private attributes, use a single underscore to signal that an attribute is not intended for public use (encapsulation)"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Special / magic methods start and end with two underscores ("dunder") and customize standard Python behavior (e.g. operator overloading)'}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Properties"})," allow you to add behavior to data attributes"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'class My2Vector(object):\n    def __init__(self, x, y):\n            self._x = x\nself._y = y\n    def get_x(self):\n        print "returning x, which is {}".format(self._x)\n        return self._x\n    def set_x(self, x):\n        print "setting x to {}".format(x)\n        self._x = x\n\n    x = property(get_x, set_x)\nv1 = My2Vector(1, 2)\nx = v1.x # uses the getter, which prints the value\nv1.x = 4 # uses the setter, printing the value\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Multiple inheritance (deriving from multiple classes)"}),"\n",(0,a.jsx)(t.li,{children:"Class decorators"}),"\n",(0,a.jsx)(t.li,{children:"Abstract Base Classes"}),"\n",(0,a.jsx)(t.li,{children:"Metaclasses"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.datacamp.com/community/tutorials/python-metaclasses",children:"https://www.datacamp.com/community/tutorials/python-metaclasses"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://www.youtube.com/playlist?list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc",children:"Python OOP Tutorials - Working with Classes"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>c});var n=s(296540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);