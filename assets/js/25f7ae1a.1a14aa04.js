"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[72685],{758351:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"languages/sql/sql-commands","title":"SQL Commands","description":"Types","source":"@site/docs/languages/sql/sql-commands.md","sourceDirName":"languages/sql","slug":"/languages/sql/sql-commands","permalink":"/languages/sql/sql-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/languages/sql/sql-commands.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1734554726000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Postgres Commands","permalink":"/languages/sql/postgres-commands"},"next":{"title":"SQL Data Types","permalink":"/languages/sql/sql-data-types"}}');var l=s(474848),r=s(28453);const t={},i="SQL Commands",c={},o=[{value:"Types",id:"types",level:2},{value:"QUERIES",id:"queries",level:2},{value:"SHOW",id:"show",level:3},{value:"AND",id:"and",level:3},{value:"AS",id:"as",level:3},{value:"BETWEEN",id:"between",level:3},{value:"CASE",id:"case",level:3},{value:"HAVING",id:"having",level:3},{value:"IN",id:"in",level:3},{value:"OR",id:"or",level:3},{value:"ORDER BY",id:"order-by",level:3},{value:"<code>ORDER BY ALL</code>",id:"order-by-all",level:4},{value:"LIKE",id:"like",level:3},{value:"LIKE BINARY",id:"like-binary",level:4},{value:"LIMIT",id:"limit",level:3},{value:"WHERE",id:"where",level:3},{value:"COMBINING TABLES",id:"combining-tables",level:2},{value:"UNION",id:"union",level:3},{value:"UNION ALL",id:"union-all",level:3},{value:"INTERSECT",id:"intersect",level:3},{value:"EXCEPT",id:"except",level:3},{value:"WITH",id:"with",level:3},{value:"SQL Server Clauses",id:"sql-server-clauses",level:2},{value:"MYSQL",id:"mysql",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"sql-commands",children:"SQL Commands"})}),"\n",(0,l.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"DDL - data definition language, such as CREATE, ALTER, DROP"}),"\n",(0,l.jsx)(n.li,{children:"DQL - data query language, such as SELECT"}),"\n",(0,l.jsx)(n.li,{children:"DML - data manipulation language, such as INSERT, UPDATE, DELETE"}),"\n",(0,l.jsx)(n.li,{children:"DCL - data control language, such as GRANT, REVOKE"}),"\n",(0,l.jsx)(n.li,{children:"TCL - transaction control language, such as COMMIT, ROLLBACK"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"SQL Commands",src:s(232303).A+"",width:"1000",height:"1000"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"image",src:s(890043).A+"",width:"690",height:"650"})}),"\n",(0,l.jsx)(n.h2,{id:"queries",children:"QUERIES"}),"\n",(0,l.jsx)(n.h3,{id:"show",children:"SHOW"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SHOW CREATE TABLE tbl_name\n\nSHOW FIELDS FROM tbl_name;\n\nSHOW CHARACTER SET;\n\nSHOW GLOBAL VARIABLES where Variable_Name='innodb_buffer_pool_size';\n"})}),"\n",(0,l.jsx)(n.h3,{id:"and",children:"AND"}),"\n",(0,l.jsx)(n.p,{children:"AND is an operator that combines two conditions. Both conditions must be true for the row to be included in the result set."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table_name\nWHERE column_1 = value_1\nAND column_2 = value_2;\n"})}),"\n",(0,l.jsx)(n.h3,{id:"as",children:"AS"}),"\n",(0,l.jsx)(n.p,{children:"AS is a keyword in SQL that allows you to rename a column or table using an alias."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name AS 'Alias'\nFROM table_name;\n"})}),"\n",(0,l.jsx)(n.h3,{id:"between",children:"BETWEEN"}),"\n",(0,l.jsx)(n.p,{children:"The BETWEEN operator is used to filter the result set within a certain range. The values can be numbers, text or dates."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value_1 AND value_2;\n\nSELECT *\nFROM movies\nWHERE name BETWEEN 'D%' and 'G%';\n-- This will select all movies that starts with D, E, F and not G.\n"})}),"\n",(0,l.jsx)(n.h3,{id:"case",children:"CASE"}),"\n",(0,l.jsx)(n.p,{children:"CASE expression is essentially the 'if/then' of the SQL world. Given one value, CASE can return another of your choice - but did you know you're able to use it in ORDER BY clauses to define custom orders based upon other values?"}),"\n",(0,l.jsx)(n.p,{children:"Here's a simple use case. Let's say you have a table listing employees and their job titles:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"id"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"name"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"title"})})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Oscar"}),(0,l.jsx)(n.td,{children:"Cleaner"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"2"}),(0,l.jsx)(n.td,{children:"Carol"}),(0,l.jsx)(n.td,{children:"CEO"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"3"}),(0,l.jsx)(n.td,{children:"Jimbo"}),(0,l.jsx)(n.td,{children:"CFO"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"4"}),(0,l.jsx)(n.td,{children:"Bobby"}),(0,l.jsx)(n.td,{children:"Assistant"})]})]})]}),"\n",(0,l.jsx)(n.p,{children:"If you wanted to have some sort of order based upon job titles, you could use CASE like so:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM employees ORDER BY\n    CASE\n    WHEN title = 'CEO' THEN 1\n    WHEN title = 'CFO' THEN 2\n    WHEN title = 'CTO' THEN 2\n    ELSE 3\n    END;\n-- (Work in MS SQL Server not in Oracle)\nSELECT name,\n    CASE\n    WHEN genre = 'romance' THEN 'Chill'\n    WHEN genre = 'comedy' THEN 'Chill'\n    ELSE 'Intense'\n    END AS 'Mood'\nFROM movies;\n\nSELECT\n    CASE\n        WHEN Grades.Grade < 8 THEN NULL\n        ELSE Students.Name\n    END AS 'Student_Name',\n    Grades.Grade, Students.Marks\nFROM Students\nJOIN Grades\nON Students.Marks BETWEEN Grades.Min_Mark and Grades.Max_Mark\nORDER BY Grades.Grade DESC, Students.Name, Students.Marks;\n"})}),"\n",(0,l.jsx)(n.h3,{id:"having",children:"HAVING"}),"\n",(0,l.jsx)(n.p,{children:"HAVING statement always comes after GROUP BY, but before ORDER BY and LIMIT."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name, aggregate_function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name\nHAVING aggregate_function(column_name) operator value\n"})}),"\n",(0,l.jsx)(n.h3,{id:"in",children:"IN"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"    SELECT column_name(s)\n    FROM table_name\n    WHERE column_name\n    IN (value1,value2,..)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"or",children:"OR"}),"\n",(0,l.jsx)(n.p,{children:"OR is an operator that filters the result set to only include rows where either condition is true."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name\nFROM table_name\nWHERE column_name = value_1\nOR column_name = value_2;\n"})}),"\n",(0,l.jsx)(n.h3,{id:"order-by",children:"ORDER BY"}),"\n",(0,l.jsx)(n.p,{children:"ORDER BY is a clause that indicates you want to sort the result set by a particular column either alphabetically or numerically."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name\nFROM table_name\nORDER BY column_name ASC|DESC;\n\nSELECT Name\nFROM STUDENTS\nWHERE Marks > 75\nORDER BY RIGHT(NAME, 3), ID ASC;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"order-by-all",children:(0,l.jsx)(n.code,{children:"ORDER BY ALL"})}),"\n",(0,l.jsxs)(n.p,{children:["A shorthand equivalent to specifying all expressions in the ",(0,l.jsx)(n.code,{children:"SELECT"})," list in the order they occur. If ",(0,l.jsx)(n.code,{children:"sort_direction"})," or ",(0,l.jsx)(n.code,{children:"nulls_sort_order"})," are specified they apply to each expression."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://docs.databricks.com/sql/language-manual/sql-ref-syntax-qry-select-orderby.html",children:"ORDER BY clause | Databricks on AWS"})}),"\n",(0,l.jsx)(n.h3,{id:"like",children:"LIKE"}),"\n",(0,l.jsx)(n.p,{children:"LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table_name\nWHERE column_name LIKE pattern;\n\nSELECT * FROM movies WHERE name LIKE 'Se_en';\n\n-- MY SQL\nSELECT DISTINCT CITY\nFROM STATION\nWHERE\n    CITY LIKE 'a%' OR\n    CITY LIKE 'e%' OR\n    CITY LIKE 'i%' OR\n    CITY LIKE 'o%' OR\n    CITY LIKE 'u%';\n\n-- MS SQL SERVER\nSELECT DISTINCT CITY\nFROM STATION\nWHERE\n    CITY LIKE '%[aeiou]';\n\n-- Here _ in a wildcard for substituting any value % is a wildcard character that matches zero or more missing letters in the pattern\n"})}),"\n",(0,l.jsx)(n.p,{children:"LIKE is an operator that compares column values with a specified pattern. During pattern matching, regular characters must exactly match the characters specified in the character string. The data type of the column can be any character or date data type. There are certain characters within the pattern, called wildcard characters."}),"\n",(0,l.jsx)(n.p,{children:"I have used four types of wildcards; they are:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Percent sign ",(0,l.jsx)(n.code,{children:"(%)"}),": It is used to represent or search any string of zero or more characters."]}),"\n",(0,l.jsxs)(n.li,{children:["Underscore ",(0,l.jsx)(n.code,{children:"(_)"}),": It is used to represent or search a single character."]}),"\n",(0,l.jsxs)(n.li,{children:["Bracket ",(0,l.jsx)(n.code,{children:"([])"}),": It is used to represent or search any single character within the specified range."]}),"\n",(0,l.jsxs)(n.li,{children:["Caret ",(0,l.jsx)(n.code,{children:"(^)"}),": It is used to represent or search any single character not within the specified range."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"SELECT User_ID, FirstName, LastName, Salary FROM UserDetail WHERE FirstName LIKE '%h%';"})}),"\n",(0,l.jsx)(n.h4,{id:"like-binary",children:"LIKE BINARY"}),"\n",(0,l.jsx)(n.p,{children:"The BINARY function converts a value to a binary string."}),"\n",(0,l.jsx)(n.p,{children:"LIKE BINARY is used for case insensitive search"}),"\n",(0,l.jsx)(n.h3,{id:"limit",children:"LIMIT"}),"\n",(0,l.jsx)(n.p,{children:"LIMIT is a clause that lets you specify the maximum number of rows the result set will have."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table_name\nLIMIT number;\n"})}),"\n",(0,l.jsx)(n.h3,{id:"where",children:"WHERE"}),"\n",(0,l.jsx)(n.p,{children:"WHERE is a clause that indicates you want to filter the result set to include only rows where the following condition is true."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table_name\nWHERE column_name operator value;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"combining-tables",children:"COMBINING TABLES"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/languages/sql/sql-joins",children:"SQL Joins"})}),"\n",(0,l.jsx)(n.h3,{id:"union",children:"UNION"}),"\n",(0,l.jsx)(n.p,{children:"This will add all rows of table_name2 on top of table_name1"}),"\n",(0,l.jsx)(n.p,{children:"While a JOIN combines rows of columns horizontally, a UNION combines the results vertically. Using a UNION combines the result of two queries into one column and removes duplicates. If your query has multiple columns, they need to be in the same order to complete the UNION."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s) FROM table_name1\nUNION\nSELECT column_name(s) FROM table_name2\n"})}),"\n",(0,l.jsx)(n.h3,{id:"union-all",children:"UNION ALL"}),"\n",(0,l.jsx)(n.p,{children:"The SQL UNION ALL operator is used to combine the result sets of 2 or more SELECT statements. It does not remove duplicate rows between the various SELECT statements (all rows are returned)."}),"\n",(0,l.jsx)(n.p,{children:"Each SELECT statement within the UNION ALL must have the same number of fields in the result sets with similar data types."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"What is the difference between UNION and UNION ALL?"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"UNION removes duplicate rows."}),"\n",(0,l.jsx)(n.li,{children:"UNION ALL does not remove duplicate rows."}),"\n",(0,l.jsx)(n.li,{children:"Always use UNION ALL unless you need to eliminate duplicate records. By using UNION ALL, you'll avoid the expensive distinct operation the database applies when using a UNION clause."}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s) FROM table_name1\nUNION ALL\nSELECT column_name(s) FROM table_name2\n"})}),"\n",(0,l.jsx)(n.h3,{id:"intersect",children:"INTERSECT"}),"\n",(0,l.jsxs)(n.p,{children:["Well, ",(0,l.jsx)(n.code,{children:"UNION"})," gave you all the results from the first query PLUS the results from the second query. ",(0,l.jsx)(n.code,{children:"INTERSECT"}),", on the other hand, only shows the rows which belong to ",(0,l.jsx)(n.strong,{children:"BOTH"})," tables."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"-- names of each person who has medals both in cycling and in skating.\nselect person from skating\nINTERSECT\nselect person from cycling\n"})}),"\n",(0,l.jsx)(n.h3,{id:"except",children:"EXCEPT"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"EXCEPT"})," shows all the results from the first (left) table with the ",(0,l.jsx)(n.strong,{children:"exception"})," of those that also appeared in the second (right) table."]}),"\n",(0,l.jsxs)(n.p,{children:["Some databases use the keyword ",(0,l.jsx)(n.code,{children:"MINUS"})," instead of ",(0,l.jsx)(n.code,{children:"EXCEPT"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"-- all the countries which have a medal in cycling but not in skating.\nselect country from cycling\nexcept\nselect country from skating\n"})}),"\n",(0,l.jsx)(n.h3,{id:"with",children:"WITH"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"WITH previous_query AS (\n    SELECT customer_id,\n    COUNT(subscription_id) AS 'subscriptions'\n    FROM orders\n    GROUP BY customer_id\n)\nSELECT customers.customer_name,\n    previous_query.subscriptions\nFROM previous_query\nJOIN customers\nON previous_query.customer_id = customers.customer_id;\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Can be nested"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"WITH\nquery1 AS (SELECT column1 FROM table1 WHERE condition1),\nquery2 AS (SELECT column2 FROM table2 WHERE condition2)\n    \u2026\n"})}),"\n",(0,l.jsx)(n.h2,{id:"sql-server-clauses",children:"SQL Server Clauses"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Over Clause"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Partition By clause"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"PARTITION BY"})," clause is a subclause of the ",(0,l.jsx)(n.code,{children:"OVER"})," clause. The ",(0,l.jsx)(n.code,{children:"PARTITION BY"})," clause divides a query's result set into partitions. The ",(0,l.jsx)(n.a,{href:"http://www.sqltutorial.org/sql-window-functions/",children:"window function"})," is operated on each partition separately and recalculate for each partition."]}),"\n",(0,l.jsx)(n.h2,{id:"mysql",children:"MYSQL"}),"\n",(0,l.jsxs)(n.p,{children:["Using % for mod (In oracle use ",(0,l.jsx)(n.strong,{children:"mod()"})," function)"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT DISTINCT CITY FROM STATION WHERE ID%2 = 0;\n\n-- LENGTH\nSELECT LENGTH(\"SQL Tutorial\") AS LengthOfString;\n\n-- CEIL\nSELECT CEIL((AVG(salary)) - (AVG(REPLACE(salary, '0', '')))) AS avg_salary FROM employees;\n\nSELECT @@innodb_buffer_pool_size;\n\n-- Information Schema MySQL\nselect * from information_schema.CHARACTER_SETS;\nselect * from information_schema.COLLATIONS;\nselect * from information_schema.COLLATION_CHARACTER_SET_APPLICABILITY;\nselect * from information_schema.COLUMNS;\nselect * from information_schema.EVENTS;\nselect * from information_schema.FILES;\nselect * from information_schema.KEY_COLUMN_USAGE;\nselect * from information_schema.PARAMETERS;\nselect * from information_schema.PARTITIONS;\nselect * from information_schema.REFERENTIAL_CONSTRAINTS;\nselect * from information_schema.ROUTINES;\nselect * from information_schema.SCHEMATA;\nselect * from information_schema.STATISTICS;\n    STATISTICS.CARDINALITY\nselect * from information_schema.TABLES;\n    TABLES.AUTO_INCREMENT\n    TABLES.AVG_ROW_LENGTH\n    TABLES.CHECKSUM\n    TABLES.CHECK_TIME\n    TABLES.CREATE_TIME\n    TABLES.DATA_FREE\n    TABLES.DATA_LENGTH\n    TABLES.INDEX_LENGTH\n    TABLES.MAX_DATA_LENGTH\n    TABLES.TABLE_ROWS\n    TABLES.UPDATE_TIME\nselect * from information_schema.TABLE_CONSTRAINTS;\nselect * from information_schema.TRIGGERS;\nselect * from information_schema.VIEWS;\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},232303:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/Pasted image 20240601092219-20691b6e03c590aab4394ecf2ce17cb8.jpg"},890043:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/SQL-Commands-image1-8d2881e3bd8a6a9d20ffb294f1a35b21.jpg"},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var a=s(296540);const l={},r=a.createContext(l);function t(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);