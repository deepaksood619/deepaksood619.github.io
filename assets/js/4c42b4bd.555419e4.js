"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[88118],{805003:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"databases/data-warehouses/bigquery/storage-optimizations","title":"Storage Cost Optimisation","description":"Recommendation: Move from Logical to Physical Storage","source":"@site/docs/databases/data-warehouses/bigquery/storage-optimizations.md","sourceDirName":"databases/data-warehouses/bigquery","slug":"/databases/data-warehouses/bigquery/storage-optimizations","permalink":"/databases/data-warehouses/bigquery/storage-optimizations","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/databases/data-warehouses/bigquery/storage-optimizations.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1738125989000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Slots","permalink":"/databases/data-warehouses/bigquery/slots"},"next":{"title":"ClickHouse","permalink":"/databases/data-warehouses/clickhouse"}}');var n=a(474848),i=a(28453);const o={},l="Storage Cost Optimisation",r={},c=[{value:"Cost Comparison",id:"cost-comparison",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Implementation Steps",id:"implementation-steps",level:2},{value:"Non-programmatic Approach",id:"non-programmatic-approach",level:3},{value:"Identifying tables with the type of storage across Organization Steps",id:"identifying-tables-with-the-type-of-storage-across-organization-steps",level:3},{value:"Programmatically change all the dataset whose cost is reduced due to compressed storage",id:"programmatically-change-all-the-dataset-whose-cost-is-reduced-due-to-compressed-storage",level:3}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"storage-cost-optimisation",children:"Storage Cost Optimisation"})}),"\n",(0,n.jsx)(t.p,{children:"Recommendation: Move from Logical to Physical Storage"}),"\n",(0,n.jsx)(t.p,{children:"BigQuery charges based on active logical storage, which is often higher compared to physical storage due to the compression factor. Here\u2019s how you can optimize this:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Understand Compression Benefits:"})," BigQuery's physical storage cost is based on compressed storage. Depending on the compression ratio of your data, you can potentially reduce storage costs significantly. For example, if your data compresses well (as per Bigquery Tables scan), you may only pay a fraction of the logical storage cost."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Compression Strategy:"})," Evaluate all your BigQuery Tables and choose appropriate Tables that will help reduce your overall cost of storage and query performance. For highly compressible data, the cost savings can be substantial (up to 30-40% savings compared to logical storage costs)."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Example:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:a(867901).A+"",width:"1712",height:"942"})}),"\n",(0,n.jsx)(t.p,{children:"From the above snapshot and the storage cost information, we can deduce the following about the cost efficiency of physical storage over logical storage due to compression:"}),"\n",(0,n.jsx)(t.p,{children:"Logical Storage (us-multi region dataset)"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Active logical storage costs $0.02 per GiB per month."}),"\n",(0,n.jsx)(t.li,{children:"Long-term logical storage costs $0.01 per GiB per month."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Physical Storage (us-multi region dataset)"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Active physical storage costs $0.04 per GiB per month."}),"\n",(0,n.jsx)(t.li,{children:"Long-term physical storage costs $0.02 per GiB per month."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"While the cost of physical storage is generally twice that of logical storage, effective compression can reduce the effective cost to as low as 1/5th of the original logical storage cost, depending on your data characteristics. This strategy can lead to significant cost savings over time."}),"\n",(0,n.jsx)(t.p,{children:"Snapshot Data(us-multi region dataset)"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Total logical bytes: 287.77 GiB"}),"\n",(0,n.jsx)(t.li,{children:"Total physical bytes: 78.74 GiB"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"cost-comparison",children:"Cost Comparison"}),"\n",(0,n.jsx)(t.p,{children:"Without Compression (Logical Storage)"}),"\n",(0,n.jsx)(t.p,{children:"Active logical storage cost:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"287.77 GiB * $0.02/GiB = $5.75 per month"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Long-term logical storage cost:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"287.77 GiB * $0.01/GiB = $2.88 per month"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"With Compression (Physical Storage)"}),"\n",(0,n.jsx)(t.p,{children:"Active physical storage cost:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"78.74 GiB * $0.04/GiB = $3.15 per month"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Long-term physical storage cost:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"78.74 GiB * $0.02/GiB = $1.57 per month\nSavings Analysis"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Logical vs. Physical Storage (Active)"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Logical: $5.75 per month"}),"\n",(0,n.jsx)(t.li,{children:"Physical: $3.15 per month"}),"\n",(0,n.jsx)(t.li,{children:"Savings: $5.75 - $3.15 = $2.60 per month"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Logical vs. Physical Storage (Long-term)"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Logical: $2.88 per month"}),"\n",(0,n.jsx)(t.li,{children:"Physical: $1.57 per month"}),"\n",(0,n.jsx)(t.li,{children:"Savings: $2.88 - $1.57 = $1.31 per month"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(t.p,{children:"Due to compression, storing data physically is more cost-effective:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"For active storage, you save $2.60 per month."}),"\n",(0,n.jsx)(t.li,{children:"For long-term storage, you save $1.31 per month."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The compression reduces the physical storage size, thus lowering the overall cost despite the higher per-GiB rate for physical storage."}),"\n",(0,n.jsx)(t.h2,{id:"implementation-steps",children:"Implementation Steps"}),"\n",(0,n.jsx)(t.h3,{id:"non-programmatic-approach",children:"Non-programmatic Approach"}),"\n",(0,n.jsx)(t.p,{children:"Step1: Apply Physical Billing model at a Dataset level"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:a(415750).A+"",width:"1236",height:"464"})}),"\n",(0,n.jsx)(t.p,{children:"Click on Edit Details"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:a(553968).A+"",width:"1266",height:"548"})}),"\n",(0,n.jsx)(t.p,{children:"Click on Advanced Options and select the storage and time travel window"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:a(155521).A+"",width:"1228",height:"540"})}),"\n",(0,n.jsx)(t.h3,{id:"identifying-tables-with-the-type-of-storage-across-organization-steps",children:"Identifying tables with the type of storage across Organization Steps"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"WITH storage_data AS (\n SELECT\n   project_id,\n   project_number,\n   table_catalog,\n   table_schema,\n   table_name,\n   total_logical_bytes,\n   active_logical_bytes,\n   long_term_logical_bytes,\n   current_physical_bytes,\n   total_physical_bytes,\n   active_physical_bytes,\n   long_term_physical_bytes\n FROM\n   `region-asia-south1`.INFORMATION_SCHEMA.TABLE_STORAGE\n-- `region-asia-south1`.INFORMATION_SCHEMA.TABLE_STORAGE_BY_ORGANIZATION\n),\ncompression_ratios AS (\n SELECT\n   project_id,\n   table_catalog,\n   table_schema,\n   table_name,\n   total_logical_bytes,\n   active_logical_bytes,\n   long_term_logical_bytes,\n   current_physical_bytes,\n   total_physical_bytes,\n   active_physical_bytes,\n   long_term_physical_bytes,\n   SAFE_DIVIDE(total_logical_bytes, total_physical_bytes) AS total_logical_to_physical_ratio,\n   SAFE_DIVIDE(active_logical_bytes, active_physical_bytes) AS active_logical_to_physical_ratio,\n   SAFE_DIVIDE(long_term_logical_bytes, long_term_physical_bytes) AS long_term_logical_to_physical_ratio\n FROM\n   storage_data\n),\ncosts AS (\n SELECT\n   project_id,\n   table_catalog,\n   table_schema,\n   table_name,\n   total_logical_bytes,\n   active_logical_bytes,\n   long_term_logical_bytes,\n   current_physical_bytes,\n   total_physical_bytes,\n   active_physical_bytes,\n   long_term_physical_bytes,\n   total_logical_to_physical_ratio,\n   active_logical_to_physical_ratio,\n   long_term_logical_to_physical_ratio,\n   GREATEST(0, SAFE_DIVIDE(active_logical_bytes, 1024 * 1024 * 1024) - 10) * 0.02 AS active_logical_cost,\n   GREATEST(0, SAFE_DIVIDE(long_term_logical_bytes, 1024 * 1024 * 1024) - 10) * 0.01 AS long_term_logical_cost,\n   GREATEST(0, SAFE_DIVIDE(active_physical_bytes, 1024 * 1024 * 1024) - 10) * 0.04 AS active_physical_cost,\n   GREATEST(0, SAFE_DIVIDE(long_term_physical_bytes, 1024 * 1024 * 1024) - 10) * 0.02 AS long_term_physical_cost\n FROM\n   compression_ratios\n)\nSELECT\n project_id,\n table_catalog,\n table_schema,\n table_name,\n total_logical_bytes,\n active_logical_bytes,\n long_term_logical_bytes,\n current_physical_bytes,\n total_physical_bytes,\n active_physical_bytes,\n long_term_physical_bytes,\n total_logical_to_physical_ratio,\n active_logical_to_physical_ratio,\n long_term_logical_to_physical_ratio,\n active_logical_cost,\n long_term_logical_cost,\n active_physical_cost,\n long_term_physical_cost\nFROM\n costs\nORDER BY\n project_id, table_catalog, table_schema, table_name;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"programmatically-change-all-the-dataset-whose-cost-is-reduced-due-to-compressed-storage",children:"Programmatically change all the dataset whose cost is reduced due to compressed storage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'from google.cloud import bigquery\nimport subprocess\nimport pandas as pd\n\n# Initialize BigQuery client\nclient = bigquery.Client()\n\n# Define your query to find datasets with high logical storage\nquery = """\nSELECT\n  project_id,\n  dataset_id,\n  SUM(total_logical_bytes) AS total_logical_bytes_sum,\n  SUM(total_physical_bytes) AS total_physical_bytes_sum\nFROM\n  `region-asia-south1`.INFORMATION_SCHEMA.TABLE_STORAGE\n-- `region-asia-south1`.INFORMATION_SCHEMA.TABLE_STORAGE_BY_ORGANIZATION\nGROUP BY\n  project_id, dataset_id\nHAVING\n  SUM(total_logical_bytes) > 2 * SUM(total_physical_bytes)\n"""\n\n# Run the query\nquery_job = client.query(query)\nresults = query_job.result()\n\n# Function to change storage type\ndef change_storage_type(project_id, dataset_id, billing_model):\n    # Construct the curl command\n    curl_command = f"""\n    curl -H "Authorization: Bearer $(gcloud auth print-access-token)" \\\n         -H "Content-Type: application/json" \\\n         -L -X PUT \\\nhttps://bigquery.googleapis.com/bigquery/v2/projects/{project_id}/datasets/{dataset_id} \\\n         -d \'{{"datasetReference": {{"projectId": "{project_id}", "datasetId": "{dataset_id}"}}, "storageBillingModel": "{billing_model}"}}\'\n    """\n\n    # Execute the curl command\n    result = subprocess.run(curl_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n    if result.returncode == 0:\n        return True, result.stdout\n    else:\n        return False, result.stderr\n\n# List to store results\ndata = []\n\n# Process each dataset that meets the criteria\nfor row in results:\n    project_id = row[\'project_id\']\n    dataset_id = row[\'dataset_id\']\n    logical_bytes = row[\'total_logical_bytes\']\n    physical_bytes = row[\'total_physical_bytes\']\n\n    print(f"Changing storage type for {project_id}.{dataset_id}")\n\n    # Change the storage type to physical storage (or the desired billing model)\n    success, message = change_storage_type(project_id, dataset_id, "PHYSICAL_STORAGE")\n\n    # Store the result\n    data.append({\n        \'project_id\': project_id,\n        \'dataset_id\': dataset_id,\n        \'total_logical_bytes\': logical_bytes,\n        \'total_physical_bytes\': physical_bytes,\n        \'success\': success,\n        \'message\': message\n    })\n\n# Convert the results to a DataFrame\n\n\ndf = pd.DataFrame(data)\n\n# Display the DataFrame\nprint(df)\n\nimport ace_tools as tools\n\ntools.display_dataframe_to_user(name="Storage Type Update Results", dataframe=df)\n\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:a(66521).A+"",width:"1868",height:"776"})}),"\n",(0,n.jsxs)(t.p,{children:["Auto Deleting Tables that are not frequently used in a project with table Prefix \u2019",(0,n.jsx)(t.em,{children:"bqc"}),'\u2019: This script is designed to automatically delete tables in a Google BigQuery dataset that are prefixed with "bqc" and have not been modified for a specified number of hours.']}),"\n",(0,n.jsx)(t.p,{children:"Why?"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"This script would be useful in environments where there are many temporary or ephemeral tables that are not needed after a certain period."}),"\n",(0,n.jsx)(t.li,{children:"\xa0It helps in managing and cleaning up the dataset by removing old or unused tables, potentially reducing costs and improving manageability."}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"from google.cloud import bigquery\n# Create a BigQuery client\n\nclient = bigquery.Client()\n# Define your dataset and filter criteria\ndataset_id = 'erazuthmohandasrakesh-emr.Banking'\nprefix = '_bqc_'\nhours_threshold = 8760 <--- change this to\n# Construct the SQL query to list tables matching the criteria\nquery = f\"\"\"\nSELECT\n  *\nFROM (\n  SELECT\n    *,\n    TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), creation_time_dt, HOUR) AS hours_since_creation,\n    TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), last_modified_time_dt, HOUR) AS hours_since_last_modification,\n  FROM (\n    SELECT\n      project_id AS table_catalog,\n      dataset_id AS table_schema,\n      table_id AS table_name,\n      *,\n      TIMESTAMP_MILLIS(creation_time) AS creation_time_dt,\n      TIMESTAMP_MILLIS(last_modified_time) AS last_modified_time_dt,\n      ROUND(SAFE_DIVIDE(size_bytes, POW(1000, 2)), 1) AS size_mb,\n      ROUND(SAFE_DIVIDE(size_bytes, POW(1000, 3)), 2) AS size_gb,\n      CASE\n        WHEN type = 1 THEN 'native table'\n        WHEN type = 2 THEN 'view'\n        WHEN type = 3 THEN 'external table'\n      ELSE\n      'unknown'\n    END\n      AS type\n    FROM\n      {dataset_id}.__TABLES__\n    WHERE\n      project_id IS NOT NULL\n      AND table_id LIKE '{prefix}%'))\nWHERE\n  hours_since_last_modification>={hours_threshold}\n\"\"\"\n\n# Execute the query and drop the matching tables\nquery_job = client.query(query)\nfor row in query_job:\n\xa0\xa0\xa0\xa0table_id = row['table_id']\n\xa0\xa0\xa0\xa0client.query(f\"DROP TABLE IF EXISTS `{dataset_id}.{table_id}`\").result()\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:a(784744).A+"",width:"908",height:"990"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},784744:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/Screenshot 2025-01-27 at 9.10.02 PM-b6ab805a0cd3a6fbc743b70e9598c77c.jpg"},66521:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/Screenshot 2025-01-27 at 9.12.10 PM-5235b1f5643cde26c6515859d12854e8.jpg"},155521:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/Screenshot 2025-01-27 at 9.14.05 PM-c6fbf8c079942afd4001fa5c4511adf5.jpg"},553968:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/Screenshot 2025-01-27 at 9.14.37 PM-78021e7d4c40602b404309d034e1a389.jpg"},415750:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/Screenshot 2025-01-27 at 9.14.53 PM-1e5676b71daf135915c58b4c1859393f.jpg"},867901:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/Screenshot 2025-01-27 at 9.16.10 PM-f3304ce9c3344428e11e4077af94cd5a.jpg"},28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>l});var s=a(296540);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);