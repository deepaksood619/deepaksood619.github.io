"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[59211],{917643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=t(785893),o=t(511151);const r={},s="Dependency Injection",a={id:"computer-science/programming-concepts/dependency-injection",title:"Dependency Injection",description:"In software engineering, dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. A dependency is an object that can be used (a service)). An injection is the passing of a dependency to a dependent object (a client)) that would use it. The service is made part of the client's state).Passing the service to the client, rather than allowing a client to build or find the service, is the fundamental requirement of the pattern.",source:"@site/docs/computer-science/programming-concepts/dependency-injection.md",sourceDirName:"computer-science/programming-concepts",slug:"/computer-science/programming-concepts/dependency-injection",permalink:"/computer-science/programming-concepts/dependency-injection",draft:!1,unlisted:!1,editUrl:"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/computer-science/programming-concepts/dependency-injection.md",tags:[],version:"current",lastUpdatedAt:1701793554,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cohesion and Coupling",permalink:"/computer-science/programming-concepts/cohesion-and-coupling"},next:{title:"Inversion of Control",permalink:"/computer-science/programming-concepts/inversion-of-control"}},c={},d=[{value:"Python Dependency Injection",id:"python-dependency-injection",level:2},{value:"Like I&#39;m Five",id:"like-im-five",level:3},{value:"Others",id:"others",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.a,{href:"https://en.m.wikipedia.org/wiki/Software_engineering",children:"software engineering"}),", dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. A dependency is an object that can be used (a ",(0,i.jsx)(n.a,{href:"https://en.m.wikipedia.org/wiki/Service_(systems_architecture)",children:"service"}),"). An injection is the passing of a dependency to a dependent object (a ",(0,i.jsx)(n.a,{href:"https://en.m.wikipedia.org/wiki/Client_(computing)",children:"client"}),") that would use it. The service is made part of the client's ",(0,i.jsx)(n.a,{href:"https://en.m.wikipedia.org/wiki/State_(computer_science)",children:"state"}),".Passing the service to the client, rather than allowing a client to build or ",(0,i.jsx)(n.a,{href:"https://en.m.wikipedia.org/wiki/Service_locator_pattern",children:"find the service"}),", is the fundamental requirement of the pattern."]}),"\n",(0,i.jsx)(n.h2,{id:"python-dependency-injection",children:"Python Dependency Injection"}),"\n",(0,i.jsxs)(n.p,{children:["An immediate issue with the code above is thatdraw_squaredepends on a global variable. This has ",(0,i.jsx)(n.a,{href:"http://wiki.c2.com/?GlobalVariablesAreBad",children:"lots of bad consequences"}),", and there are two easy ways to fix it. The first would be fordraw_squareto create theTurtleinstance itself (which I'll discuss later). This might not be desirable if we want to use a singleTurtle for all our drawing. So for now, we'll simply use parameterization again to maketurtlea parameter todraw_square:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from turtle import Turtle\n\ndef draw_square(turtle, size):\nfor i in range(0, 4):\nturtle.forward(size)\nturtle.left(90)\n\nturtle = Turtle()\ndraw_square(turtle, 100)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This has a fancy name - dependency injection. It just means that if a function needs some kind of object to do its work, likedraw_squareneeds aTurtle, the caller is responsible for passing that object in as a parameter. No, really, if you were ever curious about Python dependency injection, this is it."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.toptal.com/python/python-parameterized-design-patterns",children:"https://www.toptal.com/python/python-parameterized-design-patterns"})}),"\n",(0,i.jsx)(n.h3,{id:"like-im-five",children:"Like I'm Five"}),"\n",(0,i.jsx)(n.p,{children:"Traditional: going to a party, bring your own drinks"}),"\n",(0,i.jsx)(n.p,{children:"Inversion of control: going to a party, there is an ice chest full of drinks, and there's a guy handing out the drinks from the ice chest. You only get to drink what's been handed to you"}),"\n",(0,i.jsx)(n.p,{children:"Dependency injection: going to a party, and there's an open bar, the bartender makes your drinks, and servers brings you your drinks. You don't know what you're drinking, but it tastes good"}),"\n",(0,i.jsx)(n.p,{children:"Dependency injectionisa fancy kind of Inversion of Control, but also has a bartender & servers."}),"\n",(0,i.jsx)(n.h2,{id:"others",children:"Others"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/google/guice",children:"https://github.com/google/guice"})}),"\n",(0,i.jsx)(n.p,{children:"Guice is a lightweight dependency injection framework for Java 6 and above."})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},511151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var i=t(667294);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);