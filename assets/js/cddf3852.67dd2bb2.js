"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[28156],{787848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"python/python-intro/generators","title":"Generators","description":"- Generator functions allow you to declare a function that behaves like an iterator.","source":"@site/docs/python/python-intro/generators.md","sourceDirName":"python/python-intro","slug":"/python/python-intro/generators","permalink":"/python/python-intro/generators","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/python-intro/generators.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Functions","permalink":"/python/python-intro/functions"},"next":{"title":"Input Output Template","permalink":"/python/python-intro/input-output-template"}}');var i=t(474848),o=t(28453);const s={},a="Generators",h={},p=[{value:"Using Generator Expression (introduced with PEP 289)",id:"using-generator-expression-introduced-with-pep-289",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"generators",children:"Generators"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Generator functions allow you to declare a function that behaves like an iterator."}),"\n",(0,i.jsx)(n.li,{children:"They allow programmers to make an iterator in a fast, easy, and clean way."}),"\n",(0,i.jsx)(n.li,{children:"Generators introduce theyieldstatement to Python. It works a bit likereturnbecause it returns a value."}),"\n",(0,i.jsx)(n.li,{children:"The difference is thatit saves the stateof the function. The next time the function is called, execution continues fromwhere it left off, with thesame variable valuesit had before yielding."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If we transform ourPrimesiterator into a generator, it'll look like this:"}),"\n",(0,i.jsx)(n.p,{children:"def Primes(max):"}),"\n",(0,i.jsx)(n.p,{children:"number = 1"}),"\n",(0,i.jsx)(n.p,{children:"while number < max:"}),"\n",(0,i.jsx)(n.p,{children:"number += 1"}),"\n",(0,i.jsx)(n.p,{children:"if check_prime(number):"}),"\n",(0,i.jsx)(n.p,{children:"yield number"}),"\n",(0,i.jsx)(n.p,{children:"primes = Primes(100000000000)"}),"\n",(0,i.jsx)(n.p,{children:"print(primes)"}),"\n",(0,i.jsx)(n.p,{children:"for x in primes:"}),"\n",(0,i.jsx)(n.p,{children:"print(x)"}),"\n",(0,i.jsxs)(n.h2,{id:"using-generator-expression-introduced-with-pep-289",children:["Using Generator Expression (introduced with ",(0,i.jsx)(n.a,{href:"https://www.python.org/dev/peps/pep-0289/",children:"PEP 289"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"primes = (i for i in range(2, 100000000000) if check_prime(i))"}),"\n",(0,i.jsx)(n.p,{children:"print(primes)"}),"\n",(0,i.jsx)(n.p,{children:"for x in primes:"}),"\n",(0,i.jsx)(n.p,{children:"print(x)"}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888",children:"https://medium.freecodecamp.org/how-and-why-you-should-use-python-generators-f6fb56650888"})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(296540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);