"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[98061],{588531:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"devops/monitoring/telegraf/commands-and-configs","title":"Commands & Configs","description":"Telegraf","source":"@site/docs/devops/monitoring/telegraf/commands-and-configs.md","sourceDirName":"devops/monitoring/telegraf","slug":"/devops/monitoring/telegraf/commands-and-configs","permalink":"/devops/monitoring/telegraf/commands-and-configs","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/devops/monitoring/telegraf/commands-and-configs.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1728328563000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Telegraf","permalink":"/devops/monitoring/telegraf/"},"next":{"title":"Other DevOps","permalink":"/devops/others/"}}');var o=t(474848),s=t(28453);const a={},l="Commands & Configs",i={},c=[{value:"Telegraf",id:"telegraf",level:2},{value:"Commands",id:"commands",level:2},{value:"Test Telegraf",id:"test-telegraf",level:2},{value:"Config",id:"config",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"commands--configs",children:"Commands & Configs"})}),"\n",(0,o.jsx)(n.h2,{id:"telegraf",children:"Telegraf"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#run default conf file\ndocker run --rm --net=influxdb --name telegraf telegraf\n\n# get conf file for editing\ndocker run --rm telegraf telegraf config > telegraf.conf\n\ndocker run --rm -d --net=influxdb -e "HOST_PROC=/rootfs/proc" -e "HOST_SYS=/rootfs/sys" -e "HOST_ETC=/rootfs/etc" -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro -v /var/run/docker.sock:/var/run/docker.sock:ro -v /sys:/rootfs/sys:ro -v /proc:/rootfs/proc:ro -v /etc:/rootfs/etc:ro --name telegraf telegraf\n\ndocker run --rm -d --net=influxdb -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro -v /var/run/docker.sock:/var/run/docker.sock:ro -v /rootfs/sys:/sys:ro -v /rootfs/proc:/proc:ro -v /rootfs/etc:/etc:ro -v /var/run/utmp:/var/run/utmp -v --name telegraf telegraf\n\n--add-host="influxdb:192.168.0.73"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"#conf file\nsudo nano /etc/telegraf/telegraf.conf\n\n# restart telegraf and load telegraf.conf\nsudo service telegraf restart\n\nsudo service telegraf status\n\n#telegraf logs\ntail -f /var/log/telegraf/telegraf.log\n"})}),"\n",(0,o.jsx)(n.h2,{id:"test-telegraf",children:"Test Telegraf"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"telegraf -config telegraf.conf -test\n\nsudo sed -i 's+telegraf:.*+telegraf:x:0:0::/etc/telegraf:/bin/false+g' /etc/passwd\n"})}),"\n",(0,o.jsx)(n.h2,{id:"config",children:"Config"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[global_tags]\n  dc = "$CLUSTER"\n  user = "$USER_SYSTEM"\n\n[agent]\n  interval = "10s"\n  round_interval = true\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  collection_jitter = "2s"\n  flush_interval = "30s"\n  flush_jitter = "2s"\n  precision = ""\n  debug = $DEBUG\n  quiet = false\n  logfile = ""\n  hostname = "$HOSTNAME_SYSTEM"\n  omit_hostname = false\n\n[[outputs.influxdb]]\n  urls = ["http://servermonitor.abc.com:8086"]\n  database = "telegraf"\n  username = ""\n  password = ""\n  namedrop = ["tail", "docker_log"]\n\n[[outputs.elasticsearch]]\n  urls = ["http://elasticsearch.abc.com:9200"]\n  timeout = "1m"\n  enable_sniffer = false\n  health_check_interval = "0s"\n  index_name = "server_log-%Y.%m.%d"\n  manage_template = true\n  template_name = "telegraf"\n  overwrite_template = false\n  namepass = ["tail", "docker_log"]\n\n[[inputs.cpu]]\n  percpu = true\n  totalcpu = true\n  collect_cpu_time = false\n  report_active = false\n\n[[inputs.disk]]\n  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]\n\n[[inputs.kernel]]\n\n[[inputs.mem]]\n\n[[inputs.processes]]\n\n[[inputs.swap]]\n\n[[inputs.system]]\n\n[[inputs.diskio]]\n\n[[inputs.docker]]\n  endpoint = "unix:///var/run/docker.sock"\n  gather_services = false\n  container_names = []\n  timeout = "5s"\n  perdevice = true\n  total = false\n\n[[inputs.internal]]\n\n[[inputs.interrupts]]\n\n[[inputs.net]]\n\n[[inputs.net_response]]\n  protocol = "tcp"\n  address = "localhost:80"\n\n[[inputs.netstat]]\n\n[[inputs.tail]]\n  files = ["/rootfs/var/log/cron/*.log", "/rootfs/var/log/nginx/error.log"]\n  from_beginning = false\n  pipe = false\n  watch_method = "inotify"\n  data_format = "value"\n  data_type = "string"\n\n[[inputs.docker_log]]\n  endpoint = "unix:///var/run/docker.sock"\n  from_beginning = false\n  timeout = "5s"\n  container_name_include = []\n  container_name_exclude = []\n  container_state_include = []\n  container_state_exclude = []\n  docker_label_include = []\n  docker_label_exclude = []\n\n[[inputs.logparser]]\n  files = ["/rootfs/var/log/nginx/access.log"]\n  from_beginning = false\n  watch_method = "inotify"\n\n  [inputs.logparser.grok]\n    patterns = ["%{COMBINED_LOG_FORMAT}"]\n    measurement = "nginx_access_log"\n    timezone = "Asia/Kolkata"\n'})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(296540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);