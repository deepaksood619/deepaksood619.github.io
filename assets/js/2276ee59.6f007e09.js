"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[55848],{30866:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"networking/protocols/zeromq-distributed-messaging","title":"ZeroMQ: Distributed Messaging","description":"ZeroMQ (also known as \xd8MQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It\'s fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks. It has a score of language APIs and runs on most operating systems.- Carries messages across inproc, IPC, TCP, TIPC, multicast.","source":"@site/docs/networking/protocols/zeromq-distributed-messaging.md","sourceDirName":"networking/protocols","slug":"/networking/protocols/zeromq-distributed-messaging","permalink":"/networking/protocols/zeromq-distributed-messaging","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/networking/protocols/zeromq-distributed-messaging.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"WebSockets","permalink":"/networking/protocols/websockets"},"next":{"title":"Psychology","permalink":"/psychology/"}}');var r=t(474848),n=t(28453);const a={},i="ZeroMQ: Distributed Messaging",c={},l=[{value:"References",id:"references",level:2}];function u(e){const s={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"zeromq-distributed-messaging",children:"ZeroMQ: Distributed Messaging"})}),"\n",(0,r.jsx)(s.p,{children:"ZeroMQ (also known as \xd8MQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It's fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks. It has a score of language APIs and runs on most operating systems.- Carries messages across inproc, IPC, TCP, TIPC, multicast."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Smart patterns like pub-sub, push-pull, and router-dealer."}),"\n",(0,r.jsx)(s.li,{children:"High-speed asynchronous I/O engines, in a tiny library."}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"http://zguide.zeromq.org/page:all",children:"http://zguide.zeromq.org/page:all"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://www.pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-1",children:"https://www.pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-1"})})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>i});var o=t(296540);const r={},n=o.createContext(r);function a(e){const s=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(n.Provider,{value:s},e.children)}}}]);