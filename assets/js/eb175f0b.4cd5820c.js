"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[77549],{601097:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>a,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"python/documentation/27-development-tools/readme","title":"27. Development Tools","description":"27.1. typing - Support for type hints","source":"@site/docs/python/documentation/27-development-tools/readme.md","sourceDirName":"python/documentation/27-development-tools","slug":"/python/documentation/27-development-tools/","permalink":"/python/documentation/27-development-tools/","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/python/documentation/27-development-tools/readme.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1707138374000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"22. Internet Protocols and Support","permalink":"/python/documentation/22-internet-protocols-and-support"},"next":{"title":"Static Code Analysis","permalink":"/python/documentation/27-development-tools/static-code-analysis"}}');var s=i(474848),l=i(28453);const c={},r="27. Development Tools",o={},d=[{value:"27.1. typing - Support for type hints",id:"271-typing---support-for-type-hints",level:2},{value:"27.3. doctest - Test interactive Python examples",id:"273-doctest---test-interactive-python-examples",level:2},{value:"typing",id:"typing",level:2},{value:"PEP 484 - Type Hints",id:"pep-484---type-hints",level:2},{value:"PEP 526 - Syntax for Variable Annotations (Python 3.6)",id:"pep-526---syntax-for-variable-annotations-python-36",level:2}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"27-development-tools",children:"27. Development Tools"})}),"\n",(0,s.jsx)(e.h2,{id:"271-typing---support-for-type-hints",children:"27.1. typing - Support for type hints"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"27.1.1. Type aliases"}),"\n",(0,s.jsx)(e.li,{children:"27.1.2. NewType"}),"\n",(0,s.jsx)(e.li,{children:"27.1.3. Callable"}),"\n",(0,s.jsx)(e.li,{children:"27.1.4. Generics"}),"\n",(0,s.jsx)(e.li,{children:"27.1.5. User-defined generic types"}),"\n",(0,s.jsx)(e.li,{children:"27.1.6. The Any type"}),"\n",(0,s.jsx)(e.li,{children:"27.1.7. Classes, functions, and decorators"}),"\n",(0,s.jsx)(e.li,{children:"27.2. pydoc - Documentation generator and online help system"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"273-doctest---test-interactive-python-examples",children:"27.3. doctest - Test interactive Python examples"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"27.3.1. Simple Usage: Checking Examples in Docstrings"}),"\n",(0,s.jsx)(e.li,{children:"27.3.2. Simple Usage: Checking Examples in a Text File"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3. How It Works"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.1. Which Docstrings Are Examined?"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.2. How are Docstring Examples Recognized?"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.3. What's the Execution Context?"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.4. What About Exceptions?"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.5. Option Flags"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.6. Directives"}),"\n",(0,s.jsx)(e.li,{children:"27.3.3.7. Warnings"}),"\n",(0,s.jsx)(e.li,{children:"27.3.4. Basic API"}),"\n",(0,s.jsx)(e.li,{children:"27.3.5. Unittest API"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6. Advanced API"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6.1. DocTest Objects"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6.2. Example Objects"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6.3. DocTestFinder objects"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6.4. DocTestParser objects"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6.5. DocTestRunner objects"}),"\n",(0,s.jsx)(e.li,{children:"27.3.6.6. OutputChecker objects"}),"\n",(0,s.jsx)(e.li,{children:"27.3.7. Debugging"}),"\n",(0,s.jsx)(e.li,{children:"27.3.8. Soapbox"}),"\n",(0,s.jsx)(e.li,{children:"27.4. unittest - Unit testing framework"}),"\n",(0,s.jsx)(e.li,{children:"27.4.1. Basic example"}),"\n",(0,s.jsx)(e.li,{children:"27.4.2. Command-Line Interface"}),"\n",(0,s.jsx)(e.li,{children:"27.4.2.1. Command-line options"}),"\n",(0,s.jsx)(e.li,{children:"27.4.3. Test Discovery"}),"\n",(0,s.jsx)(e.li,{children:"27.4.4. Organizing test code"}),"\n",(0,s.jsx)(e.li,{children:"27.4.5. Re-using old test code"}),"\n",(0,s.jsx)(e.li,{children:"27.4.6. Skipping tests and expected failures"}),"\n",(0,s.jsx)(e.li,{children:"27.4.7. Distinguishing test iterations using subtests"}),"\n",(0,s.jsx)(e.li,{children:"27.4.8. Classes and functions"}),"\n",(0,s.jsx)(e.li,{children:"27.4.8.1. Test cases"}),"\n",(0,s.jsx)(e.li,{children:"27.4.8.1.1. Deprecated aliases"}),"\n",(0,s.jsx)(e.li,{children:"27.4.8.2. Grouping tests"}),"\n",(0,s.jsx)(e.li,{children:"27.4.8.3. Loading and running tests"}),"\n",(0,s.jsx)(e.li,{children:"27.4.8.3.1. load_tests Protocol"}),"\n",(0,s.jsx)(e.li,{children:"27.4.9. Class and Module Fixtures"}),"\n",(0,s.jsx)(e.li,{children:"27.4.9.1. setUpClass and tearDownClass"}),"\n",(0,s.jsx)(e.li,{children:"27.4.9.2. setUpModule and tearDownModule"}),"\n",(0,s.jsx)(e.li,{children:"27.4.10. Signal Handling"}),"\n",(0,s.jsx)(e.li,{children:"27.5. unittest.mock - mock object library"}),"\n",(0,s.jsx)(e.li,{children:"27.5.1. Quick Guide"}),"\n",(0,s.jsx)(e.li,{children:"27.5.2. The Mock Class"}),"\n",(0,s.jsx)(e.li,{children:"27.5.2.1. Calling"}),"\n",(0,s.jsx)(e.li,{children:"27.5.2.2. Deleting Attributes"}),"\n",(0,s.jsx)(e.li,{children:"27.5.2.3. Mock names and the name attribute"}),"\n",(0,s.jsx)(e.li,{children:"27.5.2.4. Attaching Mocks as Attributes"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3. The patchers"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.1. patch"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.2. patch.object"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.3. patch.dict"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.4. patch.multiple"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.5. patch methods: start and stop"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.6. patch builtins"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.7. TEST_PREFIX"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.8. Nesting Patch Decorators"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.9. Where to patch"}),"\n",(0,s.jsx)(e.li,{children:"27.5.3.10. Patching Descriptors and Proxy Objects"}),"\n",(0,s.jsx)(e.li,{children:"27.5.4. MagicMock and magic method support"}),"\n",(0,s.jsx)(e.li,{children:"27.5.4.1. Mocking Magic Methods"}),"\n",(0,s.jsx)(e.li,{children:"27.5.4.2. Magic Mock"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5. Helpers"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.1. sentinel"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.2. DEFAULT"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.3. call"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.4. create_autospec"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.5. ANY"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.6. FILTER_DIR"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.7. mock_open"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.8. Autospeccing"}),"\n",(0,s.jsx)(e.li,{children:"27.5.5.9. Sealing mocks"}),"\n",(0,s.jsx)(e.li,{children:"27.6. unittest.mock - getting started"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1. Using Mock"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.1. Mock Patching Methods"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.2. Mock for Method Calls on an Object"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.3. Mocking Classes"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.4. Naming your mocks"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.5. Tracking all Calls"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.6. Setting Return Values and Attributes"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.7. Raising exceptions with mocks"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.8. Side effect functions and iterables"}),"\n",(0,s.jsx)(e.li,{children:"27.6.1.9. Creating a Mock from an Existing Object"}),"\n",(0,s.jsx)(e.li,{children:"27.6.2. Patch Decorators"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3. Further Examples"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.1. Mocking chained calls"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.2. Partial mocking"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.3. Mocking a Generator Method"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.4. Applying the same patch to every test method"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.5. Mocking Unbound Methods"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.6. Checking multiple calls with mock"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.7. Coping with mutable arguments"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.8. Nesting Patches"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.9. Mocking a dictionary with MagicMock"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.10. Mock subclasses and their attributes"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.11. Mocking imports with patch.dict"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.12. Tracking order of calls and less verbose call assertions"}),"\n",(0,s.jsx)(e.li,{children:"27.6.3.13. More complex argument matching"}),"\n",(0,s.jsx)(e.li,{children:"27.7. 2to3 - Automated Python 2 to 3 code translation"}),"\n",(0,s.jsx)(e.li,{children:"27.7.1. Using 2to3"}),"\n",(0,s.jsx)(e.li,{children:"27.7.2. Fixers"}),"\n",(0,s.jsx)(e.li,{children:"27.7.3. lib2to3 - 2to3's library"}),"\n",(0,s.jsx)(e.li,{children:"27.8. test - Regression tests package for Python"}),"\n",(0,s.jsx)(e.li,{children:"27.8.1. Writing Unit Tests for the test package"}),"\n",(0,s.jsx)(e.li,{children:"27.8.2. Running tests using the command-line interface"}),"\n",(0,s.jsx)(e.li,{children:"27.9. test.support - Utilities for the Python test suite"}),"\n",(0,s.jsx)(e.li,{children:"27.10. test.support.script_helper - Utilities for the Python execution tests"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://docs.python.org/3/library/development.html",children:"https://docs.python.org/3/library/development.html"})}),"\n",(0,s.jsx)(e.h2,{id:"typing",children:"typing"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/samuelcolvin/pydantic",children:"https://github.com/samuelcolvin/pydantic"})}),"\n",(0,s.jsx)(e.p,{children:"Data validation and settings management using Python type hinting."}),"\n",(0,s.jsx)(e.p,{children:"pydanticenforces type hints at runtime, and provides user friendly errors when data is invalid."}),"\n",(0,s.jsx)(e.p,{children:"Define how data should be in pure, canonical python; validate it withpydantic."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://www.youtube.com/watch?v=Vj-iU-8_xLs",children:"https://www.youtube.com/watch?v=Vj-iU-8_xLs"})}),"\n",(0,s.jsx)(e.h2,{id:"pep-484---type-hints",children:"PEP 484 - Type Hints"}),"\n",(0,s.jsx)(e.h2,{id:"pep-526---syntax-for-variable-annotations-python-36",children:"PEP 526 - Syntax for Variable Annotations (Python 3.6)"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://www.toptal.com/python/streamline-your-django-settings-with-type-hints-pydantic-tutorial",children:"https://www.toptal.com/python/streamline-your-django-settings-with-type-hints-pydantic-tutorial"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://www.youtube.com/watch?v=ST33zDM9vOE",children:"https://www.youtube.com/watch?v=ST33zDM9vOE"})}),"\n",(0,s.jsx)(e.p,{children:"Is Python dynamically or statically typed?"}),"\n",(0,s.jsx)(e.p,{children:"Dynamically typed... but can optionally be statically typed as you want it to be."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Types in Python"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import types\n\ndir(types)\n\ntype(...)\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Type systems in general"}),"\n",(0,s.jsx)(e.li,{children:"Dynamic typing in Python"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Dynamic typing - Arguments and return values of functions can be any type"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Static typing in Python"}),"\n",(0,s.jsx)(e.li,{children:"How to use static typing"}),"\n",(0,s.jsx)(e.li,{children:"When you should use static typing"}),"\n",(0,s.jsx)(e.li,{children:"When you shouldn't use static typing"}),"\n",(0,s.jsxs)(e.li,{children:["Migrating","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Migrate to Python >= 3.6"}),"\n",(0,s.jsx)(e.li,{children:"Install a typechecker locally"}),"\n",(0,s.jsx)(e.li,{children:"Start optionally typing your codebase"}),"\n",(0,s.jsx)(e.li,{children:"Run a typechecker with your linting"}),"\n",(0,s.jsx)(e.li,{children:"Convince all your coworkers to join you"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Type Checkers"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Static","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"mypy (Dropbox)"}),"\n",(0,s.jsx)(e.li,{children:"pytype (Google)"}),"\n",(0,s.jsx)(e.li,{children:"pyre (Facebook)"}),"\n",(0,s.jsx)(e.li,{children:"pyright (Microsoft)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["Dynamic","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"enforce, typeguard, typo, ducktype, strictconf, etc"}),"\n"]}),"\n"]}),"\n"]})]})}function a(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>r});var t=i(296540);const s={},l=t.createContext(s);function c(n){const e=t.useContext(l);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);