"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[62431],{361617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"algorithms/general/two-stack-algorithm","title":"Two-Stack Algorithm","description":"Goal: Evaluate Infix Expressions","source":"@site/docs/algorithms/general/two-stack-algorithm.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/two-stack-algorithm","permalink":"/algorithms/general/two-stack-algorithm","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/two-stack-algorithm.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sweep Line Algorithm","permalink":"/algorithms/general/sweep-line-algorithm"},"next":{"title":"Types of algorithms","permalink":"/algorithms/general/types-of-algorithms"}}');var r=n(474848),s=n(28453);const a={},i="Two-Stack Algorithm",l={},c=[];function h(e){const t={em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"two-stack-algorithm",children:"Two-Stack Algorithm"})}),"\n",(0,r.jsx)(t.p,{children:"Goal: Evaluate Infix Expressions"}),"\n",(0,r.jsxs)(t.p,{children:["Ex: (1 + (( 2 + 3 ) ",(0,r.jsx)(t.em,{children:"( 4"})," 5 )))"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Value: Push onto the value stack"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Operator: Push onto the operator stack"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Left parenthesis: ignore"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Right parenthesis: pop operator and two values, push the result of applying that operator onto the operand stack."}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(296540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);