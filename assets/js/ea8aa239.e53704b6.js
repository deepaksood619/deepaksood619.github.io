"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[50785],{201354:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"algorithms/general/1d-range-search","title":"1d Range Search","description":"Operations","source":"@site/docs/algorithms/general/1d-range-search.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/1d-range-search","permalink":"/algorithms/general/1d-range-search","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/1d-range-search.md","tags":[],"version":"current","lastUpdatedBy":"Deepak Sood","lastUpdatedAt":1678191863000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"General","permalink":"/algorithms/general/"},"next":{"title":"2d orthogonal range search","permalink":"/algorithms/general/2d-orthogonal-range-search"}}');var t=r(474848),i=r(28453);const s={},o="1d Range Search",l={},d=[{value:"Operations",id:"operations",level:2},{value:"Geometric interpretation",id:"geometric-interpretation",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Unordered list - Fast insert, slow range search",id:"unordered-list---fast-insert-slow-range-search",level:3},{value:"Ordered array - Slow insert, binary search for k1 and k2 to do range search",id:"ordered-array---slow-insert-binary-search-for-k1-and-k2-to-do-range-search",level:3},{value:"BST implementation",id:"bst-implementation",level:3}];function c(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"1d-range-search",children:"1d Range Search"})}),"\n",(0,t.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Insert key-value pair"}),"\n",(0,t.jsx)(n.li,{children:"Search for key k"}),"\n",(0,t.jsx)(n.li,{children:"Delete key k"}),"\n",(0,t.jsx)(n.li,{children:"Range Search: find all keys between k1 and k2"}),"\n",(0,t.jsx)(n.li,{children:"Range Count: number of keys between k1 and k2"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Application - Database queries"}),"\n",(0,t.jsx)(n.h3,{id:"geometric-interpretation",children:"Geometric interpretation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Keys are point on a line"}),"\n",(0,t.jsx)(n.li,{children:"Find/count points in a given 1 d interval"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"unordered-list---fast-insert-slow-range-search",children:"Unordered list - Fast insert, slow range search"}),"\n",(0,t.jsx)(n.h3,{id:"ordered-array---slow-insert-binary-search-for-k1-and-k2-to-do-range-search",children:"Ordered array - Slow insert, binary search for k1 and k2 to do range search"}),"\n",(0,t.jsx)(n.h3,{id:"bst-implementation",children:"BST implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For range count - use rank with each node ( log N )"}),"\n",(0,t.jsx)(n.li,{children:"For range search - Find all keys between lo and hi ( R + log N )"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(296540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);