"use strict";(self.webpackChunkdeep_notes=self.webpackChunkdeep_notes||[]).push([[62369],{983953:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"algorithms/general/prime-factorization","title":"Prime Factorization","description":"Prime factorization or integer factorization of a number is breaking a number down into the set of prime numbers which multiply together to result in the original number. This is also known as prime decomposition.","source":"@site/docs/algorithms/general/prime-factorization.md","sourceDirName":"algorithms/general","slug":"/algorithms/general/prime-factorization","permalink":"/algorithms/general/prime-factorization","draft":false,"unlisted":false,"editUrl":"https://github.com/deepaksood619/deepaksood619.github.io/tree/master/docs/algorithms/general/prime-factorization.md","tags":[],"version":"current","lastUpdatedBy":"Deepak","lastUpdatedAt":1701793554000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Orthogonal rectangle intersection search","permalink":"/algorithms/general/orthogonal-rectangle-intersection-search"},"next":{"title":"Quick Select","permalink":"/algorithms/general/quick-select"}}');var r=i(474848),o=i(28453);const s={},a="Prime Factorization",l={},d=[{value:"Prime Factorization using Trial Division",id:"prime-factorization-using-trial-division",level:2},{value:"Prime Factors Tree",id:"prime-factors-tree",level:2},{value:"Optimization 1: running the loop till <code>sqrt(n)</code>",id:"optimization-1-running-the-loop-till-sqrtn",level:2},{value:"Code",id:"code",level:2},{value:"Sieve of Eratosthenes, (for primality test)",id:"sieve-of-eratosthenes-for-primality-test",level:2},{value:"Sieve of Atkin",id:"sieve-of-atkin",level:2},{value:"Others",id:"others",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"prime-factorization",children:"Prime Factorization"})}),"\n",(0,r.jsx)(n.p,{children:"Prime factorization or integer factorization of a number is breaking a number down into the set of prime numbers which multiply together to result in the original number. This is also known as prime decomposition."}),"\n",(0,r.jsx)(n.h2,{id:"prime-factorization-using-trial-division",children:"Prime Factorization using Trial Division"}),"\n",(0,r.jsx)(n.p,{children:"Following are the steps to find all prime factors."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"While n is divisible by 2, print 2 and divide n by 2"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"After step 1, n must be odd. Now start a loop from i = 3 to square root of n. While i divides n, print i and divide n by i, increment i by 2 and continue"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If n is a prime number and is greater than 2, then n will not become 1 by above two steps. So print n if it is greater than 2"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"prime-factors-tree",children:"Prime Factors Tree"}),"\n",(0,r.jsxs)(n.p,{children:["Using a prime factorization tree to see the work, prime decomposition of ",(0,r.jsx)(n.code,{children:"100 = 2 x 2 x 5 x 5"})," looks like this:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"image",src:i(225929).A+"",width:"270",height:"386"})}),"\n",(0,r.jsxs)(n.h2,{id:"optimization-1-running-the-loop-till-sqrtn",children:["Optimization 1: running the loop till ",(0,r.jsx)(n.code,{children:"sqrt(n)"})]}),"\n",(0,r.jsx)(n.p,{children:"Now the main part is, the loop runs till square root of n not till. To prove that this optimization works, let us consider the following property of composite numbers."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Every composite number has at least one prime factor less than or equal to square root of itself."})}),"\n",(0,r.jsxs)(n.p,{children:["This property can be proved using counter statement. Let a and b be two factors of n such that ",(0,r.jsx)(n.code,{children:"a*b = n"}),". If both are greater than ",(0,r.jsx)(n.code,{children:"\u221an"}),", then ",(0,r.jsx)(n.code,{children:"a.b > \u221an,* \u221an"}),", which contradicts the expression ",(0,r.jsx)(n.code,{children:"a * b = n"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Running Time : sqrt(n)"}),"\n",(0,r.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def primeFactors(n):\n\n    # Print the number of two's that divide n\n    while n % 2 == 0:\n        print 2,\n        n = n / 2\n\n    # n must be odd at this point\n    # so a skip of 2 ( i = i + 2) can be used\n    for i in range(3,int(math.sqrt(n))+1,2):\n\n        # while i divides n , print i ad divide n\n        while n % i== 0:\n            print i,\n            n = n / i\n\n    # Condition if n is a prime\n    # number greater than 2\n    if n > 2:\n    print n\n"})}),"\n",(0,r.jsx)(n.p,{children:"For multiple queries we can use Sieve of Eratosthenes for giving result in O(log n)"}),"\n",(0,r.jsx)(n.h2,{id:"sieve-of-eratosthenes-for-primality-test",children:"Sieve of Eratosthenes, (for primality test)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n\n            # Update all multiples of p\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n\n    lst = []\n    for p in range(n + 1):\n        if prime[p]:\n            lst.append(p)\n\nreturn lst\n"})}),"\n",(0,r.jsx)(n.h2,{id:"sieve-of-atkin",children:"Sieve of Atkin"}),"\n",(0,r.jsx)(n.p,{children:"Factors of a number"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# find all factors of a given number\nimport math\n\ndef printDivisors(n):\n\n    # Note that this loop runs till square root\n    i = 1\n    fac = []\n    while i <= math.sqrt(n):\n\n        if n % i == 0:\n\n            # If divisors are equal, print only one\n            if (n // i == i):\n                fac.append(i)\n            else:\n                # Otherwise print both\n                fac.append([i, n//i])\n\n        i = i + 1\n\n    return fac\n\nassert printDivisors(100) == [[1, 100], [2, 50], [4, 25], [5, 20], 10]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Time Complexity : O(sqrt(n))"}),"\n",(0,r.jsx)(n.p,{children:"Auxiliary Space : O(1)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.geeksforgeeks.org/find-divisors-natural-number-set-1",children:"https://www.geeksforgeeks.org/find-divisors-natural-number-set-1"})}),"\n",(0,r.jsx)(n.h2,{id:"others",children:"Others"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Shor%27s_algorithm",children:"https://en.wikipedia.org/wiki/Shor%27s_algorithm"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},225929:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Prime-Factorization-image1-64d56638ec9ee29beae122fbedd41f12.jpg"},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(296540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);